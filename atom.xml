<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhaoqi.Cao static blog</title>
  
  <subtitle>浅斟低唱</subtitle>
  <link href="https://caozhaoqi.github.io/atom.xml" rel="self"/>
  
  <link href="https://caozhaoqi.github.io/"/>
  <updated>2025-03-04T09:06:46.555Z</updated>
  <id>https://caozhaoqi.github.io/</id>
  
  <author>
    <name>Zhaoqi.Cao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python_spider_introduce</title>
    <link href="https://caozhaoqi.github.io/2025/03/04/python-spider-introduce/"/>
    <id>https://caozhaoqi.github.io/2025/03/04/python-spider-introduce/</id>
    <published>2025-03-04T08:46:19.000Z</published>
    <updated>2025-03-04T09:06:46.555Z</updated>
    
    <content type="html"><![CDATA[<h1>Python 数据采集技术及应用场景</h1><p><strong>概要：</strong></p><p>常用 Python 数据采集技术及应用场景的总结。</p><p><strong>常用爬虫编程语言和技术框架：</strong></p><ul><li><strong>Python:</strong> Scrapy, Beautiful Soup, Requests, Selenium</li><li><strong>Java:</strong> Jsoup, HttpClient, WebMagic</li><li><strong>Node.js:</strong> Cheerio, Puppeteer, Axios</li></ul><p><strong>常用技术：</strong></p><ul><li><strong>网络请求:</strong> requests, urllib</li><li><strong>HTML/XML 解析:</strong> Beautiful Soup, lxml, Scrapy</li><li><strong>动态网页爬取:</strong> Selenium, Playwright</li><li><strong>API 接口调用:</strong> requests, 各类 API 客户端库</li><li><strong>数据库操作:</strong> sqlite3, pymysql, psycopg2, mongoengine 等</li><li><strong>多媒体处理:</strong> PIL/Pillow (图片), Librosa (音频), OpenCV (图片/视频), moviepy (视频)</li></ul><h2 id="1-文字数据采集">1. 文字数据采集</h2><p><strong>网页爬虫:</strong></p><ul><li><strong>requests + Beautiful Soup / lxml:</strong> 经典组合，适用于静态网页抓取。</li><li><strong>Scrapy:</strong> 高级爬虫框架，适用于大规模、结构化的网页数据采集。</li><li><strong>Selenium / Playwright:</strong> 模拟浏览器行为，处理 JavaScript 动态加载内容。</li></ul><p><strong>API 接口调用:</strong></p><ul><li><strong>requests:</strong> 发送 HTTP 请求，获取 JSON 或 XML 格式的文本数据。</li></ul><p><strong>文件读取:</strong></p><ul><li>Python 内置文件操作函数 (open(), read(), readlines(), csv, json 模块等)。</li><li><strong>pandas 库:</strong> 高效处理 CSV, Excel 等表格数据。</li></ul><p><strong>数据库操作:</strong></p><ul><li><strong>sqlite3:</strong> (SQLite 数据库)。</li><li><strong>pymysql, psycopg2:</strong> (MySQL, PostgreSQL 数据库)。</li><li><strong>mongoengine, pymongo:</strong> (MongoDB 数据库)。</li></ul><p><strong>OCR:</strong></p><ul><li><strong>pytesseract:</strong> (封装 Tesseract OCR 引擎)。</li><li><strong>云端 OCR API:</strong> (如百度 OCR, 腾讯云 OCR 等)。</li></ul><h2 id="2-图片数据采集">2. 图片数据采集</h2><p><strong>技术:</strong></p><ul><li><strong>requests + Beautiful Soup:</strong> 适用于静态网页的图片链接抓取。<code>requests</code> 用于发起 HTTP 请求，<code>Beautiful Soup</code> 用于解析 HTML，提取图片 URL。</li><li><strong>Scrapy:</strong> 更强大的爬虫框架，适用于大规模图片采集，支持异步处理、自定义中间件等。</li><li><strong>Selenium:</strong> 模拟浏览器行为，适用于动态加载的网页（如 JavaScript 渲染的图片）。</li></ul><p><strong>API 接口:</strong></p><ul><li>许多网站和平台提供 API 接口，可以直接获取图片数据，如 Google Images API, Flickr API, Instagram API 等。使用 <code>requests</code> 库或其他 HTTP 客户端库调用 API。</li></ul><p><strong>图像处理库:</strong></p><ul><li><strong>PIL (Pillow):</strong> 用于打开、操作和保存各种图像文件格式。可以用于图片预处理、格式转换等。</li><li><strong>OpenCV:</strong> 更强大的计算机视觉库，用于图像分析、特征提取、目标检测等。</li></ul><p><strong>OCR（光学字符识别）:</strong></p><ul><li><strong>Tesseract:</strong> 开源 OCR 引擎，可以将图片中的文字转换为文本。</li><li><strong>pytesseract:</strong> Python 封装的 Tesseract 库，方便使用。</li></ul><p><strong>应用场景:</strong></p><ul><li><strong>电商网站商品图片采集:</strong> 抓取商品图片，用于建立商品图库、比价、数据分析等。</li><li><strong>社交媒体图片采集:</strong> 抓取用户头像、照片墙等，用于用户行为分析、内容推荐等。</li><li><strong>新闻网站图片采集:</strong> 抓取新闻配图，用于新闻聚合、内容分析等。</li><li><strong>搜索引擎图片索引:</strong> 抓取网页图片，建立图片索引，提供图片搜索服务。</li><li><strong>医学影像分析:</strong> 采集医学影像数据（如 X 光片、CT 扫描等），用于疾病诊断、辅助治疗等。</li><li><strong>遥感图像分析:</strong> 采集卫星遥感图像，用于土地利用分析、环境监测、灾害评估等。</li><li><strong>艺术品图像采集:</strong> 采集艺术品图片，用于建立数字博物馆、艺术品鉴定等。</li><li><strong>文档数字化:</strong> 将纸质文档扫描或拍照，通过 OCR 技术转换为电子文本。</li><li><strong>验证码识别:</strong> 采集网站验证码图片，使用 OCR 或深度学习模型进行识别。</li></ul><h2 id="3-音频数据采集">3. 音频数据采集</h2><p><strong>技术:</strong></p><p><strong>麦克风录音:</strong></p><ul><li><strong>PyAudio:</strong> Python 库，用于从麦克风或其他音频输入设备录制音频。</li><li><strong>sounddevice:</strong> 跨平台音频 I/O 库，支持录音和播放。</li></ul><p><strong>网络音频流:</strong></p><ul><li><strong>requests:</strong> 可以用于下载在线音频文件（如 MP3、WAV 等）。</li><li><strong>youtube-dl:</strong> 命令行工具，可以下载 YouTube 等视频网站的音频。</li><li><strong>流媒体协议库:</strong> 如 <code>rtsp-lib</code>，用于处理实时流媒体协议（如 RTSP）的音频流。</li></ul><p><strong>API 接口:</strong></p><ul><li>一些音频平台（如 Spotify、SoundCloud）提供 API，可以获取音频数据。</li></ul><p><strong>音频处理库:</strong></p><ul><li><strong>Librosa:</strong> 用于音频和音乐分析的 Python 库，提供特征提取、节奏分析等功能。</li><li><strong>pydub:</strong> 用于音频处理，如剪辑、合并、格式转换等。</li></ul><p><strong>应用场景:</strong></p><ul><li><strong>语音识别:</strong> 采集语音数据，用于语音识别系统训练、语音助手开发等。</li><li><strong>音乐信息检索:</strong> 采集音乐数据，用于音乐识别、音乐推荐、音乐分类等。</li><li><strong>环境声音监测:</strong> 采集环境声音数据，用于噪声污染监测、安全监控等。</li></ul><h2 id="4-视频数据采集">4. 视频数据采集</h2><p><strong>技术:</strong></p><p><strong>网络视频下载:</strong></p><ul><li><strong>requests:</strong> 可以用于下载静态视频文件。</li><li><strong>youtube-dl:</strong> 可以下载 YouTube 等视频网站的视频。</li><li><strong>you-get:</strong> 另一个流行的视频下载工具，支持多个视频网站。</li><li><strong>流媒体协议库:</strong> 如 <code>rtsp-lib</code>，用于处理实时流媒体协议（如 RTSP）的视频流。</li></ul><p><strong>API 接口:</strong></p><ul><li>一些视频平台（如 YouTube、Vimeo）提供 API，可以获取视频数据。</li></ul><p><strong>视频处理库:</strong></p><ul><li><strong>OpenCV:</strong> 用于视频分析、处理、目标跟踪、行为识别等。</li><li><strong>MoviePy:</strong> 用于视频编辑、剪辑、合成等。</li></ul><h2 id="参考：">参考：</h2><ol><li><a href="https://github.com/Pierian-Data/Beautiful-Soup-and-Requests">https://github.com/Pierian-Data/Beautiful-Soup-and-Requests</a></li><li><a href="https://github.com/aditya-sengupta/Web-Scraping-with-Python">https://github.com/aditya-sengupta/Web-Scraping-with-Python</a></li><li><a href="https://github.com/Jack-Cherish/Python-Crawler-Tutorial">https://github.com/Jack-Cherish/Python-Crawler-Tutorial</a></li></ol><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Python 数据采集技术及应用场景&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;概要：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常用 Python 数据采集技术及应用场景的总结。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用爬虫编程语言和技术框架：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;st</summary>
      
    
    
    
    
    <category term="python" scheme="https://caozhaoqi.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python批量写入图片到excel中</title>
    <link href="https://caozhaoqi.github.io/2025/02/28/py-gen-excel/"/>
    <id>https://caozhaoqi.github.io/2025/02/28/py-gen-excel/</id>
    <published>2025-02-28T06:05:32.000Z</published>
    <updated>2025-03-04T09:06:46.526Z</updated>
    
    <content type="html"><![CDATA[<h1>python批量写入图片到excel中</h1><h2 id="技术">技术</h2><p><strong>1. pandas</strong></p><ul><li><p><strong>用途：</strong></p><ul><li>数据分析和处理的核心库，特别是处理表格型数据。</li><li>提供高效、灵活的数据结构，例如 <code>Series</code> (一维数据) 和 <code>DataFrame</code> (二维表格数据)。</li><li>支持数据的读取、写入、清洗、转换、聚合、合并等操作。</li><li>广泛应用于数据科学、金融分析、统计分析、机器学习等领域。</li></ul></li><li><p><strong>特点：</strong></p><ul><li><strong>DataFrame:</strong>  类似电子表格的结构，可以存储各种数据类型 (数值、字符串、日期等)。</li><li><strong>Series:</strong>  带有标签 (索引) 的一维数组，可以看作 DataFrame 的一列。</li><li><strong>数据对齐:</strong>  pandas 自动根据索引进行数据对齐，处理缺失值。</li><li><strong>灵活的索引和选择:</strong>  方便根据标签或位置选择数据。</li><li><strong>分组和聚合:</strong>  可以轻松地对数据进行分组 (groupby) 并进行聚合计算 (sum, mean, count 等)。</li><li><strong>合并和连接:</strong>  支持各种数据合并 (merge) 和连接 (join) 操作。</li><li><strong>时间序列处理:</strong>  专门用于处理时间序列数据的功能。</li><li><strong>文件 I/O:</strong>  可以读取和写入多种格式的文件，例如 CSV, Excel, SQL 数据库等。</li><li><strong>性能优化:</strong>  基于 NumPy 构建，性能较高。</li></ul><p><strong>2. Pillow</strong></p></li><li><p><strong>用途:</strong></p><ul><li>图像处理库，是 Python Imaging Library (PIL) 的一个分支。</li><li>提供图像的打开、保存、修改、创建等功能。</li><li>支持多种图像格式，例如 JPEG, PNG, GIF, TIFF, BMP 等。</li><li>广泛应用于图像编辑、图像分析、计算机视觉等领域。</li></ul></li><li><p><strong>特点:</strong></p><ul><li><strong>图像格式支持:</strong>  支持多种图像格式的读取和写入。</li><li><strong>图像处理操作:</strong>  提供丰富的图像处理操作，例如调整大小、裁剪、旋转、颜色转换、滤波等。</li><li><strong>绘图功能:</strong>  可以在图像上绘制线条、形状、文本等。</li><li><strong>图像序列处理:</strong>  可以处理动画 GIF 和多页 TIFF 文件。</li><li><strong>易于使用:</strong>  API 设计简洁易懂。</li></ul><p><strong>3. openpyxl</strong></p></li><li><p><strong>用途:</strong></p><ul><li>用于读写 Excel (<code>.xlsx</code>) 文件的库。</li><li>可以创建、修改、读取 Excel 文件中的工作簿、工作表、单元格、样式等。</li><li>广泛应用于数据报表生成、数据导出、自动化 Excel 处理等领域。</li></ul></li><li><p><strong>特点:</strong></p><ul><li><strong>支持 Excel 文件格式:</strong>  完全支持 Excel 2010 及更高版本的 <code>.xlsx</code> 文件格式。</li><li><strong>单元格操作:</strong>  可以读写单元格的值、格式、公式等。</li><li><strong>工作表操作:</strong>  可以创建、删除、重命名工作表，设置工作表的属性。</li><li><strong>样式设置:</strong>  可以设置单元格的字体、颜色、对齐方式、边框等样式。</li><li><strong>图表支持:</strong>  可以创建各种图表，例如柱状图、折线图、饼图等。</li><li><strong>易于使用:</strong>  API 设计友好，易于学习和使用。</li></ul></li></ul><h2 id="应用">应用</h2><h3 id="表格图片插入">表格图片插入</h3><ul><li>code</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_image_with_resize</span>(<span class="params">image_path: <span class="built_in">str</span>, cell_width=<span class="number">80.79</span>, cell_height=<span class="number">259.8</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Insert and resize image, handling errors and returning PIL Image.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">        width, height = img.size</span><br><span class="line">        width_ratio = (cell_width * <span class="number">7</span>) / width</span><br><span class="line">        height_ratio = cell_height / height</span><br><span class="line">        ratio = <span class="built_in">min</span>(width_ratio, height_ratio)</span><br><span class="line">        new_width = <span class="built_in">int</span>(width * ratio)  <span class="comment"># Calculate new_width</span></span><br><span class="line">        new_height = <span class="built_in">int</span>(height * ratio)  <span class="comment"># Calculate new_height</span></span><br><span class="line">        img = img.resize((new_width, new_height), Image.LANCZOS)</span><br><span class="line"></span><br><span class="line">        base, ext = os.path.splitext(os.path.basename(image_path))</span><br><span class="line">        temp_img_path = os.path.join(TEMP_DIR, <span class="string">f&quot;temp_<span class="subst">&#123;base&#125;</span>_<span class="subst">&#123;<span class="built_in">hash</span>(image_path)&#125;</span><span class="subst">&#123;ext&#125;</span>&quot;</span>)</span><br><span class="line">        img.save(temp_img_path, optimize=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> img, temp_img_path</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        logger.error(<span class="string">f&quot;Image file not found: <span class="subst">&#123;image_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> (UnidentifiedImageError, OSError) <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;Image format error or corrupted file: <span class="subst">&#123;image_path&#125;</span> - <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.exception(<span class="string">f&quot;Error processing image <span class="subst">&#123;image_path&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="图片数据插入前处理">图片数据插入前处理</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MAX_IMAGE_PIXELS = <span class="number">178956970</span>  <span class="comment"># Define the maximum pixel limit</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rgba_to_rgb_numpy</span>(<span class="params">image, background_color=(<span class="params"><span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span></span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用 NumPy 将 RGBA/LA 图像转换为 RGB 图像，可以指定背景颜色。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> image.mode == <span class="string">&#x27;L&#x27;</span>:  <span class="comment"># 灰度图像</span></span><br><span class="line">            logger.debug(<span class="string">f&quot;Converting grayscale image to RGB.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> image.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> image.mode == <span class="string">&#x27;LA&#x27;</span>:</span><br><span class="line">            logger.debug(<span class="string">f&quot;Converting LA image to RGB (grayscale with alpha).&quot;</span>)</span><br><span class="line">            img_array = np.array(image)</span><br><span class="line">            l_channel = img_array[:, :, <span class="number">0</span>]  <span class="comment"># Luminance channel</span></span><br><span class="line">            alpha_channel = img_array[:, :, <span class="number">1</span>] <span class="comment">#Alpha channel</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Create an RGB image where R=G=B=L</span></span><br><span class="line">            rgb = np.stack([l_channel, l_channel, l_channel], axis=<span class="number">2</span>)  <span class="comment"># Replicate L to R, G, B</span></span><br><span class="line"></span><br><span class="line">            background = np.array(background_color, dtype=np.uint8)</span><br><span class="line">            new_rgb = (rgb * (alpha_channel / <span class="number">255.0</span>)[:, :, <span class="literal">None</span>] + background * (<span class="number">1</span> - (alpha_channel / <span class="number">255.0</span>)[:, :, <span class="literal">None</span>])).astype(np.uint8)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Image.fromarray(new_rgb)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> image.mode == <span class="string">&#x27;RGBA&#x27;</span>:</span><br><span class="line">            logger.debug(<span class="string">f&quot;Converting RGBA image to RGB.&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 强制加载图像数据</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                image.load()  <span class="comment"># 确保图像数据已加载</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logger.error(<span class="string">f&quot;Failed to load image data: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> image  <span class="comment"># 无法加载，直接返回原始图像</span></span><br><span class="line"></span><br><span class="line">            img_array = np.array(image)</span><br><span class="line">            logger.debug(<span class="string">f&quot;Image array shape: <span class="subst">&#123;img_array.shape&#125;</span>, mode: <span class="subst">&#123;image.mode&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(img_array.shape) &lt; <span class="number">3</span>:</span><br><span class="line">                logger.error(<span class="string">f&quot;Image has insufficient dimensions (shape: <span class="subst">&#123;img_array.shape&#125;</span>), skipping conversion.&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> img_array.shape[<span class="number">2</span>] &lt; <span class="number">4</span>:  <span class="comment"># 检查是否有足够的通道</span></span><br><span class="line">                logger.warning(<span class="string">f&quot;Image has only <span class="subst">&#123;img_array.shape[<span class="number">2</span>]&#125;</span> channels, assuming no alpha and skipping conversion.&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> image.convert(<span class="string">&quot;RGB&quot;</span>)  <span class="comment"># 直接转换为RGB，不做alpha混合</span></span><br><span class="line"></span><br><span class="line">            alpha = img_array[:, :, <span class="number">3</span>]  <span class="comment"># Alpha channel</span></span><br><span class="line">            rgb = img_array[:, :, :<span class="number">3</span>]  <span class="comment"># RGB channels</span></span><br><span class="line"></span><br><span class="line">            background = np.array(background_color, dtype=np.uint8)</span><br><span class="line">            new_rgb = (rgb * (alpha / <span class="number">255.0</span>)[:, :, <span class="literal">None</span>] + background * (<span class="number">1</span> - (alpha / <span class="number">255.0</span>)[:, :, <span class="literal">None</span>])).astype(</span><br><span class="line">                np.uint8)</span><br><span class="line">            <span class="keyword">return</span> Image.fromarray(new_rgb)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.debug(<span class="string">f&quot;Converting non-RGBA/LA image to RGB.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> image.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.exception(<span class="string">f&quot;Error during RGBA to RGB conversion: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_image</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check if a file is a valid image (and resizes if needed) and its mode is RGB (or can be converted to RGB).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        True if the file is a valid image,</span></span><br><span class="line"><span class="string">        False if the file is not found or is not a valid image, or exceeds the limit.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> MAX_IMAGE_PIXELS</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file_path:</span><br><span class="line">        logger.error(<span class="string">f&quot;Error: Path empty -<span class="subst">&#123;file_path&#125;</span>&quot;</span>)  <span class="comment"># check all path first</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</span><br><span class="line">            logger.error(</span><br><span class="line">                <span class="string">f&quot;Error: The file was Not found at the location - <span class="subst">&#123;file_path&#125;</span>&quot;</span></span><br><span class="line">            )  <span class="comment"># check if all locations have files.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            img = Image.<span class="built_in">open</span>(file_path)</span><br><span class="line">            width, height = img.size</span><br><span class="line">            total_pixels = width * height</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> total_pixels &gt; MAX_IMAGE_PIXELS:</span><br><span class="line">                logger.warning(<span class="string">f&quot;Image <span class="subst">&#123;file_path&#125;</span> exceeds pixel limit. Resizing.&quot;</span>)</span><br><span class="line">                <span class="comment"># Calculate new dimensions while preserving aspect ratio</span></span><br><span class="line">                ratio = (MAX_IMAGE_PIXELS / total_pixels) ** <span class="number">0.5</span></span><br><span class="line">                new_width = <span class="built_in">int</span>(width * ratio)</span><br><span class="line">                new_height = <span class="built_in">int</span>(height * ratio)</span><br><span class="line">                img = img.resize((new_width, new_height), Image.LANCZOS)  <span class="comment"># Or another resampling filter</span></span><br><span class="line">                logger.info(<span class="string">f&quot;Resized image to <span class="subst">&#123;new_width&#125;</span>x<span class="subst">&#123;new_height&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            img.load()  <span class="comment"># Force load to find problems</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> (FileNotFoundError, UnidentifiedImageError, OSError) <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(<span class="string">f&quot;Error opening image file <span class="subst">&#123;file_path&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(</span><br><span class="line">                <span class="string">f&quot;Different from other error: it is an Unexpected error opening image: <span class="subst">&#123;file_path&#125;</span>  <span class="subst">&#123;e&#125;</span>&quot;</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># It may have just not passed the test and is just a bad file path that is expected.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># Verify the file and get the image format</span></span><br><span class="line">            <span class="comment"># Verify a copy instead</span></span><br><span class="line">            img_copy = img.copy()</span><br><span class="line">            img_copy.verify()</span><br><span class="line">            img_copy.close()  <span class="comment"># Release resources</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(</span><br><span class="line">                <span class="string">f&quot;Error: Image verification failed - <span class="subst">&#123;file_path&#125;</span>  <span class="subst">&#123;e&#125;</span>&quot;</span></span><br><span class="line">            )  <span class="comment"># This can be all bad names, or some other error with image.</span></span><br><span class="line">            img.close()  <span class="comment"># Release resources</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># If RBGA was never called it was a fail</span></span><br><span class="line">        <span class="keyword">if</span> img.mode == <span class="string">&quot;RGBA&quot;</span>:</span><br><span class="line">            <span class="comment"># Check the image.</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                img = rgba_to_rgb_numpy(</span><br><span class="line">                    img</span><br><span class="line">                )  <span class="comment"># try and convert if RGBA is needed and all cases works</span></span><br><span class="line">                logger.warning(<span class="string">f&quot;img: <span class="subst">&#123;file_path&#125;</span> , img: <span class="subst">&#123;img&#125;</span>, rgba to rgb...&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logger.error(<span class="string">f&quot;convert error, detail: <span class="subst">&#123;e&#125;</span>, file path : <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                img.close()  <span class="comment"># Release Resources before returning</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># If the image cannot load and convert, test that this is correct image</span></span><br><span class="line"></span><br><span class="line">        img.close()  <span class="comment"># Close when done if conversion was not needed.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># It was tested if all file loads.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(</span><br><span class="line">            <span class="string">f&quot;Different from other error: it is an Unexpected error opening image: or image does not pass checks and there may not be image or corrupted with  other issues - <span class="subst">&#123;file_path&#125;</span>  <span class="subst">&#123;e&#125;</span>&quot;</span></span><br><span class="line">        )  <span class="comment"># This case is just a bad path</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># It may have just not passed the test and is just a bad file path that is expected.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据批量写入excel表格">数据批量写入excel表格</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_image_group</span>(<span class="params">identifiers, images_map_dir1, images_map_dir2, instruction_txt_path, start_index</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Processes a group of images.&quot;&quot;&quot;</span></span><br><span class="line">    sheet_data = []</span><br><span class="line">    temp_files = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, identifier <span class="keyword">in</span> <span class="built_in">enumerate</span>(identifiers, start=start_index + <span class="number">1</span>):</span><br><span class="line">        image1_path = images_map_dir1.get(identifier)</span><br><span class="line">        image2_path = images_map_dir2.get(identifier)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> image1_path <span class="keyword">and</span> image2_path:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                original_filename = os.path.basename(image1_path)</span><br><span class="line">                processed_filename = os.path.basename(image2_path)</span><br><span class="line">                instruction_text = generate_modification_instruction(processed_filename)</span><br><span class="line"></span><br><span class="line">                logger.info(<span class="string">f&quot;source image: <span class="subst">&#123;image1_path&#125;</span> instruction txt: <span class="subst">&#123;instruction_text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Extract filename without instruction using a helper function</span></span><br><span class="line">                processed_filename_without_instruction = extract_filename_without_instruction(processed_filename,</span><br><span class="line">                                                                                              instruction_text)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor() <span class="keyword">as</span> executor:</span><br><span class="line">                    future1 = executor.submit(insert_image_with_resize, image1_path)</span><br><span class="line">                    future2 = executor.submit(insert_image_with_resize, image2_path)</span><br><span class="line">                    img1, temp_img1_path = future1.result()</span><br><span class="line">                    img2, temp_img2_path = future2.result()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> temp_img1_path:</span><br><span class="line">                    temp_files.append(temp_img1_path)</span><br><span class="line">                <span class="keyword">if</span> temp_img2_path:</span><br><span class="line">                    temp_files.append(temp_img2_path)</span><br><span class="line"></span><br><span class="line">                original_numbers = extract_numbers_from_filename(original_filename)</span><br><span class="line">                processed_numbers = extract_numbers_from_filename(processed_filename)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># logger.info(f&quot;get source number image: &#123;original_numbers&#125;, processed numbers: &#123;processed_numbers&#125;!!!&quot;)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 构建文件名</span></span><br><span class="line">                base_name, ext = os.path.splitext(processed_filename)  <span class="comment"># 获取原始扩展名</span></span><br><span class="line">                <span class="comment"># process_path = os.path.split(image2_path)</span></span><br><span class="line">                new_image1_filename, ext = extract_directory_and_extension(image2_path)</span><br><span class="line">                new_image1_filename = os.path.join(new_image1_filename, <span class="built_in">str</span>(processed_numbers[<span class="number">0</span>]) + <span class="built_in">str</span>(ext))</span><br><span class="line"></span><br><span class="line">                parent_dir_name = get_parent_directory_name(image2_path)</span><br><span class="line">                parent_dir_name = os.path.join(parent_dir_name, <span class="string">&#x27;copy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                copied_image2_path = copy_and_rename(image2_path, parent_dir_name, new_image1_filename)</span><br><span class="line">                <span class="comment"># copied_image2_path = copy_and_rename(image2_path, &quot;./copy&quot;, new_image2_filename)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment"># logger.info(f&quot;already copy image2: &#123;image2_path&#125; to new dir: &#123;copied_image2_path&#125;!!! name: &#123;new_image1_filename&#125;.&quot;)</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> img1 <span class="keyword">and</span> img2:</span><br><span class="line">                    sheet_data.append(&#123;</span><br><span class="line">                        <span class="string">&#x27;index&#x27;</span>: index,</span><br><span class="line">                        <span class="string">&#x27;original_filename&#x27;</span>: original_numbers[<span class="number">0</span>],</span><br><span class="line">                        <span class="string">&#x27;img1&#x27;</span>: img1,</span><br><span class="line">                        <span class="string">&#x27;temp_img1_path&#x27;</span>: temp_img1_path,</span><br><span class="line">                        <span class="string">&#x27;processed_filename&#x27;</span>: processed_numbers[<span class="number">0</span>],</span><br><span class="line">                        <span class="string">&#x27;processed_filename_without_instruction&#x27;</span>: processed_filename_without_instruction,  <span class="comment"># Added field</span></span><br><span class="line">                        <span class="string">&#x27;img2&#x27;</span>: img2,</span><br><span class="line">                        <span class="string">&#x27;temp_img2_path&#x27;</span>: temp_img2_path,</span><br><span class="line">                        <span class="string">&#x27;instruction_text&#x27;</span>: instruction_text</span><br><span class="line">                    &#125;)</span><br><span class="line">                    logger.info(<span class="string">f&quot;writing image: <span class="subst">&#123;original_filename&#125;</span> and <span class="subst">&#123;processed_filename&#125;</span> to excel file!!!&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    logger.error(<span class="string">f&quot;Skipping row: <span class="subst">&#123;original_filename&#125;</span>, <span class="subst">&#123;processed_filename&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logger.error(<span class="string">f&quot;Error processing: <span class="subst">&#123;image1_path&#125;</span> or <span class="subst">&#123;image2_path&#125;</span> - <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.warning(<span class="string">f&quot;Error processing: <span class="subst">&#123;image1_path&#125;</span> or <span class="subst">&#123;image2_path&#125;</span> not get part.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sheet_data, temp_files</span><br></pre></td></tr></table></figure><h3 id="数据汇总输出Excel">数据汇总输出Excel</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_images_to_excel</span>(<span class="params">dir1, dir2, output_excel, progress_var, progress_bar, progress_label, ps_root,</span></span><br><span class="line"><span class="params">                          instruction_txt_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Write images and filenames to Excel.&quot;&quot;&quot;</span></span><br><span class="line">    files_dir1 = get_all_files(dir1)</span><br><span class="line">    files_dir2 = get_all_files(dir2)</span><br><span class="line"></span><br><span class="line">    images_map_dir1 = &#123;&#125;</span><br><span class="line">    images_map_dir2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files_dir1:</span><br><span class="line">        <span class="keyword">if</span> is_image(file):</span><br><span class="line">            identifier = extract_identifier_de(os.path.basename(file)) <span class="keyword">or</span> os.path.basename(file)</span><br><span class="line">            images_map_dir1[identifier] = file</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.warning(<span class="string">f&quot;file path not image!!! <span class="subst">&#123;file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files_dir2:</span><br><span class="line">        <span class="keyword">if</span> is_image(file):</span><br><span class="line">            identifier = extract_identifier_de(os.path.basename(file)) <span class="keyword">or</span> os.path.basename(file)</span><br><span class="line">            images_map_dir2[identifier] = file</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.warning(<span class="string">f&quot;file path not image!!! <span class="subst">&#123;file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> images_map_dir1 <span class="keyword">and</span> <span class="keyword">not</span> images_map_dir2:</span><br><span class="line">        logger.warning(<span class="string">&quot;No image files found.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    common_identifiers = <span class="built_in">list</span>(<span class="built_in">set</span>(images_map_dir1.keys()) &amp; <span class="built_in">set</span>(images_map_dir2.keys()))</span><br><span class="line">    total_images = <span class="built_in">len</span>(common_identifiers)</span><br><span class="line">    logger.info(<span class="string">f&quot;total image: <span class="subst">&#123;total_images&#125;</span>!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># logger.info(&quot;start output all image content:!!!&quot;)</span></span><br><span class="line">    <span class="keyword">if</span> dev_tools_mode:</span><br><span class="line">        logger.info(<span class="string">&quot;dev tools mode enable!!!&quot;</span>)</span><br><span class="line">        compare_and_info_dicts(images_map_dir1, images_map_dir2)</span><br><span class="line">    <span class="comment"># logger.info(&quot;end output all image content:!!!&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> common_identifiers:</span><br><span class="line">        logger.warning(<span class="string">&quot;No common identifiers found.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    common_identifiers.sort(</span><br><span class="line">        key=<span class="keyword">lambda</span> x: (<span class="built_in">int</span>(extract_identifier(x)) <span class="keyword">if</span> extract_identifier(x).isdigit() <span class="keyword">else</span> <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>), x))</span><br><span class="line"></span><br><span class="line">    output_dir = os.path.dirname(output_excel)</span><br><span class="line">    base_name, ext = os.path.splitext(os.path.basename(output_excel))</span><br><span class="line">    os.makedirs(output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tqdm(total=total_images, desc=<span class="string">&quot;Processing Images&quot;</span>, unit=<span class="string">&quot;pair&quot;</span>, dynamic_ncols=<span class="literal">True</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">        <span class="keyword">for</span> start_index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, total_images, <span class="number">500</span>):</span><br><span class="line">            end_index = <span class="built_in">min</span>(start_index + <span class="number">500</span>, total_images)</span><br><span class="line">            current_identifiers = common_identifiers[start_index:end_index]</span><br><span class="line"></span><br><span class="line">            sheet_data, temp_files = process_image_group(current_identifiers, images_map_dir1, images_map_dir2,</span><br><span class="line">                                                         instruction_txt_path, start_index)</span><br><span class="line"></span><br><span class="line">            workbook = openpyxl.Workbook()</span><br><span class="line">            sheet = workbook.active</span><br><span class="line">            sheet.title = <span class="string">&quot;Image Comparison&quot;</span></span><br><span class="line"></span><br><span class="line">            headers = [<span class="string">&quot;序号&quot;</span>, <span class="string">&quot;原图文件名&quot;</span>, <span class="string">&quot;原图&quot;</span>, <span class="string">&quot;修改图文件名&quot;</span>, <span class="string">&quot;修改图&quot;</span>, <span class="string">&quot;修改内容&quot;</span>]</span><br><span class="line">            <span class="keyword">for</span> col_num, header <span class="keyword">in</span> <span class="built_in">enumerate</span>(headers, <span class="number">1</span>):</span><br><span class="line">                cell = sheet.cell(row=<span class="number">1</span>, column=col_num, value=header)</span><br><span class="line">                cell.alignment = Alignment(horizontal=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            row = <span class="number">2</span></span><br><span class="line">            original_filenames = []</span><br><span class="line">            processed_filenames = []</span><br><span class="line">            modification_instructions = []</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> sheet_data:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    sheet.cell(row=row, column=<span class="number">1</span>, value=item[<span class="string">&#x27;index&#x27;</span>]).alignment = Alignment(horizontal=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">                    original_filenames.append(item[<span class="string">&#x27;original_filename&#x27;</span>])</span><br><span class="line">                    sheet.cell(row=row, column=<span class="number">2</span>, value=item[<span class="string">&#x27;original_filename&#x27;</span>])</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> item[<span class="string">&#x27;img1&#x27;</span>]:</span><br><span class="line">                        excel_img1 = ExcelImage(item[<span class="string">&#x27;temp_img1_path&#x27;</span>])</span><br><span class="line">                        sheet.add_image(excel_img1, <span class="string">f&#x27;C<span class="subst">&#123;row&#125;</span>&#x27;</span>)</span><br><span class="line">                        sheet.row_dimensions[row].height = <span class="number">259.8</span></span><br><span class="line"></span><br><span class="line">                    processed_filenames.append(item[<span class="string">&#x27;processed_filename&#x27;</span>])</span><br><span class="line">                    sheet.cell(row=row, column=<span class="number">4</span>, value=item[<span class="string">&#x27;processed_filename&#x27;</span>])</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> item[<span class="string">&#x27;img2&#x27;</span>]:</span><br><span class="line">                        excel_img2 = ExcelImage(item[<span class="string">&#x27;temp_img2_path&#x27;</span>])</span><br><span class="line">                        sheet.add_image(excel_img2, <span class="string">f&#x27;E<span class="subst">&#123;row&#125;</span>&#x27;</span>)</span><br><span class="line">                        sheet.row_dimensions[row].height = <span class="number">259.8</span></span><br><span class="line"></span><br><span class="line">                    modification_instructions.append(item[<span class="string">&#x27;instruction_text&#x27;</span>])</span><br><span class="line">                    sheet.cell(row=row, column=<span class="number">6</span>, value=item[<span class="string">&#x27;instruction_text&#x27;</span>]).alignment = Alignment(vertical=<span class="string">&#x27;top&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                    row += <span class="number">1</span></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    logger.exception(<span class="string">f&quot;Error adding row: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            adjust_column_width(sheet, <span class="string">&#x27;B&#x27;</span>, original_filenames)</span><br><span class="line">            adjust_column_width(sheet, <span class="string">&#x27;D&#x27;</span>, processed_filenames)</span><br><span class="line">            adjust_column_width(sheet, <span class="string">&#x27;F&#x27;</span>, modification_instructions)</span><br><span class="line">            adjust_column_width(sheet, <span class="string">&#x27;A&#x27;</span>, <span class="built_in">range</span>(start_index + <span class="number">1</span>, start_index + <span class="built_in">len</span>(current_identifiers) + <span class="number">1</span>))</span><br><span class="line">            sheet.column_dimensions[<span class="string">&#x27;C&#x27;</span>].width = <span class="number">80.79</span></span><br><span class="line">            sheet.column_dimensions[<span class="string">&#x27;E&#x27;</span>].width = <span class="number">80.79</span></span><br><span class="line"></span><br><span class="line">            file_counter = start_index // <span class="number">500</span> + <span class="number">1</span></span><br><span class="line">            new_output_excel = os.path.join(output_dir, <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span>_<span class="subst">&#123;file_counter&#125;</span><span class="subst">&#123;ext&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                workbook.save(new_output_excel)</span><br><span class="line">                logger.info(<span class="string">f&quot;Saved batch: <span class="subst">&#123;new_output_excel&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logger.error(<span class="string">f&quot;Failed to save <span class="subst">&#123;new_output_excel&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="keyword">for</span> temp_file <span class="keyword">in</span> temp_files:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        os.remove(temp_file)</span><br><span class="line">                    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        logger.error(<span class="string">f&quot;Error deleting <span class="subst">&#123;temp_file&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            pbar.update(<span class="built_in">len</span>(current_identifiers))</span><br><span class="line">            progress_percentage = <span class="built_in">int</span>((pbar.n / total_images) * <span class="number">100</span>)</span><br><span class="line">            progress_var.<span class="built_in">set</span>(progress_percentage)</span><br><span class="line">            progress_label.config(text=<span class="string">f&quot;<span class="subst">&#123;progress_percentage&#125;</span>%&quot;</span>)</span><br><span class="line">            ps_root.update_idletasks()</span><br><span class="line"></span><br><span class="line">    progress_var.<span class="built_in">set</span>(<span class="number">100</span>)</span><br><span class="line">    progress_label.config(text=<span class="string">&quot;100%&quot;</span>)</span><br><span class="line">    ps_root.update_idletasks()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;python批量写入图片到excel中&lt;/h1&gt;
&lt;h2 id=&quot;技术&quot;&gt;技术&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. pandas&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用途：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据分析和处理的核心</summary>
      
    
    
    
    
    <category term="python" scheme="https://caozhaoqi.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在macOS使用ntfs格式硬盘方法</title>
    <link href="https://caozhaoqi.github.io/2025/02/25/ntfs-macos-mounty/"/>
    <id>https://caozhaoqi.github.io/2025/02/25/ntfs-macos-mounty/</id>
    <published>2025-02-25T06:10:05.000Z</published>
    <updated>2025-03-04T09:06:46.512Z</updated>
    
    <content type="html"><![CDATA[<h1>在macOS使用ntfs格式硬盘方法</h1><p><strong>1. FAT32 (File Allocation Table 32-bit)</strong></p><ul><li><strong>历史：</strong> FAT32 是 FAT 文件系统家族的一员，是 FAT16 的后继者。它在 Windows 95 OSR2 中首次引入，旨在克服 FAT16 的一些限制。</li><li><strong>结构：</strong> FAT32 文件系统使用文件分配表 (FAT) 来跟踪磁盘上的文件和目录。FAT 表实际上是一个索引表，记录了磁盘上每个簇（cluster，磁盘上最小的存储单元）的使用情况。</li><li><strong>特点：</strong><ul><li><strong>兼容性好：</strong> FAT32 得到了广泛的支持，几乎所有的操作系统和设备（包括 Windows、macOS、Linux、嵌入式系统、游戏机等）都可以读取和写入 FAT32 格式的磁盘。</li><li><strong>简单易用：</strong> FAT32 的结构比较简单，实现起来也相对容易。</li></ul></li><li><strong>缺点：</strong><ul><li><strong>最大文件尺寸限制：</strong> FAT32 文件系统对单个文件的大小有限制，最大不能超过 4GB。 这使得它无法存储高清视频、大型数据库文件等。</li><li><strong>最大分区尺寸限制：</strong> 虽然理论上 FAT32 可以支持最大 8TB 的分区，但实际上由于一些操作系统（特别是 Windows）的限制，FAT32 分区通常限制在 32GB。</li><li><strong>安全性较差：</strong> FAT32 不支持文件权限、加密等安全特性。</li><li><strong>可靠性较低：</strong> FAT32 的元数据（FAT 表）通常只有一个副本，一旦损坏，可能会导致数据丢失。</li></ul></li><li><strong>适用场景：</strong><ul><li><strong>移动存储设备：</strong> 比如 U 盘、SD 卡等，如果不需要存储超过 4GB 的单个文件，并且需要在多个操作系统或设备上使用，FAT32 是一个不错的选择。</li><li><strong>嵌入式系统：</strong> 一些嵌入式设备仍然使用 FAT32，因为它的实现简单且资源占用较少。</li><li><strong>老旧操作系统：</strong> 对于一些老旧的操作系统，可能只能支持 FAT32 格式。</li></ul></li></ul><p><strong>2. NTFS (New Technology File System)</strong></p><ul><li><strong>历史：</strong> NTFS 是微软为 Windows NT 系列操作系统设计的现代文件系统，旨在取代 FAT 文件系统。它首次出现在 Windows NT 3.1 中，并在后续的 Windows 版本中得到了广泛应用。</li><li><strong>结构：</strong> NTFS 使用主文件表 (MFT, Master File Table) 来管理磁盘上的文件和目录。MFT 类似于一个数据库，记录了每个文件和目录的元数据（大小、创建时间、权限等）以及数据存储位置。</li><li><strong>特点：</strong><ul><li><strong>支持大文件和分区：</strong> NTFS 没有 4GB 的文件尺寸限制，可以存储大型文件。 NTFS 可以支持非常大的分区（理论上可达 256TB），但实际受操作系统限制。</li><li><strong>安全性高：</strong> NTFS 支持文件权限管理，可以控制用户对文件和目录的访问权限。 它还支持加密文件系统 (EFS)，可以对文件进行加密存储。</li><li><strong>可靠性高：</strong> NTFS 具有日志功能，可以记录文件系统的操作，并在系统崩溃后进行恢复，从而保证数据的完整性。 NTFS 的元数据（MFT）通常有多个副本，可以提高容错能力。</li><li><strong>高级特性：</strong> NTFS 支持磁盘配额、压缩、稀疏文件、符号链接等高级特性。</li></ul></li><li><strong>缺点：</strong><ul><li><strong>兼容性稍差：</strong> 虽然 Windows 操作系统对 NTFS 的支持非常好，但 macOS 和 Linux 对 NTFS 的支持可能存在一些问题。 在 macOS 上，默认只能读取 NTFS 格式的磁盘，无法写入。 在 Linux 上，虽然可以通过安装驱动程序来支持 NTFS 的读写，但性能可能不如在 Windows 上。</li><li><strong>实现复杂：</strong> NTFS 的结构比 FAT32 复杂得多，实现起来也比较困难。</li></ul></li><li><strong>适用场景：</strong><ul><li><strong>Windows 操作系统：</strong> NTFS 是 Windows 操作系统的默认文件系统，用于系统盘和数据盘。</li><li><strong>需要存储大文件的场合：</strong> 比如高清视频编辑、大型数据库服务器等。</li><li><strong>对数据安全性有较高要求的场合：</strong> 比如企业服务器、存储敏感数据的磁盘等。</li><li><strong>需要使用 NTFS 高级特性的场合：</strong> 比如磁盘配额、压缩等。</li></ul></li></ul><h2 id="brew">brew</h2><h3 id="install">install</h3><ul><li>script example</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置脚本遇到错误时退出</span></span><br><span class="line">set -e</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义颜色</span></span><br><span class="line">RED=&#x27;\033[0;31m&#x27;</span><br><span class="line">GREEN=&#x27;\033[0;32m&#x27;</span><br><span class="line">YELLOW=&#x27;\033[0;33m&#x27;</span><br><span class="line">NC=&#x27;\033[0m&#x27; # No Color</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否为 macOS</span></span><br><span class="line">if [[ &quot;$(uname)&quot; != &quot;Darwin&quot; ]]; then</span><br><span class="line">    echo -e &quot;$&#123;RED&#125;This script is intended for macOS only.$&#123;NC&#125;&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否已安装 Homebrew</span></span><br><span class="line">if ! command -v brew &amp;&gt; /dev/null; then</span><br><span class="line">    echo -e &quot;$&#123;YELLOW&#125;Homebrew is not installed. Installing...$&#123;NC&#125;&quot;</span><br><span class="line">    /bin/bash -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br><span class="line">    if [ $? -ne 0 ]; then</span><br><span class="line">        echo -e &quot;$&#123;RED&#125;Failed to install Homebrew. Please install it manually and then rerun this script.$&#123;NC&#125;&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">    echo -e &quot;$&#123;GREEN&#125;Homebrew installed successfully!$&#123;NC&#125;&quot;</span><br><span class="line">else</span><br><span class="line">    # 更新 Homebrew</span><br><span class="line">    echo -e &quot;$&#123;YELLOW&#125;Updating Homebrew...$&#123;NC&#125;&quot;</span><br><span class="line">    brew update</span><br><span class="line">    if [ $? -ne 0 ]; then</span><br><span class="line">      echo -e &quot;$&#123;RED&#125;Warning: Failed to update Homebrew.  Continuing anyway...$&#123;NC&#125;&quot;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 FFmpeg</span></span><br><span class="line">if ! brew list --versions ffmpeg &amp;&gt; /dev/null; then</span><br><span class="line">  echo -e &quot;$&#123;YELLOW&#125;Installing FFmpeg...$&#123;NC&#125;&quot;</span><br><span class="line">  brew install ffmpeg</span><br><span class="line">  if [ $? -ne 0 ]; then</span><br><span class="line">      echo -e &quot;$&#123;RED&#125;Failed to install FFmpeg.$&#123;NC&#125;&quot;</span><br><span class="line">      exit 1</span><br><span class="line">  fi</span><br><span class="line">  echo -e &quot;$&#123;GREEN&#125;FFmpeg installed successfully!$&#123;NC&#125;&quot;</span><br><span class="line">else</span><br><span class="line">  echo -e &quot;$&#123;YELLOW&#125;FFmpeg is already installed. Skipping...$&#123;NC&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 macFUSE, ntfs-3g-mac 和 Mounty (用于 NTFS 写入支持)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">see https://mounty.app/#installation</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">macFUSE (Cask)</span></span><br><span class="line">if ! brew list --cask --versions macfuse &amp;&gt; /dev/null; then</span><br><span class="line">  echo -e &quot;$&#123;YELLOW&#125;Installing macFUSE...$&#123;NC&#125;&quot;</span><br><span class="line">  brew install --cask macfuse</span><br><span class="line">  if [ $? -ne 0 ]; then</span><br><span class="line">      echo -e &quot;$&#123;RED&#125;Failed to install macFUSE.  You may need to install it manually from https://osxfuse.github.io/. Continuing...$&#123;NC&#125;&quot;</span><br><span class="line">  fi</span><br><span class="line">else</span><br><span class="line">  echo -e &quot;$&#123;YELLOW&#125;macFUSE is already installed. Skipping...$&#123;NC&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ntfs-3g-mac (Formula)</span></span><br><span class="line">if ! brew list --versions ntfs-3g-mac &amp;&gt; /dev/null; then</span><br><span class="line">  echo -e &quot;$&#123;YELLOW&#125;Installing ntfs-3g-mac...$&#123;NC&#125;&quot;</span><br><span class="line">  brew install gromgit/fuse/ntfs-3g-mac</span><br><span class="line">  if [ $? -ne 0 ]; then</span><br><span class="line">    echo -e &quot;$&#123;RED&#125;Failed to install ntfs-3g-mac. This may cause issues with writing to NTFS drives. Continuing...$&#123;NC&#125;&quot;</span><br><span class="line">  fi</span><br><span class="line">else</span><br><span class="line">  echo -e &quot;$&#123;YELLOW&#125;ntfs-3g-mac is already installed. Skipping...$&#123;NC&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Mounty (Cask)</span></span><br><span class="line">if ! brew list --cask --versions mounty &amp;&gt; /dev/null; then</span><br><span class="line">  echo -e &quot;$&#123;YELLOW&#125;Installing Mounty...$&#123;NC&#125;&quot;</span><br><span class="line">  brew install --cask mounty</span><br><span class="line">  if [ $? -ne 0 ]; then</span><br><span class="line">      echo -e &quot;$&#123;RED&#125;Failed to install Mounty.  You may need to manually mount NTFS drives. Continuing...$&#123;NC&#125;&quot;</span><br><span class="line">  fi</span><br><span class="line">else</span><br><span class="line">  echo -e &quot;$&#123;YELLOW&#125;Mounty is already installed. Skipping...$&#123;NC&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;GREEN&#125;Installation complete!$&#123;NC&#125;&quot;</span><br><span class="line">echo -e &quot;$&#123;YELLOW&#125;Please reboot your computer for the changes (especially macFUSE) to take effect.$&#123;NC&#125;&quot;</span><br><span class="line">echo -e &quot;$&#123;YELLOW&#125;After rebooting, you may need to manually enable &#x27;System Extensions&#x27; for macFUSE in System Preferences &gt; Security &amp; Privacy &gt; General.$&#123;NC&#125;&quot;</span><br><span class="line">echo -e &quot;$&#123;GREEN&#125;If you encounter any issues, run &#x27;brew doctor&#x27; to diagnose potential problems.$&#123;NC&#125;&quot;</span><br></pre></td></tr></table></figure><ul><li>use</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 ./sh.sh</span><br><span class="line">./sh.sh</span><br></pre></td></tr></table></figure><h2 id="mounty">mounty</h2><h3 id="地址：">地址：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mounty.app</span><br></pre></td></tr></table></figure><h3 id="install-and-use">install and use</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">macbook:~ uwe$ brew install --cask macfuse</span><br><span class="line">macbook:~ uwe$ brew install gromgit/fuse/ntfs-3g-mac</span><br><span class="line">macbook:~ uwe$ brew install --cask mounty</span><br></pre></td></tr></table></figure><h2 id="use">use</h2><ul><li><p>安装完成后，重启软件 进入设置-&gt;隐私与安全性-&gt;启用未知来源安装</p></li><li><p>系统自动重启后，长按电源键进入恢复模式，点击菜单栏查看启动安全实用工具，点击选择中等安全性，然后重启</p></li><li><p>尝试重新挂载硬盘，如果mounty图标由黄变蓝则代表挂载成功，即可在目标磁盘创建文件</p></li></ul><h2 id="ffmpeg安装">ffmpeg安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure><h1>see</h1><ul><li><a href="https://mounty.app/#aBitOfBackground">https://mounty.app/#aBitOfBackground</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;在macOS使用ntfs格式硬盘方法&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;1. FAT32 (File Allocation Table 32-bit)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;历史：&lt;/strong&gt; FAT32 是 FAT 文件系统家族</summary>
      
    
    
    
    
    <category term="macOS" scheme="https://caozhaoqi.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>python 可视化打包工具集锦</title>
    <link href="https://caozhaoqi.github.io/2025/02/08/python-publish/"/>
    <id>https://caozhaoqi.github.io/2025/02/08/python-publish/</id>
    <published>2025-02-08T15:07:48.000Z</published>
    <updated>2025-03-04T09:06:46.547Z</updated>
    
    <content type="html"><![CDATA[<h1>python 可视化打包工具集锦</h1><h2 id="打包">打包</h2><blockquote><p>Python 打包工具用于将代码、依赖和资源文件整理成可分发的格式（如库、可执行文件等）</p></blockquote><h2 id="常用打包工具">常用打包工具</h2><h3 id="pyinstaller">pyinstaller</h3><ul><li>使用方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller --onefile main.py</span><br></pre></td></tr></table></figure><ul><li>通过spec文件打包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># -*- mode: python ; coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">block_cipher = None</span><br><span class="line"></span><br><span class="line">a = Analysis(</span><br><span class="line">    [&#x27;main.py&#x27;],</span><br><span class="line">    pathex=[&#x27;/path/to/my_dash_app&#x27;],</span><br><span class="line">    binaries=[],</span><br><span class="line">    datas=[(&#x27;assets/*&#x27;, &#x27;assets&#x27;)],  # 打包 assets 文件夹</span><br><span class="line">    hiddenimports=[],</span><br><span class="line">    hookspath=[],</span><br><span class="line">    runtime_hooks=[],</span><br><span class="line">    excludes=[],</span><br><span class="line">    win_no_prefer_redirects=False,</span><br><span class="line">    win_private_assemblies=False,</span><br><span class="line">    cipher=block_cipher,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)</span><br><span class="line"></span><br><span class="line">exe = EXE(</span><br><span class="line">    pyz,</span><br><span class="line">    a.scripts,</span><br><span class="line">    [],</span><br><span class="line">    exclude_binaries=True,</span><br><span class="line">    name=&#x27;my_dash_app&#x27;,</span><br><span class="line">    debug=False,</span><br><span class="line">    bootloader_ignore_signals=False,</span><br><span class="line">    strip=False,</span><br><span class="line">    upx=True,</span><br><span class="line">    console=False,  # 隐藏控制台窗口</span><br><span class="line">    icon=&#x27;icon.ico&#x27;,  # 设置图标</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">coll = COLLECT(</span><br><span class="line">    exe,</span><br><span class="line">    a.binaries,</span><br><span class="line">    a.zipfiles,</span><br><span class="line">    a.datas,</span><br><span class="line">    strip=False,</span><br><span class="line">    upx=True,</span><br><span class="line">    upx_exclude=[],</span><br><span class="line">    name=&#x27;my_dash_app&#x27;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>详细参考如下：<a href="https://caozhaoqi.github.io/2024/04/09/pyinstaller-publish-python/">https://caozhaoqi.github.io/2024/04/09/pyinstaller-publish-python/</a></p></blockquote><h3 id="nuitka">nuitka</h3><blockquote><p>将 Python 代码编译为 C 代码，再生成可执行文件, 性能优于普通打包工具</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuitka --standalone --onefile your_script.py</span><br></pre></td></tr></table></figure><blockquote><p>详细参考如下：<a href="https://caozhaoqi.github.io/2024/04/10/setup-tools-python/">https://caozhaoqi.github.io/2024/04/10/setup-tools-python/</a></p></blockquote><h3 id="cx-Freeze">cx_Freeze</h3><ul><li>publish</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cxfreeze your_script.py --target-dir dist</span><br></pre></td></tr></table></figure><h3 id="Briefcase">Briefcase</h3><blockquote><p>打包为桌面应用</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install briefcase</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建项目模板</span></span><br><span class="line">briefcase new</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入项目目录</span></span><br><span class="line">cd myapp</span><br></pre></td></tr></table></figure><ul><li>打包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成各平台安装包</span></span><br><span class="line">briefcase create          # 创建基础结构</span><br><span class="line">briefcase build           # 构建应用</span><br><span class="line">briefcase run             # 本地运行测试</span><br><span class="line">briefcase package         # 生成安装包（如 .dmg、.msi）</span><br></pre></td></tr></table></figure><h3 id="PyOxidizer">PyOxidizer</h3><blockquote><p>将 Python 应用编译为独立可执行文件，启动速度快。<br>支持跨平台。<br>生成的文件体积较小。</p></blockquote><ul><li>打包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">pip install pyoxidizer</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建配置文件</span></span><br><span class="line">pyoxidizer init-config-file</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑生成的 `pyoxidizer.bzl` 文件，指定入口脚本和依赖</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成可执行文件</span></span><br><span class="line">pyoxidizer build</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出路径：`build/` 目录</span></span><br></pre></td></tr></table></figure><h3 id="Briefcase-2">Briefcase</h3><blockquote><p>跨平台GUI工具 可生成跨平台安装包</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install briefcase</span><br><span class="line">fbs startproject</span><br></pre></td></tr></table></figure><h3 id="fbs">fbs</h3><blockquote><p>用于 pyside pyqt5 打包 局限性较大</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fbs</span><br></pre></td></tr></table></figure><ul><li>打包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fbs freeze       # 生成可执行文件</span><br><span class="line">fbs installer    # 创建安装包（如 .exe、.dmg）</span><br></pre></td></tr></table></figure><blockquote><p>修改 src/build/settings/base.json 设置应用名称、版本等。</p></blockquote><h2 id="打包后文件转换">打包后文件转换</h2><h3 id="NSIS">NSIS</h3><blockquote><p>打包后文件转换为安装工具 可根据安装工具安装程序</p></blockquote><h3 id="Inno-Setup">Inno Setup</h3><blockquote><p>创建自定义的安装向导</p></blockquote><ul><li>参考链接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://caozhaoqi.github.io/2024/04/09/nuitka-publish-python/</span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;python 可视化打包工具集锦&lt;/h1&gt;
&lt;h2 id=&quot;打包&quot;&gt;打包&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 打包工具用于将代码、依赖和资源文件整理成可分发的格式（如库、可执行文件等）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;常用打包工具&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>磁力链接与ed2k的自动化检测处理</title>
    <link href="https://caozhaoqi.github.io/2025/01/23/ed2k-bit/"/>
    <id>https://caozhaoqi.github.io/2025/01/23/ed2k-bit/</id>
    <published>2025-01-23T15:10:03.000Z</published>
    <updated>2025-03-04T09:03:20.790Z</updated>
    
    <content type="html"><![CDATA[<h1>磁力链接与ed2k的自动化检测处理</h1><blockquote><p>磁力链接与ed2k对比</p></blockquote><p><strong>磁力链接下载速度的影响因素 (BitTorrent 协议):</strong></p><ol><li><strong>种子数量（Seeders）：</strong><ul><li><strong>定义：</strong> 指的是完整拥有你想要下载的文件的用户数量。</li><li><strong>影响：</strong> 种子越多，你下载的速度通常就越快，因为你可以从多个来源同时下载数据。</li><li><strong>重要性：</strong> 种子数量是影响下载速度的最关键因素之一。如果种子数为零或很少，下载速度会非常慢甚至无法下载。</li></ul></li><li><strong>节点数量（Peers）：</strong><ul><li><strong>定义：</strong> 指的是正在下载或部分拥有该文件的用户数量。</li><li><strong>影响：</strong> 节点数量越多，你获得数据的机会就越多，但节点不一定拥有完整文件，所以下载速度不一定总是更快。</li><li><strong>区别于种子：</strong> 节点可能只拥有部分文件，而种子拥有完整文件。</li></ul></li><li><strong>种子质量 (带宽和连接数):</strong><ul><li><strong>定义：</strong> 种子的上传带宽和连接数限制。</li><li><strong>影响：</strong> 如果种子用户的上传带宽很低或者连接数有限制，你下载速度会受到限制。高质量的种子上传速度快且允许更多人连接。</li><li><strong>实际情况：</strong> 很多用户上传带宽不高，这也是影响下载速度的因素。</li></ul></li><li><strong>你的网络带宽：</strong><ul><li><strong>定义：</strong> 你的网络服务提供商 (ISP) 提供的最大下载速度。</li><li><strong>影响：</strong> 如果你的网络带宽很低，下载速度会受到物理限制。即使种子很多，下载速度也不会超过你的带宽上限。</li><li><strong>限制：</strong> 很多运营商对上传和下载速度有限制，比如上行带宽通常低于下行带宽。</li></ul></li><li><strong>你的网络环境：</strong><ul><li><strong>定义：</strong> 你的网络连接质量和稳定性。</li><li><strong>影响：</strong> 如果你的网络丢包严重或者延迟很高，下载速度会受到影响。网络环境不佳会导致下载不稳定，频繁中断。</li><li><strong>NAT 类型：</strong> 网络地址转换 (NAT) 类型也会影响 P2P 连接，比如严格的 NAT 会限制连接数。</li></ul></li><li><strong>下载客户端：</strong><ul><li><strong>定义：</strong> 你使用的 BitTorrent 客户端软件的设置和性能。</li><li><strong>影响：</strong> 不同的客户端在性能、连接数、优化算法等方面有所不同，会影响下载速度。</li><li><strong>优化：</strong> 好的客户端会自动寻找最优的连接，智能分配带宽。</li></ul></li><li><strong>文件热门程度：</strong><ul><li><strong>定义：</strong> 文件在 P2P 网络中的受欢迎程度。</li><li><strong>影响：</strong> 热门文件通常种子较多，下载速度更快，冷门文件可能缺少种子或种子质量不高。</li></ul></li><li><strong>DHT 网络和 Tracker：</strong><ul><li><strong>定义：</strong> DHT 网络和 Tracker 服务器帮助客户端找到其他节点。</li><li><strong>影响：</strong> 如果 DHT 网络连接不好或者 Tracker 服务器不稳定，会影响节点发现和下载速度。</li><li><strong>重要性：</strong> DHT 网络和 Tracker 服务器是保证 P2P 网络正常运行的关键组件。</li></ul></li></ol><p><strong>eD2k 链接下载速度的影响因素 (eDonkey2000 协议):</strong></p><ol><li><strong>源数量 (Sources):</strong><ul><li><strong>定义：</strong> 指的是拥有你想要下载的文件（或部分）的用户数量。</li><li><strong>影响：</strong> 源越多，你下载速度通常就越快，因为你可以从多个来源同时下载数据。</li><li><strong>关键性：</strong> 源数量是影响 eD2k 下载速度的最重要因素。</li></ul></li><li><strong>用户队列（Queue）:</strong><ul><li><strong>定义：</strong> 你在每个源用户处的下载队列中的位置。</li><li><strong>影响：</strong> 如果你位于队列中比较靠后的位置，你需要等待前面的用户下载完毕，才能轮到你。</li><li><strong>等待时间：</strong> 队列长度会直接影响下载的等待时间。</li></ul></li><li><strong>用户共享设置 (Credits):</strong><ul><li><strong>定义：</strong> eDonkey 网络中鼓励用户共享的机制。上传更多数据会获得更高的信用，从而在下载队列中优先。</li><li><strong>影响：</strong> 如果你没有上传足够的量，下载速度会受到限制。</li><li><strong>重要性：</strong> eDonkey 网络强调共享精神，积极上传有助于提升下载速度。</li></ul></li><li><strong>你的网络带宽：</strong><ul><li><strong>定义：</strong> 你的网络服务提供商 (ISP) 提供的最大下载速度。</li><li><strong>影响：</strong> 如果你的网络带宽很低，下载速度会受到物理限制。</li></ul></li><li><strong>你的网络环境：</strong><ul><li><strong>定义：</strong> 你的网络连接质量和稳定性。</li><li><strong>影响：</strong> 如果你的网络丢包严重或者延迟很高，下载速度会受到影响。</li><li><strong>NAT 类型：</strong> NAT 类型也会影响 P2P 连接，特别是低 ID 用户（Low ID）会影响连接其他用户。</li></ul></li><li><strong>下载客户端:</strong><ul><li><strong>定义：</strong> 你使用的 eDonkey 客户端软件的设置和性能。</li><li><strong>影响：</strong> 不同的客户端在性能、连接数、优化算法等方面有所不同，会影响下载速度。</li><li><strong>高ID：</strong>  客户端获取高ID有助于提升连接效率。</li></ul></li><li><strong>eD2k 服务器:</strong><ul><li><strong>定义：</strong> eD2k 服务器帮助客户端找到其他节点。</li><li><strong>影响：</strong> 如果服务器不稳定或连接较慢，会影响连接效率。</li><li><strong>重要性：</strong> 服务器是 eD2k 网络的关键组件。</li></ul></li></ol><h2 id="工具安装">工具安装</h2><ul><li>qbittorrent</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install qbittorrent-api</span><br><span class="line">https://www.fosshub.com/qBittorrent.html#</span><br></pre></td></tr></table></figure><ul><li>emule</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://sourceforge.net/projects/emule/files/latest/download</span><br></pre></td></tr></table></figure><h2 id="检测可用性等指标">检测可用性等指标</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> RotatingFileHandler</span><br><span class="line"></span><br><span class="line">log_dir = <span class="string">&quot;./logs&quot;</span></span><br><span class="line">log_file = os.path.join(log_dir, <span class="string">&quot;man_detect.log&quot;</span>)</span><br><span class="line">max_log_size = <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>  <span class="comment"># 10MB</span></span><br><span class="line">backup_count = <span class="number">5</span>  <span class="comment"># 最多保留5个日志文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建logs目录，如果不存在</span></span><br><span class="line">os.makedirs(log_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 创建 RotatingFileHandler 实例</span></span><br><span class="line">log_handler = RotatingFileHandler(log_file, maxBytes=max_log_size, backupCount=backup_count, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置日志格式</span></span><br><span class="line">log_format = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">log_handler.setFormatter(log_format)</span><br><span class="line"><span class="comment"># 获取 logger 实例</span></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"><span class="comment"># 添加 handler</span></span><br><span class="line">logger.addHandler(log_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加控制台输出</span></span><br><span class="line">stream_handler = logging.StreamHandler()</span><br><span class="line">stream_handler.setFormatter(log_format)</span><br><span class="line">logger.addHandler(stream_handler)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">check_tracker</span>(<span class="params">tracker_url, timeout=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;异步检查单个 Tracker 是否可用&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parsed_url = urllib.parse.urlparse(tracker_url)</span><br><span class="line">        <span class="keyword">if</span> parsed_url.scheme <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;udp&#x27;</span>, <span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>):</span><br><span class="line">            logging.warning(<span class="string">f&quot;跳过不支持的协议: <span class="subst">&#123;parsed_url.scheme&#125;</span> in <span class="subst">&#123;tracker_url&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> parsed_url.scheme <span class="keyword">in</span> (<span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 对于 http和 https 协议不做测试直接返回成功。</span></span><br><span class="line"></span><br><span class="line">        host = parsed_url.hostname</span><br><span class="line">        port = parsed_url.port <span class="keyword">or</span> <span class="number">80</span>  <span class="comment"># udp默认53， http默认80</span></span><br><span class="line"></span><br><span class="line">        loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">f&quot;尝试连接 tracker: <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>  协议: <span class="subst">&#123;parsed_url.scheme&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        future = loop.create_connection(</span><br><span class="line">            <span class="keyword">lambda</span>: asyncio.Protocol(),</span><br><span class="line">            host,</span><br><span class="line">            port</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用asyncio.wait_for设置超时</span></span><br><span class="line">        connection_tuple = <span class="keyword">await</span> asyncio.wait_for(future, timeout)</span><br><span class="line">        transport, protocol = connection_tuple</span><br><span class="line">        transport.close()</span><br><span class="line">        logging.info(<span class="string">f&quot;Tracker <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span> 连接成功&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> asyncio.TimeoutError:</span><br><span class="line">        logging.warning(<span class="string">f&quot;Tracker <span class="subst">&#123;tracker_url&#125;</span> 连接超时&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">        logging.warning(<span class="string">f&quot;Tracker <span class="subst">&#123;tracker_url&#125;</span> 连接错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理 Tracker <span class="subst">&#123;tracker_url&#125;</span> 异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">check_magnet_link</span>(<span class="params">magnet_link, timeout=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查磁力链接是否可用&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parsed_magnet = urllib.parse.urlparse(magnet_link)</span><br><span class="line">        query_params = urllib.parse.parse_qs(parsed_magnet.query)</span><br><span class="line"></span><br><span class="line">        trackers = query_params.get(<span class="string">&#x27;tr&#x27;</span>, [])  <span class="comment"># 获取所有 trackers</span></span><br><span class="line">        info_hash = query_params.get(<span class="string">&#x27;xt&#x27;</span>, [])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> trackers <span class="keyword">or</span> <span class="keyword">not</span> info_hash:</span><br><span class="line">            logging.warning(<span class="string">f&quot;磁力链不完整: <span class="subst">&#123;magnet_link&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        info_hash = info_hash[<span class="number">0</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">2</span>] <span class="keyword">if</span> info_hash[<span class="number">0</span>].startswith(<span class="string">&quot;urn:btih:&quot;</span>) <span class="keyword">else</span> info_hash[<span class="number">0</span>]</span><br><span class="line">        logging.info(<span class="string">f&quot;开始检查磁力链: <span class="subst">&#123;magnet_link&#125;</span> ,info_hash: <span class="subst">&#123;info_hash&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        tracker_tasks = [check_tracker(tracker, timeout) <span class="keyword">for</span> tracker <span class="keyword">in</span> trackers]</span><br><span class="line"></span><br><span class="line">        results = <span class="keyword">await</span> asyncio.gather(*tracker_tasks)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(results):</span><br><span class="line">            logging.info(<span class="string">f&quot;磁力链 <span class="subst">&#123;magnet_link&#125;</span> 有效&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.info(<span class="string">f&quot;磁力链 <span class="subst">&#123;magnet_link&#125;</span> 无效&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理磁力链 <span class="subst">&#123;magnet_link&#125;</span> 异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_check_ed2k_emule</span>(<span class="params">ed2k_link, emule_path, timeout=<span class="number">20</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 同步的 eMule 命令行检测函数，不应直接在asyncio线程调用 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 1. 添加 ed2k 链接</span></span><br><span class="line">        add_cmd = [emule_path, <span class="string">&quot;-add&quot;</span>, ed2k_link]</span><br><span class="line">        add_process = subprocess.run(add_cmd, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, check=<span class="literal">False</span>, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> add_process.returncode != <span class="number">0</span>:</span><br><span class="line">            logging.warning(<span class="string">f&quot;添加 ed2k 链接失败：<span class="subst">&#123;add_process.stderr.strip()&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 2. 获取下载状态</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="keyword">while</span> time.time() - start_time &lt; timeout:</span><br><span class="line">            status_cmd = [emule_path, <span class="string">&quot;-show&quot;</span>, <span class="string">&quot;-complete&quot;</span>]  <span class="comment"># show all downloading files</span></span><br><span class="line">            status_process = subprocess.run(status_cmd, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, check=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> status_process.returncode == <span class="number">0</span>:</span><br><span class="line">                output = status_process.stdout</span><br><span class="line">                <span class="comment"># 正则匹配 ed2k 链接 或文件名</span></span><br><span class="line">                pattern = re.<span class="built_in">compile</span>(re.escape(os.path.basename(ed2k_link)) <span class="keyword">or</span> re.escape(ed2k_link), re.IGNORECASE)</span><br><span class="line">                <span class="keyword">if</span> pattern.search(output):</span><br><span class="line">                    <span class="comment"># 状态匹配，如果状态存在则可能可用</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;Downloading&quot;</span> <span class="keyword">in</span> output <span class="keyword">or</span> <span class="string">&quot;Connecting&quot;</span> <span class="keyword">in</span> output <span class="keyword">or</span> <span class="string">&quot;Queued&quot;</span> <span class="keyword">in</span> output <span class="keyword">or</span> <span class="string">&quot;Waiting&quot;</span> <span class="keyword">in</span> output:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        logging.warning(<span class="string">f&quot;eMule 链接状态不在预期状态：<span class="subst">&#123;output&#125;</span>&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    logging.warning(<span class="string">f&quot;eMule 未找到指定链接：<span class="subst">&#123;output&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.warning(<span class="string">f&quot;获取 eMule 状态失败：<span class="subst">&#123;status_process.stderr.strip()&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;检查 ed2k 链接时发生异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">check_ed2k_emule</span>(<span class="params">ed2k_link, emule_path, timeout=<span class="number">20</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;异步的 eMule 命令行检测函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="keyword">await</span> asyncio.to_thread(_check_ed2k_emule, ed2k_link, emule_path, timeout)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;调用异步 eMule 检测函数发生异常:<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_get_column_index</span>(<span class="params">header, column_names</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 查找第一个匹配的列名，返回索引，否则返回-1 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> header:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> column_names:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> header.index(name)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">process_csv_file</span>(<span class="params">file_path, magnet_column_names, ed2k_column_names=<span class="literal">None</span>, emule_path=<span class="literal">None</span>, use_ed2k=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">                           timeout=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理单个 CSV 文件，并验证其中的磁力链接和ed2k链接, 返回可用的磁力链接列表, 保留原始数据&quot;&quot;&quot;</span></span><br><span class="line">    logging.info(<span class="string">f&quot;开始处理 CSV 文件: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">    available_rows = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">            reader = csv.reader(csvfile)</span><br><span class="line">            header = <span class="built_in">next</span>(reader, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> header:</span><br><span class="line">                logging.warning(<span class="string">f&quot;CSV文件为空: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> available_rows</span><br><span class="line"></span><br><span class="line">            magnet_column_index = _get_column_index(header, magnet_column_names)</span><br><span class="line">            <span class="keyword">if</span> magnet_column_index == -<span class="number">1</span>:</span><br><span class="line">                logging.error(<span class="string">f&quot;磁力链列名列表 &#x27;<span class="subst">&#123;magnet_column_names&#125;</span>&#x27; 在 CSV 文件中未找到: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> available_rows</span><br><span class="line">            ed2k_column_index = -<span class="number">1</span>  <span class="comment"># 默认值</span></span><br><span class="line">            <span class="keyword">if</span> use_ed2k <span class="keyword">and</span> ed2k_column_names:</span><br><span class="line">                ed2k_column_index = _get_column_index(header, ed2k_column_names)</span><br><span class="line">                <span class="keyword">if</span> ed2k_column_index == -<span class="number">1</span>:</span><br><span class="line">                    logging.error(<span class="string">f&quot;ed2k列名列表 &#x27;<span class="subst">&#123;ed2k_column_names&#125;</span>&#x27; 在 CSV 文件中未找到: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                    use_ed2k = <span class="literal">False</span>  <span class="comment"># 关闭ed2k</span></span><br><span class="line"></span><br><span class="line">            link_tasks = []</span><br><span class="line">            rows = []</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(row) &gt; magnet_column_index <span class="keyword">and</span> row[magnet_column_index]:</span><br><span class="line">                        magnet_link = row[magnet_column_index]</span><br><span class="line">                        link_tasks.append(check_magnet_link(magnet_link, timeout))</span><br><span class="line">                        rows.append(row)  <span class="comment"># 存储行数据</span></span><br><span class="line">                    <span class="keyword">elif</span> use_ed2k <span class="keyword">and</span> <span class="built_in">len</span>(row) &gt; ed2k_column_index <span class="keyword">and</span> row[ed2k_column_index]:</span><br><span class="line">                        ed2k_link = row[ed2k_column_index]</span><br><span class="line">                        link_tasks.append(check_ed2k_emule(ed2k_link, emule_path))</span><br><span class="line">                        rows.append(row)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        logging.warning(<span class="string">f&quot;跳过无效行，链接索引超出范围或为空, 文件:<span class="subst">&#123;file_path&#125;</span>, 行数据: <span class="subst">&#123;row&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    logging.error(<span class="string">f&quot;跳过无效行，处理行数据异常， 文件:<span class="subst">&#123;file_path&#125;</span>, 行数据: <span class="subst">&#123;row&#125;</span>, 异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            results = <span class="keyword">await</span> asyncio.gather(*link_tasks)</span><br><span class="line"></span><br><span class="line">            available_rows = [row <span class="keyword">for</span> row, is_valid <span class="keyword">in</span> <span class="built_in">zip</span>(rows, results) <span class="keyword">if</span> is_valid]</span><br><span class="line">            logging.info(<span class="string">f&quot;CSV 文件处理完毕: <span class="subst">&#123;file_path&#125;</span>， 找到了 <span class="subst">&#123;<span class="built_in">len</span>(available_rows)&#125;</span> 个可用的链接&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> header <span class="keyword">and</span> available_rows:  <span class="comment"># 将header 插入</span></span><br><span class="line">                available_rows.insert(<span class="number">0</span>, header)</span><br><span class="line">            <span class="keyword">return</span> available_rows</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理CSV文件异常：<span class="subst">&#123;file_path&#125;</span>, 异常：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">directory, magnet_column_names, output_directory, ed2k_column_names=<span class="literal">None</span>, emule_path=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">               use_ed2k=<span class="literal">False</span>, timeout=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主函数，遍历目录中的 CSV 文件，验证磁力链接，并将结果按文件名输出到新的 CSV 文件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(directory):</span><br><span class="line">        logging.error(<span class="string">f&quot;指定的目录不存在: <span class="subst">&#123;directory&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_directory):</span><br><span class="line">        os.makedirs(output_directory)</span><br><span class="line"></span><br><span class="line">    csv_tasks = []</span><br><span class="line">    <span class="keyword">for</span> dirpath, _, filenames <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            <span class="keyword">if</span> filename.lower().endswith(<span class="string">&#x27;.csv&#x27;</span>):</span><br><span class="line">                file_path = os.path.join(dirpath, filename)</span><br><span class="line">                csv_tasks.append(</span><br><span class="line">                    process_csv_file(file_path, magnet_column_names, ed2k_column_names, emule_path, use_ed2k, timeout))</span><br><span class="line"></span><br><span class="line">    results = <span class="keyword">await</span> asyncio.gather(*csv_tasks)</span><br><span class="line"></span><br><span class="line">    csv_files = []</span><br><span class="line">    <span class="keyword">for</span> dirpath, _, filenames <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            <span class="keyword">if</span> filename.lower().endswith(<span class="string">&#x27;.csv&#x27;</span>):</span><br><span class="line">                csv_files.append(os.path.join(dirpath, filename))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> filename, available_rows <span class="keyword">in</span> <span class="built_in">zip</span>(</span><br><span class="line">            csv_files, results):</span><br><span class="line"></span><br><span class="line">        output_file_path = os.path.join(output_directory, os.path.relpath(filename, directory))  <span class="comment"># 创建相对路径，保留目录结构</span></span><br><span class="line">        os.makedirs(os.path.dirname(output_file_path), exist_ok=<span class="literal">True</span>)  <span class="comment"># 创建输出目录</span></span><br><span class="line">        logging.info(</span><br><span class="line">            <span class="string">f&quot;开始写入 <span class="subst">&#123;<span class="built_in">len</span>(available_rows) - <span class="number">1</span> <span class="keyword">if</span> available_rows <span class="keyword">else</span> <span class="number">0</span>&#125;</span> 条可用链接到文件：<span class="subst">&#123;output_file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> available_rows:</span><br><span class="line">            logging.info(<span class="string">f&quot;CSV文件 <span class="subst">&#123;filename&#125;</span> 中没有可用的链接&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 如果当前文件没有有效链接，则跳过</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(output_file_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                writer = csv.writer(f)</span><br><span class="line">                writer.writerows(available_rows)  <span class="comment"># 写入所有行</span></span><br><span class="line">            logging.info(<span class="string">f&quot;成功写入可用链接到文件: <span class="subst">&#123;output_file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">f&quot;写入文件 <span class="subst">&#123;output_file_path&#125;</span> 失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    target_directory = <span class="string">r&quot;D:\pythonProject\audio_record_server\src\utils\data\man_link&quot;</span>  <span class="comment"># 指定 CSV 文件所在的目录</span></span><br><span class="line">    magnet_column_names = [<span class="string">&quot;磁力链&quot;</span>, <span class="string">&quot;磁力链接&quot;</span>]  <span class="comment"># 指定磁力链所在的列名列表</span></span><br><span class="line">    ed2k_column_names = [<span class="string">&quot;磁力链&quot;</span>, <span class="string">&quot;磁力链接&quot;</span>]  <span class="comment"># 指定ed2k 所在的列名列表</span></span><br><span class="line">    output_dir = <span class="string">r&quot;D:\pythonProject\audio_record_server\src\utils\data&quot;</span>  <span class="comment"># 指定输出目录</span></span><br><span class="line">    link_timeout = <span class="number">5</span>  <span class="comment"># 设置连接超时时间，秒</span></span><br><span class="line">    emule_path = <span class="string">r&quot;C:\Program Files (x86)\eMule\emule.exe&quot;</span>  <span class="comment"># 配置 eMule 可执行文件路径 (根据你的安装路径修改)</span></span><br><span class="line">    use_ed2k = <span class="literal">True</span>  <span class="comment"># 是否启用ed2k检测</span></span><br><span class="line"></span><br><span class="line">    asyncio.run(</span><br><span class="line">        main(target_directory, magnet_column_names, output_dir, ed2k_column_names, emule_path, use_ed2k, link_timeout))</span><br></pre></td></tr></table></figure><h2 id="检测速率等指标实现">检测速率等指标实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2025/1/22 11:02</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(czq)</span></span><br><span class="line"><span class="string">Version:  V 0.1</span></span><br><span class="line"><span class="string">File:     link_benck_mark.py</span></span><br><span class="line"><span class="string">Describe: Write during the python at zgxmt, Github link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">link: https://www.fosshub.com/qBittorrent.html#</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> qbittorrentapi <span class="keyword">import</span> Client, LoginFailed</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">check_tracker</span>(<span class="params">tracker_url, timeout=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;异步检查单个 Tracker 是否可用&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parsed_url = urllib.parse.urlparse(tracker_url)</span><br><span class="line">        <span class="keyword">if</span> parsed_url.scheme <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;udp&#x27;</span>, <span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>):</span><br><span class="line">            logging.warning(<span class="string">f&quot;跳过不支持的协议: <span class="subst">&#123;parsed_url.scheme&#125;</span> in <span class="subst">&#123;tracker_url&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> parsed_url.scheme <span class="keyword">in</span> (<span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 对于 http和 https 协议不做测试直接返回成功。</span></span><br><span class="line"></span><br><span class="line">        host = parsed_url.hostname</span><br><span class="line">        port = parsed_url.port <span class="keyword">or</span> <span class="number">80</span>  <span class="comment"># udp默认53， http默认80</span></span><br><span class="line"></span><br><span class="line">        loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">f&quot;尝试连接 tracker: <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>  协议: <span class="subst">&#123;parsed_url.scheme&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        future = loop.create_connection(</span><br><span class="line">            <span class="keyword">lambda</span>: asyncio.Protocol(),</span><br><span class="line">            host,</span><br><span class="line">            port</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用asyncio.wait_for设置超时</span></span><br><span class="line">        connection_tuple = <span class="keyword">await</span> asyncio.wait_for(future, timeout)</span><br><span class="line">        transport, protocol = connection_tuple</span><br><span class="line">        transport.close()</span><br><span class="line">        logging.info(<span class="string">f&quot;Tracker <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span> 连接成功&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> asyncio.TimeoutError:</span><br><span class="line">        logging.warning(<span class="string">f&quot;Tracker <span class="subst">&#123;tracker_url&#125;</span> 连接超时&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">        logging.warning(<span class="string">f&quot;Tracker <span class="subst">&#123;tracker_url&#125;</span> 连接错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理 Tracker <span class="subst">&#123;tracker_url&#125;</span> 异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">check_magnet_link</span>(<span class="params">magnet_link, timeout=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查磁力链接是否可用&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parsed_magnet = urllib.parse.urlparse(magnet_link)</span><br><span class="line">        query_params = urllib.parse.parse_qs(parsed_magnet.query)</span><br><span class="line"></span><br><span class="line">        trackers = query_params.get(<span class="string">&#x27;tr&#x27;</span>, [])  <span class="comment"># 获取所有 trackers</span></span><br><span class="line">        info_hash = query_params.get(<span class="string">&#x27;xt&#x27;</span>, [])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> trackers <span class="keyword">or</span> <span class="keyword">not</span> info_hash:</span><br><span class="line">            logging.warning(<span class="string">f&quot;磁力链不完整: <span class="subst">&#123;magnet_link&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        info_hash = info_hash[<span class="number">0</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">2</span>] <span class="keyword">if</span> info_hash[<span class="number">0</span>].startswith(<span class="string">&quot;urn:btih:&quot;</span>) <span class="keyword">else</span> info_hash[<span class="number">0</span>]</span><br><span class="line">        logging.info(<span class="string">f&quot;开始检查磁力链: <span class="subst">&#123;magnet_link&#125;</span> ,info_hash: <span class="subst">&#123;info_hash&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        tracker_tasks = [check_tracker(tracker, timeout) <span class="keyword">for</span> tracker <span class="keyword">in</span> trackers]</span><br><span class="line"></span><br><span class="line">        results = <span class="keyword">await</span> asyncio.gather(*tracker_tasks)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(results):</span><br><span class="line">            logging.info(<span class="string">f&quot;磁力链 <span class="subst">&#123;magnet_link&#125;</span> 有效&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.info(<span class="string">f&quot;磁力链 <span class="subst">&#123;magnet_link&#125;</span> 无效&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理磁力链 <span class="subst">&#123;magnet_link&#125;</span> 异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_check_ed2k_emule</span>(<span class="params">ed2k_link, emule_path, timeout=<span class="number">20</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 同步的 eMule 命令行检测函数，不应直接在asyncio线程调用 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 1. 添加 ed2k 链接</span></span><br><span class="line">        add_cmd = [emule_path, <span class="string">&quot;-add&quot;</span>, ed2k_link]</span><br><span class="line">        add_process = subprocess.run(add_cmd, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, check=<span class="literal">False</span>, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> add_process.returncode != <span class="number">0</span>:</span><br><span class="line">            logging.warning(<span class="string">f&quot;添加 ed2k 链接失败：<span class="subst">&#123;add_process.stderr.strip()&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 2. 获取下载状态</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="keyword">while</span> time.time() - start_time &lt; timeout:</span><br><span class="line">            status_cmd = [emule_path, <span class="string">&quot;-show&quot;</span>, <span class="string">&quot;-complete&quot;</span>]  <span class="comment"># show all downloading files</span></span><br><span class="line">            status_process = subprocess.run(status_cmd, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, check=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> status_process.returncode == <span class="number">0</span>:</span><br><span class="line">                output = status_process.stdout</span><br><span class="line">                <span class="comment"># 正则匹配 ed2k 链接 或文件名</span></span><br><span class="line">                pattern = re.<span class="built_in">compile</span>(re.escape(os.path.basename(ed2k_link)) <span class="keyword">or</span> re.escape(ed2k_link), re.IGNORECASE)</span><br><span class="line">                <span class="keyword">if</span> pattern.search(output):</span><br><span class="line">                    <span class="comment"># 状态匹配，如果状态存在则可能可用</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;Downloading&quot;</span> <span class="keyword">in</span> output <span class="keyword">or</span> <span class="string">&quot;Connecting&quot;</span> <span class="keyword">in</span> output <span class="keyword">or</span> <span class="string">&quot;Queued&quot;</span> <span class="keyword">in</span> output <span class="keyword">or</span> <span class="string">&quot;Waiting&quot;</span> <span class="keyword">in</span> output:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        logging.warning(<span class="string">f&quot;eMule 链接状态不在预期状态：<span class="subst">&#123;output&#125;</span>&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    logging.warning(<span class="string">f&quot;eMule 未找到指定链接：<span class="subst">&#123;output&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.warning(<span class="string">f&quot;获取 eMule 状态失败：<span class="subst">&#123;status_process.stderr.strip()&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;检查 ed2k 链接时发生异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">check_ed2k_emule</span>(<span class="params">ed2k_link, emule_path, timeout=<span class="number">20</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;异步的 eMule 命令行检测函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="keyword">await</span> asyncio.to_thread(_check_ed2k_emule, ed2k_link, emule_path, timeout)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;调用异步 eMule 检测函数发生异常:<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_bittorrent_info</span>(<span class="params">magnet_link, qbt_host=<span class="string">&#x27;127.0.0.1&#x27;</span>, qbt_port=<span class="number">8080</span>, qbt_user=<span class="string">&#x27;admin&#x27;</span>,</span></span><br><span class="line"><span class="params">                              qbt_pass=<span class="string">&#x27;adminadmin&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用 qBittorrent API 获取磁力链接信息 (示例)。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        client = Client(host=qbt_host, port=qbt_port, username=qbt_user, password=qbt_pass)</span><br><span class="line">        client.auth_log_in()  <span class="comment"># 登录客户端</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加磁力链接</span></span><br><span class="line">        torrent = client.torrents_add(magnet_link)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> torrent:</span><br><span class="line">            logging.info(<span class="string">f&quot;成功添加磁力链到 qBittorrent: <span class="subst">&#123;magnet_link&#125;</span>&quot;</span>)</span><br><span class="line">            start_time = time.time()</span><br><span class="line">            <span class="keyword">while</span> time.time() - start_time &lt; <span class="number">30</span>:  <span class="comment"># 最长等待30秒</span></span><br><span class="line">                <span class="comment"># 等待种子添加完成</span></span><br><span class="line">                torrent = client.torrents_info(torrent_hashes=torrent.<span class="built_in">hash</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> torrent.state <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&quot;stalledDL&quot;</span>, <span class="string">&quot;queuedDL&quot;</span>, <span class="string">&quot;checkingDL&quot;</span>):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 防止CPU过高</span></span><br><span class="line">            <span class="keyword">if</span> torrent.state <span class="keyword">in</span> (<span class="string">&quot;stalledDL&quot;</span>, <span class="string">&quot;queuedDL&quot;</span>, <span class="string">&quot;checkingDL&quot;</span>):</span><br><span class="line">                logging.warning(<span class="string">f&quot;qBittorrent 添加磁力链后超时: <span class="subst">&#123;magnet_link&#125;</span> ,状态:<span class="subst">&#123;torrent.state&#125;</span>&quot;</span>)</span><br><span class="line">                client.torrents_delete(delete_files=<span class="literal">True</span>, torrent_hashes=torrent.<span class="built_in">hash</span>)</span><br><span class="line">                <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">            seeders = torrent.num_seeds</span><br><span class="line">            peers = torrent.num_peers</span><br><span class="line">            progress = torrent.progress</span><br><span class="line">            down_speed = torrent.dlspeed</span><br><span class="line">            up_speed = torrent.upspeed</span><br><span class="line">            <span class="comment"># 删除torrent</span></span><br><span class="line">            client.torrents_delete(delete_files=<span class="literal">True</span>, torrent_hashes=torrent.<span class="built_in">hash</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">&quot;seeders&quot;</span>: seeders,</span><br><span class="line">                <span class="string">&quot;peers&quot;</span>: peers,</span><br><span class="line">                <span class="string">&quot;progress&quot;</span>: progress,</span><br><span class="line">                <span class="string">&quot;down_speed&quot;</span>: down_speed,</span><br><span class="line">                <span class="string">&quot;up_speed&quot;</span>: up_speed,</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.warning(<span class="string">f&quot;qBittorrent 添加磁力链失败: <span class="subst">&#123;magnet_link&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">except</span> LoginFailed:</span><br><span class="line">        logging.error(<span class="string">f&quot;qBittorrent登录失败，请检查地址，用户名和密码：&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;获取 BitTorrent 信息时发生异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_ed2k_info</span>(<span class="params">ed2k_link, timeout=<span class="number">20</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    尝试解析 ed2k 链接，提取文件名，大小。</span></span><br><span class="line"><span class="string">    注意：这仅仅是解析链接信息，无法获取实时下载状态。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ed2k_link:</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">        file_name = <span class="literal">None</span></span><br><span class="line">        file_size = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&#x27;ed2k:\/\/\|file\|(.+?)\|(\d+)\|.+&#x27;</span>, ed2k_link)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            file_name = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">            file_size = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;file_name&quot;</span>: file_name,</span><br><span class="line">            <span class="string">&quot;file_size&quot;</span>: file_size</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;解析 ed2k 链接失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_get_column_index</span>(<span class="params">header, column_names</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 查找第一个匹配的列名，返回索引，否则返回-1 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> header:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> column_names:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> header.index(name)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">process_csv_file</span>(<span class="params">file_path, magnet_column_names, ed2k_column_names=<span class="literal">None</span>, emule_path=<span class="literal">None</span>, use_ed2k=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">                           qbt_host=<span class="string">&#x27;127.0.0.1&#x27;</span>, qbt_port=<span class="number">8080</span>, qbt_user=<span class="string">&#x27;admin&#x27;</span>,</span></span><br><span class="line"><span class="params">                           qbt_pass=<span class="string">&#x27;adminadmin&#x27;</span>, timeout=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理单个 CSV 文件，并验证其中的磁力链接和ed2k链接, 返回可用的磁力链接列表, 保留原始数据&quot;&quot;&quot;</span></span><br><span class="line">    logging.info(<span class="string">f&quot;开始处理 CSV 文件: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">    available_rows = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">            reader = csv.reader(csvfile)</span><br><span class="line">            header = <span class="built_in">next</span>(reader, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> header:</span><br><span class="line">                logging.warning(<span class="string">f&quot;CSV文件为空: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> available_rows</span><br><span class="line"></span><br><span class="line">            magnet_column_index = _get_column_index(header, magnet_column_names)</span><br><span class="line">            <span class="keyword">if</span> magnet_column_index == -<span class="number">1</span>:</span><br><span class="line">                logging.error(<span class="string">f&quot;磁力链列名列表 &#x27;<span class="subst">&#123;magnet_column_names&#125;</span>&#x27; 在 CSV 文件中未找到: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> available_rows</span><br><span class="line">            ed2k_column_index = -<span class="number">1</span>  <span class="comment"># 默认值</span></span><br><span class="line">            <span class="keyword">if</span> use_ed2k <span class="keyword">and</span> ed2k_column_names:</span><br><span class="line">                ed2k_column_index = _get_column_index(header, ed2k_column_names)</span><br><span class="line">                <span class="keyword">if</span> ed2k_column_index == -<span class="number">1</span>:</span><br><span class="line">                    logging.error(<span class="string">f&quot;ed2k列名列表 &#x27;<span class="subst">&#123;ed2k_column_names&#125;</span>&#x27; 在 CSV 文件中未找到: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                    use_ed2k = <span class="literal">False</span>  <span class="comment"># 关闭ed2k</span></span><br><span class="line"></span><br><span class="line">            link_tasks = []</span><br><span class="line">            rows = []</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(row) &gt; magnet_column_index <span class="keyword">and</span> row[magnet_column_index]:</span><br><span class="line">                        magnet_link = row[magnet_column_index]</span><br><span class="line">                        link_tasks.append(check_magnet_link(magnet_link, timeout))</span><br><span class="line">                        rows.append(row)  <span class="comment"># 存储行数据</span></span><br><span class="line">                    <span class="keyword">elif</span> use_ed2k <span class="keyword">and</span> <span class="built_in">len</span>(row) &gt; ed2k_column_index <span class="keyword">and</span> row[ed2k_column_index]:</span><br><span class="line">                        ed2k_link = row[ed2k_column_index]</span><br><span class="line">                        link_tasks.append(check_ed2k_emule(ed2k_link, emule_path))</span><br><span class="line">                        rows.append(row)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        logging.warning(<span class="string">f&quot;跳过无效行，链接索引超出范围或为空, 文件:<span class="subst">&#123;file_path&#125;</span>, 行数据: <span class="subst">&#123;row&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    logging.error(<span class="string">f&quot;跳过无效行，处理行数据异常， 文件:<span class="subst">&#123;file_path&#125;</span>, 行数据: <span class="subst">&#123;row&#125;</span>, 异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            results = <span class="keyword">await</span> asyncio.gather(*link_tasks)</span><br><span class="line"></span><br><span class="line">            available_rows = [row <span class="keyword">for</span> row, is_valid <span class="keyword">in</span> <span class="built_in">zip</span>(rows, results) <span class="keyword">if</span> is_valid]</span><br><span class="line">            logging.info(<span class="string">f&quot;CSV 文件处理完毕: <span class="subst">&#123;file_path&#125;</span>， 找到了 <span class="subst">&#123;<span class="built_in">len</span>(available_rows)&#125;</span> 个可用的链接&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 添加额外信息</span></span><br><span class="line">            available_rows_with_info = []</span><br><span class="line">            <span class="keyword">if</span> header <span class="keyword">and</span> available_rows:</span><br><span class="line">                available_rows_with_info.append(</span><br><span class="line">                    header + [<span class="string">&quot;磁力链种子数&quot;</span>, <span class="string">&quot;磁力链节点数&quot;</span>, <span class="string">&quot;磁力链下载进度&quot;</span>, <span class="string">&quot;磁力链下载速度&quot;</span>, <span class="string">&quot;磁力链上传速度&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;ed2k文件名&quot;</span>, <span class="string">&quot;ed2k文件大小&quot;</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> row, is_valid <span class="keyword">in</span> <span class="built_in">zip</span>(rows, results):</span><br><span class="line">                <span class="keyword">if</span> is_valid:</span><br><span class="line">                    extra_info = [<span class="string">&quot;N/A&quot;</span>, <span class="string">&quot;N/A&quot;</span>, <span class="string">&quot;N/A&quot;</span>, <span class="string">&quot;N/A&quot;</span>, <span class="string">&quot;N/A&quot;</span>, <span class="string">&quot;N/A&quot;</span>, <span class="string">&quot;N/A&quot;</span>]</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(row) &gt; magnet_column_index <span class="keyword">and</span> row[magnet_column_index]:</span><br><span class="line">                        magnet_link = row[magnet_column_index]</span><br><span class="line">                        torrent_info = <span class="keyword">await</span> get_bittorrent_info(magnet_link, qbt_host, qbt_port, qbt_user, qbt_pass)</span><br><span class="line">                        <span class="keyword">if</span> torrent_info:</span><br><span class="line">                            extra_info[<span class="number">0</span>] = torrent_info.get(<span class="string">&#x27;seeders&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>)</span><br><span class="line">                            extra_info[<span class="number">1</span>] = torrent_info.get(<span class="string">&#x27;peers&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>)</span><br><span class="line">                            extra_info[<span class="number">2</span>] = <span class="string">f&quot;<span class="subst">&#123;torrent_info.get(<span class="string">&#x27;progress&#x27;</span>, <span class="number">0</span>) * <span class="number">100</span>:<span class="number">.2</span>f&#125;</span>%&quot;</span></span><br><span class="line">                            extra_info[<span class="number">3</span>] = <span class="string">f&quot;<span class="subst">&#123;torrent_info.get(<span class="string">&#x27;down_speed&#x27;</span>, <span class="number">0</span>) / <span class="number">1024</span>:<span class="number">.2</span>f&#125;</span> KB/s&quot;</span></span><br><span class="line">                            extra_info[<span class="number">4</span>] = <span class="string">f&quot;<span class="subst">&#123;torrent_info.get(<span class="string">&#x27;up_speed&#x27;</span>, <span class="number">0</span>) / <span class="number">1024</span>:<span class="number">.2</span>f&#125;</span> KB/s&quot;</span></span><br><span class="line">                    <span class="keyword">if</span> use_ed2k <span class="keyword">and</span> <span class="built_in">len</span>(row) &gt; ed2k_column_index <span class="keyword">and</span> row[ed2k_column_index]:</span><br><span class="line">                        ed2k_link = row[ed2k_column_index]</span><br><span class="line">                        ed2k_info = <span class="keyword">await</span> get_ed2k_info(ed2k_link)</span><br><span class="line">                        extra_info[<span class="number">5</span>] = ed2k_info.get(<span class="string">&quot;file_name&quot;</span>, <span class="string">&#x27;N/A&#x27;</span>)</span><br><span class="line">                        extra_info[<span class="number">6</span>] = ed2k_info.get(<span class="string">&quot;file_size&quot;</span>, <span class="string">&#x27;N/A&#x27;</span>)</span><br><span class="line">                    available_rows_with_info.append(row + extra_info)</span><br><span class="line">            <span class="keyword">return</span> available_rows_with_info</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理CSV文件异常：<span class="subst">&#123;file_path&#125;</span>, 异常：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">directory, magnet_column_names, output_directory, ed2k_column_names=<span class="literal">None</span>, emule_path=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">               use_ed2k=<span class="literal">False</span>, qbt_host=<span class="string">&#x27;127.0.0.1&#x27;</span>, qbt_port=<span class="number">8080</span>, qbt_user=<span class="string">&#x27;admin&#x27;</span>,</span></span><br><span class="line"><span class="params">               qbt_pass=<span class="string">&#x27;adminadmin&#x27;</span>, timeout=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主函数，遍历目录中的 CSV 文件，验证磁力链接，并将结果按文件名输出到新的 CSV 文件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(directory):</span><br><span class="line">        logging.error(<span class="string">f&quot;指定的目录不存在: <span class="subst">&#123;directory&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_directory):</span><br><span class="line">        os.makedirs(output_directory)</span><br><span class="line"></span><br><span class="line">    csv_tasks = []</span><br><span class="line">    <span class="keyword">for</span> dirpath, _, filenames <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            <span class="keyword">if</span> filename.lower().endswith(<span class="string">&#x27;.csv&#x27;</span>):</span><br><span class="line">                file_path = os.path.join(dirpath, filename)</span><br><span class="line">                csv_tasks.append(</span><br><span class="line">                    process_csv_file(file_path, magnet_column_names, ed2k_column_names, emule_path, use_ed2k, qbt_host,</span><br><span class="line">                                     qbt_port, qbt_user, qbt_pass, timeout))</span><br><span class="line"></span><br><span class="line">    results = <span class="keyword">await</span> asyncio.gather(*csv_tasks)</span><br><span class="line"></span><br><span class="line">    csv_files = []</span><br><span class="line">    <span class="keyword">for</span> dirpath, _, filenames <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            <span class="keyword">if</span> filename.lower().endswith(<span class="string">&#x27;.csv&#x27;</span>):</span><br><span class="line">                csv_files.append(os.path.join(dirpath, filename))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> filename, available_rows <span class="keyword">in</span> <span class="built_in">zip</span>(</span><br><span class="line">            csv_files, results):</span><br><span class="line"></span><br><span class="line">        output_file_path = os.path.join(output_directory, os.path.relpath(filename, directory))  <span class="comment"># 创建相对路径，保留目录结构</span></span><br><span class="line">        os.makedirs(os.path.dirname(output_file_path), exist_ok=<span class="literal">True</span>)  <span class="comment"># 创建输出目录</span></span><br><span class="line">        logging.info(</span><br><span class="line">            <span class="string">f&quot;开始写入 <span class="subst">&#123;<span class="built_in">len</span>(available_rows) - <span class="number">1</span> <span class="keyword">if</span> available_rows <span class="keyword">else</span> <span class="number">0</span>&#125;</span> 条可用链接到文件：<span class="subst">&#123;output_file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> available_rows:</span><br><span class="line">            logging.info(<span class="string">f&quot;CSV文件 <span class="subst">&#123;filename&#125;</span> 中没有可用的链接&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 如果当前文件没有有效链接，则跳过</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(output_file_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                writer = csv.writer(f)</span><br><span class="line">                writer.writerows(available_rows)  <span class="comment"># 写入所有行</span></span><br><span class="line">            logging.info(<span class="string">f&quot;成功写入可用链接到文件: <span class="subst">&#123;output_file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">f&quot;写入文件 <span class="subst">&#123;output_file_path&#125;</span> 失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    target_directory = <span class="string">r&quot;D:\pythonProject\audio_record_server\src\utils\data\man_link&quot;</span>  <span class="comment"># 指定 CSV 文件所在的目录</span></span><br><span class="line">    magnet_column_names = [<span class="string">&quot;磁力链&quot;</span>, <span class="string">&quot;磁力链接&quot;</span>]  <span class="comment"># 指定磁力链所在的列名列表</span></span><br><span class="line">    ed2k_column_names = [<span class="string">&quot;磁力链&quot;</span>, <span class="string">&quot;磁力链接&quot;</span>]  <span class="comment"># 指定ed2k 所在的列名列表</span></span><br><span class="line">    output_dir = <span class="string">r&quot;D:\pythonProject\audio_record_server\src\utils\data&quot;</span>  <span class="comment"># 指定输出目录</span></span><br><span class="line">    link_timeout = <span class="number">5</span>  <span class="comment"># 设置连接超时时间，秒</span></span><br><span class="line">    emule_path = <span class="string">r&quot;C:\Program Files (x86)\eMule\emule.exe&quot;</span>  <span class="comment"># 配置 eMule 可执行文件路径 (根据你的安装路径修改)</span></span><br><span class="line">    use_ed2k = <span class="literal">True</span>  <span class="comment"># 是否启用ed2k检测</span></span><br><span class="line">    qbt_host = <span class="string">&#x27;127.0.0.1&#x27;</span>  <span class="comment"># qBittorrent WebUI 地址</span></span><br><span class="line">    qbt_port = <span class="number">8080</span>  <span class="comment"># qBittorrent WebUI 端口</span></span><br><span class="line">    qbt_user = <span class="string">&#x27;admin&#x27;</span>  <span class="comment"># qBittorrent WebUI 用户名</span></span><br><span class="line">    qbt_pass = <span class="string">&#x27;adminadmin&#x27;</span>  <span class="comment"># qBittorrent WebUI 密码</span></span><br><span class="line"></span><br><span class="line">    asyncio.run(</span><br><span class="line">        main(target_directory, magnet_column_names, output_dir, ed2k_column_names, emule_path, use_ed2k, qbt_host,</span><br><span class="line">             qbt_port, qbt_user, qbt_pass, link_timeout))</span><br></pre></td></tr></table></figure><h2 id="接入迅雷-自动化下载">接入迅雷 自动化下载</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">download_with_thunder</span>(<span class="params">thunder_path, link, output_path=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用迅雷下载链接&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> thunder_path:</span><br><span class="line">        logging.warning(<span class="string">&quot;迅雷路径未找到，无法下载&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cmd = [thunder_path, link]  <span class="comment"># 最基础的下载命令</span></span><br><span class="line">        <span class="keyword">if</span> output_path:</span><br><span class="line">            cmd.insert(<span class="number">1</span>, <span class="string">f&quot;--output=<span class="subst">&#123;shlex.quote(output_path)&#125;</span>&quot;</span>)</span><br><span class="line">        subprocess.Popen(cmd, creationflags=subprocess.CREATE_NO_WINDOW)</span><br><span class="line">        logging.info(<span class="string">f&quot;已添加迅雷下载任务: <span class="subst">&#123;link&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;迅雷下载失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="磁力链中关键信息提取">磁力链中关键信息提取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2025/1/22 14:11</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(czq)</span></span><br><span class="line"><span class="string">Version:  V 0.1</span></span><br><span class="line"><span class="string">File:     bit_link_msg_split.py</span></span><br><span class="line"><span class="string">Describe: Write during the python at zgxmt, Github link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> qbittorrentapi <span class="keyword">import</span> Client, LoginFailed</span><br><span class="line"><span class="keyword">from</span> qbittorrentapi.torrents <span class="keyword">import</span> TorrentDictionary</span><br><span class="line"><span class="keyword">import</span> time  <span class="comment"># 导入time模块</span></span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">open_magnet_link</span>(<span class="params">magnet_link, qbt_host=<span class="string">&#x27;127.0.0.1&#x27;</span>, qbt_port=<span class="number">8080</span>, qbt_user=<span class="string">&#x27;admin&#x27;</span>, qbt_pass=<span class="string">&#x27;adminadmin&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用指定的程序打开磁力链接并提取信息。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">        client = Client(host=qbt_host, port=qbt_port, username=qbt_user, password=qbt_pass)</span><br><span class="line">        client.auth_log_in()</span><br><span class="line"></span><br><span class="line">        torrent = client.torrents_add(magnet_link)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(torrent, TorrentDictionary):</span><br><span class="line">            torrent_hash = torrent.<span class="built_in">hash</span></span><br><span class="line">            logging.info(<span class="string">f&quot;成功添加磁力链到 qBittorrent: <span class="subst">&#123;magnet_link&#125;</span>, torrent hash:<span class="subst">&#123;torrent_hash&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(torrent, <span class="built_in">str</span>):</span><br><span class="line">            torrent_hash = torrent</span><br><span class="line">            logging.warning(<span class="string">f&quot;添加磁力链返回了字符串，尝试使用hash:<span class="subst">&#123;magnet_link&#125;</span>, torrent hash:<span class="subst">&#123;torrent_hash&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> torrent <span class="keyword">in</span> (<span class="string">&quot;Fails&quot;</span>, <span class="string">&quot;Ok&quot;</span>):</span><br><span class="line">                logging.error(<span class="string">f&quot;添加磁力链失败，返回了Fails或者Ok字符串：<span class="subst">&#123;magnet_link&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.error(<span class="string">f&quot;添加磁力链返回未知对象：<span class="subst">&#123;<span class="built_in">type</span>(torrent)&#125;</span>，<span class="subst">&#123;torrent&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> torrent_hash:</span><br><span class="line"></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            <span class="keyword">while</span> time.time() - start_time &lt; <span class="number">30</span>:  <span class="comment"># 最长等待30秒</span></span><br><span class="line">                <span class="comment"># 等待种子添加完成</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    torrent = client.torrents_info(torrent_hashes=torrent_hash)[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">if</span> torrent.state <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&quot;stalledDL&quot;</span>, <span class="string">&quot;queuedDL&quot;</span>, <span class="string">&quot;checkingDL&quot;</span>):</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    logging.error(<span class="string">f&quot;获取 torrent 信息失败，<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                    client.torrents_delete(delete_files=<span class="literal">True</span>, torrent_hashes=torrent_hash)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 防止CPU过高</span></span><br><span class="line">            <span class="keyword">if</span> torrent.state <span class="keyword">in</span> (<span class="string">&quot;stalledDL&quot;</span>, <span class="string">&quot;queuedDL&quot;</span>, <span class="string">&quot;checkingDL&quot;</span>):</span><br><span class="line">                logging.warning(<span class="string">f&quot;qBittorrent 添加磁力链后超时: <span class="subst">&#123;magnet_link&#125;</span> ,状态:<span class="subst">&#123;torrent.state&#125;</span>&quot;</span>)</span><br><span class="line">                client.torrents_delete(delete_files=<span class="literal">True</span>, torrent_hashes=torrent_hash)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            name = torrent.name</span><br><span class="line">            size = torrent.size</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 解析名称</span></span><br><span class="line">            pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;^(.*?)\.S(\d+)(?:E(\d+))?.*?(?:(\d&#123;3,4&#125;p))?.*$&quot;</span>)</span><br><span class="line">            <span class="keyword">match</span> = pattern.<span class="keyword">match</span>(name)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                title = <span class="keyword">match</span>.group(<span class="number">1</span>).replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot; &quot;</span>)  <span class="comment"># 替换点号为空格</span></span><br><span class="line">                season = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">2</span>)) <span class="keyword">if</span> <span class="keyword">match</span>.group(<span class="number">2</span>) <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">                episode = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">3</span>)) <span class="keyword">if</span> <span class="keyword">match</span>.group(<span class="number">3</span>) <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">                resolution = <span class="keyword">match</span>.group(<span class="number">4</span>) <span class="keyword">if</span> <span class="keyword">match</span>.group(<span class="number">4</span>) <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                title = name</span><br><span class="line">                season = <span class="literal">None</span></span><br><span class="line">                episode = <span class="literal">None</span></span><br><span class="line">                resolution = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># 删除torrent</span></span><br><span class="line">            client.torrents_delete(delete_files=<span class="literal">True</span>, torrent_hashes=torrent_hash)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">&quot;title&quot;</span>: title.strip(),</span><br><span class="line">                <span class="string">&quot;season&quot;</span>: season,</span><br><span class="line">                <span class="string">&quot;episode&quot;</span>: episode,</span><br><span class="line">                <span class="string">&quot;resolution&quot;</span>: resolution,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">                <span class="string">&quot;size&quot;</span>: size</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.warning(<span class="string">f&quot;qBittorrent 添加磁力链失败，返回hash为空 : <span class="subst">&#123;magnet_link&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> LoginFailed:</span><br><span class="line">        logging.error(<span class="string">f&quot;qBittorrent登录失败，请检查地址，用户名和密码：&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;使用 qBittorrent 打开磁力链失败，<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_magnet_info_from_string</span>(<span class="params">magnet_link</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从磁力链接本身解析信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parsed_magnet = urllib.parse.urlparse(magnet_link)</span><br><span class="line">        query_params = urllib.parse.parse_qs(parsed_magnet.query)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;dn&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> query_params:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        file_name = query_params[<span class="string">&#x27;dn&#x27;</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 正则表达式</span></span><br><span class="line">        pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;^(.*?)\.S(\d+)(?:E(\d+))?.*?(?:(\d&#123;3,4&#125;p))?.*$&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">match</span> = pattern.<span class="keyword">match</span>(file_name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            title = <span class="keyword">match</span>.group(<span class="number">1</span>).replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot; &quot;</span>)  <span class="comment"># 替换点号为空格</span></span><br><span class="line">            season = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">2</span>)) <span class="keyword">if</span> <span class="keyword">match</span>.group(<span class="number">2</span>) <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            episode = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">3</span>)) <span class="keyword">if</span> <span class="keyword">match</span>.group(<span class="number">3</span>) <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            resolution = <span class="keyword">match</span>.group(<span class="number">4</span>) <span class="keyword">if</span> <span class="keyword">match</span>.group(<span class="number">4</span>) <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">&quot;title&quot;</span>: title.strip(),</span><br><span class="line">                <span class="string">&quot;season&quot;</span>: season,</span><br><span class="line">                <span class="string">&quot;episode&quot;</span>: episode,</span><br><span class="line">                <span class="string">&quot;resolution&quot;</span>: resolution,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: file_name,</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;解析磁力链接异常：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    magnet_link = <span class="string">&quot;magnet:?xt=urn:btih:362f3486e3ac1df5844305e90fd5cdae01f5ac0c&amp;tr=http://tr.cili001.com:8070/announce&amp;tr=udp://p4p.arenabg.com:1337&amp;tr=udp://tracker.opentrackr.org:1337/announce&amp;tr=udp://open.demonii.com:1337&quot;</span></span><br><span class="line">    qbt_host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">    qbt_port = <span class="number">8080</span></span><br><span class="line">    qbt_user = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">    qbt_pass = <span class="string">&#x27;adminadmin&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用 qBittorrent</span></span><br><span class="line">        info_from_qbt = <span class="keyword">await</span> open_magnet_link(magnet_link, qbt_host, qbt_port, qbt_user, qbt_pass)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> info_from_qbt:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;通过 qBittorrent 获取信息:&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  标题: <span class="subst">&#123;info_from_qbt.get(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> info_from_qbt.get(<span class="string">&#x27;season&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  季数: 第 <span class="subst">&#123;info_from_qbt[<span class="string">&#x27;season&#x27;</span>]&#125;</span> 季&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> info_from_qbt.get(<span class="string">&#x27;episode&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  集数: 第 <span class="subst">&#123;info_from_qbt[<span class="string">&#x27;episode&#x27;</span>]&#125;</span> 集&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  清晰度: <span class="subst">&#123;info_from_qbt.get(<span class="string">&#x27;resolution&#x27;</span>, <span class="string">&#x27;未知&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  文件名: <span class="subst">&#123;info_from_qbt.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;未知&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  文件大小: <span class="subst">&#123;info_from_qbt.get(<span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;未知&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            info_from_magnet = extract_magnet_info_from_string(magnet_link)</span><br><span class="line">            <span class="keyword">if</span> info_from_magnet:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;通过解析磁力链接获取信息:&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  标题: <span class="subst">&#123;info_from_magnet.get(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> info_from_magnet.get(<span class="string">&#x27;season&#x27;</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  季数: 第 <span class="subst">&#123;info_from_magnet.get(<span class="string">&#x27;season&#x27;</span>)&#125;</span> 季&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> info_from_magnet.get(<span class="string">&#x27;episode&#x27;</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  集数: 第 <span class="subst">&#123;info_from_magnet.get(<span class="string">&#x27;episode&#x27;</span>)&#125;</span> 集&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  清晰度: <span class="subst">&#123;info_from_magnet.get(<span class="string">&#x27;resolution&#x27;</span>, <span class="string">&#x27;未知&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  文件名: <span class="subst">&#123;info_from_magnet.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;未知&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;无法提取磁力链信息&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;磁力链接与ed2k的自动化检测处理&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;磁力链接与ed2k对比&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;磁力链接下载速度的影响因素 (BitTorrent 协议):&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;st</summary>
      
    
    
    
    
    <category term="python" scheme="https://caozhaoqi.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在ubuntu服务器搭建 NAS</title>
    <link href="https://caozhaoqi.github.io/2025/01/23/ubuntu-nas/"/>
    <id>https://caozhaoqi.github.io/2025/01/23/ubuntu-nas/</id>
    <published>2025-01-23T15:09:02.000Z</published>
    <updated>2025-03-04T09:08:33.943Z</updated>
    
    <content type="html"><![CDATA[<h1>在ubuntu服务器搭建 NAS</h1><h2 id="SMB协议搭建NAS">SMB协议搭建NAS</h2><blockquote><p>通过webmini使用samba可视化搭建nas</p></blockquote><h3 id="磁盘挂载">磁盘挂载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br><span class="line">sudo pvdisplay  # 查看物理卷信息</span><br><span class="line">sudo vgdisplay  # 查看卷组信息</span><br><span class="line">sudo lvdisplay  # 查看逻辑卷信息</span><br><span class="line">sudo lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv</span><br><span class="line">sudo resize2fs /dev/ubuntu-vg/ubuntu-l</span><br><span class="line">df -h /dev/ubuntu-vg/ubuntu-lv</span><br><span class="line">sudo lvdisplay /dev/ubuntu-vg/ubuntu-lv</span><br></pre></td></tr></table></figure><h3 id="webmin">webmin</h3><blockquote><p>Webmin 是一个功能强大的 Web 系统管理工具，提供了丰富的图形化界面，可以配置 Linux 服务器的各个方面</p></blockquote><h4 id="install">install</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.webmin.com/jcameron-key.asc</span><br><span class="line">sudo apt-key add jcameron-key.asc</span><br><span class="line">sudo echo &quot;deb http://download.webmin.com/download/repository sarge contrib&quot; | sudo tee /etc/apt/sources.list.d/webmin.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install webmin</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="proxy">proxy</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">sudo</span> vim ~/.bashrc</span></span><br><span class="line"></span><br><span class="line">export http_proxy=http://192.168.10.65:7890</span><br><span class="line">export https_proxy=https://192.168.10.65:7890</span><br><span class="line">export no_proxy=&quot;localhost,127.0.0.1,*.local&quot;</span><br><span class="line">export all_proxy=socks5://192.168.10.65:7890 # 如果是 socks 代理</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="samba">samba</h3><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install samba</span><br></pre></td></tr></table></figure><ul><li>config</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">workgroup = WORKGROUP        # 设置工作组名称，通常为 WORKGROUP</span><br><span class="line">server string = %h server    # 设置服务器描述</span><br><span class="line">netbios name = nas-server    # 设置服务器 NetBIOS 名称</span><br><span class="line">security = user              # 设置安全模式为用户认证</span><br><span class="line">map to guest = bad user      # 拒绝匿名用户访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[shared]                       # 设置共享名称</span><br><span class="line">path = /mnt/nas                # 设置共享目录路径</span><br><span class="line">valid users = user1,user2       # 设置允许访问的用户列表</span><br><span class="line">read only = no                 # 允许读写访问</span><br><span class="line">browseable = yes               # 允许在网络中浏览</span><br><span class="line">guest ok = no                 # 禁止匿名访问</span><br><span class="line">force user = root              # 用 root 身份操作</span><br><span class="line">create mask = 0777             # 创建文件的权限</span><br><span class="line">directory mask = 0777           # 创建目录的权限</span><br></pre></td></tr></table></figure><ul><li>服务重启</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart smbd</span><br></pre></td></tr></table></figure><h3 id="samba完整配置文件">samba完整配置文件</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#======================= Global Settings =======================</span></span><br><span class="line"></span><br><span class="line"><span class="section">[global]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Browsing/Identification ###</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Change this to the workgroup/NT-domain name your Samba server will part of</span></span><br><span class="line"><span class="attr">workgroup</span> = zgxmt</span><br><span class="line"></span><br><span class="line"><span class="comment"># server string is the equivalent of the NT Description field</span></span><br><span class="line">server <span class="attr">string</span> = %h server (Samba, Ubuntu)</span><br><span class="line"></span><br><span class="line">netbios <span class="attr">name</span> = nas</span><br><span class="line"></span><br><span class="line"><span class="attr">security</span> = user</span><br><span class="line"></span><br><span class="line">map to <span class="attr">guest</span> = bad user</span><br><span class="line"></span><br><span class="line">log <span class="attr">file</span> = /var/log/samba/log.%m</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cap the size of the individual log files (in KiB).</span></span><br><span class="line">max log <span class="attr">size</span> = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We want Samba to only log to /var/log/samba/log.&#123;smbd,nmbd&#125;.</span></span><br><span class="line"><span class="comment"># Append syslog@1 if you want important messages to be sent to syslog too.</span></span><br><span class="line"><span class="attr">logging</span> = file</span><br><span class="line"></span><br><span class="line"><span class="comment"># Do something sensible when Samba crashes: mail the admin a backtrace</span></span><br><span class="line">panic <span class="attr">action</span> = /usr/share/samba/panic-action %d</span><br><span class="line"></span><br><span class="line">server <span class="attr">role</span> = standalone server</span><br><span class="line"></span><br><span class="line">obey pam <span class="attr">restrictions</span> = <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This boolean parameter controls whether Samba attempts to sync the Unix</span></span><br><span class="line"><span class="comment"># password with the SMB password when the encrypted SMB password in the</span></span><br><span class="line"><span class="comment"># passdb is changed.</span></span><br><span class="line">unix password <span class="attr">sync</span> = <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For Unix password sync to work on a Debian GNU/Linux system, the following</span></span><br><span class="line"><span class="comment"># parameters must be set (thanks to Ian Kahan &lt;&lt;kahan@informatik.tu-muenchen.de&gt; for</span></span><br><span class="line"><span class="comment"># sending the correct chat script for the passwd program in Debian Sarge).</span></span><br><span class="line">passwd <span class="attr">program</span> = /usr/bin/passwd %u</span><br><span class="line">passwd <span class="attr">chat</span> = *Enter\snew\s*\spassword:* %n\n *Retype\snew\s*\spassword:* %n\n *password\supdated\ssuccessfully* .</span><br><span class="line"></span><br><span class="line"><span class="comment"># This boolean controls whether PAM will be used for password changes</span></span><br><span class="line"><span class="comment"># when requested by an SMB client instead of the program listed in</span></span><br><span class="line"><span class="comment"># &#x27;passwd program&#x27;. The default is &#x27;no&#x27;.</span></span><br><span class="line">pam password <span class="attr">change</span> = <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This option controls how unsuccessful authentication attempts are mapped</span></span><br><span class="line"><span class="comment"># to anonymous connections</span></span><br><span class="line">map to <span class="attr">guest</span> = bad user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">[printers]</span></span><br><span class="line"><span class="attr">comment</span> = All Printers</span><br><span class="line"><span class="attr">browseable</span> = <span class="literal">no</span></span><br><span class="line"><span class="attr">path</span> = /var/tmp</span><br><span class="line"><span class="attr">printable</span> = <span class="literal">yes</span></span><br><span class="line">guest <span class="attr">ok</span> = <span class="literal">no</span></span><br><span class="line">read <span class="attr">only</span> = <span class="literal">no</span></span><br><span class="line">create <span class="attr">mask</span> = <span class="number">0700</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows clients look for this share name as a source of downloadable</span></span><br><span class="line"><span class="comment"># printer drivers</span></span><br><span class="line"><span class="section">[print$]</span></span><br><span class="line"><span class="attr">comment</span> = Printer Drivers</span><br><span class="line"><span class="attr">path</span> = /var/lib/samba/printers</span><br><span class="line"><span class="attr">browseable</span> = <span class="literal">yes</span></span><br><span class="line">read <span class="attr">only</span> = <span class="literal">no</span></span><br><span class="line">guest <span class="attr">ok</span> = <span class="literal">no</span></span><br><span class="line"><span class="comment"># Uncomment to allow remote administration of Windows print drivers.</span></span><br><span class="line"><span class="comment"># You may need to replace &#x27;lpadmin&#x27; with the name of the group your</span></span><br><span class="line"><span class="comment"># admin users are members of.</span></span><br><span class="line"><span class="comment"># Please note that you also need to set appropriate Unix permissions</span></span><br><span class="line"><span class="comment"># to the drivers directory for these users to have write rights in it</span></span><br><span class="line"><span class="comment">;   write list = root, @lpadmin</span></span><br><span class="line"></span><br><span class="line"><span class="section">[shared]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">path</span> = /home/nas</span><br><span class="line"></span><br><span class="line">valid <span class="attr">users</span> = nas,root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置允许访问的用户列表</span></span><br><span class="line">read <span class="attr">only</span> = <span class="literal">no</span></span><br><span class="line"><span class="comment"># 允许读写访问</span></span><br><span class="line"><span class="attr">browseable</span> = <span class="literal">yes</span></span><br><span class="line">           <span class="comment"># 允许在网络中浏览</span></span><br><span class="line">           guest <span class="attr">ok</span> = <span class="literal">no</span></span><br><span class="line">           <span class="comment"># 禁止匿名访问</span></span><br><span class="line">           force <span class="attr">user</span> = root</span><br><span class="line">           <span class="comment"># 用 root 身份操作</span></span><br><span class="line">           create <span class="attr">mask</span> = <span class="number">0777</span></span><br><span class="line"><span class="comment"># 创建文件的权限</span></span><br><span class="line">directory <span class="attr">mask</span> = <span class="number">0777</span></span><br><span class="line"><span class="comment"># 创建目录的权限</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="samba-用户创建">samba 用户创建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -m -s /bin/bash nas</span><br><span class="line">sudo passwd nas</span><br><span class="line">sudo smbpasswd -a nas</span><br><span class="line">sudo pdbedit -L # 验证用户</span><br></pre></td></tr></table></figure><h3 id="解除win组策略限制">解除win组策略限制</h3><blockquote><p>在windows 无法登录时解除组策略限制</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-SmbClientConfiguration -RequireSecuritySignature $false</span><br></pre></td></tr></table></figure><h3 id="通过脚本批量挂载磁盘">通过脚本批量挂载磁盘</h3><ul><li>第三方库安装与配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Debian/Ubuntu</span></span><br><span class="line">sudo apt install mergerfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">RHEL/CentOS</span></span><br><span class="line">sudo yum install epel-release</span><br><span class="line">sudo yum install mergerfs</span><br></pre></td></tr></table></figure><ul><li>磁盘分区初始化</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for dev in /dev/sd&#123;a..v&#125;; do</span><br><span class="line">  echo &quot;正在处理 $dev&quot;</span><br><span class="line">  sudo parted -s $dev mklabel gpt</span><br><span class="line">  sudo parted -s $dev mkpart primary 0% 100%</span><br><span class="line">  sudo mkfs.ext4 -L &quot;$&#123;dev##*/&#125;&quot; &quot;$&#123;dev&#125;1&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>磁盘挂载</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件名：storage_pool_final.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">功能：自动化初始化磁盘、创建分区、格式化挂载、配置mergerfs存储池</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置参数（按需修改）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">MOUNT_ROOT=&quot;/mnt/all_disks&quot;         # 存储池根目录</span><br><span class="line">MOUNT_DIR=&quot;$MOUNT_ROOT/mounts&quot;      # 单个磁盘挂载目录</span><br><span class="line">SHARED_DIR=&quot;$MOUNT_ROOT/shared&quot;     # 合并存储目录</span><br><span class="line">MIN_FREE_SPACE=&quot;20G&quot;                # 最小保留空间</span><br><span class="line">LOG_FILE=&quot;/var/log/storage_pool.log&quot; # 日志文件路径</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化日志系统</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">exec 3&gt;&amp;1 4&gt;&amp;2</span><br><span class="line">trap &#x27;exec 2&gt;&amp;4 1&gt;&amp;3&#x27; EXIT</span><br><span class="line">exec &gt; &gt;(tee -a &quot;$LOG_FILE&quot;) 2&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预检模块</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">check_prerequisites() &#123;</span><br><span class="line">    # 检查root权限</span><br><span class="line">    [[ $EUID -ne 0 ]] &amp;&amp; echo &quot;错误：必须使用sudo运行脚本&quot; &amp;&amp; exit 1</span><br><span class="line"></span><br><span class="line">    # 检查必要工具</span><br><span class="line">    declare -A REQUIRED_TOOLS=(</span><br><span class="line">        [&quot;parted&quot;]=&quot;分区工具&quot;</span><br><span class="line">        [&quot;mkfs.ext4&quot;]=&quot;格式化工具&quot;</span><br><span class="line">        [&quot;mergerfs&quot;]=&quot;存储合并工具&quot;</span><br><span class="line">    )</span><br><span class="line">    for tool in &quot;$&#123;!REQUIRED_TOOLS[@]&#125;&quot;; do</span><br><span class="line">        if ! command -v $tool &amp;&gt; /dev/null; then</span><br><span class="line">            echo &quot;错误：缺少依赖 $&#123;REQUIRED_TOOLS[$tool]&#125; ($tool)&quot;</span><br><span class="line">            exit 1</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    # 创建目录结构</span><br><span class="line">    mkdir -p &quot;$MOUNT_DIR&quot; &quot;$SHARED_DIR&quot;</span><br><span class="line">    chmod 1777 &quot;$SHARED_DIR&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安全设备过滤</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">get_data_disks() &#123;</span><br><span class="line">    lsblk -lp -o NAME,SIZE,TYPE,MOUNTPOINT | awk &#x27;</span><br><span class="line">        BEGIN &#123;IGNORECASE=1&#125;</span><br><span class="line">        $3 == &quot;disk&quot; &amp;&amp;</span><br><span class="line">        $4 == &quot;&quot; &amp;&amp;</span><br><span class="line">        $2 ~ /3\.6T/ &amp;&amp;</span><br><span class="line">        $1 !~ /sdaw/ &#123;  # 排除系统盘sdaw</span><br><span class="line">            print $1</span><br><span class="line">        &#125;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">磁盘初始化</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">init_disk() &#123;</span><br><span class="line">    local dev=$1</span><br><span class="line">    echo &quot;===== 初始化磁盘 $dev =====&quot;</span><br><span class="line"></span><br><span class="line">    # 创建GPT分区表</span><br><span class="line">    if ! parted -s &quot;$dev&quot; mklabel gpt; then</span><br><span class="line">        echo &quot;错误：无法创建GPT分区表&quot;</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 创建主分区</span><br><span class="line">    if ! parted -s &quot;$dev&quot; mkpart primary 0% 100%; then</span><br><span class="line">        echo &quot;错误：无法创建分区&quot;</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 格式化分区为ext4</span><br><span class="line">    local partition=&quot;$&#123;dev&#125;1&quot;</span><br><span class="line">    if ! mkfs.ext4 -q -L &quot;DATA_$&#123;dev##*/&#125;&quot; &quot;$partition&quot;; then</span><br><span class="line">        echo &quot;错误：格式化失败&quot;</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    echo &quot;√ 初始化完成：$dev → $partition&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载管理</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">mount_partition() &#123;</span><br><span class="line">    local partition=$1</span><br><span class="line">    # 获取UUID</span><br><span class="line">    local uuid=$(blkid -s UUID -o value &quot;$partition&quot;)</span><br><span class="line">    [[ -z &quot;$uuid&quot; ]] &amp;&amp; return 1</span><br><span class="line"></span><br><span class="line">    # 创建挂载点</span><br><span class="line">    local mount_point=&quot;$MOUNT_DIR/$uuid&quot;</span><br><span class="line">    mkdir -p &quot;$mount_point&quot;</span><br><span class="line"></span><br><span class="line">    # 写入fstab（幂等操作）</span><br><span class="line">    if ! grep -q &quot;UUID=$uuid&quot; /etc/fstab; then</span><br><span class="line">        echo &quot;UUID=$uuid $mount_point ext4 defaults,nofail,noatime 0 0&quot; &gt;&gt; /etc/fstab</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 执行挂载</span><br><span class="line">    if mount -v &quot;$mount_point&quot;; then</span><br><span class="line">        echo &quot;√ 挂载成功：$partition → $mount_point&quot;</span><br><span class="line">    else</span><br><span class="line">        sed -i &quot;\|UUID=$uuid|d&quot; /etc/fstab</span><br><span class="line">        rmdir &quot;$mount_point&quot;</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mergerfs配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">configure_mergerfs() &#123;</span><br><span class="line">    # 生成挂载点列表</span><br><span class="line">    local mount_points=($(ls -d &quot;$MOUNT_DIR&quot;/* 2&gt;/dev/null))</span><br><span class="line">    if [[ $&#123;#mount_points[@]&#125; -eq 0 ]]; then</span><br><span class="line">        echo &quot;错误：没有可用的挂载点！&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 生成fstab条目</span><br><span class="line">    local mergerfs_entry=&quot;$&#123;mount_points[@]/%/\\:&#125; $SHARED_DIR fuse.mergerfs defaults,allow_other,category.create=epmfs,minfreespace=$MIN_FREE_SPACE,fsname=StoragePool 0 0&quot;</span><br><span class="line"></span><br><span class="line">    # 清理旧配置</span><br><span class="line">    sed -i &#x27;\|fuse.mergerfs|d&#x27; /etc/fstab</span><br><span class="line"></span><br><span class="line">    # 写入新配置</span><br><span class="line">    echo &quot;$mergerfs_entry&quot; &gt;&gt; /etc/fstab</span><br><span class="line"></span><br><span class="line">    # 应用挂载</span><br><span class="line">    if mount -av; then</span><br><span class="line">        echo &quot;√ mergerfs配置成功&quot;</span><br><span class="line">        df -hT &quot;$SHARED_DIR&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;× mergerfs挂载失败&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主程序流程</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">main() &#123;</span><br><span class="line">    check_prerequisites</span><br><span class="line"></span><br><span class="line">    # 处理所有数据磁盘</span><br><span class="line">    while read -r dev; do</span><br><span class="line">        # 初始化磁盘</span><br><span class="line">        if ! init_disk &quot;$dev&quot;; then</span><br><span class="line">            echo &quot;× 磁盘初始化失败：$dev&quot;</span><br><span class="line">            continue</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        # 挂载分区</span><br><span class="line">        partition=&quot;$&#123;dev&#125;1&quot;</span><br><span class="line">        if ! mount_partition &quot;$partition&quot;; then</span><br><span class="line">            echo &quot;× 分区挂载失败：$partition&quot;</span><br><span class="line">            continue</span><br><span class="line">        fi</span><br><span class="line">    done &lt; &lt;(get_data_disks)</span><br><span class="line"></span><br><span class="line">    # 配置mergerfs</span><br><span class="line">    configure_mergerfs</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行入口</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">main &quot;$@&quot;</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plaintext"><figcaption><span>./mount.sh``` 运行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 磁盘大小查看</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">lsblk -b -o SIZE | grep -v &quot;loop&quot; | grep -v &quot;rom&quot;  | grep -v &quot;SIZE&quot; | awk &#x27;&#123;sum+=$1&#125; END &#123;print sum&#125;&#x27; | numfmt --to=iec-i --suffix=B --padding=7```</span><br></pre></td></tr></table></figure></blockquote><h3 id="验证">验证</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -hT /mnt/all_disks/shared</span><br></pre></td></tr></table></figure><h3 id="卸载磁盘重新加载">卸载磁盘重新加载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo umount -a</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><h3 id="最终验证">最终验证</h3><h4 id="步骤-1：验证-mergerfs-配置">步骤 1：验证 mergerfs 配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 /etc/fstab 中是否有 mergerfs 条目</span></span><br><span class="line"><span class="built_in">cat</span> /etc/fstab | grep <span class="string">&quot;fuse.mergerfs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预期应输出类似：</span></span><br><span class="line"><span class="comment"># /mnt/all_disks/mounts/* /mnt/all_disks/shared fuse.mergerfs defaults,allow_other,... 0 0</span></span><br></pre></td></tr></table></figure><h4 id="步骤-2：手动触发挂载">步骤 2：手动触发挂载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载错误挂载</span></span><br><span class="line"><span class="built_in">sudo</span> umount -l /mnt/all_disks/shared</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新挂载所有设备</span></span><br><span class="line"><span class="built_in">sudo</span> mount -av</span><br></pre></td></tr></table></figure><h4 id="步骤-3：检查-mergerfs-挂载状态">步骤 3：检查 mergerfs 挂载状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 mergerfs 是否生效</span></span><br><span class="line">mount | grep <span class="string">&quot;mergerfs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预期输出应包含：</span></span><br><span class="line"><span class="comment"># StoragePool on /mnt/all_disks/shared type fuse.mergerfs (...)</span></span><br></pre></td></tr></table></figure><h4 id="步骤-4：修复配置问题">步骤 4：修复配置问题</h4><blockquote><p>若上述步骤无效，执行以下操作：</p></blockquote><ul><li>清理旧配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 删除无效的 mergerfs 条目</span></span><br><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;\|fuse.mergerfs|d&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保所有磁盘已正确挂载到 mounts/ 子目录</span></span><br><span class="line"><span class="built_in">ls</span> -l /mnt/all_disks/mounts</span><br></pre></td></tr></table></figure><ul><li>重新生成 mergerfs 配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 获取所有挂载点路径</span></span><br><span class="line">MOUNT_PATHS=$(<span class="built_in">ls</span> -d /mnt/all_disks/mounts/* | <span class="built_in">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入新的 mergerfs 配置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;MOUNT_PATHS%:&#125;</span> /mnt/all_disks/shared fuse.mergerfs defaults,allow_other,category.create=epmfs,minfreespace=20G,fsname=StoragePool 0 0&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> -a /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用配置</span></span><br><span class="line"><span class="built_in">sudo</span> mount -av</span><br></pre></td></tr></table></figure><h4 id="步骤-5：验证最终状态">步骤 5：验证最终状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查存储池容量</span></span><br><span class="line"><span class="built_in">df</span> -hT /mnt/all_disks/shared</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预期输出示例：</span></span><br><span class="line"><span class="comment">#Filesystem      Type           Size  Used Avail Use% Mounted on</span></span><br><span class="line"><span class="comment">#StoragePool     fuse.mergerfs  7.2T  3.6T  3.6T  50% /mnt/all_disks/shared</span></span><br></pre></td></tr></table></figure><h3 id="NAS异常重启错误排除">NAS异常重启错误排除</h3><blockquote><p>脚本如下</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件名：check_reboot_logs.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">功能：自动收集和分析系统重启相关日志</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查 root 权限</span></span><br><span class="line">if [ &quot;$EUID&quot; -ne 0 ]; then</span><br><span class="line">  echo &quot;请使用 sudo 或 root 权限运行此脚本&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义日志保存目录</span></span><br><span class="line">LOG_DIR=&quot;/var/log/reboot_investigation_$(date +%Y%m%d%H%M%S)&quot;</span><br><span class="line">mkdir -p &quot;$LOG_DIR&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">收集基础系统信息</span></span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;======= 系统基本信息 =======&quot;</span><br><span class="line">  lsb_release -a</span><br><span class="line">  uname -a</span><br><span class="line">  uptime</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">&#125; &gt; &quot;$LOG_DIR/system_info.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">收集最近重启记录</span></span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;======= 最近 5 次重启记录 =======&quot;</span><br><span class="line">  last reboot | head -n 5</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">&#125; &gt; &quot;$LOG_DIR/reboot_history.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">收集内核日志中的异常信息</span></span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;======= 内核日志关键事件 =======&quot;</span><br><span class="line">  journalctl -k --since &quot;1 week ago&quot; | grep -Ei \</span><br><span class="line">  -e &quot;oom&quot; \</span><br><span class="line">  -e &quot;panic&quot; \</span><br><span class="line">  -e &quot;segfault&quot; \</span><br><span class="line">  -e &quot;hard reset&quot; \</span><br><span class="line">  -e &quot;kernel bug&quot; \</span><br><span class="line">  -e &quot;rcu stall&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">&#125; &gt; &quot;$LOG_DIR/kernel_events.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">收集系统日志中的崩溃记录</span></span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;======= 系统服务崩溃记录 =======&quot;</span><br><span class="line">  journalctl -b -1 --since &quot;1 week ago&quot; | grep -Ei \</span><br><span class="line">  -e &quot;crash&quot; \</span><br><span class="line">  -e &quot;failed&quot; \</span><br><span class="line">  -e &quot;segmentation fault&quot; \</span><br><span class="line">  -e &quot;core dumped&quot; \</span><br><span class="line">  -e &quot;out of memory&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">&#125; &gt; &quot;$LOG_DIR/service_crashes.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">收集硬件相关日志</span></span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;======= 硬件错误/警告 =======&quot;</span><br><span class="line">  dmesg -T | grep -Ei \</span><br><span class="line">  -e &quot;error&quot; \</span><br><span class="line">  -e &quot;warning&quot; \</span><br><span class="line">  -e &quot;temperature&quot; \</span><br><span class="line">  -e &quot;overheat&quot; \</span><br><span class="line">  -e &quot;corrected error&quot; \</span><br><span class="line">  -e &quot;mce&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">&#125; &gt; &quot;$LOG_DIR/hardware_issues.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">收集自动更新记录</span></span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;======= 自动更新记录 =======&quot;</span><br><span class="line">  grep -h -E &quot;apt|unattended&quot; /var/log/apt/* /var/log/unattended-upgrades/* 2&gt;/dev/null</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">&#125; &gt; &quot;$LOG_DIR/auto_updates.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">收集内存使用历史</span></span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;======= 内存使用统计 =======&quot;</span><br><span class="line">  sar -r -s &quot;$(date -d &#x27;1 week ago&#x27; +%H:%M:%S)&quot; | tail -n +3</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">&#125; &gt; &quot;$LOG_DIR/memory_usage.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成分析报告</span></span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;=== 自动分析报告 ===&quot;</span><br><span class="line">  echo &quot;[1] 最近重启次数: $(grep -c &quot;reboot&quot; &quot;$LOG_DIR/reboot_history.txt&quot;)&quot;</span><br><span class="line">  echo &quot;[2] 硬件错误计数: $(grep -ciE &quot;error|warning&quot; &quot;$LOG_DIR/hardware_issues.txt&quot;)&quot;</span><br><span class="line">  echo &quot;[3] OOM 事件计数: $(grep -ci &quot;oom&quot; &quot;$LOG_DIR/kernel_events.txt&quot;)&quot;</span><br><span class="line">  echo &quot;[4] 服务崩溃计数: $(grep -ciE &quot;crash|failed&quot; &quot;$LOG_DIR/service_crashes.txt&quot;)&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;=== 建议排查方向 ===&quot;</span><br><span class="line">  echo &quot;1. 如果存在硬件错误: 检查硬盘(SMART)、内存(memtest86+)、CPU温度(sensors)&quot;</span><br><span class="line">  echo &quot;2. 如果存在 OOM 事件: 分析内存使用模式，检查是否有内存泄漏&quot;</span><br><span class="line">  echo &quot;3. 如果服务频繁崩溃: 检查对应服务的日志(/var/log/[service])&quot;</span><br><span class="line">  echo &quot;4. 如果与更新相关: 检查 /var/log/apt/history.log&quot;</span><br><span class="line">&#125; &gt; &quot;$LOG_DIR/analysis_report.txt&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;日志收集完成，结果保存在: $LOG_DIR&quot;</span><br><span class="line">echo &quot;请查看以下关键文件:&quot;</span><br><span class="line">echo &quot;1. analysis_report.txt    - 快速分析报告&quot;</span><br><span class="line">echo &quot;2. hardware_issues.txt    - 硬件相关问题&quot;</span><br><span class="line">echo &quot;3. kernel_events.txt      - 内核级错误&quot;</span><br><span class="line">echo &quot;4. service_crashes.txt    - 服务崩溃记录&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="HTTP-协议NAS搭建">HTTP 协议NAS搭建</h2><blockquote><p>Nginx: 作为反向代理，处理 HTTPS 和路由。</p></blockquote><blockquote><p>FileBrowser: 轻量级文件管理容器（替代传统 NAS 界面）。</p></blockquote><blockquote><p>Docker Compose: 编排容器依赖关系。</p></blockquote><h3 id="docker-install-on-ubuntu">docker install on ubuntu</h3><blockquote><p>nginx 安装配置</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update -y</span><br><span class="line">sudo apt install docker.io</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl enable docker</span><br><span class="line">docker --version</span><br><span class="line">sudo apt install docker-compose</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line">sudo docker pull nginx</span><br><span class="line">sudo docker images</span><br><span class="line">sudo mkdir -p /data/nginx/conf</span><br><span class="line">sudo mkdir -p /data/nginx/conf.d</span><br><span class="line">sudo mkdir -p /data/nginx/html</span><br><span class="line">sudo mkdir -p /data/nginx/logs</span><br><span class="line"></span><br><span class="line">docker run --name nginx -d  -p 80:80   -v ~/nginx/nginx.conf:/etc/nginx/nginx.conf   -v ~/nginx/html:/usr/share/nginx/html   nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="docker-代理设置">docker 代理设置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line">sudo vim /etc/systemd/system/docker.service.d/proxy.conf</span><br></pre></td></tr></table></figure><ul><li>写入如下文件</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;HTTP_PROXY=http://192.168.10.65:7890&quot;</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;HTTPS_PROXY=http://192.168.10.65.7890&quot;</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;NO_PROXY=localhost,127.0.0.1&quot;</span></span><br></pre></td></tr></table></figure><ul><li>sudo vim /etc/docker/daemon.json</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https://dockerhub.icu&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="apache-服务安装">apache 服务安装</h4><blockquote><p>基础准备</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/nas-docker/&#123;data,config,nginx,ssl&#125;</span><br><span class="line">cd ~/nas-docker</span><br></pre></td></tr></table></figure><blockquote><p>yml 编辑</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment"># FileBrowser 文件管理服务</span></span><br><span class="line">  <span class="attr">filebrowser:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">filebrowser/filebrowser:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">filebrowser</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/srv</span>      <span class="comment"># 挂载共享数据目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/filebrowser:/etc/filebrowser</span>  <span class="comment"># 配置文件</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FB_BASEURL=/files</span>  <span class="comment"># 服务路径</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nas-network</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Nginx 反向代理</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx-proxy</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:443&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./ssl:/etc/nginx/ssl</span>  <span class="comment"># SSL 证书目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/usr/share/nginx/html</span>  <span class="comment"># 静态文件托管（可选）</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">filebrowser</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nas-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">nas-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><blockquote><p>nginx.conf</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name localhost;  # 替换为你的域名</span><br><span class="line">        return 301 https://$host$request_uri;  # HTTP 重定向到 HTTPS</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name nas.yourdomain.com;</span><br><span class="line"></span><br><span class="line">        # SSL 证书路径（需提前申请或自签名）</span><br><span class="line">        ssl_certificate /etc/nginx/ssl/fullchain.pem;</span><br><span class="line">        ssl_certificate_key /etc/nginx/ssl/privkey.pem;</span><br><span class="line"></span><br><span class="line">        # 静态文件服务（可选）</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /usr/share/nginx/html;</span><br><span class="line">            autoindex on;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 代理 FileBrowser</span><br><span class="line">        location /files &#123;</span><br><span class="line">            proxy_pass http://filebrowser:80;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>自签证书</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 certbot</span></span><br><span class="line">sudo apt install certbot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">申请证书（需确保域名已解析到服务器IP）</span></span><br><span class="line">sudo certbot certonly --standalone -d nas.yourdomain.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制证书到 Docker 挂载目录</span></span><br><span class="line">sudo cp /etc/letsencrypt/live/nas.yourdomain.com/fullchain.pem ~/nas-docker/ssl/</span><br><span class="line">sudo cp /etc/letsencrypt/live/nas.yourdomain.com/privkey.pem ~/nas-docker/ssl/</span><br></pre></td></tr></table></figure><h4 id="服务启动">服务启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="see">see</h2><ul><li><a href="https://webmin.com/">https://webmin.com/</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;在ubuntu服务器搭建 NAS&lt;/h1&gt;
&lt;h2 id=&quot;SMB协议搭建NAS&quot;&gt;SMB协议搭建NAS&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;通过webmini使用samba可视化搭建nas&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;磁盘挂载&quot;&gt;磁盘挂载&lt;</summary>
      
    
    
    
    
    <category term="python" scheme="https://caozhaoqi.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>基于边缘检测算法检测视频中文字</title>
    <link href="https://caozhaoqi.github.io/2025/01/10/easyocr-gpuocr/"/>
    <id>https://caozhaoqi.github.io/2025/01/10/easyocr-gpuocr/</id>
    <published>2025-01-10T15:40:49.000Z</published>
    <updated>2025-03-04T09:03:20.799Z</updated>
    
    <content type="html"><![CDATA[<h1>基于Easyocr的文字识别</h1><blockquote><p>EasyOCR 是一个开源的 OCR (光学字符识别) 工具，能够快速并高效地从图像中提取文本。与其他OCR工具如 Tesseract 相比，EasyOCR 具有更强的多语言支持，包括对中文、日语、阿拉伯语等复杂文字的支持，并且它的安装和使用非常简便。</p></blockquote><h2 id="主要功能">主要功能</h2><blockquote><p>EasyOCR 是一个 Python 包，用于执行光学字符识别 (OCR)。它旨在易于使用，并支持多种语言的文本识别。其主要特点包括：</p></blockquote><ul><li><p>简单易用</p></li><li><p>多语言支持</p></li><li><p>GPU 加速支持</p></li><li><p>开源</p></li></ul><h2 id="图像处理算法详解">图像处理算法详解</h2><h2 id="1-图像缩放-Image-Resizing">1. 图像缩放 (Image Resizing)</h2><h3 id="原理">原理</h3><p>图像缩放是指改变图像的尺寸，包括放大（upscaling）和缩小（downscaling）两种操作。其基本原理是通过像素插值算法，在新的尺寸下估计图像像素的值。</p><h3 id="技术">技术</h3><p>常用的图像缩放技术包括：</p><ul><li><strong>最近邻插值 (Nearest Neighbor Interpolation):</strong><ul><li><strong>原理:</strong> 将目标图像的像素值设置为源图像中距离最近的像素值。</li><li><strong>特点:</strong> 简单快速，但可能导致图像边缘出现锯齿状。</li></ul></li><li><strong>双线性插值 (Bilinear Interpolation):</strong><ul><li><strong>原理:</strong>  使用目标图像像素周围的 2x2 邻域像素值进行双线性插值计算。</li><li><strong>特点:</strong> 图像效果比最近邻插值平滑，计算量适中。</li></ul></li><li><strong>双三次插值 (Bicubic Interpolation):</strong><ul><li><strong>原理:</strong>  使用目标图像像素周围的 4x4 邻域像素值进行双三次插值计算。</li><li><strong>特点:</strong> 图像效果较好，细节保留较多，但计算量较大。</li></ul></li><li><strong>基于深度学习的超分辨率 (Super-Resolution):</strong><ul><li><strong>原理:</strong> 使用深度学习模型 (例如, SRCNN, EDSR, ESRGAN) 从低分辨率图像重建高分辨率图像.</li><li><strong>特点:</strong> 可以生成高质量的图像，但是计算量大，需要大量的训练数据。</li></ul></li></ul><h3 id="用途">用途</h3><ul><li><strong>调整图像大小：</strong>  适应不同的显示设备或应用场景。</li><li><strong>预处理步骤：</strong>  作为其他图像处理算法 (如目标检测, OCR) 的预处理步骤.</li><li><strong>生成不同分辨率的图像：</strong>  用于创建图像金字塔或进行多尺度分析。</li></ul><h2 id="2-图像裁剪-Image-Cropping">2. 图像裁剪 (Image Cropping)</h2><h3 id="原理-2">原理</h3><p>图像裁剪是指从图像中选择一个矩形区域，然后将其提取出来。其基本原理是根据指定的起始坐标和宽高，截取图像对应的像素数据。</p><h3 id="技术-2">技术</h3><ul><li><strong>矩形裁剪:</strong>  指定矩形左上角坐标(x, y) 和矩形的宽度 (w) 和高度 (h)，然后提取这个矩形区域的像素。</li><li><strong>任意形状裁剪:</strong>  使用掩码 (mask) 来指定需要裁剪的区域，mask 可以是任意形状。</li></ul><h3 id="用途-2">用途</h3><ul><li><strong>去除图像中不必要的区域：</strong> 突出感兴趣的目标对象或区域。</li><li><strong>调整图像构图：</strong>  重新构图，使图像更符合需求。</li><li><strong>数据增强：</strong> 作为图像数据增强的一种方法，可以生成不同的图像样本。</li></ul><h2 id="3-图像拼接-Image-Stitching">3. 图像拼接 (Image Stitching)</h2><h3 id="原理-3">原理</h3><p>图像拼接是指将多张具有重叠区域的图像拼接成一张完整的全景图像。其基本原理包括图像配准和图像融合两个步骤。</p><h3 id="技术-3">技术</h3><ul><li><strong>特征检测和匹配 (Feature Detection and Matching):</strong><ul><li><strong>目的:</strong>  提取图像中的特征点 (如 SIFT, SURF, ORB 等) 并进行匹配，找到图像之间的对应关系。</li></ul></li><li><strong>图像配准 (Image Registration):</strong><ul><li><strong>目的:</strong>  根据匹配到的特征点，计算图像之间的变换关系，将图像对齐。</li><li><strong>技术:</strong> 使用如 RANSAC 等算法估计图像的变换矩阵。</li></ul></li><li><strong>图像融合 (Image Blending):</strong><ul><li><strong>目的:</strong> 将对齐的图像拼接成一张完整的图像。</li><li><strong>技术:</strong>  使用如多频带融合或加权平均等方法处理图像重叠区域，避免明显的接缝。</li></ul></li><li><strong>柱面投影:</strong><ul><li>**目的:**将图像映射到柱面坐标系，以便更好地拼接水平方向上视角变化很大的图像。</li></ul></li></ul><h2 id="流程">流程</h2><pre><code>                             +-----------------------+                             | 开始 process_video_threaded |                             +-----------------------+                                        |                                        V                  +------------------------------------------------+                  |  调用 process_video 处理单个视频文件         |                  |  获取 CPU, 内存，GPU 使用率信息             |                  |  输出视频处理信息和性能信息                      |                  +------------------------------------------------+                                        |                                        V       +------------------------------------------------------------+       | 根据 move_file, has_subtitle, 移动文件到 output_dir_with_subtitle  |       | 或 output_dir_without_subtitle 下的子目录，并记录日志         |       | (如未移动，则记录未移动日志)                                  |       +------------------------------------------------------------+                                        |                                        V                  +--------------------------------------------+                  |      结束 process_video_threaded             |                  +--------------------------------------------+                                          |                                         V                             +-----------------------+                             | 开始 process_video   |                             +-----------------------+                                        |                                        V                    +------------------------------------------------+                    |  使用 cv2.VideoCapture 打开视频文件              |                    |  如果打开失败，记录日志并返回                       |                    |  初始化 frame_count, subtitle_frame_count       |                    |  设置跳帧参数 frame_skip                         |                    +------------------------------------------------+                                         |                                         V                            +------------------------+                            |  while 循环读取视频帧        |                            |    如果读取失败，退出循环 |                            +------------------------+                                        |                                        V              +----------------------------------------------+              | 如果是抽帧，则执行字幕区域检测 detect_subtitle_area|              |  如果检测失败 返回                               |              +----------------------------------------------+                                        |                                        V                         +---------------------------+                         | for subtitle_area in subtitle_areas |                         |    调用 ocr_check           |                         +---------------------------+                                         |                                         V                 +------------------------------------------------------+                 |    根据ocr检测结果更新 subtitle_frame_count            |                 +------------------------------------------------------+                                        |                                        V            +----------------------------------------------------------+            |  根据 subtitle_frame_count 和 min_subtitle_frames       |            |  确定视频是否有字幕，并生成 output_file 路径            |            |   记录视频处理信息                                      |            +----------------------------------------------------------+                                       |                                       V                   +--------------------------+                   |  释放视频资源和GPU缓存   |                   |     手动内存回收          |                   +--------------------------+                                        |                                        V                    +---------------------+                    |  结束 process_video   |                    +---------------------+                                        |                                         V                           +------------------------+                           | 开始 ocr_check      |                           +------------------------+                                      |                                      V                           +-----------------------------------+                           | 使用 reader.readtext(roi,detail=0)     |                           |  如果检测到文字返回 True，否则返回 False |                           +-----------------------------------+                                      |                                      V                      +--------------------------+                      | 结束 ocr_check       |                      +--------------------------+</code></pre><h2 id="实现">实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2025/1/3 10:37</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(czq)</span></span><br><span class="line"><span class="string">Version:  V 0.1</span></span><br><span class="line"><span class="string">File:     lan_detect_cal_new.py</span></span><br><span class="line"><span class="string">Describe: Write during the python at zgxmt, Github link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> easyocr</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用GPU 加速</span></span><br><span class="line">reader = easyocr.Reader([<span class="string">&#x27;ch_sim&#x27;</span>,<span class="string">&#x27;en&#x27;</span>], gpu=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_subtitle_area</span>(<span class="params">frame, min_area=<span class="number">100</span>, max_area = <span class="number">1000</span>,threshold1 = <span class="number">100</span>, threshold2 = <span class="number">200</span></span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot;检测字幕区域&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line">      blurred = cv2.GaussianBlur(gray, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">      edges = cv2.Canny(blurred, threshold1, threshold2)</span><br><span class="line">      contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line">      subtitle_areas = []</span><br><span class="line">      <span class="keyword">for</span> contour <span class="keyword">in</span> contours:</span><br><span class="line">        area = cv2.contourArea(contour)</span><br><span class="line">        x, y, w, h = cv2.boundingRect(contour)</span><br><span class="line">        <span class="keyword">if</span> min_area &lt; area &lt; max_area:</span><br><span class="line">           subtitle_areas.append((x, y, w, h))</span><br><span class="line">      <span class="keyword">return</span> subtitle_areas</span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    logging.error(<span class="string">f&quot;检测字幕区域失败 <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ocr_check</span>(<span class="params">frame, subtitle_area</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;ocr检测是否有字幕&quot;&quot;&quot;</span></span><br><span class="line">    x,y,w,h = subtitle_area</span><br><span class="line">    roi = frame[y:y+h, x:x+w]</span><br><span class="line">    result = reader.readtext(roi)</span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_video</span>(<span class="params">video_path, output_dir, min_area=<span class="number">100</span>, max_area=<span class="number">1000</span>, threshold1=<span class="number">100</span>, threshold2=<span class="number">200</span>, move_file=<span class="literal">False</span>, max_retries = <span class="number">3</span>, retry_delay = <span class="number">5</span>, min_subtitle_frames = <span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理单个视频&quot;&quot;&quot;</span></span><br><span class="line">    logging.info(<span class="string">f&quot;开始处理视频：<span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">    temp_video_path = <span class="literal">None</span> <span class="comment"># 用于临时文件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      <span class="keyword">if</span> move_file:</span><br><span class="line">          temp_dir = tempfile.mkdtemp()</span><br><span class="line">          temp_video_path = os.path.join(temp_dir, os.path.basename(video_path))</span><br><span class="line">          shutil.copy2(video_path, temp_video_path)  <span class="comment"># 使用copy2 保存元数据，避免移动文件</span></span><br><span class="line">          video_path = temp_video_path</span><br><span class="line">      cap = cv2.VideoCapture(video_path)</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">            logging.error(<span class="string">f&quot;无法打开视频文件：<span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">          os.makedirs(output_dir)</span><br><span class="line">      frame_count = <span class="number">0</span></span><br><span class="line">      subtitle_frame_count = <span class="number">0</span></span><br><span class="line">      <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">          ret, frame = cap.read()</span><br><span class="line">          <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line">          subtitle_areas = detect_subtitle_area(frame, min_area, max_area, threshold1, threshold2)</span><br><span class="line">          <span class="keyword">for</span> subtitle_area <span class="keyword">in</span> subtitle_areas:</span><br><span class="line">            <span class="keyword">if</span> ocr_check(frame, subtitle_area):</span><br><span class="line">                subtitle_frame_count += <span class="number">1</span></span><br><span class="line">          frame_count += <span class="number">1</span></span><br><span class="line">          logging.info(<span class="string">f&quot;正在处理第<span class="subst">&#123;frame_count&#125;</span>帧&quot;</span>)</span><br><span class="line">      logging.info(<span class="string">f&quot;共检测到<span class="subst">&#123;subtitle_frame_count&#125;</span>张字幕图片&quot;</span>)</span><br><span class="line">      cap.release()</span><br><span class="line">      has_subtitle = subtitle_frame_count &gt; min_subtitle_frames <span class="comment"># 至少需要min_subtitle_frames帧包含字幕</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> has_subtitle <span class="keyword">and</span> move_file:</span><br><span class="line">         output_file = os.path.join(output_dir, os.path.basename(video_path))</span><br><span class="line">         <span class="keyword">for</span> attempt <span class="keyword">in</span> <span class="built_in">range</span>(max_retries):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                 shutil.move(video_path, output_file)</span><br><span class="line">                 logging.info(<span class="string">f&quot;移动文件到： <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br><span class="line">                 <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logging.error(<span class="string">f&quot;移动文件 <span class="subst">&#123;video_path&#125;</span> 失败：<span class="subst">&#123;e&#125;</span>，尝试重新移动 <span class="subst">&#123;attempt+<span class="number">1</span>&#125;</span> 次&quot;</span>)</span><br><span class="line">                time.sleep(retry_delay)</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">               logging.error(<span class="string">f&quot;尝试多次移动文件 <span class="subst">&#123;video_path&#125;</span> 失败，请检查是否有进程正在使用该文件&quot;</span>)</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">elif</span> has_subtitle:</span><br><span class="line">            logging.info(<span class="string">f&quot;当前视频有字幕: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">           logging.info(<span class="string">f&quot;当前视频没有字幕: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">       logging.error(<span class="string">f&quot;处理视频过程失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> temp_video_path <span class="keyword">and</span> os.path.exists(temp_video_path):</span><br><span class="line">            shutil.rmtree(os.path.dirname(temp_video_path), ignore_errors = <span class="literal">True</span>)</span><br><span class="line">            logging.info(<span class="string">f&quot;清理临时文件 <span class="subst">&#123;temp_video_path&#125;</span> 完成&quot;</span>)</span><br><span class="line">        logging.info(<span class="string">f&quot;视频处理完成：<span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_video_threaded</span>(<span class="params">video_path, output_dir, min_area=<span class="number">100</span>, max_area=<span class="number">1000</span>, threshold1=<span class="number">100</span>, threshold2=<span class="number">200</span>, move_file = <span class="literal">False</span>, max_retries = <span class="number">3</span>, retry_delay = <span class="number">5</span>, min_subtitle_frames = <span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;多线程处理视频&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       start_time = time.time()</span><br><span class="line">       result = process_video(video_path, output_dir, min_area, max_area, threshold1, threshold2, move_file, max_retries, retry_delay, min_subtitle_frames)</span><br><span class="line">       end_time = time.time()</span><br><span class="line">       cpu_percent = psutil.cpu_percent() <span class="comment"># 获取cpu使用率</span></span><br><span class="line">       logging.info(<span class="string">f&quot;视频：<span class="subst">&#123;video_path&#125;</span>, 耗时：<span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒,  CPU 利用率：<span class="subst">&#123;cpu_percent:<span class="number">.2</span>f&#125;</span>%&quot;</span>)</span><br><span class="line">       <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">      logging.error(<span class="string">f&quot;处理视频 <span class="subst">&#123;video_path&#125;</span> 失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_directory_multithreaded</span>(<span class="params">input_dir, output_dir, min_area=<span class="number">100</span>, max_area=<span class="number">1000</span>, threshold1=<span class="number">100</span>, threshold2=<span class="number">200</span>, allowed_extensions=(<span class="params"><span class="string">&#x27;.mp4&#x27;</span>, <span class="string">&#x27;.avi&#x27;</span>, <span class="string">&#x27;.mov&#x27;</span>, <span class="string">&#x27;.mkv&#x27;</span></span>), num_threads = <span class="number">4</span>, move_file = <span class="literal">False</span>, max_retries = <span class="number">3</span>, retry_delay = <span class="number">5</span>, min_subtitle_frames = <span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;多线程处理指定目录下所有视频&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(input_dir):</span><br><span class="line">      logging.error(<span class="string">f&quot;错误：输入的不是目录: <span class="subst">&#123;input_dir&#125;</span>&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    video_files = []</span><br><span class="line">    <span class="keyword">for</span> root, _, files <span class="keyword">in</span> os.walk(input_dir):</span><br><span class="line">      <span class="keyword">for</span> filename <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> filename.lower().endswith(allowed_extensions):</span><br><span class="line">          video_files.append(os.path.join(root, filename))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tqdm(total=<span class="built_in">len</span>(video_files), desc=<span class="string">&quot;处理视频&quot;</span>, unit=<span class="string">&quot;video&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">        threads = []</span><br><span class="line">        <span class="keyword">for</span> video_path <span class="keyword">in</span> video_files:</span><br><span class="line">          relative_path = os.path.relpath(video_path, input_dir)</span><br><span class="line">          output_subdir = os.path.join(output_dir, os.path.splitext(relative_path)[<span class="number">0</span>])</span><br><span class="line">          thread = threading.Thread(target=process_video_threaded, args=(video_path, output_subdir, min_area, max_area, threshold1, threshold2, move_file, max_retries, retry_delay, min_subtitle_frames))</span><br><span class="line">          threads.append(thread)</span><br><span class="line">          thread.start()</span><br><span class="line">          <span class="keyword">if</span> <span class="built_in">len</span>(threads) &gt;= num_threads:  <span class="comment"># 控制线程数量</span></span><br><span class="line">            <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">               thread.join()</span><br><span class="line">            threads = []</span><br><span class="line">          pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">          thread.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    input_dir = <span class="string">r&#x27;E:\测试&#x27;</span>  <span class="comment"># 替换为你的视频文件根目录路径</span></span><br><span class="line">    output_dir = <span class="string">r&quot;E:\测试\subtitle_videos&quot;</span>  <span class="comment"># 替换为你的字幕视频输出路径</span></span><br><span class="line">    min_area = <span class="number">100</span>  <span class="comment"># 可选参数，最小连通域面积</span></span><br><span class="line">    max_area = <span class="number">1000</span>  <span class="comment"># 可选参数，最大连通域面积</span></span><br><span class="line">    threshold1 = <span class="number">100</span>  <span class="comment"># 可选参数， canny边缘检测的阈值</span></span><br><span class="line">    threshold2 = <span class="number">200</span>  <span class="comment"># 可选参数， canny边缘检测的阈值</span></span><br><span class="line">    num_threads = <span class="number">4</span>  <span class="comment"># 可选参数， 线程数</span></span><br><span class="line">    move_file = <span class="literal">True</span> <span class="comment"># 是否移动文件</span></span><br><span class="line">    max_retries = <span class="number">3</span>  <span class="comment"># 最大重试次数</span></span><br><span class="line">    retry_delay = <span class="number">5</span> <span class="comment"># 重试间隔时间</span></span><br><span class="line">    min_subtitle_frames = <span class="number">5</span> <span class="comment"># 最小字幕帧数</span></span><br><span class="line"></span><br><span class="line">    process_directory_multithreaded(input_dir, output_dir, min_area, max_area, threshold1, threshold2, num_threads= num_threads, move_file=move_file, max_retries=max_retries, retry_delay=retry_delay, min_subtitle_frames=min_subtitle_frames)</span><br></pre></td></tr></table></figure><h2 id="tips">tips</h2><p><strong>参数解释与建议值:</strong></p><ol><li><p><strong><code>min_area = 100</code> (可选参数，最小连通域面积)</strong></p><ul><li><strong>含义：</strong> 这个参数表示在检测字幕区域时，被认为是有效字幕区域的最小连通域面积。连通域是指图像中像素值相近且相互连接的区域。</li><li><strong>单位：</strong> 像素 (pixels)。</li><li><strong>作用：</strong> 用于过滤掉过小的噪声或干扰区域，这些区域通常不是真实的字幕。</li><li><strong>建议值：</strong><ul><li><strong>默认值：</strong> <code>100</code> 是一个比较常用的起始值，适用于字幕字体大小适中的情况。</li><li><strong>调整方向：</strong><ul><li><strong>如果检测到太多噪声：</strong> 可以适当增大 <code>min_area</code> 的值，例如 <code>150</code> 或 <code>200</code>。</li><li><strong>如果漏检了小字幕：</strong> 可以适当减小 <code>min_area</code> 的值，例如 <code>50</code> 或 <code>80</code>。</li></ul></li><li><strong>具体调整：</strong><ul><li>你需要根据视频的分辨率和字幕字体大小进行调整， 如果你的视频是高清的，字幕字体比较大，则可以设置更大，反之则减小。</li><li>可以先尝试不修改，运行代码查看日志或者输出的图片，再根据结果进行调整。</li></ul></li></ul></li><li><strong>注意事项：</strong><ul><li><code>min_area</code> 的值不应设置得太小，否则会把一些小的噪点错误识别为字幕。</li></ul></li></ul></li><li><p><strong><code>max_area = 1000</code> (可选参数，最大连通域面积)</strong></p><ul><li><strong>含义：</strong> 这个参数表示在检测字幕区域时，被认为是有效字幕区域的最大连通域面积。</li><li><strong>单位：</strong> 像素 (pixels)。</li><li><strong>作用：</strong> 用于过滤掉过大的区域，例如背景或其他的文本区域。</li><li><strong>建议值：</strong><ul><li><strong>默认值：</strong> <code>1000</code> 是一个比较常用的起始值，适用于字幕字体大小适中的情况。</li><li><strong>调整方向：</strong><ul><li><strong>如果检测到过大的区域：</strong> 可以适当减小 <code>max_area</code> 的值，例如 <code>800</code> 或 <code>900</code>。</li><li><strong>如果漏检了字幕：</strong> 如果你的字幕字体非常大，或者包含多个连通区域， 可以尝试增加 <code>max_area</code> 例如 <code>1500</code>。</li></ul></li><li><strong>具体调整：</strong><ul><li>你需要根据视频的分辨率和字幕字体大小进行调整， 如果你的视频是高清的，字幕字体比较大，则可以设置更大，反之则减小。</li><li>可以先尝试不修改，运行代码查看日志或者输出的图片，再根据结果进行调整。</li></ul></li></ul></li><li><strong>注意事项：</strong><ul><li><code>max_area</code> 的值不应设置的太高，否则会将一些背景中的文字误认为是字幕。</li></ul></li></ul></li><li><p><strong><code>threshold1 = 100</code> (可选参数，Canny 边缘检测的阈值 1)</strong></p><ul><li><strong>含义：</strong>  Canny 边缘检测算法有两个阈值，<code>threshold1</code> 是较低的阈值。</li><li><strong>单位：</strong>  无单位，表示像素值变化的大小。</li><li><strong>作用：</strong> 用于检测图像中的边缘。较低的阈值将检测出更多的边缘，可能包括一些噪声。</li><li><strong>建议值：</strong><ul><li><strong>默认值：</strong> <code>100</code> 是一个比较常用的起始值。</li><li><strong>调整方向：</strong><ul><li><strong>如果检测到太多不必要的边缘：</strong> 可以适当增大 <code>threshold1</code> 的值，例如 <code>120</code> 或 <code>150</code>。</li><li><strong>如果漏检了字幕的边缘：</strong> 可以适当减小 <code>threshold1</code> 的值，例如 <code>80</code> 或 <code>90</code>。</li></ul></li><li><strong>具体调整：</strong><ul><li>需要根据视频的图像质量进行调整，如果视频比较模糊，则可以适当降低<code>threshold1</code>的值，提高检测的敏感性，反之则可以增加<code>threshold1</code>。</li><li>可以先尝试不修改，运行代码查看日志或者输出的图片，再根据结果进行调整。</li></ul></li></ul></li></ul></li><li><p><strong><code>threshold2 = 200</code> (可选参数，Canny 边缘检测的阈值 2)</strong></p><ul><li><strong>含义：</strong> <code>threshold2</code> 是 Canny 边缘检测算法中较高的阈值。</li><li><strong>单位：</strong> 无单位，表示像素值变化的大小。</li><li><strong>作用：</strong> 较高阈值用于过滤掉弱边缘，确保只留下较强的边缘。</li><li><strong>建议值：</strong><ul><li><strong>默认值:</strong> <code>200</code> 是一个比较常用的起始值。</li><li><strong>调整方向:</strong><ul><li><strong>如果检测到太多不必要的边缘:</strong> 可以适当增大 <code>threshold2</code> 的值，例如 <code>220</code> 或 <code>250</code>。</li><li><strong>如果漏检了字幕的边缘:</strong> 可以适当减小 <code>threshold2</code> 的值，例如 <code>180</code> 或 <code>190</code>。</li></ul></li><li><strong>具体调整:</strong><ul><li><code>threshold2</code>的值需要高于<code>threshold1</code>的值， 你可以根据视频的图像质量进行调整，如果视频比较模糊，则可以适当降低<code>threshold2</code>的值，提高检测的敏感性，反之则可以增加<code>threshold2</code>。</li><li>可以先尝试不修改，运行代码查看日志或者输出的图片，再根据结果进行调整。</li></ul></li></ul></li><li><strong>注意事项:</strong><ul><li><code>threshold2</code> 的值不应与 <code>threshold1</code> 相差过大，否则边缘检测可能会失败。</li></ul></li></ul></li><li><p><strong><code>num_threads = 4</code> (可选参数，线程数)</strong></p><ul><li><strong>含义：</strong>  用于指定多线程处理视频时使用的线程数量。</li><li><strong>单位：</strong> 线程数。</li><li><strong>作用：</strong>  多线程可以提高视频处理速度，充分利用 CPU 资源。</li><li><strong>建议值：</strong><ul><li><strong>默认值:</strong> <code>4</code> 是一个比较常用的起始值，适用于大多数 4 核或 8 核 CPU。</li><li><strong>调整方向:</strong><ul><li><strong>如果你的 CPU 核心数较少：</strong> 可以适当减小 <code>num_threads</code> 的值，例如 <code>2</code>。</li><li><strong>如果你的 CPU 核心数较多，且资源充足:</strong> 可以适当增加 <code>num_threads</code> 的值，例如 <code>8</code> 或 <code>16</code>。</li></ul></li><li><strong>具体调整：</strong><ul><li>你需要根据你的CPU的性能进行调整，如果CPU性能比较强，可以适当提高，否则则可以降低。</li><li>如果多线程处理导致内存占用过多，可以考虑降低线程数量。</li></ul></li></ul></li><li><strong>注意事项：</strong><ul><li><code>num_threads</code> 不应超过你 CPU 的核心数，过多的线程可能会导致性能下降，资源占用过多。</li></ul></li></ul></li><li><p><strong><code>move_file = True</code> (可选参数，是否移动文件)</strong></p><ul><li><strong>含义：</strong>  一个布尔值，决定是否将检测到字幕的视频文件移动到输出文件夹。</li><li><strong>取值：</strong>  <code>True</code> (移动文件) 或 <code>False</code> (不移动文件)。</li><li><strong>作用：</strong><ul><li><code>True</code>: 将检测到字幕的视频文件移动到输出文件夹。</li><li><code>False</code>: 只检测视频中是否有字幕，不移动视频文件。</li></ul></li><li><strong>建议值：</strong><ul><li><strong>根据你的需求选择:</strong> 如果你需要整理有字幕的视频文件，设置为 <code>True</code>；如果只需要检测字幕，则设置为 <code>False</code>。</li></ul></li></ul></li><li><p><strong><code>max_retries = 3</code> (可选参数，最大重试次数)</strong></p><ul><li><strong>含义：</strong>  当移动视频文件失败时，代码会尝试重新移动的最大次数。</li><li><strong>单位：</strong>  次数。</li><li><strong>作用：</strong>  避免由于临时文件占用导致的移动失败，保证代码的鲁棒性。</li><li><strong>建议值：</strong><ul><li><strong>默认值：</strong> <code>3</code> 是一个比较常用的起始值。</li><li><strong>调整方向：</strong><ul><li>如果你的运行环境经常出现文件被占用的问题，可以考虑增加次数，比如<code>5</code></li><li>如果对速度要求比较高，可以考虑减小次数，比如 <code>2</code></li></ul></li></ul></li><li><strong>注意事项：</strong><ul><li><code>max_retries</code> 不宜设置过高，避免一直等待占用资源。</li></ul></li></ul></li><li><p><strong><code>retry_delay = 5</code> (可选参数，重试间隔时间)</strong></p><ul><li><strong>含义：</strong>  当移动视频文件失败时，代码等待多长时间再次尝试移动，单位为秒。</li><li><strong>单位：</strong> 秒 (seconds)。</li><li><strong>作用：</strong>  避免频繁地重试占用文件导致系统资源紧张。</li><li><strong>建议值：</strong><ul><li><strong>默认值：</strong> <code>5</code> 秒是一个比较常用的起始值。</li><li><strong>调整方向：</strong><ul><li>如果你认为5秒的等待时间太长，可以缩短为<code>3</code> 或者更小。</li><li>如果你认为5秒的等待时间太短，可以加长到<code>10</code> 或者更多。</li></ul></li></ul></li><li><strong>注意事项：</strong><ul><li><code>retry_delay</code> 的时间不应过短，否则可能仍然因为资源未释放而移动失败。</li></ul></li></ul></li></ol><h2 id="图像处理算法详解-2">图像处理算法详解</h2><h2 id="1-图像缩放-Image-Resizing-2">1. 图像缩放 (Image Resizing)</h2><h3 id="原理-4">原理</h3><p>图像缩放是指改变图像的尺寸，包括放大（upscaling）和缩小（downscaling）两种操作。其基本原理是通过像素插值算法，在新的尺寸下估计图像像素的值。</p><h3 id="技术-4">技术</h3><p>常用的图像缩放技术包括：</p><ul><li><strong>最近邻插值 (Nearest Neighbor Interpolation):</strong><ul><li><strong>原理:</strong> 将目标图像的像素值设置为源图像中距离最近的像素值。</li><li><strong>特点:</strong> 简单快速，但可能导致图像边缘出现锯齿状。</li></ul></li><li><strong>双线性插值 (Bilinear Interpolation):</strong><ul><li><strong>原理:</strong>  使用目标图像像素周围的 2x2 邻域像素值进行双线性插值计算。</li><li><strong>特点:</strong> 图像效果比最近邻插值平滑，计算量适中。</li></ul></li><li><strong>双三次插值 (Bicubic Interpolation):</strong><ul><li><strong>原理:</strong>  使用目标图像像素周围的 4x4 邻域像素值进行双三次插值计算。</li><li><strong>特点:</strong> 图像效果较好，细节保留较多，但计算量较大。</li></ul></li><li><strong>基于深度学习的超分辨率 (Super-Resolution):</strong><ul><li><strong>原理:</strong> 使用深度学习模型 (例如, SRCNN, EDSR, ESRGAN) 从低分辨率图像重建高分辨率图像.</li><li><strong>特点:</strong> 可以生成高质量的图像，但是计算量大，需要大量的训练数据。</li></ul></li></ul><h3 id="用途-3">用途</h3><ul><li><strong>调整图像大小：</strong>  适应不同的显示设备或应用场景。</li><li><strong>预处理步骤：</strong>  作为其他图像处理算法 (如目标检测, OCR) 的预处理步骤.</li><li><strong>生成不同分辨率的图像：</strong>  用于创建图像金字塔或进行多尺度分析。</li></ul><h2 id="2-图像裁剪-Image-Cropping-2">2. 图像裁剪 (Image Cropping)</h2><h3 id="原理-5">原理</h3><p>图像裁剪是指从图像中选择一个矩形区域，然后将其提取出来。其基本原理是根据指定的起始坐标和宽高，截取图像对应的像素数据。</p><h3 id="技术-5">技术</h3><ul><li><strong>矩形裁剪:</strong>  指定矩形左上角坐标(x, y) 和矩形的宽度 (w) 和高度 (h)，然后提取这个矩形区域的像素。</li><li><strong>任意形状裁剪:</strong>  使用掩码 (mask) 来指定需要裁剪的区域，mask 可以是任意形状。</li></ul><h3 id="用途-4">用途</h3><ul><li><strong>去除图像中不必要的区域：</strong> 突出感兴趣的目标对象或区域。</li><li><strong>调整图像构图：</strong>  重新构图，使图像更符合需求。</li><li><strong>数据增强：</strong> 作为图像数据增强的一种方法，可以生成不同的图像样本。</li></ul><h2 id="3-图像拼接-Image-Stitching-2">3. 图像拼接 (Image Stitching)</h2><h3 id="原理-6">原理</h3><p>图像拼接是指将多张具有重叠区域的图像拼接成一张完整的全景图像。其基本原理包括图像配准和图像融合两个步骤。</p><h3 id="技术-6">技术</h3><ul><li><strong>特征检测和匹配 (Feature Detection and Matching):</strong><ul><li><strong>目的:</strong>  提取图像中的特征点 (如 SIFT, SURF, ORB 等) 并进行匹配，找到图像之间的对应关系。</li></ul></li><li><strong>图像配准 (Image Registration):</strong><ul><li><strong>目的:</strong>  根据匹配到的特征点，计算图像之间的变换关系，将图像对齐。</li><li><strong>技术:</strong> 使用如 RANSAC 等算法估计图像的变换矩阵。</li></ul></li><li><strong>图像融合 (Image Blending):</strong><ul><li><strong>目的:</strong> 将对齐的图像拼接成一张完整的图像。</li><li><strong>技术:</strong>  使用如多频带融合或加权平均等方法处理图像重叠区域，避免明显的接缝。</li></ul></li><li><strong>柱面投影:</strong><ul><li>**目的:**将图像映射到柱面坐标系，以便更好地拼接水平方向上视角变化很大的图像。</li></ul></li></ul><h3 id="用途-5">用途</h3><ul><li><strong>生成全景图：</strong>  将多张图片拼接成一张宽视野的全景图像。</li><li><strong>创建高分辨率图像：</strong>  将多张低分辨率图像拼接成一张高分辨率图像。</li><li><strong>创建 3D 模型：</strong>  通过多张图片可以重建 3D 模型。</li></ul><h2 id="4-图像去噪-Image-Denoising">4. 图像去噪 (Image Denoising)</h2><h3 id="原理-7">原理</h3><p>图像去噪是指减少图像中噪声的技术。噪声是指图像中不希望出现的随机干扰信号。其基本原理是区分图像中的有用信号和噪声信号，然后对噪声信号进行抑制或去除。</p><h3 id="技术-7">技术</h3><ul><li><strong>空域滤波 (Spatial Filtering):</strong><ul><li><strong>原理:</strong> 使用滤波器对图像像素进行加权平均，以平滑图像，降低噪声。</li><li><strong>技术:</strong><ul><li><strong>均值滤波 (Mean Filtering):</strong> 使用邻域像素的平均值替换中心像素值。</li><li><strong>高斯滤波 (Gaussian Filtering):</strong> 使用高斯核对邻域像素进行加权平均。</li><li><strong>中值滤波 (Median Filtering):</strong> 使用邻域像素的中值替换中心像素值，可以去除脉冲噪声。</li><li><strong>双边滤波 (Bilateral Filtering):</strong> 结合像素的空间距离和值域相似度，在去除噪声的同时保持边缘。</li></ul></li></ul></li><li><strong>频域滤波 (Frequency Filtering):</strong><ul><li><strong>原理:</strong> 将图像转换到频域，对噪声频率进行抑制。</li><li><strong>技术:</strong>  使用如低通滤波器 (Low-Pass Filter) 减少高频噪声。</li></ul></li><li><strong>基于深度学习的方法:</strong><ul><li><strong>原理:</strong> 使用深度学习模型 (例如，DnCNN, FFDNet, RIDNet) 从噪声图像重建清晰的图像.</li><li><strong>特点:</strong> 可以取得较好的去噪效果，但是模型训练需要大量的带噪声和无噪声的图像对。</li></ul></li></ul><h3 id="用途-6">用途</h3><ul><li><strong>提高图像质量：</strong>  去除图像中的噪声，使图像更加清晰。</li><li><strong>预处理步骤：</strong> 作为其他图像处理算法的预处理步骤，例如，用于提高目标检测或 OCR 的准确率。</li><li><strong>增强图像可读性：</strong> 降低噪声对图像的干扰，使人眼更容易识别图像内容。</li></ul><h2 id="5-图像修复-Image-Inpainting">5. 图像修复 (Image Inpainting)</h2><h3 id="原理-8">原理</h3><p>图像修复是指根据图像中已知区域的信息，恢复图像中缺失或损坏区域的技术。其基本原理是分析图像的结构和纹理信息，然后使用插值、纹理合成等方法，填充缺失区域。</p><h3 id="技术-8">技术</h3><ul><li><strong>基于扩散 (Diffusion) 的方法:</strong><ul><li><strong>原理:</strong>  根据周围的像素值逐步填充缺失区域，模拟热扩散过程。</li><li><strong>技术:</strong>  可以使用如 Navier-Stokes 方程进行建模。</li></ul></li><li><strong>基于纹理合成 (Texture Synthesis) 的方法:</strong><ul><li><strong>原理:</strong>  使用周围区域的纹理来填充缺失区域。</li><li><strong>技术:</strong>  可以使用基于样本的方法或基于马尔可夫随机场的方法。</li></ul></li><li><strong>基于深度学习的方法:</strong><ul><li><strong>原理:</strong>  使用深度学习模型 (例如，Context Encoder, GAN) 从已知的区域推断缺失区域的内容。</li><li><strong>特点:</strong>  可以实现较为真实的图像修复，特别是对于复杂结构和纹理的修复。</li></ul></li></ul><h3 id="用途-7">用途</h3><ul><li><strong>修复损坏的图像：</strong>  例如，修复老照片或损坏的文物图片。</li><li><strong>移除图像中的遮挡物：</strong>  例如，移除图像中的文字、水印、或不想要的对象。</li><li><strong>图像编辑：</strong>  实现高级的图像编辑功能，如移除人像上的斑点或修复背景中的瑕疵。</li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;基于Easyocr的文字识别&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;EasyOCR 是一个开源的 OCR (光学字符识别) 工具，能够快速并高效地从图像中提取文本。与其他OCR工具如 Tesseract 相比，EasyOCR 具有更强的多语言支持，包括对中文、日语、阿</summary>
      
    
    
    
    
    <category term="python" scheme="https://caozhaoqi.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在ubuntu系统使用docker安装 CVAT</title>
    <link href="https://caozhaoqi.github.io/2025/01/10/docker-install-cvat/"/>
    <id>https://caozhaoqi.github.io/2025/01/10/docker-install-cvat/</id>
    <published>2025-01-10T15:39:49.000Z</published>
    <updated>2025-03-04T09:03:20.808Z</updated>
    
    <content type="html"><![CDATA[<h1>在ubuntu系统使用docker安装 CVAT</h1><blockquote><p>CVAT 是一个<strong>免费、开源</strong>的 Web 应用程序，用于标注计算机视觉任务的数据集。它由 Intel 开发并维护，旨在为各种计算机视觉应用提供一个高效、强大且协作式的标注平台。</p></blockquote><h2 id="功能">功能</h2><ol><li><p><strong>多模态数据标注：</strong></p><ul><li><strong>图像标注：</strong> 支持各种图像标注类型，包括：<ul><li><strong>边界框 (Bounding Boxes):</strong> 用于检测和定位物体。</li><li><strong>多边形 (Polygons):</strong> 用于精确勾勒复杂形状的物体。</li><li><strong>关键点 (Keypoints):</strong> 用于标注物体的关键部位，如人脸关键点。</li><li><strong>线条 (Lines) 和 点 (Points):</strong> 用于简单形状或目标的标注。</li><li><strong>分割掩码 (Segmentation Masks):</strong> 用于像素级别的对象分割（需要与其他工具结合，如半自动标注工具）。</li></ul></li><li><strong>视频标注：</strong><ul><li>支持对视频中的对象进行跟踪和标注，并可以对每帧进行修改，方便动作识别和视频分析。</li></ul></li><li><strong>3D 数据标注：</strong><ul><li>可以标注3D 点云数据，支持点云的 bounding box 和 segmentation。</li></ul></li></ul></li><li><p><strong>强大的用户界面：</strong></p><ul><li><strong>直观易用：</strong> 提供简洁的用户界面，方便用户快速上手。</li><li><strong>自定义快捷键：</strong> 可自定义快捷键，提高标注效率。</li><li><strong>分屏显示：</strong> 可以同时显示多个图像/视频片段，方便对比标注。</li><li><strong>可定制的标注标签：</strong> 允许用户创建自己的标注标签，满足不同任务的需求。</li><li><strong>标注历史记录:</strong> 可以查看和回溯标注操作。</li></ul></li><li><p><strong>协作式标注：</strong></p><ul><li><strong>多用户支持：</strong> 支持多个用户同时协作标注同一个项目，提高标注效率。</li><li><strong>角色权限管理：</strong> 可以为不同的用户设置不同的角色和权限。</li><li><strong>标注任务分配：</strong> 可以将标注任务分配给不同的用户。</li><li><strong>标注审核：</strong> 管理员可以对标注结果进行审核，确保标注质量。</li></ul></li><li><p><strong>自动化和半自动化标注：</strong></p><ul><li><strong>预标注支持：</strong> 支持导入使用其他工具预先标注的结果，作为标注的起点。</li><li><strong>半自动标注工具:</strong> 可以使用一些半自动标注工具，例如智能多边形生成、模型辅助标注等，提高标注速度。</li><li><strong>模型集成：</strong> 可以集成深度学习模型，用于辅助标注。</li></ul></li><li><p><strong>数据管理：</strong></p><ul><li><strong>项目管理：</strong> 可以创建不同的标注项目，组织和管理标注数据。</li><li><strong>数据集导入和导出：</strong> 支持导入各种格式的数据集，并导出为多种标注格式，例如 COCO、PASCAL VOC、YOLO 等。</li><li><strong>数据版本控制：</strong> 可以追踪数据和标注的变更，方便进行版本控制。</li><li><strong>数据统计：</strong> 可以查看标注数据的统计信息，如标注数量、标注类型等。</li><li><strong>可定制化的工作流程：</strong> 支持自定义标注的工作流程，例如预标注，标注，审核等。</li></ul></li><li><p><strong>扩展性和可定制性：</strong></p><ul><li><strong>开放的 API：</strong> 提供 RESTful API，方便与其他系统集成。</li><li><strong>插件支持：</strong> 可以开发自己的插件，扩展 CVAT 的功能。</li><li><strong>Docker 支持：</strong> 可以使用 Docker 快速部署 CVAT。</li></ul></li></ol><p><strong>Ubuntu 系统:</strong> 建议使用 Ubuntu 20.04 或更高版本。</p><ul><li><strong>Docker 和 Docker Compose:</strong> 你需要在你的 Ubuntu 系统上安装 Docker 和 Docker Compose。</li></ul><p><strong>步骤：</strong></p><ol><li><p><strong>更新系统包列表：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure></li><li><p><strong>安装 Docker：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install docker.io</span><br></pre></td></tr></table></figure><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br><span class="line">docker --version</span><br></pre></td></tr></table></figure><p>如果命令输出了Docker版本信息，则说明安装成功。</p></li><li><p><strong>安装 Docker Compose：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install docker-compose</span><br></pre></td></tr></table></figure><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>如果命令输出了Docker Compose版本信息，则说明安装成功。</p></li><li><p><strong>下载 CVAT 配置文件：</strong></p><ul><li><p>CVAT 的官方 GitHub 仓库提供了 <code>docker-compose.yml</code> 文件，直接下载使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/opencv/cvat/develop/docker-compose.yml</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>修改 docker-compose.yml 文件：</strong></p><ul><li>找到  <code>services/cvat/volumes:</code> 模块，将其修改为：</li></ul> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cvat_data:/home/django/data</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">./data:/home/django/media</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">./logs:/home/django/logs</span></span><br></pre></td></tr></table></figure><p>这样可以方便地将你的数据放到当前目录的data和logs文件夹下，并且避免了默认数据目录在Docker容器内，数据丢失的问题。</p><ul><li>在 <code>version</code> 的下面加上  <code>networks:</code></li></ul> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">default:</span></span><br></pre></td></tr></table></figure><p>确保其他容器能够访问到CVAT服务</p></li><li><p><strong>创建数据目录:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> data</span><br><span class="line"><span class="built_in">mkdir</span> logs</span><br></pre></td></tr></table></figure></li><li><p><strong>启动 CVAT：</strong></p><ul><li><p>在 <code>docker-compose.yml</code> 文件所在的目录下，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><ul><li><code>-d</code> 参数表示在后台运行 (detached mode)。</li><li>首次运行会下载所需的 Docker 镜像，这可能需要一些时间。</li></ul></li></ul></li><li><p><strong>等待 CVAT 启动：</strong></p><ul><li><p>可以使用以下命令查看容器是否正常运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure></li><li><p>如果所有容器的状态都是 <code>Up</code>，则表示 CVAT 已经启动成功。</p></li><li><p>也可以使用 <code>docker logs -f &lt;cvat_container_id&gt; </code> 来查看cvat 容器的日志。<code>&lt;cvat_container_id&gt;</code> 你可以使用<code>docker ps</code> 命令查看。</p></li></ul></li><li><p><strong>访问 CVAT：</strong></p><ul><li>在你的 Web 浏览器中，打开以下地址：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure></li><li>默认的管理员用户名是 <code>admin</code>，密码是 <code>admin</code>。<ul><li><strong>首次登录后请立即修改管理员密码！</strong></li></ul></li></ul></li><li><p><strong>可选：创建新的管理员用户</strong></p><ul><li>你可以在用户管理页面创建新的管理员用户</li></ul></li></ol><p><strong>常用命令：</strong></p><ul><li><p><strong>停止 CVAT：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure></li><li><p><strong>重启 CVAT：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure></li><li><p><strong>查看容器日志：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose logs -f</span><br></pre></td></tr></table></figure></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;在ubuntu系统使用docker安装 CVAT&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;CVAT 是一个&lt;strong&gt;免费、开源&lt;/strong&gt;的 Web 应用程序，用于标注计算机视觉任务的数据集。它由 Intel 开发并维护，旨在为各种计算机视觉应用提供一个高效</summary>
      
    
    
    
    
    <category term="python" scheme="https://caozhaoqi.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>借助深度学习模型实现分离人声与背景声</title>
    <link href="https://caozhaoqi.github.io/2025/01/01/split-voice/"/>
    <id>https://caozhaoqi.github.io/2025/01/01/split-voice/</id>
    <published>2025-01-01T13:17:53.000Z</published>
    <updated>2025-03-04T09:06:46.533Z</updated>
    
    <content type="html"><![CDATA[<h1>借助深度学习模型实现分离人声与背景声</h1><h2 id="spleeter">spleeter</h2><blockquote><p>Spleeter 是一个由 Deezer 开发的音频源分离工具，支持将音频分离为伴奏和人声。</p></blockquote><h2 id="技术库">技术库</h2><ul><li>spleeter</li><li>ffmpeg</li><li>open-unmix</li><li>demuicx</li></ul><h2 id="安装使用">安装使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install spleeter</span><br></pre></td></tr></table></figure><h2 id="简单demo">简单demo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spleeter separate -i audio.wav -p spleeter:2stems -o output/</span><br></pre></td></tr></table></figure><h2 id="实现人声与背景音分离">实现人声与背景音分离</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> spleeter.separator <span class="keyword">import</span> Separator</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输入和输出路径</span></span><br><span class="line">video_file = <span class="string">&#x27;input_video.mp4&#x27;</span>  <span class="comment"># 输入视频文件</span></span><br><span class="line">audio_file = <span class="string">&#x27;extracted_audio.wav&#x27;</span>  <span class="comment"># 提取的音频文件</span></span><br><span class="line">output_dir = <span class="string">&#x27;output&#x27;</span>  <span class="comment"># 输出文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤 1: 使用 ffmpeg 提取音频</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_audio_from_video</span>(<span class="params">video_file, audio_file</span>):</span><br><span class="line">    command = [</span><br><span class="line">        <span class="string">&#x27;ffmpeg&#x27;</span>, <span class="string">&#x27;-i&#x27;</span>, video_file, <span class="string">&#x27;-vn&#x27;</span>, <span class="string">&#x27;-acodec&#x27;</span>, <span class="string">&#x27;pcm_s16le&#x27;</span>, <span class="string">&#x27;-ar&#x27;</span>, <span class="string">&#x27;44100&#x27;</span>, <span class="string">&#x27;-ac&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, audio_file</span><br><span class="line">    ]</span><br><span class="line">    subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Audio extracted to <span class="subst">&#123;audio_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤 2: 使用 Spleeter 分离音频中的人声和伴奏</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">separate_audio</span>(<span class="params">audio_file, output_dir</span>):</span><br><span class="line">    separator = Separator(<span class="string">&#x27;spleeter:2stems&#x27;</span>)  <span class="comment"># 选择分离人声和伴奏</span></span><br><span class="line">    separator.separate_to_file(audio_file, output_dir)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Audio separation complete. Files saved in <span class="subst">&#123;output_dir&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤 3: 合并去除人声的伴奏与原视频</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_audio_with_video</span>(<span class="params">video_file, audio_file, output_video_file</span>):</span><br><span class="line">    command = [</span><br><span class="line">        <span class="string">&#x27;ffmpeg&#x27;</span>, <span class="string">&#x27;-i&#x27;</span>, video_file, <span class="string">&#x27;-i&#x27;</span>, audio_file, <span class="string">&#x27;-c:v&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, <span class="string">&#x27;-c:a&#x27;</span>, <span class="string">&#x27;aac&#x27;</span>, <span class="string">&#x27;-strict&#x27;</span>, <span class="string">&#x27;experimental&#x27;</span>, output_video_file</span><br><span class="line">    ]</span><br><span class="line">    subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Video saved as <span class="subst">&#123;output_video_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_video</span>(<span class="params">video_file</span>):</span><br><span class="line">    <span class="comment"># 提取音频</span></span><br><span class="line">    extract_audio_from_video(video_file, audio_file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分离音频</span></span><br><span class="line">    separate_audio(audio_file, output_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取分离后的伴奏音频路径</span></span><br><span class="line">    accompaniment_audio = os.path.join(output_dir, os.path.basename(audio_file).replace(<span class="string">&#x27;.wav&#x27;</span>, <span class="string">&#x27;/accompaniment.wav&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(accompaniment_audio):</span><br><span class="line">        <span class="comment"># 合并伴奏和视频</span></span><br><span class="line">        output_video_file = <span class="string">&#x27;output_video.mp4&#x27;</span></span><br><span class="line">        merge_audio_with_video(video_file, accompaniment_audio, output_video_file)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Process complete, output video created.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error: Accompaniment audio file not found.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">process_video(video_file)</span><br></pre></td></tr></table></figure><blockquote><p>ffmpeg 提取音频时，默认将视频中的音频轨道提取为 .wav 格式。如果你的音频有不同的格式（如 .mp3），你可以根据需要修改提取音频的格式。</p></blockquote><blockquote><p>Spleeter 使用的是深度学习模型，因此分离质量取决于模型的效果，尽管它能较好地分离人声和伴奏，但结果可能不是完美的。</p></blockquote><h2 id="输出文件说明">输出文件说明</h2><ul><li><p>accompaniment.wav：分离出的伴奏音轨，去除了人声。</p></li><li><p>vocals.wav：分离出的人声音轨。</p></li><li><p>output_video.mp4：生成的去人声视频。</p></li></ul><h2 id="GUI-实现">GUI 实现</h2><ul><li>分割视频出音频数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> VideoFileClip</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_audio_from_video</span>(<span class="params">video_path, output_audio_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从视频中提取音频并保存为 WAV 格式。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param video_path: 输入视频文件路径</span></span><br><span class="line"><span class="string">    :param output_audio_path: 输出音频文件路径 (例如: &#x27;output_audio.wav&#x27;)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 读取视频文件</span></span><br><span class="line">        video = VideoFileClip(video_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取音频</span></span><br><span class="line">        audio = video.audio</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 写入音频文件，保存为 WAV 格式</span></span><br><span class="line">        audio.write_audiofile(output_audio_path, codec=<span class="string">&#x27;pcm_s16le&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 释放资源</span></span><br><span class="line">        audio.close()</span><br><span class="line">        video.close()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;音频已成功提取并保存为: <span class="subst">&#123;output_audio_path&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理视频时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例使用</span></span><br><span class="line">video_path = <span class="string">&quot;input_video.mp4&quot;</span>  <span class="comment"># 输入的视频文件路径</span></span><br><span class="line">output_audio_path = <span class="string">&quot;output_audio.wav&quot;</span>  <span class="comment"># 输出的音频文件路径</span></span><br><span class="line"></span><br><span class="line">extract_audio_from_video(video_path, output_audio_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在如下路径下载(需要科学上网)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://makenweb.com/SpleeterGUI</span><br></pre></td></tr></table></figure><blockquote><p>下载成功后，导入上述步骤输出音频输出开始转换</p></blockquote><h2 id="demucs-分离">demucs 分离</h2><blockquote><p>Demucs 是 Facebook AI Research (FAIR) 发布的一个强大的深度学习音频分离模型，它能够将音乐分离成多个成分（如人声、鼓声、贝斯、其他）。Demucs 采用了时域卷积网络（Temporal Convolutional Networks，TCNs），在音频分离中表现得非常优秀，特别是在复杂音频和多种音频成分混合的情况下</p></blockquote><h3 id="安装使用-2">安装使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install demucs</span><br><span class="line">demucs output.wav</span><br></pre></td></tr></table></figure><h2 id="openunmix-分离">openunmix 分离</h2><blockquote><p>Open-Unmix 是一个专为音频分离设计的开源深度学习模型，特别适用于分离音乐中的人声与伴奏。它是基于 PyTorch 实现的，能够将音频分离成多个来源（通常为人声、鼓、贝斯和其他伴奏）。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install openunmix</span><br><span class="line">umx input_audio.wav</span><br></pre></td></tr></table></figure><h2 id="脚本实现">脚本实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># openumix</span></span><br><span class="line"><span class="keyword">import</span> openunmix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分离音频</span></span><br><span class="line">input_file = <span class="string">&quot;input_audio.wav&quot;</span></span><br><span class="line">output_dir = <span class="string">&quot;output_directory&quot;</span></span><br><span class="line">umx = openunmix.Umx()</span><br><span class="line">umx.separate(input_file, output_dir)</span><br><span class="line"><span class="comment"># demucs</span></span><br><span class="line"><span class="keyword">import</span> demucs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分离音频</span></span><br><span class="line">input_file = <span class="string">&quot;input_audio.wav&quot;</span></span><br><span class="line">output_dir = <span class="string">&quot;output_directory&quot;</span></span><br><span class="line">demucs.separate(input_file, output_dir)</span><br></pre></td></tr></table></figure><ul><li>无音频数据视频与无人声数据合并</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_video_audio</span>(<span class="params">video_file, audio_file, output_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 FFmpeg 合并视频和音频。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param video_file: 输入的视频文件路径</span></span><br><span class="line"><span class="string">    :param audio_file: 输入的音频文件路径</span></span><br><span class="line"><span class="string">    :param output_file: 合并后的输出视频路径</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    command = [</span><br><span class="line">        <span class="string">r&#x27;D:\ffmpeg-7.0.2-essentials_build\bin\ffmpeg.exe&#x27;</span>,  <span class="comment"># FFmpeg 可执行文件的路径</span></span><br><span class="line">        <span class="string">&#x27;-i&#x27;</span>, video_file,  <span class="comment"># 输入视频文件</span></span><br><span class="line">        <span class="string">&#x27;-i&#x27;</span>, audio_file,  <span class="comment"># 输入音频文件</span></span><br><span class="line">        <span class="string">&#x27;-c:v&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>,  <span class="comment"># 保持视频编解码格式不变</span></span><br><span class="line">        <span class="string">&#x27;-c:a&#x27;</span>, <span class="string">&#x27;aac&#x27;</span>,  <span class="comment"># 设置音频编码格式为 AAC</span></span><br><span class="line">        <span class="string">&#x27;-strict&#x27;</span>, <span class="string">&#x27;experimental&#x27;</span>,  <span class="comment"># 允许使用实验性的音频编解码器</span></span><br><span class="line">        <span class="string">&#x27;-map&#x27;</span>, <span class="string">&#x27;0:v:0&#x27;</span>,  <span class="comment"># 映射视频流</span></span><br><span class="line">        <span class="string">&#x27;-map&#x27;</span>, <span class="string">&#x27;1:a:0&#x27;</span>,  <span class="comment"># 映射音频流</span></span><br><span class="line">        <span class="string">&#x27;-y&#x27;</span>,  <span class="comment"># 覆盖输出文件（如果存在）</span></span><br><span class="line">        output_file  <span class="comment"># 输出合并后的文件</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        subprocess.run(command, check=<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;视频和音频已成功合并并保存为: <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;合并过程中出现错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan_and_merge</span>(<span class="params">video_dir, audio_dir, output_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    扫描视频和音频文件夹中的所有文件，并合并一一对应的文件。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param video_dir: 存放视频文件的目录</span></span><br><span class="line"><span class="string">    :param audio_dir: 存放音频文件的目录</span></span><br><span class="line"><span class="string">    :param output_dir: 输出合并后文件的目录</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 递归获取视频文件夹中的所有 .mp4 文件</span></span><br><span class="line">    video_files = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(video_dir):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.mp4&#x27;</span>):</span><br><span class="line">                video_files.append(os.path.join(root, file))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归获取音频文件夹中的所有 .wav 文件</span></span><br><span class="line">    audio_files = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(audio_dir):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.wav&#x27;</span>):</span><br><span class="line">                audio_files.append(os.path.join(root, file))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确保输出文件夹存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">        os.makedirs(output_dir)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> video_file <span class="keyword">in</span> video_files:</span><br><span class="line">        <span class="comment"># 获取不带路径的文件名（不包括扩展名）</span></span><br><span class="line">        video_name = os.path.splitext(os.path.basename(video_file))[<span class="number">0</span>].replace(<span class="string">&quot;_no_audio&quot;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查找对应的音频文件（从音频文件所在的父目录名称进行匹配）</span></span><br><span class="line">        matching_audio_file = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> audio_file <span class="keyword">in</span> audio_files:</span><br><span class="line">            <span class="comment"># 获取音频文件的父目录名称</span></span><br><span class="line">            audio_file_parent_dir = os.path.basename(os.path.dirname(audio_file))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 使用音频文件父目录名称进行匹配</span></span><br><span class="line">            <span class="keyword">if</span> video_name <span class="keyword">in</span> audio_file_parent_dir:</span><br><span class="line">                matching_audio_file = audio_file</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> matching_audio_file:</span><br><span class="line">            <span class="comment"># 构造输出文件路径</span></span><br><span class="line">            output_path = os.path.join(output_dir, <span class="string">f&quot;<span class="subst">&#123;video_name&#125;</span>_merged.mp4&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 合并视频和音频</span></span><br><span class="line">            merge_video_audio(video_file, matching_audio_file, output_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;找不到与 <span class="subst">&#123;video_file&#125;</span> 对应的音频文件.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例使用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    video_dir = <span class="string">r&#x27;D:\pythonProject\audio_record_server\src\utils\output_video_dir&#x27;</span>  <span class="comment"># 视频文件夹路径</span></span><br><span class="line">    audio_dir = <span class="string">r&#x27;D:\pythonProject\audio_record_server\src\utils\output_audio_umxl&#x27;</span>  <span class="comment"># 音频文件夹路径</span></span><br><span class="line">    output_dir = <span class="string">r&#x27;D:\pythonProject\audio_record_server\src\utils\output_result&#x27;</span>  <span class="comment"># 输出文件夹路径</span></span><br><span class="line"></span><br><span class="line">    scan_and_merge(video_dir, audio_dir, output_dir)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="效果对比">效果对比</h2><table><thead><tr><th>库</th><th>spleeter</th><th>demuics</th><th>open-unmix</th></tr></thead><tbody><tr><td>人声分离效果</td><td>差</td><td>较好</td><td>较好</td></tr><tr><td>有无GUI</td><td>有</td><td></td><td></td></tr><tr><td>速度</td><td>10s</td><td>5s</td><td>2s</td></tr><tr><td>备注</td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>上述对比为同时处理32s时长 wav格式采样率为44100khz，比特率：1411kps，立体声的音频结果对比</p></blockquote><h2 id="效果测试">效果测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2024/12/26 16:57</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(czq)</span></span><br><span class="line"><span class="string">Version:  V 0.1</span></span><br><span class="line"><span class="string">File:     video_split_audio.py</span></span><br><span class="line"><span class="string">Describe: Write during the python at zgxmt, Github link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> openunmix</span><br><span class="line"><span class="keyword">import</span> demucs</span><br><span class="line"><span class="keyword">from</span> moviepy <span class="keyword">import</span> VideoFileClip, AudioFileClip, CompositeVideoClip</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> soundfile <span class="keyword">as</span> sf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> utils.meger_video_audio <span class="keyword">import</span> scan_and_merge</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局变量</span></span><br><span class="line">OUTPUT_AUDIO_UMXL = <span class="string">&quot;./output_audio_umxl&quot;</span></span><br><span class="line">OUTPUT_AUDIO_DEMUCS = <span class="string">&quot;./output_audio_demucs&quot;</span></span><br><span class="line">PROCESSED_FILES = <span class="built_in">set</span>()  <span class="comment"># 用于记录已处理的文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_audio_from_video</span>(<span class="params">video_path, output_audio_dir, output_video_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从视频中提取音频并保存为 WAV 格式。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param video_path: 输入视频文件路径</span></span><br><span class="line"><span class="string">    :param output_audio_dir: 输出音频文件目录</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取视频文件名（不含扩展名）</span></span><br><span class="line">        video_name = os.path.basename(video_path).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出音频文件路径</span></span><br><span class="line">        output_audio_path = os.path.join(output_audio_dir, <span class="string">f&quot;<span class="subst">&#123;video_name&#125;</span>.wav&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出不含音频的视频文件路径</span></span><br><span class="line">        output_video_path = os.path.join(output_video_dir, <span class="string">f&quot;<span class="subst">&#123;video_name&#125;</span>_no_audio.mp4&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查音频文件是否已经存在，避免重复提取</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(output_audio_path):</span><br><span class="line">            logging.warning(<span class="string">f&quot;音频文件已存在，跳过提取：<span class="subst">&#123;output_audio_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.info(<span class="string">f&quot;开始提取音频：<span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="comment"># 读取视频文件</span></span><br><span class="line">            video = VideoFileClip(video_path)</span><br><span class="line">            <span class="comment"># 提取视频中的音频</span></span><br><span class="line">            audio = video.audio</span><br><span class="line">            <span class="comment"># 保存音频为 WAV 格式</span></span><br><span class="line">            audio.write_audiofile(output_audio_path, codec=<span class="string">&#x27;pcm_s16le&#x27;</span>)</span><br><span class="line">            <span class="comment"># 释放音频资源</span></span><br><span class="line">            audio.close()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取视频文件</span></span><br><span class="line">        video = VideoFileClip(video_path)</span><br><span class="line">        <span class="comment"># 将视频的音频部分设为 None，从而去除音频</span></span><br><span class="line">        video_without_audio = video.without_audio()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存不含音频的视频</span></span><br><span class="line">        video_without_audio.write_videofile(output_video_path, codec=<span class="string">&quot;libx264&quot;</span>, audio=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 释放视频资源</span></span><br><span class="line">        video.close()</span><br><span class="line">        video_without_audio.close()</span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">f&quot;音频已成功提取并保存为: <span class="subst">&#123;output_audio_path&#125;</span>&quot;</span>)</span><br><span class="line">        logging.info(<span class="string">f&quot;不含音频的视频已保存为: <span class="subst">&#123;output_video_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output_audio_path, output_video_path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理视频时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_audio_umx</span>(<span class="params">file_path, output_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 UMX 模型进行音频分离，并添加源文件名到输出文件名中</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> file_path <span class="keyword">in</span> PROCESSED_FILES:</span><br><span class="line">            logging.warning(<span class="string">f&quot;文件已处理，跳过 UMX: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        logging.info(<span class="string">f&quot;开始 UMX 处理: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 使用 openunmix.umx.separate 函数调用</span></span><br><span class="line">        <span class="comment"># 从文件路径中提取文件名（不包含扩展名）</span></span><br><span class="line">        file_name = os.path.basename(file_path).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        output_prefix_dir = os.path.join(output_dir, file_name)  <span class="comment"># 添加前缀到输出目录</span></span><br><span class="line">        os.makedirs(output_prefix_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># if umx_args is None:</span></span><br><span class="line">        <span class="comment">#     umx_args = []</span></span><br><span class="line">        <span class="comment">#     # 构建完整的 umx 命令</span></span><br><span class="line">        command = [<span class="string">&quot;umx&quot;</span>, file_path, <span class="string">&quot;--outdir&quot;</span>, output_prefix_dir]</span><br><span class="line"></span><br><span class="line">        result = subprocess.run(command, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> result.returncode != <span class="number">0</span>:</span><br><span class="line">            logging.error(<span class="string">f&quot;UMX 执行出错: <span class="subst">&#123;result.stderr&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">f&quot;UMX 处理完成: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        PROCESSED_FILES.add(file_path)  <span class="comment"># 记录已处理</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理UMX时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_audio_demucs</span>(<span class="params">file_path, output_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 Demucs 模型进行音频分离，并添加源文件名到输出文件名中</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> file_path <span class="keyword">in</span> PROCESSED_FILES:</span><br><span class="line">            logging.warning(<span class="string">f&quot;文件已处理，跳过 Demucs: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        logging.info(<span class="string">f&quot;开始 Demucs 处理: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 使用 demucs.api.separate_audio 函数调用</span></span><br><span class="line">        <span class="comment"># 从文件路径中提取文件名（不包含扩展名）</span></span><br><span class="line">        file_name = os.path.basename(file_path).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        output_prefix_dir = os.path.join(output_dir, file_name)  <span class="comment"># 添加前缀到输出目录</span></span><br><span class="line">        os.makedirs(output_prefix_dir, exist_ok=<span class="literal">True</span>)  <span class="comment"># 创建输出目录</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># if umx_args is None:</span></span><br><span class="line">        <span class="comment">#     umx_args = []</span></span><br><span class="line">        <span class="comment"># 构建完整的 umx 命令</span></span><br><span class="line">        command = [<span class="string">&quot;umx&quot;</span>, file_path, <span class="string">&quot;--outdir&quot;</span>, output_prefix_dir]</span><br><span class="line"></span><br><span class="line">        result = subprocess.run(command, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 指定编码</span></span><br><span class="line">        <span class="keyword">if</span> result.returncode != <span class="number">0</span>:</span><br><span class="line">            logging.error(<span class="string">f&quot;UMX 执行出错: <span class="subst">&#123;result.stderr&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">f&quot;UMX 处理完成: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        PROCESSED_FILES.add(file_path)  <span class="comment"># 记录已处理</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理UMX时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_all_audio_files</span>(<span class="params">audio_files, output_umx_dir, output_demucs_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    多线程处理所有音频文件</span></span><br><span class="line"><span class="string">    :param audio_files:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    logging.info(<span class="string">f&quot;开始处理 <span class="subst">&#123;<span class="built_in">len</span>(audio_files)&#125;</span> 个音频文件.&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">4</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        futures = []</span><br><span class="line">        <span class="keyword">for</span> file_path <span class="keyword">in</span> audio_files:</span><br><span class="line">            futures.append(executor.submit(process_audio_umx, file_path, output_umx_dir))</span><br><span class="line">            <span class="comment"># futures.append(executor.submit(process_audio_demucs, file_path, output_demucs_dir))</span></span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> tqdm(futures, desc=<span class="string">&quot;处理进度&quot;</span>):</span><br><span class="line">            future.result()  <span class="comment"># 等待完成并处理异常</span></span><br><span class="line">    logging.info(<span class="string">&quot;所有音频文件处理完成.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">collect_audio_from_dir</span>(<span class="params">input_dir, output_audio_dir, output_video_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    读取指定目录下的所有视频文件，提取音频</span></span><br><span class="line"><span class="string">    :param input_dir:</span></span><br><span class="line"><span class="string">    :return: 所有音频文件列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    audio_files = []</span><br><span class="line">    video_files = [os.path.join(input_dir, filename)</span><br><span class="line">                   <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(input_dir)</span><br><span class="line">                   <span class="keyword">if</span> filename.lower().endswith((<span class="string">&#x27;.mp4&#x27;</span>, <span class="string">&#x27;.mov&#x27;</span>, <span class="string">&#x27;.mkv&#x27;</span>, <span class="string">&#x27;.avi&#x27;</span>, <span class="string">&#x27;.webm&#x27;</span>))]</span><br><span class="line">    <span class="keyword">with</span> tqdm(total=<span class="built_in">len</span>(video_files), desc=<span class="string">&quot;提取音频&quot;</span>, unit=<span class="string">&quot;file&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">        <span class="keyword">for</span> video_path <span class="keyword">in</span> video_files:</span><br><span class="line">            audio_file, video_files_out = extract_audio_from_video(video_path, output_audio_dir, output_video_dir)</span><br><span class="line">            <span class="keyword">if</span> audio_file:</span><br><span class="line">                audio_files.append(audio_file)</span><br><span class="line">            pbar.update(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> audio_files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_all_files_from_dir</span>(<span class="params"><span class="built_in">dir</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从指定目录读取所有文件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    all_files = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="built_in">dir</span>):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            file_path = os.path.join(root, file)</span><br><span class="line">            all_files.append(file_path)</span><br><span class="line">    <span class="keyword">return</span> all_files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    input_video_dir = <span class="string">r&#x27;E:\download\youtobe_video\test&#x27;</span>  <span class="comment"># 输入视频文件目录</span></span><br><span class="line">    output_audio_dir = <span class="string">&quot;output_audio&quot;</span>  <span class="comment"># 输出音频目录</span></span><br><span class="line">    output_umx_dir = <span class="string">&quot;output_audio_umxl&quot;</span></span><br><span class="line">    output_demucs_dir = <span class="string">&quot;output_audio_demucs&quot;</span></span><br><span class="line">    output_video_dir = <span class="string">&quot;output_video_dir&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建输出目录（如果不存在）</span></span><br><span class="line">    os.makedirs(output_audio_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    os.makedirs(output_umx_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    os.makedirs(output_demucs_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    os.makedirs(output_video_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">&quot;开始提取音频 单独保存无音频视频文件&quot;</span>)</span><br><span class="line">    <span class="comment"># 1. 从指定目录读取视频文件并提取音频</span></span><br><span class="line">    audio_files = collect_audio_from_dir(input_video_dir, output_audio_dir, output_video_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 多线程处理所有音频文件</span></span><br><span class="line">    <span class="keyword">if</span> audio_files:</span><br><span class="line">        logging.info(<span class="string">&quot;开始处理音频文件 输出无人声音频&quot;</span>)</span><br><span class="line">        process_all_audio_files(audio_files, output_umx_dir, output_demucs_dir)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.warning(<span class="string">&quot;没有找到任何音频文件，请检查输入目录&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 读取所有输出文件</span></span><br><span class="line">    <span class="comment"># logging.info(&quot;输出文件&quot;)</span></span><br><span class="line">    <span class="comment"># all_output_files_umx = get_all_files_from_dir(output_umx_dir)</span></span><br><span class="line">    <span class="comment"># all_output_files_demucs = get_all_files_from_dir(output_demucs_dir)</span></span><br><span class="line">    logging.info(<span class="string">&quot;合并音（无人声）视频（无音频）文件 输出无人声视频文件&quot;</span>)</span><br><span class="line">    video_dir = <span class="string">r&#x27;D:\pythonProject\audio_record_server\src\utils\output_video_dir&#x27;</span>  <span class="comment"># 视频文件夹路径</span></span><br><span class="line">    audio_dir = <span class="string">r&#x27;D:\pythonProject\audio_record_server\src\utils\output_audio_umxl&#x27;</span>  <span class="comment"># 音频文件夹路径</span></span><br><span class="line">    output_dir = <span class="string">r&#x27;D:\pythonProject\audio_record_server\src\utils\output_result&#x27;</span>  <span class="comment"># 输出文件夹路径</span></span><br><span class="line"></span><br><span class="line">    scan_and_merge(video_dir, audio_dir, output_dir)</span><br><span class="line">    logging.info(<span class="string">&quot;处理完成&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="全流程耗时统计">全流程耗时统计</h2><table><thead><tr><th>项目</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>分离视频音频</td><td>&lt;1s</td><td>使用时长为10分15秒时长视频测试</td></tr><tr><td>音频去除人声(umx)</td><td>40s</td><td></td></tr><tr><td>音频去除人声(demucs)</td><td>36s</td><td></td></tr><tr><td>视频分离音频</td><td>145s/141s</td><td>CPU占用极大</td></tr><tr><td>合并音视频</td><td>2s</td><td></td></tr></tbody></table><h2 id="one-more-thing">one more thing</h2><ul><li>噪声去除</li></ul><blockquote><p>使用pydub和noisereduce库去除,具体实现如下:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2024/12/27 11:40</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(czq)</span></span><br><span class="line"><span class="string">Version:  V 0.1</span></span><br><span class="line"><span class="string">File:     noise_split_audio.py</span></span><br><span class="line"><span class="string">Describe: Write during the python at zgxmt, Github link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> noisereduce <span class="keyword">as</span> nr</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pydub</span><br><span class="line"><span class="keyword">from</span> pydub <span class="keyword">import</span> AudioSegment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reduce_noise</span>(<span class="params">input_audio_path, output_audio_path</span>):</span><br><span class="line">    <span class="comment"># 加载音频文件</span></span><br><span class="line">    audio = AudioSegment.from_wav(input_audio_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换音频为 numpy 数组格式（`pydub` 默认以 16-bit PCM 格式加载）</span></span><br><span class="line">    samples = audio.get_array_of_samples()</span><br><span class="line">    samples = np.array(samples)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 noisereduce 去除噪声</span></span><br><span class="line">    reduced_noise_samples = nr.reduce_noise(y=samples, sr=audio.frame_rate)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换去噪后的样本回 `pydub` 格式</span></span><br><span class="line">    reduced_audio = AudioSegment(</span><br><span class="line">        reduced_noise_samples.tobytes(),</span><br><span class="line">        frame_rate=audio.frame_rate,</span><br><span class="line">        sample_width=audio.sample_width,</span><br><span class="line">        channels=audio.channels</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存去噪后的音频</span></span><br><span class="line">    reduced_audio.export(output_audio_path, <span class="built_in">format</span>=<span class="string">&quot;wav&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;去噪后的音频已保存为: <span class="subst">&#123;output_audio_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例使用</span></span><br><span class="line">input_audio = <span class="string">r&quot;D:\pythonProject\audio_record_server\src\utils\output_audio\比赛集锦：Highlights——Ma Jinbao VS Kanoya Ryohei (2018 LA Open).wav&quot;</span>  <span class="comment"># 输入音频文件</span></span><br><span class="line">output_audio = <span class="string">&quot;output_audio_reduced.wav&quot;</span>  <span class="comment"># 输出去噪音频文件</span></span><br><span class="line"></span><br><span class="line">reduce_noise(input_audio, output_audio)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="See">See</h2><ul><li><ol><li><a href="https://github.com/facebookresearch/demucs">https://github.com/facebookresearch/demucs</a></li></ol></li><li><ol start="2"><li><a href="https://github.com/sigsep/open-unmix-pytorch">https://github.com/sigsep/open-unmix-pytorch</a></li></ol></li><li><ol start="3"><li><a href="https://github.com/deezer/spleeter/">https://github.com/deezer/spleeter/</a></li></ol></li><li><ol start="4"><li><a href="https://archives.ismir.net/ismir2019/latebreaking/000036.pdf">https://archives.ismir.net/ismir2019/latebreaking/000036.pdf</a></li></ol></li><li><ol start="5"><li><a href="https://colab.research.google.com/drive/1ogqMwCY45Ka15Gb_ilMt7HUJbkrNX4y-">https://colab.research.google.com/drive/1ogqMwCY45Ka15Gb_ilMt7HUJbkrNX4y-</a></li></ol></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;借助深度学习模型实现分离人声与背景声&lt;/h1&gt;
&lt;h2 id=&quot;spleeter&quot;&gt;spleeter&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Spleeter 是一个由 Deezer 开发的音频源分离工具，支持将音频分离为伴奏和人声。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>label studio引入nemo_asr实现预测标注文本</title>
    <link href="https://caozhaoqi.github.io/2024/12/25/ml-backend-ls/"/>
    <id>https://caozhaoqi.github.io/2024/12/25/ml-backend-ls/</id>
    <published>2024-12-25T12:52:36.000Z</published>
    <updated>2025-03-04T09:06:46.548Z</updated>
    
    <content type="html"><![CDATA[<h1>label studio引入nemo_asr实现预测标注文本</h1><h2 id="clone-and-use">clone and use</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/HumanSignal/label-studio-ml-backend</span><br></pre></td></tr></table></figure><h2 id="install">install</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure><h2 id="start">start</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label-studio-ml start ./nemo_asr</span><br></pre></td></tr></table></figure><h2 id="coding">coding</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2024/12/19 16:59</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(czq)</span></span><br><span class="line"><span class="string">Version:  V 0.1</span></span><br><span class="line"><span class="string">File:     transit_nameko.py</span></span><br><span class="line"><span class="string">Describe: Write during the python at zgxmt, Github link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> nemo</span><br><span class="line"><span class="keyword">import</span> nemo.collections.asr <span class="keyword">as</span> nemo_asr</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> nemo.collections.asr <span class="keyword">as</span> nemo_asr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有可用的模型</span></span><br><span class="line"><span class="comment"># print(nemo_asr.models.ASRModel.list_available_models())</span></span><br><span class="line"><span class="comment"># 配置 Label Studio API 和项目</span></span><br><span class="line">LABEL_STUDIO_API_URL = <span class="string">&quot;http://localhost:8080/api&quot;</span></span><br><span class="line">PROJECT_ID = <span class="number">12</span>  <span class="comment"># 你的 Label Studio 项目 ID</span></span><br><span class="line">API_KEY = <span class="string">&quot;93e8ebc81cc1337c41567aa20113fd74934a4f17&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">f&quot;Token <span class="subst">&#123;API_KEY&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 Nemo ASR 模型</span></span><br><span class="line">asr_model = nemo_asr.models.ASRModel.from_pretrained(model_name=<span class="string">&quot;stt_zh_citrinet_1024_gamma_0_25&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 音频转录函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transcribe_audio</span>(<span class="params">audio_file_path</span>):</span><br><span class="line">    transcription = asr_model.transcribe([audio_file_path])</span><br><span class="line">    <span class="keyword">return</span> transcription[<span class="number">0</span>]  <span class="comment"># 返回转录文本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建任务并上传音频文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_task</span>(<span class="params">audio_file_path</span>):</span><br><span class="line">    files = &#123;</span><br><span class="line">        <span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(audio_file_path, <span class="string">&#x27;rb&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(<span class="string">f&quot;<span class="subst">&#123;LABEL_STUDIO_API_URL&#125;</span>/projects/<span class="subst">&#123;PROJECT_ID&#125;</span>/import&quot;</span>, headers=headers, files=files)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        task_data = response.json()</span><br><span class="line">        task_id = task_data[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Task created with ID: <span class="subst">&#123;task_id&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> task_id</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error uploading file: <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新任务并填充转录文本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_task_with_transcription</span>(<span class="params">task_id, transcription</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;audio&quot;</span>: task_id,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;annotations&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;result&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;from_name&quot;</span>: <span class="string">&quot;transcription&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;to_name&quot;</span>: <span class="string">&quot;audio&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;textarea&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;value&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;text&quot;</span>: transcription</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.post(<span class="string">f&quot;<span class="subst">&#123;LABEL_STUDIO_API_URL&#125;</span>/tasks/<span class="subst">&#123;task_id&#125;</span>/annotations/&quot;</span>, headers=headers, json=data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Task <span class="subst">&#123;task_id&#125;</span> updated with transcription.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error updating task <span class="subst">&#123;task_id&#125;</span>: <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理和提交音频文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_and_submit_audio_files</span>(<span class="params">audio_files_dir</span>):</span><br><span class="line">    <span class="keyword">for</span> audio_file <span class="keyword">in</span> os.listdir(audio_files_dir):</span><br><span class="line">        audio_file_path = os.path.join(audio_files_dir, audio_file)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取转录结果</span></span><br><span class="line">        transcription = transcribe_audio(audio_file_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建任务并上传音频文件</span></span><br><span class="line">        task_id = create_task(audio_file_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> task_id:</span><br><span class="line">            <span class="comment"># 更新任务并提交转录文本</span></span><br><span class="line">            update_task_with_transcription(task_id, transcription)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定音频文件存放目录</span></span><br><span class="line">audio_files_directory = <span class="string">&quot;./out&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行批量处理</span></span><br><span class="line">process_and_submit_audio_files(audio_files_directory)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;label studio引入nemo_asr实现预测标注文本&lt;/h1&gt;
&lt;h2 id=&quot;clone-and-use&quot;&gt;clone and use&lt;/h2&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    
    <category term="python" scheme="https://caozhaoqi.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在label studio 引入whisper 实现语音转写与说话人分离</title>
    <link href="https://caozhaoqi.github.io/2024/12/17/label-studio-whisper/"/>
    <id>https://caozhaoqi.github.io/2024/12/17/label-studio-whisper/</id>
    <published>2024-12-17T14:27:52.000Z</published>
    <updated>2025-03-04T09:03:20.811Z</updated>
    
    <content type="html"><![CDATA[<h1>在label studio 引入whisper 实现语音转写与说话人分离</h1><h2 id="Label-Studio-介绍">Label Studio 介绍</h2><blockquote><p>Label Studio 是一个开源的数据标注工具，广泛应用于机器学习和人工智能项目中，用于标注各种类型的数据，如文本、图像、音频、视频等。它支持多种标注任务，能够帮助用户将原始数据转换为结构化的标签数据，以便训练机器学习模型</p></blockquote><h3 id="安装使用">安装使用</h3><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install label-studio</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker</span></span><br><span class="line">docker run -p 8080:8080 -v /path/to/your/data:/mnt labelstudio/label-studio</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">label-studio start</span><br></pre></td></tr></table></figure><h3 id="API-调用">API 调用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> label_studio_sdk</span><br><span class="line"><span class="keyword">from</span> label_studio_sdk <span class="keyword">import</span> Client</span><br><span class="line"></span><br><span class="line">client = Client(url=<span class="string">&#x27;http://localhost:8080&#x27;</span>, api_key=<span class="string">&#x27;your_api_key&#x27;</span>)</span><br><span class="line">project = client.init_project(<span class="string">&#x27;Your Project Name&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模板自定义">模板自定义</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Choice</span> <span class="attr">name</span>=<span class="string">&quot;Label&quot;</span> <span class="attr">toName</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Choice</span> <span class="attr">value</span>=<span class="string">&quot;Positive&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Choice</span> <span class="attr">value</span>=<span class="string">&quot;Negative&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Choice</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Text</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$text&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Whisper-介绍">Whisper 介绍</h2><blockquote><p>Whisper is an ASR model developed by OpenAI, trained on a large dataset of diverse audio. Whilst it does produces highly accurate transcriptions, the corresponding timestamps are at the utterance-level, not per word, and can be inaccurate by several seconds. OpenAI’s whisper does not natively support batching.</p></blockquote><blockquote><p>Phoneme-Based ASR A suite of models finetuned to recognise the smallest unit of speech distinguishing one word from another, e.g. the element p in “tap”. A popular example model is wav2vec2.0.</p></blockquote><blockquote><p>Forced Alignment refers to the process by which orthographic transcriptions are aligned to audio recordings to automatically generate phone level segmentation.</p></blockquote><blockquote><p>Voice Activity Detection (VAD) is the detection of the presence or absence of human speech.</p></blockquote><blockquote><p>Speaker Diarization is the process of partitioning an audio stream containing human speech into homogeneous segments according to the identity of each speaker.</p></blockquote><h3 id="安装使用-2">安装使用</h3><ul><li>whisper</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install openai-whisper</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">or</span></span><br><span class="line">git clone https://github.com/openai/whisper.git</span><br><span class="line">cd whisper</span><br><span class="line">pip install .</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>pytorch</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install torch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span> </span><br><span class="line">pip install torch --no-index -f https://download.pytorch.org/whl/cpu/torch_stable.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>ffmpeg</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://ffmpeg.org/download.html</span></span><br><span class="line">sudo apt-get install ffmpeg</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="基本使用">基本使用</h3><ul><li>语音转文字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> whisper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 Whisper 模型</span></span><br><span class="line">model = whisper.load_model(<span class="string">&quot;base&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 识别音频文件中的语音</span></span><br><span class="line">result = model.transcribe(<span class="string">&quot;demo.wav&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出识别结果</span></span><br><span class="line"><span class="built_in">print</span>(result[<span class="string">&quot;text&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>音频切割</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2024/12/17 16:09</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(czq)</span></span><br><span class="line"><span class="string">Version:  V 0.1</span></span><br><span class="line"><span class="string">File:     audio_seg.py</span></span><br><span class="line"><span class="string">Describe: Write during the python at zgxmt, Github link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> whisper</span><br><span class="line"><span class="keyword">from</span> pydub <span class="keyword">import</span> AudioSegment</span><br><span class="line"><span class="keyword">import</span> webrtcvad</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Whisper 模型</span></span><br><span class="line">whisper_model = whisper.load_model(<span class="string">&quot;base&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># VAD 音频活动检测器</span></span><br><span class="line">vad = webrtcvad.Vad(<span class="number">3</span>)  <span class="comment"># 设置为 3 表示严格的语音活动检测</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vad_collected_segments</span>(<span class="params">audio_path, sample_rate=<span class="number">16000</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用 VAD 检测音频中的语音活动段 &quot;&quot;&quot;</span></span><br><span class="line">    audio = AudioSegment.from_file(audio_path)</span><br><span class="line">    audio = audio.set_frame_rate(sample_rate)  <span class="comment"># 设置为 16kHz 采样率</span></span><br><span class="line">    raw_audio = audio.raw_data</span><br><span class="line">    frames = <span class="built_in">len</span>(raw_audio) // <span class="number">2</span>  <span class="comment"># 16位采样</span></span><br><span class="line">    segments = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 VAD 切割音频</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, frames, sample_rate // <span class="number">50</span>):  <span class="comment"># 50ms为步长</span></span><br><span class="line">        frame = raw_audio[i:i + sample_rate // <span class="number">50</span>]</span><br><span class="line">        <span class="keyword">if</span> vad.is_speech(frame, sample_rate):</span><br><span class="line">            segments.append((i, i + sample_rate // <span class="number">50</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> segments, audio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transcribe_audio</span>(<span class="params">audio_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 使用 Whisper 模型进行语音转录 &quot;&quot;&quot;</span></span><br><span class="line">    result = whisper_model.transcribe(audio_file)</span><br><span class="line">    <span class="keyword">return</span> result[<span class="string">&#x27;text&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_audio_by_vad</span>(<span class="params">audio_file, segments, output_folder</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 根据 VAD 检测的音频片段切割音频 &quot;&quot;&quot;</span></span><br><span class="line">    audio = AudioSegment.from_file(audio_file)</span><br><span class="line">    segment_index = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> start, end <span class="keyword">in</span> segments:</span><br><span class="line">        segment_audio = audio[start:end]</span><br><span class="line">        segment_audio.export(<span class="string">f&quot;<span class="subst">&#123;output_folder&#125;</span>/segment_<span class="subst">&#123;segment_index&#125;</span>.wav&quot;</span>, <span class="built_in">format</span>=<span class="string">&quot;wav&quot;</span>)</span><br><span class="line">        segment_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_audio</span>(<span class="params">audio_file, output_folder</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 处理音频文件，进行语音转录和按句切割 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 使用 Whisper 转录音频</span></span><br><span class="line">    transcription = transcribe_audio(audio_file)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;转录结果: <span class="subst">&#123;transcription&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 使用 VAD 检测语音活动区域并切割音频</span></span><br><span class="line">    segments, audio = vad_collected_segments(audio_file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 保存音频片段</span></span><br><span class="line">    cut_audio_by_vad(audio_file, segments, output_folder)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;切割完成，音频片段保存在 <span class="subst">&#123;output_folder&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，传入音频文件路径和保存切割音频片段的文件夹路径</span></span><br><span class="line">process_audio(<span class="string">r&quot;C:\Users\DELL\Desktop\audio_mark\1\1-英文对话\1-英文对话\12月17日.WAV&quot;</span>, <span class="string">&quot;./output_segments&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>命令行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whisper demo.wav --model base</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">whisper demo.wav --model base --output_dir ./transcripts</span><br></pre></td></tr></table></figure><h2 id="结合使用">结合使用</h2><blockquote><p>whisper 转写语音后引入label studio 进行标注</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2024/12/17 10:49</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(czq)</span></span><br><span class="line"><span class="string">Version:  V 0.1</span></span><br><span class="line"><span class="string">File:     label_studio_whisper.py</span></span><br><span class="line"><span class="string">Describe: Write during the python at zgxmt, Github link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> whisper</span><br><span class="line"><span class="keyword">from</span> speechbrain.pretrained <span class="keyword">import</span> SpeakerRecognition</span><br><span class="line"><span class="keyword">from</span> label_studio_sdk <span class="keyword">import</span> Client</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Whisper 模型</span></span><br><span class="line">whisper_model = whisper.load_model(<span class="string">&quot;base&quot;</span>)  <span class="comment"># 你可以选择不同大小的模型，如 &#x27;small&#x27;, &#x27;medium&#x27;, &#x27;large&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Speechbrain 的说话人识别模型</span></span><br><span class="line">speaker_model = SpeakerRecognition.from_hparams(source=<span class="string">&quot;speechbrain/embedding-model-libri&quot;</span>, savedir=<span class="string">&quot;tmpdir&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transcribe_audio</span>(<span class="params">audio_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 使用 Whisper 对音频文件进行转写 &quot;&quot;&quot;</span></span><br><span class="line">    result = whisper_model.transcribe(audio_file)</span><br><span class="line">    <span class="keyword">return</span> result[<span class="string">&#x27;text&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">speaker_diarization</span>(<span class="params">audio_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 使用 Speechbrain 对音频进行说话人分离 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取音频的说话人嵌入</span></span><br><span class="line">    signal, fs = speaker_model.load_audio(audio_file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取说话人分离结果</span></span><br><span class="line">    diarization = speaker_model.diarize(signal)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> diarization</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_audio_task</span>(<span class="params">task_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 处理传入的 Label Studio 任务数据 &quot;&quot;&quot;</span></span><br><span class="line">    audio_file = task_data[<span class="string">&#x27;audio_file&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 使用 Whisper 进行语音转写</span></span><br><span class="line">    transcription = transcribe_audio(audio_file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 使用 Speechbrain 进行说话人分离</span></span><br><span class="line">    diarization = speaker_diarization(audio_file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回转写文本和说话人分离信息</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;transcription&#x27;</span>: transcription,</span><br><span class="line">        <span class="string">&#x27;diarization&#x27;</span>: diarization</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 Label Studio API 服务</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    zq_api = <span class="string">&quot;93e8ebc81cc1337c41567aa20113fd74934a4f17&quot;</span></span><br><span class="line">    client = Client(url=<span class="string">&#x27;http://localhost:8080&#x27;</span>, api_key=zq_api)  <span class="comment"># 获取你的 Label Studio API key</span></span><br><span class="line">    project = client.get_project(project_id=<span class="number">1</span>)  <span class="comment"># 假设你已创建项目并设置了ID</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取待标注任务</span></span><br><span class="line">    tasks = project.get_tasks()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理每个任务的音频文件</span></span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">        task_data = task.data</span><br><span class="line">        result = process_audio_task(task_data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在 Label Studio 中提交转写和说话人分离结果</span></span><br><span class="line">        project.create_prediction(task.<span class="built_in">id</span>, result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="pypinyin-音素序列输出">pypinyin 音素序列输出</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> g2p_en <span class="keyword">import</span> G2p</span><br><span class="line"><span class="keyword">from</span> pypinyin <span class="keyword">import</span> pinyin, Style</span><br><span class="line"><span class="keyword">from</span> langdetect <span class="keyword">import</span> detect</span><br><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line">nltk.download(<span class="string">&#x27;averaged_perceptron_tagger&#x27;</span>)</span><br><span class="line">nltk.download(<span class="string">&#x27;averaged_perceptron_tagger_eng&#x27;</span>)</span><br><span class="line">nltk.download(<span class="string">&#x27;punkt&#x27;</span>)  <span class="comment"># 如果还有缺少的标点符号资源，可以一并下载</span></span><br><span class="line"><span class="comment"># C:\Users\DELL\AppData\Roaming\nltk_data</span></span><br><span class="line">nltk_data_path = <span class="string">r&#x27;C:\Users\DELL\AppData\Roaming\nltk_data&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果目录不存在，则创建该目录</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(nltk_data_path):</span><br><span class="line">    os.makedirs(nltk_data_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 NLTK 数据的搜索路径</span></span><br><span class="line">nltk.data.path.append(nltk_data_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 G2P 对象（用于英文）</span></span><br><span class="line">g2p = G2p()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_phonemes</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="comment"># 自动检测文本语言</span></span><br><span class="line">    language = detect(text)</span><br><span class="line"></span><br><span class="line">    phonemes = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理混合语言的文本，按字符处理语言</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;[\u4e00-\u9fa5]&#x27;</span>, char):  <span class="comment"># 判断字符是否为中文</span></span><br><span class="line">            <span class="comment"># 中文字符处理</span></span><br><span class="line">            pinyin_output = pinyin(char, style=Style.TONE3)</span><br><span class="line">            phonemes.append(pinyin_output[<span class="number">0</span>][<span class="number">0</span>].replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>))  <span class="comment"># 去除空格</span></span><br><span class="line">        <span class="keyword">elif</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;[a-zA-Z]&#x27;</span>, char):  <span class="comment"># 判断字符是否为英文</span></span><br><span class="line">            <span class="comment"># 英文字符处理</span></span><br><span class="line">            phonemes.extend(g2p(char))  <span class="comment"># 使用 G2P 对象处理英文音素</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 对于非中文和非英文字符（如标点符号），直接保留</span></span><br><span class="line">            phonemes.append(char)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> phonemes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试中英文混合文本</span></span><br><span class="line">text_mixed = <span class="string">&quot;你说什么？ Wash water off. Why is she inside my own boots? 他没有雨鞋得给他买一双。&quot;</span></span><br><span class="line">phonemes_mixed = get_phonemes(text_mixed)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Mixed language phonemes: <span class="subst">&#123;phonemes_mixed&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试英文文本</span></span><br><span class="line">text_en = <span class="string">&quot;If we use it like. umm&quot;</span></span><br><span class="line">phonemes_en = get_phonemes(text_en)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;English phonemes: <span class="subst">&#123;phonemes_en&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试中文文本（简体）</span></span><br><span class="line">text_zh = <span class="string">&quot;你说什么？&quot;</span></span><br><span class="line">phonemes_zh = get_phonemes(text_zh)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Chinese phonemes: <span class="subst">&#123;phonemes_zh&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试荷兰语文本</span></span><br><span class="line">text_nl = <span class="string">&quot;Hallo wereld&quot;</span></span><br><span class="line">phonemes_nl = get_phonemes(text_nl)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Dutch phonemes: <span class="subst">&#123;phonemes_nl&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试简体中文 (zh-cn)</span></span><br><span class="line">text_zh_cn = <span class="string">&quot;他管你叫老姑父。哈哈哈哈哈  嘿 哈哈哈哈哈哈哈哈哈&quot;</span></span><br><span class="line">phonemes_zh_cn = get_phonemes(text_zh_cn)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Chinese (Simplified) phonemes: <span class="subst">&#123;phonemes_zh_cn&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试繁体中文 (zh-tw)</span></span><br><span class="line">text_zh_tw = <span class="string">&quot;你好，世界&quot;</span></span><br><span class="line">phonemes_zh_tw = get_phonemes(text_zh_tw)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Chinese (Traditional) phonemes: <span class="subst">&#123;phonemes_zh_tw&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="See">See</h2><ul><li><ol><li><a href="https://github.com/m-bain/whisperX">https://github.com/m-bain/whisperX</a></li></ol></li><li><ol start="2"><li><a href="https://ffmpeg.org/download.html">https://ffmpeg.org/download.html</a></li></ol></li><li><ol start="3"><li><a href="https://labelstud.io/">https://labelstud.io/</a></li></ol></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;在label studio 引入whisper 实现语音转写与说话人分离&lt;/h1&gt;
&lt;h2 id=&quot;Label-Studio-介绍&quot;&gt;Label Studio 介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Label Studio 是一个开源的数据标注工具，广泛应用于机</summary>
      
    
    
    
    
    <category term="python" scheme="https://caozhaoqi.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 系统上安装 Docker</title>
    <link href="https://caozhaoqi.github.io/2024/12/15/centos-docker-install/"/>
    <id>https://caozhaoqi.github.io/2024/12/15/centos-docker-install/</id>
    <published>2024-12-15T06:52:39.000Z</published>
    <updated>2025-03-04T09:03:20.830Z</updated>
    
    <content type="html"><![CDATA[<h1>CentOS 系统上安装 Docker</h1><p><strong>前提条件：</strong></p><ul><li><strong>CentOS 系统：</strong> 确保你使用的是 CentOS 7 或更高版本。</li><li><strong>具有 sudo 权限的用户：</strong> 你需要一个具有 sudo 权限的用户来执行这些命令。</li><li><strong>网络连接：</strong> 你的 CentOS 系统需要连接到互联网才能下载软件包。</li></ul><p><strong>步骤 1：更新系统软件包</strong></p><p>首先，更新你的 CentOS 系统软件包到最新版本，以确保一切顺利：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum update -y</span><br></pre></td></tr></table></figure><p><strong>步骤 2：安装依赖软件包</strong></p><p>安装 Docker 需要一些依赖软件包，运行以下命令来安装它们：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p><strong>步骤 3：添加 Docker 官方软件仓库</strong></p><p>为了安装 Docker，你需要添加 Docker 官方软件仓库。使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#国外</span></span><br><span class="line"><span class="built_in">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#国内</span></span><br><span class="line"><span class="built_in">sudo</span> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#使用代理</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://your_proxy_address:port&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;https://your_proxy_address:port&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p><strong>步骤 4：安装 Docker Engine</strong></p><p>现在可以安装 Docker Engine 了。使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>如果想要安装指定版本的 Docker，可以执行以下命令查看可用版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br></pre></td></tr></table></figure><p>然后使用以下命令安装指定版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure><p><strong>步骤 5：启动 Docker 服务</strong></p><p>安装完成后，启动 Docker 服务并设置开机自启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p><strong>步骤 6：验证 Docker 安装</strong></p><p>检查 Docker 是否成功安装，可以使用以下命令查看 Docker 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>或者运行一个简单的 Docker 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>如果一切正常，你应该会看到 “Hello from Docker!” 的输出。</p><p><strong>步骤 7：安装 Docker Compose (可选，但推荐)</strong></p><p>Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。 如果你需要使用 Docker Compose，请按照以下步骤安装：</p><p><strong>下载 Docker Compose 二进制文件:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin</span><br></pre></td></tr></table></figure><h2 id="问题解决">问题解决</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Unable to find image &#x27;nginx:latest&#x27; locally</span><br><span class="line">docker: Error response from daemon: Get &quot;https://registry-1.docker.io/v2/&quot;: dial tcp: lookup registry-1.docker.io on 100.127.194.200:53: server misbehaving.</span><br><span class="line">See &#x27;docker run --help&#x27;.</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;:</span><br><span class="line">    [</span><br><span class="line">      &quot;https://docker.m.daocloud.io/&quot;,</span><br><span class="line">      &quot;https://huecker.io/&quot;,</span><br><span class="line">      &quot;https://dockerhub.timeweb.cloud&quot;,</span><br><span class="line">      &quot;https://noohub.ru/&quot;,</span><br><span class="line">      &quot;https://dockerproxy.com&quot;,</span><br><span class="line">      &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">      &quot;https://docker.nju.edu.cn&quot;,</span><br><span class="line">      &quot;https://xx4bwyg2.mirror.aliyuncs.com&quot;,</span><br><span class="line">      &quot;http://f1361db2.m.daocloud.io&quot;,</span><br><span class="line">      &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">      &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">      &quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;CentOS 系统上安装 Docker&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;前提条件：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CentOS 系统：&lt;/strong&gt; 确保你使用的是 CentOS 7 或更高版本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;具有 </summary>
      
    
    
    
    
    <category term="python" scheme="https://caozhaoqi.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>基于Easyocr的文字识别</title>
    <link href="https://caozhaoqi.github.io/2024/12/15/easy-ocr-gpu/"/>
    <id>https://caozhaoqi.github.io/2024/12/15/easy-ocr-gpu/</id>
    <published>2024-12-15T06:51:33.000Z</published>
    <updated>2025-03-04T09:03:20.836Z</updated>
    
    <content type="html"><![CDATA[<h1>基于Easyocr的文字识别</h1><blockquote><p>EasyOCR 是一个开源的 OCR (光学字符识别) 工具，能够快速并高效地从图像中提取文本。与其他OCR工具如 Tesseract 相比，EasyOCR 具有更强的多语言支持，包括对中文、日语、阿拉伯语等复杂文字的支持，并且它的安装和使用非常简便。</p></blockquote><h2 id="主要功能">主要功能</h2><blockquote><p>EasyOCR 是一个 Python 包，用于执行光学字符识别 (OCR)。它旨在易于使用，并支持多种语言的文本识别。其主要特点包括：</p></blockquote><ul><li><p>简单易用</p></li><li><p>多语言支持</p></li><li><p>GPU 加速支持</p></li><li><p>开源</p></li></ul><h2 id="安装-EasyOCR">安装 EasyOCR:</h2><blockquote><p>可以使用 pip 安装：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install easyocr</span><br></pre></td></tr></table></figure><blockquote><p>使用 GPU 加速，安装 PyTorch 的 GPU 版本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="导入-EasyOCR">导入 EasyOCR:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> easyocr</span><br></pre></td></tr></table></figure><h3 id="创建-OCR-读取器-Reader">创建 OCR 读取器 (Reader):</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reader = easyocr.Reader([<span class="string">&#x27;ch_sim&#x27;</span>, <span class="string">&#x27;en&#x27;</span>])  <span class="comment"># ch_sim 表示简体中文，en 表示英文</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用 GPU加速，需要指定 gpu=True：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reader = easyocr.Reader([<span class="string">&#x27;ch_sim&#x27;</span>, <span class="string">&#x27;en&#x27;</span>], gpu=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="demo">demo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># readtext() 方法会返回一个包含识别结果的列表，列表中的每个元素都是一个包含文本框位置坐标和识别文本的元组。</span></span><br><span class="line"></span><br><span class="line">result = reader.readtext(<span class="string">&#x27;image.jpg&#x27;</span>)  <span class="comment"># image.jpg 是你要识别的图像文件路径</span></span><br></pre></td></tr></table></figure><ul><li>处理识别结果:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (bbox, text, prob) <span class="keyword">in</span> result:</span><br><span class="line">  (tl, tr, br, bl) = bbox  <span class="comment"># 文本框的左上角、右上角、右下角、左下角的坐标</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;文本: <span class="subst">&#123;text&#125;</span>, 置信度: <span class="subst">&#123;prob&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="comment"># 在这里可以根据坐标将文本框绘制到图像上，或者进行其他处理</span></span><br></pre></td></tr></table></figure><h3 id="基础功能测试">基础功能测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> easyocr</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 OCR Reader, 使用简体中文和英文模型，并启用 GPU 加速</span></span><br><span class="line">reader = easyocr.Reader([<span class="string">&#x27;ch_sim&#x27;</span>, <span class="string">&#x27;en&#x27;</span>], gpu=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">image_path = <span class="string">&#x27;test.png&#x27;</span>  <span class="comment"># 替换为你的图像文件路径</span></span><br><span class="line">image = cv2.imread(image_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 OCR</span></span><br><span class="line">result = reader.readtext(image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历结果并打印</span></span><br><span class="line"><span class="keyword">for</span> (bbox, text, prob) <span class="keyword">in</span> result:</span><br><span class="line">    (tl, tr, br, bl) = bbox</span><br><span class="line">    tl = (<span class="built_in">int</span>(tl[<span class="number">0</span>]), <span class="built_in">int</span>(tl[<span class="number">1</span>]))</span><br><span class="line">    tr = (<span class="built_in">int</span>(tr[<span class="number">0</span>]), <span class="built_in">int</span>(tr[<span class="number">1</span>]))</span><br><span class="line">    br = (<span class="built_in">int</span>(br[<span class="number">0</span>]), <span class="built_in">int</span>(br[<span class="number">0</span>]))</span><br><span class="line">    bl = (<span class="built_in">int</span>(bl[<span class="number">0</span>]), <span class="built_in">int</span>(bl[<span class="number">1</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;文本: <span class="subst">&#123;text&#125;</span>, 置信度: <span class="subst">&#123;prob&#125;</span>&quot;</span>)</span><br><span class="line">    cv2.rectangle(image, tl, br, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">    cv2.putText(image, text, tl, cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.8</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示带有文本框的图像</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;OCR Result&#x27;</span>, image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="one-more-thing">one more thing</h2><h3 id="一些其他用法">一些其他用法:</h3><ul><li><p>识别特定区域: 可以使用 detect() 方法预先检测文本区域，然后传递给 readtext() 方法。</p></li><li><p>自定义模型: 可以使用自定义模型，并指定路径。</p></li><li><p>批处理: 可以处理多张图像。</p></li><li><p>文本方向: EasyOCR 会自动检测文本方向，但也可以手动指定。</p></li></ul><h4 id="使用场景">使用场景:</h4><ul><li><p>文档数字化: 将扫描的纸质文档转化为可编辑的文本。</p></li><li><p>图像信息提取: 从图像中提取关键文本信息，例如车牌号、验证码等。</p></li><li><p>自动化数据输入: 自动化从图像中提取文本并输入到系统。</p></li><li><p>多语言应用: 支持多语言识别，方便国际化应用开发。</p></li></ul><h2 id="总结">总结:</h2><p>EasyOCR 是一个功能强大且易于使用的 OCR 库，可以帮助你在 Python 应用中快速实现文本识别功能。只需要几行代码，你就可以从图像中提取出文本。希望这个介绍和示例能帮助你快速上手 EasyOCR! 记得根据你的具体需求调整代码。</p><h2 id="实际案例">实际案例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> easyocr</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pypinyin <span class="keyword">import</span> pinyin, Style</span><br><span class="line"></span><br><span class="line">lan_code = [<span class="string">&#x27;ru&#x27;</span>, <span class="string">&#x27;ind&#x27;</span>, <span class="string">&#x27;tur&#x27;</span>, <span class="string">&#x27;deu&#x27;</span>, <span class="string">&#x27;ita&#x27;</span>, <span class="string">&#x27;jpn&#x27;</span>, <span class="string">&#x27;fra&#x27;</span>, <span class="string">&#x27;tha&#x27;</span>, <span class="string">&#x27;por&#x27;</span>, <span class="string">&#x27;spa&#x27;</span>, <span class="string">&#x27;vie&#x27;</span>, <span class="string">&#x27;ara&#x27;</span>, <span class="string">&#x27;kor&#x27;</span>, <span class="string">&#x27;msa&#x27;</span>]</span><br><span class="line">language_map = &#123;</span><br><span class="line">    <span class="string">&#x27;俄语&#x27;</span>: <span class="string">&#x27;ru&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;印尼&#x27;</span>: <span class="string">&#x27;ind&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;土耳其&#x27;</span>: <span class="string">&#x27;tur&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;德语&#x27;</span>: <span class="string">&#x27;deu&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;意大利语&#x27;</span>: <span class="string">&#x27;ita&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;日语&#x27;</span>: <span class="string">&#x27;jpn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;法语&#x27;</span>: <span class="string">&#x27;fra&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;泰语&#x27;</span>: <span class="string">&#x27;tha&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;葡萄牙&#x27;</span>: <span class="string">&#x27;por&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;西班牙语&#x27;</span>: <span class="string">&#x27;spa&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;越南语&#x27;</span>: <span class="string">&#x27;vie&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;阿拉伯语&#x27;</span>: <span class="string">&#x27;ara&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;韩语&#x27;</span>: <span class="string">&#x27;kor&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;马来语&#x27;</span>: <span class="string">&#x27;msa&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 EasyOCR 阅读器</span></span><br><span class="line"><span class="comment"># reader = easyocr.Reader([&#x27;en&#x27;, &#x27;ch_sim&#x27;, &#x27;ru&#x27;, &#x27;ja&#x27;, &#x27;de&#x27;, &#x27;fr&#x27;, &#x27;es&#x27;, &#x27;it&#x27;, &#x27;pt&#x27;, &#x27;tr&#x27;, &#x27;ar&#x27;], gpu=True)  # 支持多语言</span></span><br><span class="line"></span><br><span class="line">reader = easyocr.Reader([<span class="string">&#x27;ru&#x27;</span>], gpu=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_to_pinyin</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将中文字符转换为拼音。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    result = pinyin(text, style=Style.NORMAL)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([item[<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> result])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_path</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将���径中的非法字符替换为拼音。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    illegal_chars = <span class="string">r&#x27;[\/:*?&quot;&lt;&gt;|]&#x27;</span></span><br><span class="line">    path_parts = path.split(os.sep)</span><br><span class="line">    cleaned_parts = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> part <span class="keyword">in</span> path_parts:</span><br><span class="line">        part = convert_to_pinyin(part)  <span class="comment"># 转换为拼音</span></span><br><span class="line">        cleaned_parts.append(part)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> os.sep.join(cleaned_parts)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_language_code_in_directory</span>(<span class="params">directory_path, lan_codes</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    检查指定路径中是否包含语言代码列表中的任何一个内容。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    found_codes = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> lan_code <span class="keyword">in</span> lan_codes:</span><br><span class="line">            <span class="keyword">if</span> lan_code <span class="keyword">in</span> directory_path:</span><br><span class="line">                found_codes.append(lan_code)</span><br><span class="line">        <span class="keyword">return</span> found_codes</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">numpy_encoder</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义 JSON 序列化函数。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, np.ndarray):</span><br><span class="line">        <span class="keyword">return</span> obj.tolist()</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">f&quot;Type <span class="subst">&#123;<span class="built_in">type</span>(obj)&#125;</span> not serializable&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_text_with_coords</span>(<span class="params">image_path, folder, lan_code</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从图像中提取文字及其坐标，并返回格式化的 JSON 数据。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        lan_zh = check_language_code_in_directory(image_path, folder)</span><br><span class="line">        <span class="comment"># if not lan_zh:</span></span><br><span class="line">        <span class="comment">#     raise ValueError(f&quot;未在路径中找到任何语言代码：&#123;image_path&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">        language_codes = <span class="string">&quot;ru&quot;</span></span><br><span class="line">        img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">        img = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> img <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">f&quot;无法读取图像: <span class="subst">&#123;image_path&#125;</span>&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用 EasyOCR 提取文本和坐标</span></span><br><span class="line">        results = reader.readtext(image_path)</span><br><span class="line"></span><br><span class="line">        formatted_results = []</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">            <span class="comment"># result 格式: [bbox, text, confidence]</span></span><br><span class="line">            bbox, text, _ = result</span><br><span class="line">            <span class="keyword">if</span> text.strip():</span><br><span class="line">                <span class="comment"># 获取坐标，转换为浮动数</span></span><br><span class="line">                x_min, y_min = bbox[<span class="number">0</span>]</span><br><span class="line">                x_max, y_max = bbox[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 创建浮动数坐标数组，保留高精度</span></span><br><span class="line">                coords = np.array([</span><br><span class="line">                    [x_min, y_min],</span><br><span class="line">                    [x_max, y_min],</span><br><span class="line">                    [x_max, y_max],</span><br><span class="line">                    [x_min, y_max]</span><br><span class="line">                ], dtype=np.float64)  <span class="comment"># 使用 float64 保证高精度</span></span><br><span class="line"></span><br><span class="line">                result_dict = &#123;</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: text,</span><br><span class="line">                    <span class="string">&quot;points&quot;</span>: numpy_encoder(coords),  <span class="comment"># 保持高精度坐标</span></span><br><span class="line">                    <span class="string">&quot;language&quot;</span>: lan_zh[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">&quot;textType&quot;</span>: <span class="string">&quot;Mix&quot;</span> <span class="keyword">if</span> <span class="built_in">len</span>(text) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;Single&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;textDirection&quot;</span>: <span class="string">&quot;Horizontal_0&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;assign&quot;</span>: <span class="string">&quot;Normal&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;group_id&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">                    <span class="string">&quot;shape_type&quot;</span>: <span class="string">&quot;polygon&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;flags&quot;</span>: &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将结果添加到列表</span></span><br><span class="line">                formatted_results.append(result_dict)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 绘制矩形框时，使用整数坐标，不改变精度</span></span><br><span class="line">                cv2.rectangle(img, (<span class="built_in">int</span>(x_min), <span class="built_in">int</span>(y_min)), (<span class="built_in">int</span>(x_max), <span class="built_in">int</span>(y_max)), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 拼音路径</span></span><br><span class="line">        output_image_path = os.path.splitext(image_path)[<span class="number">0</span>] + <span class="string">&quot;_with_boxes.jpg&quot;</span></span><br><span class="line">        output_image_path = clean_path(output_image_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 目标文件夹</span></span><br><span class="line">        output_folder = os.path.dirname(output_image_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_folder):</span><br><span class="line">            os.makedirs(output_folder)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存带框图像</span></span><br><span class="line">        result = cv2.imwrite(output_image_path, img)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;已保存带框图像: <span class="subst">&#123;output_image_path&#125;</span>, result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保留原图到拼音化目录</span></span><br><span class="line">        original_image_path = clean_path(image_path)</span><br><span class="line">        original_output_folder = os.path.dirname(original_image_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(original_output_folder):</span><br><span class="line">            os.makedirs(original_output_folder)</span><br><span class="line"></span><br><span class="line">        shutil.copy(image_path, original_image_path)  <span class="comment"># 复制原图到拼音化目录</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;原图已复制到: <span class="subst">&#123;original_image_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> formatted_results</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">f&quot;发生错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_json_result</span>(<span class="params">image_path, result</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将识别结果保存为 JSON 文件。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        image_name = os.path.splitext(os.path.basename(image_path))[<span class="number">0</span>]</span><br><span class="line">        json_path = os.path.join(os.path.dirname(image_path), <span class="string">f&quot;<span class="subst">&#123;image_name&#125;</span>.json&quot;</span>)</span><br><span class="line">        json_path = clean_path(json_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(json_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">            json.dump(result, json_file, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;结果已保存到: <span class="subst">&#123;json_path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;保存 JSON 文件时发生错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_all_images_in_directory</span>(<span class="params">directory_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    递归读取指定目录及其子目录中的所有图像文件。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    image_files = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory_path):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.lower().endswith((<span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>, <span class="string">&#x27;.bmp&#x27;</span>)):</span><br><span class="line">                image_files.append(os.path.join(root, file))</span><br><span class="line">    <span class="keyword">return</span> image_files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_images_in_directory</span>(<span class="params">directory_path, folders, lan_code</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    批量处理指定目录中的所有图像文件。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    image_paths = get_all_images_in_directory(directory_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> image_path <span class="keyword">in</span> tqdm(image_paths, desc=<span class="string">&quot;Processing images&quot;</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;正在处理图像: <span class="subst">&#123;image_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="comment"># 获取文件夹名作为语言代码</span></span><br><span class="line">            folder_name = os.path.basename(os.path.dirname(image_path))</span><br><span class="line">            <span class="keyword">if</span> folder_name <span class="keyword">in</span> language_map:</span><br><span class="line">                lan_code = language_map[folder_name]  <span class="comment"># 根据文件夹名获取语言代码</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;未找到对应的语言代码: <span class="subst">&#123;folder_name&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># 如果没有找到对应的语言代码，跳过该图像</span></span><br><span class="line"></span><br><span class="line">            result = extract_text_with_coords(image_path, folders, lan_code)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(result, <span class="built_in">dict</span>) <span class="keyword">and</span> <span class="string">&quot;error&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;处理 <span class="subst">&#123;image_path&#125;</span> 时发生错误: <span class="subst">&#123;result[<span class="string">&#x27;error&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(result, <span class="built_in">list</span>) <span class="keyword">and</span> result:</span><br><span class="line">                save_json_result(image_path, result)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;处理 <span class="subst">&#123;image_path&#125;</span> 时没有检测到有效文本。&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;处理 <span class="subst">&#123;image_path&#125;</span> 时发生错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_all_folders_in_directory</span>(<span class="params">directory_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取目录下所有文件夹名。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        items = os.listdir(directory_path)</span><br><span class="line">        folders = [item <span class="keyword">for</span> item <span class="keyword">in</span> items <span class="keyword">if</span> os.path.isdir(os.path.join(directory_path, item))]</span><br><span class="line">        <span class="keyword">return</span> folders</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fix_non_ascii_path</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    修复路径中的非 ASCII 字符问题。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> path.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：从指定目录批量处理图像</span></span><br><span class="line">image_directory = <span class="string">r&quot;C:\Users\DELL\Desktop\CZQ\俄语&quot;</span>  <span class="comment"># 替换为你的图片目录路径</span></span><br><span class="line">image_directory = fix_non_ascii_path(image_directory)</span><br><span class="line">folders = get_all_folders_in_directory(image_directory)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;文件夹列表:&quot;</span>, folders)  <span class="comment"># 打印文件夹列表，确保获取的文件夹正确</span></span><br><span class="line"></span><br><span class="line">process_images_in_directory(image_directory, folders, lan_code)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>上述代码批量处理指定目录及其子目录下的图像文件，使用 EasyOCR 提取图像中的文本及其坐标，并将结果保存为 JSON 文件。同时，它还会在原始图像上绘制文本框，并将带框的图像和原始图像复制到以拼音命名的路径下</p></blockquote><p><em>使用pillow、easyocr、numpy、pypinyin、tqdm、多线程等技术</em></p><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;基于Easyocr的文字识别&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;EasyOCR 是一个开源的 OCR (光学字符识别) 工具，能够快速并高效地从图像中提取文本。与其他OCR工具如 Tesseract 相比，EasyOCR 具有更强的多语言支持，包括对中文、日语、阿</summary>
      
    
    
    
    
    <category term="python" scheme="https://caozhaoqi.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Appium Debug Bridge</title>
    <link href="https://caozhaoqi.github.io/2024/11/21/appium_adb_app/"/>
    <id>https://caozhaoqi.github.io/2024/11/21/appium_adb_app/</id>
    <published>2024-11-21T05:05:12.000Z</published>
    <updated>2025-03-04T09:03:20.819Z</updated>
    
    <content type="html"><![CDATA[<h1>Appium Debug Bridge</h1><h2 id="ADB">ADB</h2><h2 id="install">install</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://developer.android.com/studio?hl=zh-cn#command-line-tools-only</span><br></pre></td></tr></table></figure><h2 id="appium">appium</h2><h3 id="install-2">install</h3><ul><li>server</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/appium/appium</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">install</span></span><br><span class="line">npm i -g appium</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">install driver</span></span><br><span class="line">appium driver install uiautomator2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Start the server on the default host (0.0.0.0) and port (4723)</span></span><br><span class="line">appium server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">You can also omit the <span class="string">&#x27;server&#x27;</span> subcommand</span></span><br><span class="line">appium</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Start the server on the given host, port and use a custom base path prefix (the default prefix is <span class="string">&#x27;/&#x27;</span>)</span></span><br><span class="line">appium --address 127.0.0.1 --port 9000 --base-path /wd/hub</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">use</span></span><br><span class="line">appium</span><br></pre></td></tr></table></figure><h2 id="python-selenium">python selenium</h2><p><a href="appium_adb_app.md">appium_adb_app.md</a></p><blockquote><p>automatic test</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from venv import logger</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> appium.options.android <span class="keyword">import</span> UiAutomator2Options</span><br><span class="line"><span class="keyword">from</span> appium.webdriver.common.appiumby <span class="keyword">import</span> AppiumBy</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">appium_init</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    appium catch video</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    delay_time = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    desired_caps = &#123;</span><br><span class="line">        <span class="string">&#x27;platformName&#x27;</span>: <span class="string">&#x27;Android&#x27;</span>,  <span class="comment"># 或 &#x27;iOS&#x27;，取决于你的设备</span></span><br><span class="line">        <span class="string">&#x27;platformVersion&#x27;</span>: <span class="string">&#x27;10&#x27;</span>,  <span class="comment"># 设备的 Android 版本</span></span><br><span class="line">        <span class="string">&#x27;deviceName&#x27;</span>: <span class="string">&#x27;Android&#x27;</span>,  <span class="comment"># 模拟器的设备名或连接的设备名</span></span><br><span class="line">        <span class="string">&#x27;appPackage&#x27;</span>: <span class="string">&#x27;com.ayay.yoga&#x27;</span>,  <span class="comment"># 替换为你的 App 包名</span></span><br><span class="line">        <span class="string">&#x27;appActivity&#x27;</span>: <span class="string">&#x27;.MainActivity&#x27;</span>,  <span class="comment"># 替换为你的主 Activity</span></span><br><span class="line">        <span class="string">&#x27;noReset&#x27;</span>: <span class="literal">True</span>,  <span class="comment"># 不重置应用</span></span><br><span class="line">        <span class="string">&#x27;fullContextIgnore&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;automationName&#x27;</span>: <span class="string">&#x27;UiAutomator2&#x27;</span>,  <span class="comment"># Android 使用 UiAutomator2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建 Appium WebDriver 实例</span></span><br><span class="line">    <span class="comment"># 创建 UiAutomator2Options 对象，并设置所需的能力</span></span><br><span class="line">    options = UiAutomator2Options()</span><br><span class="line">    <span class="comment"># options.add_argument(&quot;--no-reset&quot;)  # 用于传递命令行参数，不是能力配置</span></span><br><span class="line">    options.platform_name = <span class="string">&quot;Android&quot;</span></span><br><span class="line">    options.platform_version = <span class="string">&quot;10&quot;</span>  <span class="comment"># 目标设备的 Android 版本</span></span><br><span class="line">    options.device_name = <span class="string">&quot;emulator-5554&quot;</span>  <span class="comment"># 模拟器或设备名</span></span><br><span class="line">    options.app_package = <span class="string">&quot;com.ayay.yoga&quot;</span>  <span class="comment"># 替换为你的 App 包名</span></span><br><span class="line">    options.app_activity = <span class="string">&quot;com.ayay.yoga.MainActivity&quot;</span>  <span class="comment"># 替换为你的 Activity 名称</span></span><br><span class="line">    options.no_reset = <span class="literal">True</span>  <span class="comment"># 确保传递布尔值</span></span><br><span class="line"></span><br><span class="line">    capabilities = <span class="built_in">dict</span>(</span><br><span class="line">        platformName=<span class="string">&#x27;Android&#x27;</span>,</span><br><span class="line">        automationName=<span class="string">&#x27;uiautomator2&#x27;</span>,</span><br><span class="line">        deviceName=<span class="string">&#x27;Android&#x27;</span>,</span><br><span class="line">        appPackage=<span class="string">&#x27;com.ayay.yoga&#x27;</span>,</span><br><span class="line">        appActivity=<span class="string">&#x27;.MainActivity&#x27;</span>,</span><br><span class="line">        language=<span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">        locale=<span class="string">&#x27;US&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接到 Appium 服务器</span></span><br><span class="line">    driver = webdriver.Remote(<span class="string">&#x27;http://localhost:4723&#x27;</span>, options=UiAutomator2Options().load_capabilities(capabilities))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待应用加载</span></span><br><span class="line">    sleep(delay_time)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">click_element_by_xpath</span>(<span class="params">xpath</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;通过 XPath 查找并点击元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># element = driver.find_element(xpath)</span></span><br><span class="line">        element_faxian = driver.find_element(by=AppiumBy.XPATH, value=xpath)</span><br><span class="line">        element_faxian.click()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">click_element_by_id</span>(<span class="params">element_id</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;通过 ID 查找并点击元素&quot;&quot;&quot;</span></span><br><span class="line">        element = driver.find_element(by=AppiumBy.ID, value=element_id)</span><br><span class="line">        element.click()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swipe_to_center</span>(<span class="params">x_offset, y_offset</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;模拟点击屏幕中心&quot;&quot;&quot;</span></span><br><span class="line">        center_x = x_offset // <span class="number">2</span></span><br><span class="line">        center_y = y_offset // <span class="number">2</span></span><br><span class="line">        <span class="comment"># TouchAction(driver).tap(x=center_x, y=center_y).perform()</span></span><br><span class="line"></span><br><span class="line">    sleep(delay_time)</span><br><span class="line">    <span class="comment"># element = driver.find_element_by_android_uiautomator(&#x27;new UiSelector().text(&quot;发现&quot;)&#x27;)</span></span><br><span class="line">    <span class="comment"># element_faxian = driver.find_element(by=AppiumBy.XPATH, value=&#x27;//*[@text=&quot;发现&quot;]&#x27;)</span></span><br><span class="line">    click_element_by_xpath(<span class="string">&#x27;//*[@text=&quot;发现&quot;]&#x27;</span>)</span><br><span class="line">    <span class="comment"># element.click()</span></span><br><span class="line">    <span class="comment"># element_faxian.click()</span></span><br><span class="line">    sleep(delay_time)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;switch tab&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 点击 &quot;发现&quot; 按钮（假设它的 XPath 是 &#x27;/hierarchy/.../发现&#x27;）</span></span><br><span class="line">    <span class="comment"># click_element_by_xpath(&#x27;//*[@text=&quot;发现&quot;]&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 点击 &quot;全部课程&quot; 按钮（假设它的 XPath 是 &#x27;/hierarchy/.../全部课程&#x27;）</span></span><br><span class="line">    click_element_by_xpath(<span class="string">&#x27;//*[@text=&quot;全部课程&quot;]&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;all course&quot;</span>)</span><br><span class="line">    sleep(delay_time)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取所有课程图片的元素（假设它们的 XPath 是 &#x27;/hierarchy/.../课程图片&#x27;）</span></span><br><span class="line">    <span class="comment"># 这里需要确保你能够定位到所有图片</span></span><br><span class="line">    images = driver.find_elements(by=AppiumBy.CLASS_NAME, value=<span class="string">&#x27;android.widget.ImageView&#x27;</span>)</span><br><span class="line">    <span class="comment"># images = driver.find_elements(by=AppiumBy.ID, value=&#x27;//*[@resource-id=&quot;com.ayay.yoga:id/course_image&quot;]&#x27;)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(<span class="built_in">len</span>(images)) + <span class="string">&#x27;image load result&#x27;</span>)</span><br><span class="line">    sleep(delay_time)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> images:</span><br><span class="line">        <span class="comment"># 3. 点击每个课程图片</span></span><br><span class="line">        img.click()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 点击 &quot;开始训练&quot; 按钮（假设它的 XPath 是 &#x27;/hierarchy/.../开始训练&#x27;）</span></span><br><span class="line">        click_element_by_xpath(<span class="string">&#x27;//*[@text=&quot;开始训练&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5. 等待十秒</span></span><br><span class="line">        sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 6. 点击屏幕中心位置（假设屏幕大小为 1080x1920）</span></span><br><span class="line">        swipe_to_center(<span class="number">1080</span>, <span class="number">1920</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 7. 点击左上角的按钮退出（假设它的 XPath 是 &#x27;/hierarchy/.../左上角按钮&#x27;）</span></span><br><span class="line">        click_element_by_xpath(<span class="string">&#x27;//*[@content-desc=&quot;Navigate up&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 8. 点击 &quot;结束训练&quot; 按钮（假设它的 XPath 是 &#x27;/hierarchy/.../结束训练&#x27;）</span></span><br><span class="line">        click_element_by_xpath(<span class="string">&#x27;//*[@text=&quot;结束训练&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 9. 等待十秒后继续循环</span></span><br><span class="line">        sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 完成操作后退出</span></span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    appium_init()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="adb-pull-video">adb pull video</h2><blockquote><p>adb pull log</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> extract_mp4_links <span class="keyword">import</span> extract_mp4_links, video_link_process</span><br><span class="line"><span class="keyword">from</span> src.pull_ld_video <span class="keyword">import</span> adb_connect, adb_root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 adb 路径和设备 ID</span></span><br><span class="line">ADB_PATH = <span class="string">r&quot;C:\Users\DELL\Desktop\platform-tools\adb.exe&quot;</span></span><br><span class="line">DEVICE_ID = <span class="string">&quot;emulator-5554&quot;</span>  <span class="comment"># 根据实际设备 ID 选择模拟器</span></span><br><span class="line">package_name = <span class="string">&#x27;com.ayay.yoga&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 adb shell pidof 命令获取指定包名的进程 ID</span></span><br><span class="line">pid_command = [ADB_PATH, <span class="string">&#x27;shell&#x27;</span>, <span class="string">&#x27;pidof&#x27;</span>, <span class="string">&#x27;-s&#x27;</span>, package_name]</span><br><span class="line">pid_process = subprocess.Popen(pid_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">pid = pid_process.communicate()[<span class="number">0</span>].decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> pid:</span><br><span class="line">    logger.error(<span class="string">f&quot;无法找到包名 &#x27;<span class="subst">&#123;package_name&#125;</span>&#x27; 对应的进程。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 使用 adb logcat 命令抓取指定进程的日志</span></span><br><span class="line">    log_command = [ADB_PATH, <span class="string">&#x27;logcat&#x27;</span>, <span class="string">&#x27;--pid=&#x27;</span> + pid]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 adb logcat 获取模拟器日志</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_simulator_log</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;simulator_log.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 执行 adb logcat 命令并将输出写入文件</span></span><br><span class="line">        adb_connect()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 获取 root 权限（如果需要）</span></span><br><span class="line">        adb_root()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            user_input = <span class="built_in">input</span>(<span class="string">&quot;按下 &#x27;c&#x27; 键停止：&quot;</span>)</span><br><span class="line">            <span class="comment"># 判断用户输入是否为 &#x27;c&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> user_input.lower() == <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                logger.debug(<span class="string">&quot;你按下了 &#x27;c&#x27; 键！&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># 按下 &#x27;c&#x27; 键后退出循环</span></span><br><span class="line">            process = subprocess.Popen(log_command, stdout=f, stderr=subprocess.PIPE)</span><br><span class="line">            process.communicate()  <span class="comment"># 等待 logcat 命令执行完成</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取日志</span></span><br><span class="line">get_simulator_log()</span><br><span class="line">logger.success(<span class="string">&quot;start video link process...&quot;</span>)</span><br><span class="line">video_link_process()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="adb-pull-video-from-cache">adb pull video from cache</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> anyio <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> matplotlib.cbook <span class="keyword">import</span> pts_to_midstep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 adb 路径和设备 ID</span></span><br><span class="line">ADB_PATH = <span class="string">r&quot;C:\Users\DELL\Desktop\platform-tools\adb.exe&quot;</span></span><br><span class="line">DEVICE_ID = <span class="string">&quot;emulator-5554&quot;</span>  <span class="comment"># 根据实际设备 ID 选择模拟器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取指定路径的文件</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adb_connect</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 确保连接到指定模拟器</span></span><br><span class="line">        result = subprocess.run([ADB_PATH, <span class="string">&quot;-s&quot;</span>, DEVICE_ID, <span class="string">&quot;devices&quot;</span>], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, check=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;device&quot;</span> <span class="keyword">in</span> result.stdout:</span><br><span class="line">            logger.debug(<span class="string">f&quot;已连接到模拟器 <span class="subst">&#123;DEVICE_ID&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">f&quot;无法连接到模拟器 <span class="subst">&#123;DEVICE_ID&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        logger.debug(<span class="string">f&quot;连接模拟器失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 root 权限</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adb_root</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取 root 权限（如果模拟器支持）</span></span><br><span class="line">        subprocess.run([ADB_PATH, <span class="string">&quot;-s&quot;</span>, DEVICE_ID, <span class="string">&quot;root&quot;</span>], check=<span class="literal">True</span>)</span><br><span class="line">        logger.debug(<span class="string">&quot;获取 root 权限成功！&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        logger.debug(<span class="string">f&quot;无法获取 root 权限: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出指定目录的文件</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_files</span>(<span class="params">remote_dir</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 使用 adb shell ls 命令列出远程目录文件</span></span><br><span class="line">        result = subprocess.run(</span><br><span class="line">            [ADB_PATH, <span class="string">&quot;-s&quot;</span>, DEVICE_ID, <span class="string">&quot;shell&quot;</span>, <span class="string">&quot;ls&quot;</span>, remote_dir],</span><br><span class="line">            capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, check=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        files = result.stdout.splitlines()  <span class="comment"># 按行分割文件列表</span></span><br><span class="line">        <span class="keyword">return</span> files</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        logger.debug(<span class="string">f&quot;获取文件列表失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载文件到本地</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pull_files</span>(<span class="params">remote_dir, local_dir, files</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 确保本地目录存在</span></span><br><span class="line">        os.makedirs(local_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            remote_file = os.path.join(remote_dir, file).replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>)  <span class="comment"># 替换反斜杠为正斜杠</span></span><br><span class="line">            local_file = os.path.join(local_dir, file).replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>)  <span class="comment"># 替换反斜杠为正斜杠</span></span><br><span class="line">            logger.debug(<span class="string">f&quot;正在下载 <span class="subst">&#123;remote_file&#125;</span> 到 <span class="subst">&#123;local_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 使用 adb pull 命令下载文件</span></span><br><span class="line">            subprocess.run([ADB_PATH, <span class="string">&quot;-s&quot;</span>, DEVICE_ID, <span class="string">&quot;pull&quot;</span>, remote_file, local_file], check=<span class="literal">True</span>)</span><br><span class="line">            logger.debug(<span class="string">f&quot;<span class="subst">&#123;file&#125;</span> 下载完成！&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        logger.debug(<span class="string">f&quot;下载文件失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    remote_dir = <span class="string">&quot;/storage/emulated/0/Android/data/com.wtp.wtpilates/cache/video-cache&quot;</span>  <span class="comment"># 指定远程目录</span></span><br><span class="line">    local_dir = <span class="string">&quot;./video/&quot;</span>  <span class="comment"># 本地保存路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 1. 连接到模拟器</span></span><br><span class="line">        adb_connect()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 获取 root 权限（如果需要）</span></span><br><span class="line">        adb_root()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 列出远程目录中的文件</span></span><br><span class="line">        files = list_files(remote_dir)</span><br><span class="line">        <span class="keyword">if</span> files:</span><br><span class="line">            logger.debug(<span class="string">&quot;文件列表：&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(local_dir, file)):</span><br><span class="line">                    logger.debug(file)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    files.remove(file)</span><br><span class="line">                    logger.debug(file + <span class="string">&quot;, 已存在，跳过&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 4. 拉取文件到本地</span></span><br><span class="line">            pull_files(remote_dir, local_dir, files)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.debug(<span class="string">&quot;没有找到文件。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.debug(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    logger.add(<span class="string">&quot;../logs/ld_monitor.log&quot;</span>, level=<span class="string">&quot;DEBUG&quot;</span>, rotation=<span class="string">&quot;5MB&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        main()</span><br><span class="line">        logger.debug(<span class="string">&quot;sleep 60 s..&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="see">see</h2><ul><li>1.<a href="https://github.com/appium/appium">https://github.com/appium/appium</a></li><li>2.<a href="https://developer.android.com/studio?hl=zh-cn#command-line-tools-only">https://developer.android.com/studio?hl=zh-cn#command-line-tools-only</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Appium Debug Bridge&lt;/h1&gt;
&lt;h2 id=&quot;ADB&quot;&gt;ADB&lt;/h2&gt;
&lt;h2 id=&quot;install&quot;&gt;install&lt;/h2&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    
    <category term="Appium" scheme="https://caozhaoqi.github.io/tags/Appium/"/>
    
  </entry>
  
  <entry>
    <title>Excel file parser</title>
    <link href="https://caozhaoqi.github.io/2024/11/21/excel_parser_pandas/"/>
    <id>https://caozhaoqi.github.io/2024/11/21/excel_parser_pandas/</id>
    <published>2024-11-21T05:05:12.000Z</published>
    <updated>2025-03-04T09:03:20.838Z</updated>
    
    <content type="html"><![CDATA[<h1>Excel file parser</h1><h2 id="introduce">introduce</h2><blockquote><p>pandas 是一个开源的 Python 数据分析库，提供了高效的数据结构（如 DataFrame 和 Series）和多种数据操作工具。它非常适合用于数据清洗、数据分析和数据处理等任务，尤其是在处理表格型数据（例如 Excel 表格、CSV 文件、SQL 数据库等）时非常强大。</p></blockquote><blockquote><p>pandas 的名称源自“panel data”（面板数据），即带有时间和多维索引的复杂数据结构。虽然这个名字与面板数据相关，但 pandas 已经成为了所有类型数据分析的标准工具之一。</p></blockquote><h2 id="核心功能">核心功能</h2><blockquote><p>通过 Series 和 DataFrame 两个核心数据结构，pandas 提供了极其灵活和高效的操作方式，几乎是进行数据分析和科学计算时的标准工具。</p></blockquote><ul><li>读写excel\sql\csv文件</li><li>数据过滤 选择</li><li>数据清洗 转换</li><li>数据合并连接</li><li>数据透视</li><li>数据可视化</li><li>大数据处理</li></ul><h2 id="lib">lib</h2><blockquote><p>pandas</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><h2 id="use-demo">use demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">加权平均内容= </span></span><br><span class="line"><span class="string">∑(文本长度)</span></span><br><span class="line"><span class="string">————————————</span></span><br><span class="line"><span class="string">∑(内容×文本长度)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取Excel文件（假设你的数据已经保存在Excel文件中）</span></span><br><span class="line">file_path = <span class="string">&#x27;./data/data.xlsx&#x27;</span>  <span class="comment"># 替换为实际的Excel文件路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取Excel文件</span></span><br><span class="line">df = pd.read_excel(file_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看原始数据（可选）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原始数据:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.head())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理“内容”列，检查是否为字符串，若是百分比文本，则转换为浮动类型</span></span><br><span class="line"><span class="comment"># 先检查内容列的数据类型</span></span><br><span class="line"><span class="keyword">if</span> df[<span class="string">&#x27;内容&#x27;</span>].dtype == <span class="string">&#x27;object&#x27;</span>:  <span class="comment"># 如果是字符串类型</span></span><br><span class="line">    df[<span class="string">&#x27;内容&#x27;</span>] = df[<span class="string">&#x27;内容&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;&#x27;</span>).astype(<span class="built_in">float</span>) / <span class="number">100</span>  <span class="comment"># 去掉百分号并转换为浮动类型</span></span><br><span class="line"><span class="keyword">elif</span> df[<span class="string">&#x27;内容&#x27;</span>].dtype != <span class="string">&#x27;float&#x27;</span>:  <span class="comment"># 如果是其他数值类型但不是float</span></span><br><span class="line">    df[<span class="string">&#x27;内容&#x27;</span>] = df[<span class="string">&#x27;内容&#x27;</span>].astype(<span class="built_in">float</span>)  <span class="comment"># 强制转换为浮动类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取文件名的核心部分，例如“超宠时代” 或 “小黑龙” 等</span></span><br><span class="line">df[<span class="string">&#x27;文件名&#x27;</span>] = df[<span class="string">&#x27;文件名&#x27;</span>].apply(<span class="keyword">lambda</span> x: re.sub(<span class="string">r&#x27;\d+$&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="built_in">str</span>(x)))  <span class="comment"># 强制转换为字符串，去除名称末尾的数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按内容和文件名分组，计算每个组的文本长度总和和加权平均内容</span></span><br><span class="line">grouped = df.groupby([<span class="string">&#x27;内容&#x27;</span>, <span class="string">&#x27;文件名&#x27;</span>]).agg(</span><br><span class="line">    文本长度总和=(<span class="string">&#x27;文本长度&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>),</span><br><span class="line">    内容加权平均=(<span class="string">&#x27;内容&#x27;</span>, <span class="keyword">lambda</span> x: (x * df.loc[x.index, <span class="string">&#x27;长度&#x27;</span>]).<span class="built_in">sum</span>() / x.<span class="built_in">sum</span>())</span><br><span class="line">).reset_index()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将加权平均内容转换为百分比形式</span></span><br><span class="line">grouped[<span class="string">&#x27;最低加权平均内容&#x27;</span>] = grouped[<span class="string">&#x27;内容加权平均&#x27;</span>].<span class="built_in">min</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化为百分比，保留两位小数</span></span><br><span class="line">grouped[<span class="string">&#x27;内容加权平均&#x27;</span>] = grouped[<span class="string">&#x27;内容加权平均&#x27;</span>].apply(<span class="keyword">lambda</span> x: <span class="string">f&quot;<span class="subst">&#123;x / <span class="number">1000</span>:<span class="number">.2</span>f&#125;</span>%&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并后的数据</span></span><br><span class="line">merged_data = []</span><br><span class="line"><span class="keyword">for</span> _, group <span class="keyword">in</span> grouped.iterrows():</span><br><span class="line">    merged_data.append(&#123;</span><br><span class="line">        <span class="string">&#x27;内容&#x27;</span>: group[<span class="string">&#x27;内容&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将合并后的数据转化为DataFrame</span></span><br><span class="line">merged_df = pd.DataFrame(merged_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出合并后的结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n合并后的数据:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(merged_df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存为新的Excel文件</span></span><br><span class="line">output_path = <span class="string">&#x27;result_data.xlsx&#x27;</span>  <span class="comment"># 输出路径</span></span><br><span class="line">merged_df.to_excel(output_path, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\n数据已保存到 <span class="subst">&#123;output_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Excel file parser&lt;/h1&gt;
&lt;h2 id=&quot;introduce&quot;&gt;introduce&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;pandas 是一个开源的 Python 数据分析库，提供了高效的数据结构（如 DataFrame 和 Series）和多种数</summary>
      
    
    
    
    
    <category term="Excel" scheme="https://caozhaoqi.github.io/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>nltk lib use</title>
    <link href="https://caozhaoqi.github.io/2024/11/21/nltk-use/"/>
    <id>https://caozhaoqi.github.io/2024/11/21/nltk-use/</id>
    <published>2024-11-21T05:05:12.000Z</published>
    <updated>2025-03-04T09:06:46.557Z</updated>
    
    <content type="html"><![CDATA[<h1>nltk lib use</h1><h2 id="简介">简介</h2><blockquote><p>NLTK（Natural Language Toolkit，中文叫做自然语言工具包）是一个用于处理和分析人类语言数据（自然语言）的Python库。它为自然语言处理（NLP）提供了许多有用的工具和资源，广泛用于学术研究、机器学习、文本分析等领域。</p></blockquote><h2 id="安装使用">安装使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install nltk</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装资源">安装资源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import nltk</span><br><span class="line">nltk.download(&#x27;punkt&#x27;)  # 下载用于标记化的资源</span><br><span class="line">nltk.download(&#x27;stopwords&#x27;)  # 下载停用词列表</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="功能">功能</h2><ol><li><p><strong>文本处理和标记化（Tokenization）</strong>：</p><ul><li>将文本分解为更小的单位，如单词、句子等。例如，把一句话分成单词列表。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> word_tokenize</span><br><span class="line">text = <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">words = word_tokenize(text)</span><br><span class="line"><span class="built_in">print</span>(words)  <span class="comment"># 输出: [&#x27;Hello&#x27;, &#x27;,&#x27;, &#x27;world&#x27;, &#x27;!&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>词性标注（POS Tagging）</strong>：</p><ul><li>给每个单词打上一个词性标签（如名词、动词、形容词等），帮助理解单词在句中的语法作用。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> word_tokenize</span><br><span class="line"><span class="keyword">from</span> nltk <span class="keyword">import</span> pos_tag</span><br><span class="line">sentence = <span class="string">&quot;I am learning Python.&quot;</span></span><br><span class="line">words = word_tokenize(sentence)</span><br><span class="line">tagged = pos_tag(words)</span><br><span class="line"><span class="built_in">print</span>(tagged)</span><br><span class="line"><span class="comment"># 输出: [(&#x27;I&#x27;, &#x27;PRP&#x27;), (&#x27;am&#x27;, &#x27;VBP&#x27;), (&#x27;learning&#x27;, &#x27;VBG&#x27;), (&#x27;Python&#x27;, &#x27;NNP&#x27;)]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>命名实体识别（NER, Named Entity Recognition）</strong>：</p><ul><li>NLTK能够识别文本中的命名实体，如人名、地名、组织名等。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk <span class="keyword">import</span> ne_chunk</span><br><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> word_tokenize</span><br><span class="line"><span class="keyword">from</span> nltk <span class="keyword">import</span> pos_tag</span><br><span class="line"></span><br><span class="line">sentence = <span class="string">&quot;Barack Obama was born in Hawaii.&quot;</span></span><br><span class="line">words = word_tokenize(sentence)</span><br><span class="line">tagged = pos_tag(words)</span><br><span class="line">named_entities = ne_chunk(tagged)</span><br><span class="line"><span class="built_in">print</span>(named_entities)</span><br><span class="line"><span class="comment"># 输出: (S (PERSON Barack/NNP Obama/NNP) was/VBD born/VBN in/IN Hawaii/NNP ./.)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>词汇和语料库（Corpora）</strong>：</p><ul><li>NLTK提供了许多内置的语料库（corpora），这些语料库包含大量的文本数据，可以用于语言模型训练、文本分析等。例如，<code>punkt</code>语料库用于句子分割，<code>stopwords</code>语料库提供了常见的停用词（如“the”，“is”等），可以在文本处理时忽略这些词。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> stopwords</span><br><span class="line">stop_words = <span class="built_in">set</span>(stopwords.words(<span class="string">&#x27;english&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(stop_words)  <span class="comment"># 输出: &#123;&#x27;the&#x27;, &#x27;and&#x27;, &#x27;is&#x27;, &#x27;in&#x27;, &#x27;of&#x27;, &#x27;to&#x27;, ...&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>词干提取（Stemming）和词形还原（Lemmatization）</strong>：</p><ul><li>这两个技术用于将单词还原为其基础形式（如将“running”变为“run”）。</li><li>词干提取（Stemming）是通过简单的规则来去除词尾，而词形还原（Lemmatization）则考虑上下文，使用字典和规则。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.stem <span class="keyword">import</span> PorterStemmer</span><br><span class="line">stemmer = PorterStemmer()</span><br><span class="line"><span class="built_in">print</span>(stemmer.stem(<span class="string">&quot;running&quot;</span>))  <span class="comment"># 输出: run</span></span><br></pre></td></tr></table></figure></li><li><p><strong>文本分类（Text Classification）</strong>：</p><ul><li>NLTK支持构建和训练文本分类器，适用于垃圾邮件分类、情感分析等任务。</li></ul></li><li><p><strong>句法分析（Parsing）</strong>：</p><ul><li>NLTK支持各种句法分析技术，包括上下文无关文法（CFG）和依存句法分析，帮助理解句子的结构。</li></ul></li><li><p><strong>机器翻译和词向量（Word Embeddings）</strong>：</p><ul><li>NLTK也可以与其他库（如Gensim）结合，用于词向量模型和机器翻译等任务。</li></ul></li></ol><h2 id="demo">demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> stopwords</span><br><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> word_tokenize</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> LatentDirichletAllocation</span><br><span class="line"><span class="keyword">import</span> spacy</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> textblob <span class="keyword">import</span> TextBlob</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> src.txt_decode.txt_decode_new <span class="keyword">import</span> en_model_path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载必要的NLTK数据</span></span><br><span class="line">nltk.download(<span class="string">&#x27;punkt&#x27;</span>)</span><br><span class="line">nltk.download(<span class="string">&#x27;stopwords&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载Spacy英文模型</span></span><br><span class="line">nlp = spacy.load(en_model_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">basic_text_features</span>(<span class="params">script</span>):</span><br><span class="line">    <span class="comment"># 分词</span></span><br><span class="line">    words = word_tokenize(script)</span><br><span class="line">    <span class="comment"># 去除停用词</span></span><br><span class="line">    stop_words = <span class="built_in">set</span>(stopwords.words(<span class="string">&#x27;english&#x27;</span>))</span><br><span class="line">    filtered_words = [word.lower() <span class="keyword">for</span> word <span class="keyword">in</span> words <span class="keyword">if</span> word.isalnum() <span class="keyword">and</span> word.lower() <span class="keyword">not</span> <span class="keyword">in</span> stop_words]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 词频统计</span></span><br><span class="line">    word_freq = Counter(filtered_words)</span><br><span class="line">    <span class="keyword">return</span> word_freq</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">syntax_features</span>(<span class="params">script</span>):</span><br><span class="line">    doc = nlp(script)</span><br><span class="line">    pos_tags = [(token.text, token.pos_) <span class="keyword">for</span> token <span class="keyword">in</span> doc]</span><br><span class="line">    dependencies = [(token.text, token.dep_, token.head.text) <span class="keyword">for</span> token <span class="keyword">in</span> doc]</span><br><span class="line">    <span class="keyword">return</span> pos_tags, dependencies</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tfidf_features</span>(<span class="params">scripts</span>):</span><br><span class="line">    vectorizer = TfidfVectorizer()</span><br><span class="line">    X = vectorizer.fit_transform(scripts)</span><br><span class="line">    <span class="keyword">return</span> X, vectorizer.get_feature_names_out()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">topic_modeling</span>(<span class="params">scripts, num_topics=<span class="number">2</span></span>):</span><br><span class="line">    vectorizer = TfidfVectorizer()</span><br><span class="line">    X = vectorizer.fit_transform(scripts)</span><br><span class="line">    lda = LatentDirichletAllocation(n_components=num_topics, random_state=<span class="number">0</span>)</span><br><span class="line">    lda.fit(X)</span><br><span class="line">    <span class="keyword">return</span> lda, vectorizer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sentiment_analysis</span>(<span class="params">script</span>):</span><br><span class="line">    blob = TextBlob(script)</span><br><span class="line">    sentiment = blob.sentiment</span><br><span class="line">    <span class="keyword">return</span> sentiment.polarity, sentiment.subjectivity</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dialogue_features</span>(<span class="params">script</span>):</span><br><span class="line">    <span class="comment"># 改进正则表达式，适应中文和英文引号</span></span><br><span class="line">    dialogues = re.findall(<span class="string">r&#x27;[&quot;“”](.*?)[”&quot;]&#x27;</span>, script)</span><br><span class="line">    <span class="keyword">return</span> dialogues</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_script</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</span><br><span class="line">        <span class="keyword">raise</span> FileNotFoundError(<span class="string">f&quot;File <span class="subst">&#123;file_path&#125;</span> not found.&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="keyword">return</span> file.read()</span><br><span class="line">    <span class="keyword">except</span> PermissionError:</span><br><span class="line">        <span class="keyword">raise</span> PermissionError(<span class="string">f&quot;Permission denied to read the file <span class="subst">&#123;file_path&#125;</span>. Please check file permissions.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    file_path = <span class="string">r&#x27;D:\pythonProject\LE-SEO.doc&#x27;</span>  </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        script = read_script(file_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 基本文本特征提取</span></span><br><span class="line">        word_freq = basic_text_features(script)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Basic Text Features (Word Frequency):&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(word_freq)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 语法特征提取</span></span><br><span class="line">        pos_tags, dependencies = syntax_features(script)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nSyntax Features (POS Tags and Dependencies):&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;POS Tags:&quot;</span>, pos_tags)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Dependencies:&quot;</span>, dependencies)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 语义特征提取（TF-IDF）</span></span><br><span class="line">        scripts_list = [script]  <span class="comment"># 如果需要分析多个脚本，可以在这里添加</span></span><br><span class="line">        X, feature_names = tfidf_features(scripts_list)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nTF-IDF Features:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(X.toarray())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Feature Names:&quot;</span>, feature_names)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 主题建模（LDA）</span></span><br><span class="line">        lda, vectorizer = topic_modeling(scripts_list)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nTopic Modeling (LDA):&quot;</span>)</span><br><span class="line">        <span class="comment"># 打印每个主题的前几个单词</span></span><br><span class="line">        <span class="keyword">for</span> topic_idx, topic <span class="keyword">in</span> <span class="built_in">enumerate</span>(lda.components_):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Topic #<span class="subst">&#123;topic_idx&#125;</span>:&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>([feature_names[i] <span class="keyword">for</span> i <span class="keyword">in</span> topic.argsort()[:-<span class="number">10</span> - <span class="number">1</span>:-<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 情感分析</span></span><br><span class="line">        polarity, subjectivity = sentiment_analysis(script)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nSentiment Analysis:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Polarity: <span class="subst">&#123;polarity&#125;</span>, Subjectivity: <span class="subst">&#123;subjectivity&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对话特征提取</span></span><br><span class="line">        dialogues = dialogue_features(script)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nDialogue Features:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(dialogues)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;An error occurred: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="See">See</h2><ul><li><a href="https://www.nltk.org/">https://www.nltk.org/</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;nltk lib use&lt;/h1&gt;
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;NLTK（Natural Language Toolkit，中文叫做自然语言工具包）是一个用于处理和分析人类语言数据（自然语言）的Python库。它为自然语言处理（</summary>
      
    
    
    
    
    <category term="nlp" scheme="https://caozhaoqi.github.io/tags/nlp/"/>
    
  </entry>
  
  <entry>
    <title>nlp scapy use</title>
    <link href="https://caozhaoqi.github.io/2024/11/21/npl_scapy/"/>
    <id>https://caozhaoqi.github.io/2024/11/21/npl_scapy/</id>
    <published>2024-11-21T05:05:12.000Z</published>
    <updated>2025-03-04T09:06:46.529Z</updated>
    
    <content type="html"><![CDATA[<h1>nlp scapy use</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pip install spacy</span><br><span class="line">python -m spacy download zh_core_web_sm</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">z中等</span></span><br><span class="line">python -m spacy download zh-core-web-md</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">大语言模型</span></span><br><span class="line">python -m spacy download zh-core-web-lg</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插件 支持</span></span><br><span class="line">pip install &quot;spacy-pkuseg&lt;2.0.0,&gt;=1.0.0&quot; </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add run</span> </span><br><span class="line">pip install &quot;spacy-pkuseg&gt;=0.0.27,&lt;0.1.0&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">pip uninstall spacy-pkuseg</span><br><span class="line">pip install spacy-pkuseg==1.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">pip uninstall spacy zh-core-web-sm spacy-pkuseg</span><br><span class="line">pip install spacy</span><br><span class="line">pip install zh-core-web-sm</span><br><span class="line">pip install &quot;spacy-pkuseg&gt;=1.0.0,&lt;2.0.0&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python -m spacy download en_core_web_sm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="use">use</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># english</span></span><br><span class="line"><span class="keyword">import</span> spacy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载下载的模型</span></span><br><span class="line">nlp = spacy.load(<span class="string">&#x27;en_core_web_sm&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理文本</span></span><br><span class="line">doc = nlp(<span class="string">&quot;Hello, how are you?&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> token <span class="keyword">in</span> doc:</span><br><span class="line">    <span class="built_in">print</span>(token.text, token.pos_)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># chinese</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> spacy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载中文模型</span></span><br><span class="line">nlp = spacy.load(<span class="string">&#x27;zh_core_web_sm&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_dialogue_with_spacy_chinese</span>(<span class="params">text</span>):</span><br><span class="line">    doc = nlp(text)</span><br><span class="line">    dialogues = []</span><br><span class="line">    current_speaker = <span class="literal">None</span></span><br><span class="line">    current_dialogue = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> sent <span class="keyword">in</span> doc.sents:</span><br><span class="line">        <span class="keyword">for</span> ent <span class="keyword">in</span> sent.ents:</span><br><span class="line">            <span class="keyword">if</span> ent.label_ == <span class="string">&quot;PERSON&quot;</span>:</span><br><span class="line">                <span class="comment"># 假设实体标签为“PERSON”表示人物</span></span><br><span class="line">                <span class="keyword">if</span> current_speaker:  <span class="comment"># 如果之前有一个人物，记录对话</span></span><br><span class="line">                    dialogues.append((current_speaker, <span class="string">&quot; &quot;</span>.join(current_dialogue)))</span><br><span class="line">                current_speaker = ent.text</span><br><span class="line">                current_dialogue = []</span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># 跳到下一个句子</span></span><br><span class="line">        <span class="keyword">if</span> current_speaker:</span><br><span class="line">            current_dialogue.append(sent.text.strip())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> current_dialogue:</span><br><span class="line">        dialogues.append((current_speaker, <span class="string">&quot; &quot;</span>.join(current_dialogue)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dialogues</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例文本</span></span><br><span class="line">script = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">张三: 你好吗？</span></span><br><span class="line"><span class="string">李四: 我很好，谢谢！</span></span><br><span class="line"><span class="string">张三: 太好了！</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">dialogues = extract_dialogue_with_spacy_chinese(script)</span><br><span class="line"><span class="keyword">for</span> character, line <span class="keyword">in</span> dialogues:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;人物: <span class="subst">&#123;character&#125;</span>, 对话: <span class="subst">&#123;line&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;nlp scapy use&lt;/h1&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    
    <category term="nlp" scheme="https://caozhaoqi.github.io/tags/nlp/"/>
    
  </entry>
  
  <entry>
    <title>yolov5s 模型识别人脸</title>
    <link href="https://caozhaoqi.github.io/2024/11/21/yolo_user_face_recognized/"/>
    <id>https://caozhaoqi.github.io/2024/11/21/yolo_user_face_recognized/</id>
    <published>2024-11-21T05:05:12.000Z</published>
    <updated>2025-03-04T09:08:33.965Z</updated>
    
    <content type="html"><![CDATA[<h1>yolov5s 模型识别人脸</h1><h2 id="简介">简介</h2><blockquote><p>YOLO（You Only Look Once）是一个广泛使用的实时目标检测算法，它能够在图片或视频中快速检测到目标并进行分类。YOLO 的优点在于其速度和准确度，能够在单个前向传播中同时进行目标定位和分类，从而实现实时目标检测。YOLO 在许多应用场景中都有很好的表现，包括自动驾驶、视频监控、无人机巡检等。</p></blockquote><h2 id="特点">特点</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">YOLO 通过以下步骤进行目标检测：</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输入图像: 将输入图像分割成网格，并为每个网格预测一个边界框和对应的类概率。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">目标检测: 每个网格预测一个边界框，包含位置（x, y, w, h）和类别概率。网络还预测是否存在目标。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">非极大值抑制（NMS）: 通过 NMS 去除冗余的检测结果，仅保留最有可能的边界框。</span></span><br></pre></td></tr></table></figure><h2 id="安装使用">安装使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install torch</span><br><span class="line">pip install cv2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">or</span></span><br><span class="line"></span><br><span class="line">pip install torch torchvision torchaudio</span><br><span class="line">pip install yolov5</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="demo">demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置参数</span></span><br><span class="line">MODEL_NAME = <span class="string">&#x27;yolov5s&#x27;</span>  <span class="comment"># 使用 YOLOv5s 模型，可根据需求选择 yolov5m, yolov5l, yolov5x</span></span><br><span class="line">COCO_NAMES = <span class="string">r&quot;C:\Users\DELL\PycharmProjects\audio_record_server\src\config\coco.names&quot;</span></span><br><span class="line">DETECTED_HUMANS_DIR = <span class="string">r&quot;E:&quot;</span>  <span class="comment"># 存放检测到人的视频</span></span><br><span class="line">BATCH_SIZE = <span class="number">5</span>  <span class="comment"># 每批处理视频数</span></span><br><span class="line">THREAD_COUNT = <span class="number">4</span>  <span class="comment"># 线程数量</span></span><br><span class="line">INTERVAL_DURATION_SECONDS = <span class="number">60</span>  <span class="comment"># 每个检测段的时长（秒）</span></span><br><span class="line">DETECTION_COUNT_PER_INTERVAL = <span class="number">10</span>  <span class="comment"># 每个3分钟段的检测次数</span></span><br><span class="line">DETECTION_THRESHOLD = <span class="number">1</span>  <span class="comment"># 每个3分钟段的检测阈值</span></span><br><span class="line">MIN_CONFIDENCE = <span class="number">0.7</span>  <span class="comment"># 检测置信度阈值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程锁</span></span><br><span class="line">model_lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果目标目录不存在，则创建它</span></span><br><span class="line">os.makedirs(DETECTED_HUMANS_DIR, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载类别名称</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(COCO_NAMES, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    classes = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化日志</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    filename=<span class="string">&#x27;log.log&#x27;</span>,</span><br><span class="line">    level=logging.INFO,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>,</span><br><span class="line">    filemode=<span class="string">&#x27;w&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_output_dir</span>(<span class="params">output_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建输出目录&quot;&quot;&quot;</span></span><br><span class="line">    os.makedirs(output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_model</span>(<span class="params">model_name=<span class="string">&#x27;yolov5s&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;加载YOLOv5模型，返回模型对象&quot;&quot;&quot;</span></span><br><span class="line">    model = torch.hub.load(<span class="string">&#x27;ultralytics/yolov5&#x27;</span>, model_name, pretrained=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 设置模型为评估模式</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_random_detection_times</span>(<span class="params">start_sec, end_sec, detection_count</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在[start_sec, end_sec)区间内生成随机的检测时间点（秒）。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> end_sec &lt;= start_sec:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">return</span> [random.uniform(start_sec, end_sec) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(detection_count)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_person_many</span>(<span class="params">model, frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对单帧图像进行人检测，返回是否仅检测到一个人。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    results = model(frame)</span><br><span class="line">    <span class="comment"># 解析检测结果</span></span><br><span class="line">    detections = results.xyxy[<span class="number">0</span>]  <span class="comment"># [xmin, ymin, xmax, ymax, confidence, class]</span></span><br><span class="line">    person_count = <span class="number">0</span>  <span class="comment"># 记录检测到的人数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> *box, confidence, cls <span class="keyword">in</span> detections:</span><br><span class="line">        <span class="keyword">if</span> confidence &gt;= MIN_CONFIDENCE <span class="keyword">and</span> classes[<span class="built_in">int</span>(cls)].lower() == <span class="string">&quot;person&quot;</span>:</span><br><span class="line">            person_count += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 如果检测到超过一个人，直接返回 False</span></span><br><span class="line">            <span class="keyword">if</span> person_count &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果检测到正好一个人，返回 True</span></span><br><span class="line">    <span class="keyword">return</span> person_count == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_person</span>(<span class="params">model, frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对单帧图像进行人检测，返回是否检测到人的布尔值。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    results = model(frame)</span><br><span class="line">    <span class="comment"># 解析检测结果</span></span><br><span class="line">    detections = results.xyxy[<span class="number">0</span>]  <span class="comment"># [xmin, ymin, xmax, ymax, confidence, class]</span></span><br><span class="line">    person_detected = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> *box, confidence, cls <span class="keyword">in</span> detections:</span><br><span class="line">        <span class="keyword">if</span> confidence &gt;= MIN_CONFIDENCE <span class="keyword">and</span> classes[<span class="built_in">int</span>(cls)].lower() == <span class="string">&quot;person&quot;</span>:</span><br><span class="line">            person_detected = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> person_detected</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_person_in_video</span>(<span class="params">video_path, model</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理单个视频，按照每3分钟段进行人检测&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        logging.info(<span class="string">f&quot;开始处理视频: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;开始处理视频: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">        cap = cv2.VideoCapture(video_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">            logging.error(<span class="string">f&quot;无法打开视频文件: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;无法打开视频文件: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        width = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">        height = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line">        fps = cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line">        total_frames = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">        total_seconds = total_frames / fps <span class="keyword">if</span> fps <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        logging.info(<span class="string">f&quot;视频信息 - 宽度: <span class="subst">&#123;width&#125;</span>, 高度: <span class="subst">&#123;height&#125;</span>, 帧率: <span class="subst">&#123;fps&#125;</span>, 总时长: <span class="subst">&#123;total_seconds:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;视频信息 - 宽度: <span class="subst">&#123;width&#125;</span>, 高度: <span class="subst">&#123;height&#125;</span>, 帧率: <span class="subst">&#123;fps&#125;</span>, 总时长: <span class="subst">&#123;total_seconds:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> total_seconds &lt;= <span class="number">0</span>:</span><br><span class="line">            logging.error(<span class="string">f&quot;视频时长无效: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;视频时长无效: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            cap.release()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算3分钟段数</span></span><br><span class="line">        num_intervals = <span class="built_in">int</span>(total_seconds // INTERVAL_DURATION_SECONDS)</span><br><span class="line">        <span class="keyword">if</span> num_intervals == <span class="number">0</span>:</span><br><span class="line">            logging.error(<span class="string">f&quot;视频时长不足3分钟: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;视频时长不足3分钟: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            cap.release()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        passed_segments = <span class="number">0</span>  <span class="comment"># 通过检测的段数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 逐段检测</span></span><br><span class="line">        <span class="keyword">for</span> interval_idx <span class="keyword">in</span> <span class="built_in">range</span>(num_intervals):</span><br><span class="line">            <span class="keyword">if</span> passed_segments &gt;= <span class="number">3</span>:</span><br><span class="line">                <span class="comment"># 已经有足够的段通过，提前结束</span></span><br><span class="line">                logging.info(<span class="string">f&quot;已达到足够的通过段数 (<span class="subst">&#123;passed_segments&#125;</span>)，提前结束检测&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;已达到足够的通过段数 (<span class="subst">&#123;passed_segments&#125;</span>)，提前结束检测&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            interval_start = interval_idx * INTERVAL_DURATION_SECONDS</span><br><span class="line">            interval_end = (interval_idx + <span class="number">1</span>) * INTERVAL_DURATION_SECONDS</span><br><span class="line">            detection_times = get_random_detection_times(interval_start, interval_end, DETECTION_COUNT_PER_INTERVAL)</span><br><span class="line">            logging.info(<span class="string">f&quot;段 <span class="subst">&#123;interval_idx + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;num_intervals&#125;</span> 检测时间点（秒）: <span class="subst">&#123;detection_times&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;段 <span class="subst">&#123;interval_idx + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;num_intervals&#125;</span> 检测时间点（秒）: <span class="subst">&#123;detection_times&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            detections = <span class="number">0</span>  <span class="comment"># 检测到人的次数</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> detection_time <span class="keyword">in</span> detection_times:</span><br><span class="line">                frame_number = <span class="built_in">int</span>(detection_time * fps)</span><br><span class="line">                cap.<span class="built_in">set</span>(cv2.CAP_PROP_POS_FRAMES, frame_number)</span><br><span class="line">                ret, frame = cap.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">                    logging.warning(<span class="string">f&quot;无法读取视频 <span class="subst">&#123;video_path&#125;</span> 的第 <span class="subst">&#123;frame_number&#125;</span> 帧&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;无法读取视频 <span class="subst">&#123;video_path&#125;</span> 的第 <span class="subst">&#123;frame_number&#125;</span> 帧&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 确保帧内容有效</span></span><br><span class="line">                <span class="keyword">if</span> frame <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> frame.size == <span class="number">0</span>:</span><br><span class="line">                    logging.warning(<span class="string">f&quot;读取到空帧，在时间 <span class="subst">&#123;detection_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;读取到空帧，在时间 <span class="subst">&#123;detection_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 使用锁确保线程安全</span></span><br><span class="line">                <span class="keyword">with</span> model_lock:</span><br><span class="line">                    person_detected = detect_person_many(model, frame)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> person_detected:</span><br><span class="line">                    detections += <span class="number">1</span></span><br><span class="line">                    logging.info(<span class="string">f&quot;检测到人，在时间 <span class="subst">&#123;detection_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;检测到人，在时间 <span class="subst">&#123;detection_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    logging.info(<span class="string">f&quot;未检测到人，在时间 <span class="subst">&#123;detection_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;未检测到人，在时间 <span class="subst">&#123;detection_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">            logging.info(<span class="string">f&quot;段 <span class="subst">&#123;interval_idx + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;num_intervals&#125;</span> 检测到人次数: <span class="subst">&#123;detections&#125;</span>/<span class="subst">&#123;DETECTION_COUNT_PER_INTERVAL&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;段 <span class="subst">&#123;interval_idx + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;num_intervals&#125;</span> 检测到人次数: <span class="subst">&#123;detections&#125;</span>/<span class="subst">&#123;DETECTION_COUNT_PER_INTERVAL&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> detections == DETECTION_THRESHOLD:</span><br><span class="line">                passed_segments += <span class="number">1</span></span><br><span class="line">                logging.info(<span class="string">f&quot;段 <span class="subst">&#123;interval_idx + <span class="number">1</span>&#125;</span> 通过检测，当前通过段数: <span class="subst">&#123;passed_segments&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;段 <span class="subst">&#123;interval_idx + <span class="number">1</span>&#125;</span> 通过检测，当前通过段数: <span class="subst">&#123;passed_segments&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.info(<span class="string">f&quot;段 <span class="subst">&#123;interval_idx + <span class="number">1</span>&#125;</span> 未达到检测阈值&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;段 <span class="subst">&#123;interval_idx + <span class="number">1</span>&#125;</span> 未达到检测阈值&quot;</span>)</span><br><span class="line"></span><br><span class="line">        cap.release()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> passed_segments &gt;= <span class="number">3</span>:</span><br><span class="line">            logging.info(<span class="string">f&quot;视频处理完成且符合要求（通过段数: <span class="subst">&#123;passed_segments&#125;</span>）: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;视频处理完成且符合要求（通过段数: <span class="subst">&#123;passed_segments&#125;</span>）: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 符合要求</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.info(<span class="string">f&quot;视频处理完成但不符合要求（通过段数: <span class="subst">&#123;passed_segments&#125;</span>）: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;视频处理完成但不符合要求（通过段数: <span class="subst">&#123;passed_segments&#125;</span>）: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 不符合要求</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理视频时出错: <span class="subst">&#123;video_path&#125;</span>, 错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理视频时出错: <span class="subst">&#123;video_path&#125;</span>, 错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_batch</span>(<span class="params">video_files, model</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理一批视频文件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> video_file <span class="keyword">in</span> video_files:</span><br><span class="line">        relative_path = os.path.relpath(video_file, <span class="string">r&quot;E:\video竖屏_低分辨率&quot;</span>)</span><br><span class="line">        detected_human_dir = os.path.join(DETECTED_HUMANS_DIR, os.path.dirname(relative_path))</span><br><span class="line"></span><br><span class="line">        create_output_dir(detected_human_dir)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> detect_person_in_video(video_file, model):</span><br><span class="line">            logging.info(<span class="string">f&quot;检测到人且符合要求: <span class="subst">&#123;video_file&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;检测到人且符合要求: <span class="subst">&#123;video_file&#125;</span>&quot;</span>)</span><br><span class="line">            shutil.move(video_file, os.path.join(detected_human_dir, os.path.basename(video_file)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.info(<span class="string">f&quot;未检测到人或不符合要求: <span class="subst">&#123;video_file&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;未检测到人或不符合要求: <span class="subst">&#123;video_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    video_files = []</span><br><span class="line">    root_path = <span class="string">r&quot;E:\video竖屏_低分辨率&quot;</span></span><br><span class="line">    root = Path(root_path).resolve()</span><br><span class="line">    exclude_dirs = &#123;<span class="string">&#x27;$RECYCLE.BIN&#x27;</span>, <span class="string">&#x27;System Volume Information&#x27;</span>, <span class="string">&#x27;Windows&#x27;</span>, <span class="string">&#x27;Program Files&#x27;</span>, <span class="string">&#x27;Program Files (x86)&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">f&quot;开始查找目录 <span class="subst">&#123;root_path&#125;</span> 下的视频文件&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;开始查找目录 <span class="subst">&#123;root_path&#125;</span> 下的视频文件&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> extension <span class="keyword">in</span> (<span class="string">&#x27;*.mp4&#x27;</span>, <span class="string">&#x27;*.avi&#x27;</span>, <span class="string">&#x27;*.mov&#x27;</span>, <span class="string">&#x27;*.mkv&#x27;</span>, <span class="string">&#x27;*.m4v&#x27;</span>, <span class="string">&#x27;*.WMV&#x27;</span>, <span class="string">&#x27;*.rmvb&#x27;</span>, <span class="string">&#x27;*.DAT&#x27;</span>, <span class="string">&#x27;*.VOB&#x27;</span>):</span><br><span class="line">        video_files += [</span><br><span class="line">            <span class="built_in">str</span>(file.resolve()) <span class="keyword">for</span> file <span class="keyword">in</span> root.rglob(extension)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">any</span>(excluded.lower() <span class="keyword">in</span> (part.lower() <span class="keyword">for</span> part <span class="keyword">in</span> file.parts) <span class="keyword">for</span> excluded <span class="keyword">in</span> exclude_dirs)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> video_files:</span><br><span class="line">        logging.error(<span class="string">&quot;没有找到符合条件的文件&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;没有找到符合条件的文件&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载模型（在主线程中加载一次模型，供所有线程使用）</span></span><br><span class="line">    model = load_model(MODEL_NAME)</span><br><span class="line"></span><br><span class="line">    start_main_time = time.time()</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">f&quot;开始分批处理视频，共有 <span class="subst">&#123;<span class="built_in">len</span>(video_files)&#125;</span> 个文件，批次大小为 <span class="subst">&#123;BATCH_SIZE&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;开始分批处理视频，共有 <span class="subst">&#123;<span class="built_in">len</span>(video_files)&#125;</span> 个文件，批次大小为 <span class="subst">&#123;BATCH_SIZE&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多线程处理</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=THREAD_COUNT) <span class="keyword">as</span> executor:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(video_files), BATCH_SIZE):</span><br><span class="line">            batch = video_files[i:i + BATCH_SIZE]</span><br><span class="line">            executor.submit(process_batch, batch, model)</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">f&quot;所有视频文件处理完成，总耗时 <span class="subst">&#123;time.time() - start_main_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;所有视频文件处理完成，总耗时 <span class="subst">&#123;time.time() - start_main_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;代码修改详解</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 1. **模型加载与初始化**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">YOLOv5 使用 PyTorch 实现，通过 `torch.hub` 方便地加载模型。我们在主线程中加载一次模型，并在所有线程中共享该模型对象，以避免重复加载和节省内存。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def load_model(model_name=&#x27;yolov5s&#x27;):</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;加载YOLOv5模型，返回模型对象&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    model = torch.hub.load(&#x27;ultralytics/yolov5&#x27;, model_name, pretrained=True)</span></span><br><span class="line"><span class="string">    # 设置模型为评估模式</span></span><br><span class="line"><span class="string">    model.eval()</span></span><br><span class="line"><span class="string">    return model</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;yolov5s 模型识别人脸&lt;/h1&gt;
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;YOLO（You Only Look Once）是一个广泛使用的实时目标检测算法，它能够在图片或视频中快速检测到目标并进行分类。YOLO 的优点在于其速度和准确</summary>
      
    
    
    
    
    <category term="yolov5" scheme="https://caozhaoqi.github.io/tags/yolov5/"/>
    
  </entry>
  
  <entry>
    <title>使用js log库和python FastApi完成 微信小程序日志保存与上传</title>
    <link href="https://caozhaoqi.github.io/2024/11/16/wechat-log-upload/"/>
    <id>https://caozhaoqi.github.io/2024/11/16/wechat-log-upload/</id>
    <published>2024-11-16T15:28:47.000Z</published>
    <updated>2025-03-04T09:08:33.962Z</updated>
    
    <content type="html"><![CDATA[<h1>使用js log库和python FastApi完成 微信小程序日志保存与上传</h1><h2 id="简介">简介</h2><blockquote><p>使用log.js 通过定义日志输出格式：console.log(<code>[$&#123;log.level&#125;] $&#123;log.timestamp&#125;: $&#123;log.message&#125;</code>); 输出日志 通过http post请求上传日志数据到服务端</p></blockquote><h2 id="微信程序日志保存与上传">微信程序日志保存与上传</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// log.js - 微信小程序日志库</span></span><br><span class="line"><span class="keyword">import</span> admin_url <span class="keyword">from</span> <span class="string">&#x27;@/common/config.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> user_msg = uni.<span class="title function_">getStorageSync</span>(<span class="string">&quot;token&quot;</span>)</span><br><span class="line"><span class="comment">// log.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Logger</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">logs</span> = []; <span class="comment">// 存储日志记录的数组</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">levels</span> = &#123; <span class="comment">// 定义日志级别</span></span><br><span class="line"><span class="attr">INFO</span>: <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line"><span class="attr">DEBUG</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line"><span class="attr">ERROR</span>: <span class="string">&#x27;ERROR&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">isDebug</span> = <span class="literal">true</span>; <span class="comment">// 控制是否在控制台输出日志，调试期间开启</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">uploadEndpoint</span> =<span class="string">&#x27;/api/upload-log&#x27;</span>; <span class="comment">// 上传日志的接口地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化日志</span></span><br><span class="line"><span class="title function_">formatLog</span>(<span class="params">level, message</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">level</span>: level,</span><br><span class="line"><span class="attr">message</span>: user_msg + <span class="string">&quot;: &quot;</span> + message,</span><br><span class="line"><span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>()</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印日志到控制台</span></span><br><span class="line"><span class="title function_">printLog</span>(<span class="params">log</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isDebug</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;log.level&#125;</span>] <span class="subst">$&#123;log.timestamp&#125;</span>: <span class="subst">$&#123;log.message&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录日志到数组</span></span><br><span class="line"><span class="title function_">log</span>(<span class="params">level, message</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> logEntry = <span class="variable language_">this</span>.<span class="title function_">formatLog</span>(level, message);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">logs</span>.<span class="title function_">push</span>(logEntry);</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">printLog</span>(logEntry);</span><br><span class="line">wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;appLogs&#x27;</span>, <span class="variable language_">this</span>.<span class="property">logs</span>); <span class="comment">// 同步存储到本地</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各级别的日志记录方法</span></span><br><span class="line"><span class="title function_">info</span>(<span class="params">message</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">levels</span>.<span class="property">INFO</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">debug</span>(<span class="params">message</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">levels</span>.<span class="property">DEBUG</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">error</span>(<span class="params">message</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">levels</span>.<span class="property">ERROR</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = <span class="keyword">new</span> <span class="title class_">Logger</span>();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> logger;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="日志输出使用">日志输出使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">&#x27;../log.js&#x27;</span></span><br><span class="line"></span><br><span class="line">logger.<span class="title function_">info</span>(<span class="string">&#x27;输出示例&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="服务端日志上传接口定义">服务端日志上传接口定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="meta">@router.post(<span class="params"><span class="string">&quot;/upload-log&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">upload_log</span>(<span class="params">request: LogUploadRequest</span>):</span><br><span class="line">    logs = request.logs</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> logs:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">400</span>, detail=<span class="string">&quot;日志内容不能为空&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将日志数据保存到文件</span></span><br><span class="line">    save_logs_to_file([log.<span class="built_in">dict</span>() <span class="keyword">for</span> log <span class="keyword">in</span> logs])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">len</span>(logs)&#125;</span>条日志已上传&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志存储文件路径</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Dict</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">LOG_FILE_PATH = <span class="string">&quot;wechat_logs.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间，并格式化为指定格式</span></span><br><span class="line">current_timestamp = datetime.now().strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S.%f&quot;</span>)[:-<span class="number">3</span>]</span><br><span class="line"><span class="comment"># print(current_timestamp)</span></span><br><span class="line"></span><br><span class="line">file_name = <span class="built_in">str</span>(uuid.uuid4()) + current_timestamp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入日志到文件</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_logs_to_file</span>(<span class="params">logs: <span class="type">List</span>[<span class="type">Dict</span>]</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/wechat_logs/&quot;</span> + LOG_FILE_PATH + <span class="string">&quot;_&quot;</span> + file_name, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> log_file:</span><br><span class="line">            <span class="keyword">for</span> log <span class="keyword">in</span> logs:</span><br><span class="line">                log_file.write(json.dumps(log) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;日志保存到文件失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="微信小程序调用api上传log">微信小程序调用api上传log</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 批量上传日志到服务器</span></span><br><span class="line"><span class="title function_">uploadLogs</span>(<span class="params">api</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> logsToUpload = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;appLogs&#x27;</span>) || [];</span><br><span class="line"><span class="keyword">if</span> (logsToUpload.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line"><span class="attr">url</span>:  api + <span class="variable language_">this</span>.<span class="property">uploadEndpoint</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">logs</span>: logsToUpload</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">header</span>: &#123;</span><br><span class="line"><span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;日志上传成功&quot;</span>, res.<span class="property">data</span>);</span><br><span class="line">wx.<span class="title function_">removeStorageSync</span>(<span class="string">&#x27;appLogs&#x27;</span>); <span class="comment">// 上传成功后清空本地存储的日志</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;日志上传失败&quot;</span>, err);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="输出结果示例">输出结果示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: [object Object]&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:02:26.322Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: start select user login msg&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:02:26.325Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: [object Object]&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:02:26.520Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: start select user login msg&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:02:26.523Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: [object Object]&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:02:26.593Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: [object Object]&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:02:26.706Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: [object Object]&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:05:19.227Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: start select user login msg&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:05:19.235Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: [object Object]&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:05:19.389Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: start select user login msg&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:05:19.392Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: [object Object]&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:05:19.441Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: [object Object]&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:05:19.676Z&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;使用js log库和python FastApi完成 微信小程序日志保存与上传&lt;/h1&gt;
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;使用log.js 通过定义日志输出格式：console.log(&lt;code&gt;[$&amp;#123;log.level</summary>
      
    
    
    
    
    <category term="python" scheme="https://caozhaoqi.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>基于AX516 FPGA 开发板的音频录制与回放</title>
    <link href="https://caozhaoqi.github.io/2024/10/28/wm8731-record-audio/"/>
    <id>https://caozhaoqi.github.io/2024/10/28/wm8731-record-audio/</id>
    <published>2024-10-28T05:05:12.000Z</published>
    <updated>2025-03-04T09:08:33.963Z</updated>
    
    <content type="html"><![CDATA[<h1>基于AX516 FPGA 开发板的音频录制与回放</h1><h2 id="硬件介绍">硬件介绍</h2><blockquote><p>AX516是一款基于FPGA平台的高性能开发板，它使用赛灵思生产的 Spartan6 系列的XC6SLX16-2CSG324FPGA 作为CPU。这一系列具有众多优点：具有丰富硬件资源、具有丰富接口等。在包括：软件无线电、工控、IC验证等众多领域都有所广泛应用。</p></blockquote><h3 id="基本流程">基本流程</h3><blockquote><p>选取FPGA开发板与外接音频模块相结合的方式，利用音频模块的音频芯片WM8731模拟信号与数字信号之间转换的功能来实现。除此之外，还用到I2C和I2S总线接口，通过它们来实现FPGA与WM8731之间的控制与数据通信。其中，I2C接口负责FPGA对WM8731的寄存器的配置，而I2S接口负责对音频数据的通信。通过DDR3读写控制、音频通信与控制、按键检测等程序来实现。</p></blockquote><blockquote><p>在硬件上电结束后，开始按键检测。判断有按键按下时，再次判断按键是否松开。在按键松开后开始DDR读写控制程序，然后初始化管脚配置与位宽。将时钟复位后，再配置WM8731寄存器，启动音频产生程序，发送音频数据。在另一端接收音频数据，至此结束。</p></blockquote><h3 id="硬件结构">硬件结构</h3><blockquote><p>如图</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/st.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/st.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="开发板主要参数">开发板主要参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">项目            参数</span><br><span class="line">逻辑单元Logic Cells14579</span><br><span class="line">乘法器DSP48        32</span><br><span class="line">可配置逻辑块CLBs 136Kb</span><br><span class="line">Block RAM       576Kb</span><br><span class="line">时钟单元CMTs    2</span><br><span class="line">可用IO数量        218个</span><br><span class="line">内核电压        1.15V-1.25V（推荐1.2V）</span><br><span class="line">工作温度        0-85℃</span><br></pre></td></tr></table></figure><h3 id="电路设计">电路设计</h3><blockquote><p>如图</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/rou.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/rou.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="WM8731结构">WM8731结构</h3><blockquote><p>如图 WM8731主要负责数字信号与模拟信号之间的转换功能。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/wm.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/wm.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="寄存器信息">寄存器信息</h3><blockquote><p>如图:在WM8731的内部有11个寄存器，通过I2C总线的方式对其内部的11个寄存器进行相应的配置，来实现对芯片的初始化以及工作时的工作状态和功能。ADC和DAC都是WM8731的内部模块，ADC是模拟数字转换器，DAC是数字模拟转换器。音频信息通过外部的麦克风输入，在WM8731中来进行数字信号与模拟信号之间的转换。控制器可以通过控制接口来对WM8731进行配置，然后在通过音频接口读写数据音频信号。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/jq.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/jq.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="寄存器地址及功能">寄存器地址及功能</h3><blockquote><p>如下</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">寄存器地址寄存器名称    相关功能</span><br><span class="line">0000000   左通道控制   静音控制</span><br><span class="line">0000001   右通道控制   静音控制</span><br><span class="line">0000100   模拟音频路径控制A/D转换输入选择</span><br><span class="line">0000101   数字音频路径控制高通滤波器使能控制</span><br><span class="line">0000110   掉电控制       麦克风输入掉电控制</span><br><span class="line">0000111   数字音频格式控制音频位长度和格式控制</span><br><span class="line">0001000   采样控制       核心时钟分配控制</span><br></pre></td></tr></table></figure><h3 id="wm8731-FPGA引脚及功能">wm8731 FPGA引脚及功能</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">WM8731引脚FPGA引脚</span><br><span class="line">VM_I2C_SCLKPIN:N11</span><br><span class="line">VM_I2C_SDATPIN:M11</span><br><span class="line">VM_BCLK    PIN:U16</span><br><span class="line">VM_DACDAT  PIN:V16</span><br><span class="line">VM_DADLRC  PIN:U15</span><br><span class="line">VM_ADCDAT  PIN:V15</span><br><span class="line">VM_ADCLRC  PIN:V13</span><br></pre></td></tr></table></figure><h2 id="开发流程">开发流程</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设计定义、HDL实现、功能仿真、逻辑综合、前仿真、布局布线、后仿真、静态时序分析、系统测试</span><br></pre></td></tr></table></figure><p><img src="/2024/10/28/wm8731-record-audio/re.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/re.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="协议">协议</h2><h3 id="i2c">i2c</h3><blockquote><p>I2C（Inter Interface Circuit）全称为芯片间总线，是目前使用广泛的芯片间串行扩展总线。目前世界上采用I2C总线有两个规范，荷兰飞利浦公司和日本索尼公司，现多采用飞利浦公司I2C总线技术规范，已成为电子行业认可的总线标准。采用I2C技术单片机以及外围器件种类很多，已广泛用于各类电子产品、家用电器及通信设备中。<br>I2C串行总线只有两条信号线，一条是数据线SDA，另一条是时钟线SCL。SDA和SCL是双向的，I2C总线上各器件数据线都接到SDA线上，各器件时钟线均接到SCL线上。<br>带有I2C接口单片机可直接与I2C总线接口的各种扩展器件（如存储器、I/O芯片、A/D、D/A、键盘、显示器、日历/时钟）连接。由于I2C总线采用纯软件寻址方法，无需片选线连接，大大简化总线数量。</p></blockquote><blockquote><p>基本结构如图</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/ic.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/ic.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="访问">访问</h4><blockquote><p>由总线规范，起始信号表明一次数据传送的开始，其后为寻址字节。在寻址字节后是按指定读、写的数据字节与应答位。在数据传送完成后主器件都必须发送终止信号。在起始与终止信号之间传输的数据字节数由主器件（单片机）决定</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/fw.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/fw.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="寄存器配置">寄存器配置</h4><blockquote><p>如图 每个寄存器都需i2c传输3个字节。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/jcq.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/jcq.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="i2s">i2s</h3><blockquote><p>数字音频接口四种模式 1.Right justified 2.Left justified 3.I2S 4.DSP mode</p></blockquote><blockquote><p>音频数据传输：WM8731的数字音频接口有5根引脚，分别为：BCLK（数字音频位时钟）、DACDAT（DAC数字音频数据输入）、DACLRC（DAC采样左/右声道信号）、ADCDAT（ADC数字音频信号输出）、ADCLRC（ADC采样左/右声道信号）。</p></blockquote><blockquote><p>FPGA为从设备，WM8731为主设备。ADCDAT、DACDST、ADCLRC和DACLRC与位时钟BCLK同步，在每个BCLK的下降沿进行一次数据传输。BCLK、DACDAT、DACLRC、ADCLRC为WM8731的输入信号。ADCDAT为WM8731的输出信号。FPGA和WM8731的I2S的通信右对齐的时序图如下图所示：</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/is.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/is.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="DDR3-读写">DDR3 读写</h2><blockquote><p>录取的数据存放到DDR3 选择的是两个64bit用户port口，一个port口用来读取DDR3数据，另一个则用来读写数据到DDR3里</p></blockquote><h2 id="代码实现">代码实现</h2><blockquote><p>音频部分包含一个主程序（mywav.v）和四个子程序，四个子程序分别是音频接收程序（sinwave_store.v），音频播放程序（sinwave_gen.v），WM8731寄存器配置程序（reg_config.v）和复位延迟程序（reset_delay.v）。另外寄存器配置程序（reg_config.v）还调用了iic的通信程序i2c_com.v。</p></blockquote><h3 id="主程序">主程序</h3><blockquote><p>在硬件上电结束后，开始按键检测。判断有按键按下时，再次判断按键是否松开。在按键松开后开始ddr读写控制程序，后初始化管脚配置与位宽。将时钟复位后，配置WM8731寄存器，启动音频产生程序，发送音频数据。在另一端接收音频数据，至此，主程序结束。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/stu.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/stu.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="示例代码">示例代码</h3><blockquote><p>在按键检测程序和ddr读写控制程序执行后，主程序首先分配管脚与位宽。在此之后依次调用各个模块功能</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/main.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/main.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="音频接收">音频接收</h4><blockquote><p>编写音频接收程序：sinwave_store.v，程序通过判断bclk输入时钟的上升沿来采样音频adcdat输入的数据，串行转化为64bit的并行数据并产生一个DDR3数据写请求信号</p></blockquote><ul><li>流程</li></ul><blockquote><p>在初始化变量结束后，程序首先检测是否有bclk、dacclk信号的跳变；在检测到时钟信号跳变后，采集ADC数据。当blc时钟处于下降沿时，开始采集数据。之后产生ddr写信号，在判断满足输出条件后输出接收结果。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/stu2.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/stu2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>代码</li></ul><blockquote><p>首先初始化变量，之后检测对应时钟信号是否跳变。确认有信号跳变后采集对应ADC数据。在开始采集前，判断时钟信号处于下降沿，之后产生ddr读写控制信号，在满足输出结果后输出音频接收结果。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/code.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/code.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="音频播放">音频播放</h4><ul><li>流程</li></ul><blockquote><p>频播放程序流程与音频接收程序流程类似。在初始化变量后，检测dacclk、bclk时钟信号是否跳变。再确认跳变后，检测时钟处于下降沿时开始播放音频数据，随后产生ddr读信号。在判断播放完成后结束流程。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/stu3.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/stu3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>代码</li></ul><blockquote><p>在初始化变量和配置管脚和位宽后，检测dacclk、bclk时钟是否跳变，在确认时钟跳变后开始播放声音数据，首先判断dacclk时钟是否处于下降沿，处于下降沿后播放数据。同时产生ddr读信号，在判断播放完成后程序结束。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/code2.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/code2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="寄存器配置-2">寄存器配置</h4><ul><li>流程</li></ul><blockquote><p>在初始化变量后，程序开始产生i2c控制时钟，之后进行寄存器i2c配置过程控制。在此之后判断是否复位，在确认复位后开始i2c传输数据，之后判断是否接收到i2c应答信号，如果收到，则继续下一个寄存器配置，否则配置WM8731寄存器赋值。至此流程结束。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/stu4.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/stu4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>代码</li></ul><blockquote><p>在初始化变量后配置位宽和管脚，之后产生频率为20khz的i2c控制时钟；之后进行寄存器IIC配置过程控制；判断复位后，开始数据传输，如果收到i2c应答信号，则继续下个寄存器配置，否则发送结束。开始WM8731寄存器赋值。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/code3.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/code3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="I2C通信">I2C通信</h4><ul><li>流程</li></ul><blockquote><p>在配置变量后引脚后，首先i2c处于空闲状态，在判断输入信号处于低电平后，开始数据传输，在接受到应答信号后，开始下次传输，在判断传输结束后，流程结束。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/stu5.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/stu5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>代码</li></ul><blockquote><p>在判断处于低电平后，开始数据传输，接收到应答信号后，开始下次数据传输，直至数据传输结束。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/code4.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/code4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="复位延迟">复位延迟</h4><blockquote><p>当始终处于上升沿是判断cnt是否满足条件，满足指定条件后，使得cnt自增。不满足时进行复位操作，以此达到复位时延操作。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/code5.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/code5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="按键检测">按键检测</h4><ul><li>流程</li></ul><blockquote><p>初始化变量结束后，判断按键是否按下，如果按键按下ddr写地址复位，开始计数。在判断超过抖动时间后，开始录音。判断按键是否松开，按键松开后ddr读地址开始计数，超过抖动时间后，录音结束。按键检测程序流程结束。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/stu6.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/stu6.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>代码</li></ul><blockquote><p>第一部分检测按键是否按下，第二部分检测按键是否松开。最后执行相应操作。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/code6.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/code6.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="顶层模块">顶层模块</h4><ul><li>流程</li></ul><blockquote><p>依次调用：WM8731驱动程序、按键检测程序、DDR读写控制程序。</p></blockquote><ul><li>代码</li></ul><p><img src="/2024/10/28/wm8731-record-audio/code7.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/code7.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="效果">效果</h2><blockquote><p>如图</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/res.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/res.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="编译与操作">编译与操作</h3><blockquote><p>在音频模块上有三个不同颜色的音频连接器，蓝色的接口是音频输入接口；粉色的接口是麦克风的输入接口；绿色的接口则为麦克风的输出接口。</p></blockquote><blockquote><p>在连接过程中，我们需要注意的是不要将插头与接口插错，耳机的粉色插头要插到音频模块的粉色接口上，耳机的绿色插头则要插到音频模块的绿色接口上。</p></blockquote><blockquote><p>编译工程生成文件，然后再用Impact 工具下载生成的文件到FPGA里，这样就完成了我们FPGA版的录音机了。</p></blockquote><blockquote><p>想要实现录音与播放功能很简单，就像在微信发语音一样，按住录音键说话，说完话后再松开录音就可以了。我们需要按住开发板上的KEY1键，对着耳机的麦克风说上一段话，然后释放KEY1键，之后我们就能在耳机中听到我们自己说的话了，非常简单，方便快捷。</p></blockquote><h2 id="See">See</h2><ul><li><ol><li>黑金AX516开发板用户手册</li></ol></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;基于AX516 FPGA 开发板的音频录制与回放&lt;/h1&gt;
&lt;h2 id=&quot;硬件介绍&quot;&gt;硬件介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;AX516是一款基于FPGA平台的高性能开发板，它使用赛灵思生产的 Spartan6 系列的XC6SLX16-2CSG324FPGA</summary>
      
    
    
    
    
    <category term="fpga" scheme="https://caozhaoqi.github.io/tags/fpga/"/>
    
  </entry>
  
</feed>
