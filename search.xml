<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用 Docker Compose 快速部署 Shadowsocks 代理服务教程</title>
      <link href="/2025/08/29/ss-build-doc/"/>
      <url>/2025/08/29/ss-build-doc/</url>
      
        <content type="html"><![CDATA[<h2 id="基础环境">基础环境</h2><h4 id="1-1-更新系统软件包列表">1.1 更新系统软件包列表</h4><p>首先，连接到您的服务器，然后运行以下命令来更新系统的软件包索引：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update -y</span><br></pre></td></tr></table></figure><h4 id="1-2-安装-Docker-的依赖项">1.2 安装 Docker 的依赖项</h4><p>接下来，安装一些必要的软件包，以允许 <code>apt</code> 通过 HTTPS 使用 Docker 的软件仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -y \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><h4 id="1-3-添加-Docker-官方-GPG-密钥">1.3 添加 Docker 官方 GPG 密钥</h4><p>为了安全起见，我们需要添加 Docker 的官方 GPG 密钥。这会验证我们下载的 Docker 软件包是官方发布的，未经篡改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用于存放密钥的目录</span></span><br><span class="line"><span class="built_in">sudo</span> install -m 0755 -d /etc/apt/keyrings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 Docker 的 GPG 密钥</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | <span class="built_in">sudo</span> gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改密钥文件的权限</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg</span><br></pre></td></tr></table></figure><h4 id="1-4-设置-Docker-的-APT-软件源">1.4 设置 Docker 的 APT 软件源</h4><p>现在，我们将 Docker 的官方软件源地址添加到我们系统的源列表中。这样，<code>apt</code> 命令就能找到并安装 Docker 了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(. /etc/os-release &amp;&amp; echo <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null```</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 1.5 安装 Docker 引擎和 Compose V2</span></span><br><span class="line"></span><br><span class="line">再次更新软件包列表，以包含来自 Docker 官方源的软件包信息，然后执行安装：</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment"># 再次更新软件包列表</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Docker 引擎, 命令行工具, containerd 和 Docker Compose V2 插件</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><h4 id="1-6-可选但推荐-配置非-root-用户运行-Docker">1.6 (可选但推荐) 配置非 root 用户运行 Docker</h4><p>每次都输入 <code>sudo</code> 来运行 Docker 命令很麻烦。我们可以将当前用户添加到 <code>docker</code> 用户组，从而免去 <code>sudo</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将您的用户（$USER 是一个环境变量，代表当前用户）添加到 docker 组</span></span><br><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p><strong>重要提示：</strong> 执行此命令后，您需要<strong>完全退出 SSH 会话并重新登录</strong>，才能使权限更改生效！</p><hr><h3 id="第二步：配置并部署-Shadowsocks-服务">第二步：配置并部署 Shadowsocks 服务</h3><p>环境准备好后，我们就可以开始定义和部署我们的 Shadowsocks 服务了。</p><h4 id="2-1-创建一个工作目录">2.1 创建一个工作目录</h4><p>为我们的项目创建一个专门的目录，这样可以保持整洁。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个名为 ss 的目录并进入</span></span><br><span class="line"><span class="built_in">mkdir</span> ~/ss</span><br><span class="line"><span class="built_in">cd</span> ~/ss</span><br></pre></td></tr></table></figure><h4 id="2-2-编写-docker-compose-yml-配置文件">2.2 编写 <code>docker-compose.yml</code> 配置文件</h4><p>这是整个部署的核心。我们将创建一个名为 <code>docker-compose.yml</code> 的文件，它像一份蓝图，详细描述了我们的服务应该如何运行。</p><p>使用您喜欢的文本编辑器（这里以 <code>nano</code> 为例，它比 <code>vim</code> 更易上手）创建文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>然后，将以下内容<strong>复制并粘贴</strong>到编辑器中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 Compose 文件格式的版本 3</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义所有服务</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment"># 定义一个名为 &quot;shadowsocks&quot; 的服务</span></span><br><span class="line">  <span class="attr">shadowsocks:</span></span><br><span class="line">    <span class="comment"># 指定要使用的 Docker 镜像，我们使用官方的 shadowsocks-libev</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">shadowsocks/shadowsocks-libev</span></span><br><span class="line">    <span class="comment"># 给运行的容器起一个固定的名字，方便我们管理</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">shadowsocks</span></span><br><span class="line">    <span class="comment"># 设置端口映射 (格式: &quot;主机端口:容器端口&quot;)</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># 将服务器的 TCP 8388 端口映射到容器的 TCP 8388 端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8388:8388/tcp&quot;</span></span><br><span class="line">      <span class="comment"># 将服务器的 UDP 8388 端口也映射出去 (用于游戏、视频通话等)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8388:8388/udp&quot;</span></span><br><span class="line">    <span class="comment"># 设置容器的重启策略</span></span><br><span class="line">    <span class="comment"># unless-stopped: 除非我们手动停止容器，否则它总是在退出后自动重启</span></span><br><span class="line">    <span class="comment"># (包括服务器重启后，服务也会自动拉起，非常省心)</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="comment"># 设置容器内的环境变量，用于配置 Shadowsocks</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># 设置加密方法，chacha20-ietf-poly1305 是目前推荐的安全且高效的算法</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">METHOD=chacha20-ietf-poly1305</span></span><br><span class="line">      <span class="comment"># 在这里设置您的连接密码！请务必替换成一个您自己的强密码！</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PASSWORD=YOUR_STRONG_PASSWORD_HERE</span></span><br></pre></td></tr></table></figure><p><strong>重要配置修改：</strong></p><ul><li><strong><code>PASSWORD</code></strong>: 将 <code>YOUR_STRONG_PASSWORD_HERE</code> <strong>替换为您自己设定的一个强密码</strong>。这是您的客户端连接时需要用到的凭证。</li><li><strong><code>ports</code></strong>: 如果您服务器的 <code>8388</code> 端口已被其他服务占用，您可以修改主机端口。例如，改成 <code>&quot;10086:8388/tcp&quot;</code>，这样您的客户端就需要连接服务器的 <code>10086</code> 端口。</li></ul><p>修改完成后，在 <code>nano</code> 编辑器中，按 <code>Ctrl + X</code>，然后按 <code>Y</code>，最后按 <code>Enter</code> 保存并退出。</p><h4 id="2-3-启动-Shadowsocks-服务">2.3 启动 Shadowsocks 服务</h4><p>现在，激动人心的时刻到了！在 <code>docker-compose.yml</code> 文件所在的目录（即 <code>~/ss</code>），运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意：如果您在 1.6 步中配置了用户组，这里就不需要 sudo 了</span></span><br><span class="line"><span class="comment"># 新版命令 (推荐)</span></span><br><span class="line">docker compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 旧版命令 (也能工作)</span></span><br><span class="line"><span class="comment"># docker-compose up -d</span></span><br></pre></td></tr></table></figure><ul><li><code>up</code>: 告诉 Docker Compose 启动并运行服务。</li><li><code>-d</code>: (<code>--detach</code>) 参数表示在后台运行服务。这是必须的，否则当您关闭 SSH 窗口时，服务也会停止。</li></ul><p>Docker Compose 现在会自动：</p><ol><li>检查 <code>docker-compose.yml</code> 文件。</li><li>从 Docker Hub 上拉取 <code>shadowsocks/shadowsocks-libev</code> 镜像（如果是第一次运行）。</li><li>根据您的配置创建并启动一个名为 <code>shadowsocks</code> 的容器。</li></ol><hr><h3 id="第三步：验证服务与客户端配置">第三步：验证服务与客户端配置</h3><blockquote><p>服务启动后，我们需要确认它是否正常运行，并配置客户端进行连接。</p></blockquote><h4 id="3-1-检查容器运行状态">3.1 检查容器运行状态</h4><p>运行以下命令查看当前正在运行的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>您应该能看到类似下面的输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE                           COMMAND                  CREATED         STATUS         PORTS                                                 NAMES</span><br><span class="line">a1b2c3d4e5f6   shadowsocks/shadowsocks-libev   &quot;/usr/bin/ss-server …&quot;   30 seconds ago   Up 29 seconds   0.0.0.0:8388-&gt;8388/tcp, 0.0.0.0:8388-&gt;8388/udp   shadowsocks</span><br></pre></td></tr></table></figure><p>请关注以下几点：</p><ul><li><strong><code>IMAGE</code></strong>: 确认是 <code>shadowsocks/shadowsocks-libev</code>。</li><li><strong><code>STATUS</code></strong>: 必须是 <code>Up ...</code>，表示正在健康运行。如果是 <code>Exited</code>，说明启动失败。</li><li><strong><code>PORTS</code></strong>: 确认端口映射正确。</li><li><strong><code>NAMES</code></strong>: 确认是 <code>shadowsocks</code>。</li></ul><h4 id="3-2-查看服务日志">3.2 查看服务日志</h4><p>如果容器启动失败，或者您想确认服务的内部运行情况，查看日志是最佳方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs shadowsocks</span><br></pre></td></tr></table></figure><p>成功的日志会显示服务正在监听端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO: initializing ciphers... chacha20-ietf-poly1305</span><br><span class="line">INFO: listening at 0.0.0.0:8388</span><br></pre></td></tr></table></figure><h4 id="3-3-配置您的客户端">3.3 配置您的客户端</h4><p>现在，您可以在您的电脑或手机上配置 Shadowsocks 客户端了。填入以下信息：</p><ul><li><strong>服务器地址 (Server Address)</strong>: <code>您服务器的公网 IP 地址</code></li><li><strong>服务器端口 (Server Port)</strong>: <code>8388</code> (或者您在 <code>docker-compose.yml</code> 中设置的主机端口)</li><li><strong>密码 (Password)</strong>: <code>您在 docker-compose.yml 中设置的密码</code></li><li><strong>加密方法 (Encryption/Method)</strong>: <code>chacha20-ietf-poly1305</code></li></ul><p>保存配置并连接，现在您应该可以正常使用了！</p><hr><h3 id="第四步：常用管理命令">第四步：常用管理命令</h3><ul><li><strong>停止服务</strong>:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 ~/ss 目录下运行</span></span><br><span class="line">docker compose down</span><br></pre></td></tr></table></figure></li><li><strong>重启服务</strong>:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 ~/ss 目录下运行</span></span><br><span class="line">docker compose restart</span><br></pre></td></tr></table></figure></li><li><strong>更新服务 (例如更新 Shadowsocks 镜像)</strong>:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 ~/ss 目录下运行</span></span><br><span class="line"><span class="comment"># 1. 拉取最新的镜像</span></span><br><span class="line">docker compose pull</span><br><span class="line"><span class="comment"># 2. 重新创建并启动容器</span></span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure></li></ul><h2 id="客户端">客户端</h2><ul><li>windows</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/shadowsocks/shadowsocks-windows</span><br></pre></td></tr></table></figure><ul><li>android</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/shadowsocks/shadowsocks-android</span><br></pre></td></tr></table></figure><h2 id="代理模式">代理模式</h2><ul><li><p>禁用 (Disabled)：不使用代理。等同于取消勾选“启用系统代理”。</p></li><li><p>PAC 模式 (PAC)：推荐日常使用。此模式下，客户端会根据一个名为 PAC (Proxy Auto-Config) 的规则列表来判断。</p></li><li><p>全局模式 (Global)：所有网络流量都强制通过代理服务器。</p></li></ul><h2 id="See">See</h2><ul><li><a href="https://github.com/shadowsocks/shadowsocks-rust">https://github.com/shadowsocks/shadowsocks-rust</a></li><li><a href="https://github.com/shadowsocks/shadowsocks-windows">https://github.com/shadowsocks/shadowsocks-windows</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyAV用于视频剪辑处理</title>
      <link href="/2025/08/14/pyav-use-video/"/>
      <url>/2025/08/14/pyav-use-video/</url>
      
        <content type="html"><![CDATA[<h1>PyAV用于视频剪辑处理</h1><blockquote><p>PyAV是FFmpeg库的Pythonic绑定。它允许你直接在Python代码中，以一种极其精细和高效的方式访问FFmpeg的内部功能。这意味着：</p></blockquote><ul><li><strong>内存操作</strong>：直接在内存中处理视频帧和音频样本，无需创建大量临时文件。</li><li><strong>精细控制</strong>：你可以完全控制容器的解复用、数据包的解码、帧的处理和编码的每一个环节。</li><li><strong>硬件加速</strong>：可以利用GPU（如macOS的VideoToolbox, Linux/Windows的CUDA/NVENC）来极大地加速解码和编码过程。</li><li><strong>高度集成</strong>：可以无缝地将视频帧与NumPy、Pillow等流行的Python库结合使用。</li></ul><h3 id="PyAV的核心概念">PyAV的核心概念</h3><blockquote><p>在深入代码之前，我们先了解几个核心概念，它们直接映射自FFmpeg：</p></blockquote><ol><li><strong>容器 (Container)</strong>: 指的是视频文件本身，比如一个<code>.mp4</code>或<code>.mkv</code>文件。它是一个“容器”，里面装着各种数据流。</li><li><strong>流 (Stream)</strong>: 指的是容器内的数据轨道。一个视频文件通常至少包含一个视频流和一个音频流，有时还会有字幕流。</li><li><strong>数据包 (Packet)</strong>: 从流中读取的一小块<strong>压缩后</strong>的数据。</li><li><strong>帧 (Frame)</strong>: 一个数据包经过<strong>解码后</strong>得到的数据。对于视频流，它是一张图片；对于音频流，它是一段声音样本。</li></ol><blockquote><p>标准的处理流程是：<strong>打开容器 → 找到需要的流 → 从流中解复用(demux)数据包 → 解码(decode)数据包得到帧 → (处理帧) → 编码(encode)处理后的帧变回数据包 → 将数据包混合(mux)到新的输出容器 → 关闭容器</strong>。</p></blockquote><h2 id="简单安装">简单安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install av</span><br><span class="line">conda install av -c conda-forge</span><br></pre></td></tr></table></figure><h3 id="功能">功能</h3><ul><li><p>libavformat: containers, audio/video/subtitle streams, packets;</p></li><li><p>libavdevice (by specifying a format to containers);</p></li><li><p>libavcodec: Codec, CodecContext, BitStreamFilterContext, audio/video frames, data planes, subtitles;</p></li><li><p>libavfilter: Filter, Graph;</p></li><li><p>libswscale: VideoReformatter;</p></li><li><p>libswresample: AudioResampler;</p></li></ul><h3 id="simple-demo">simple demo</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> av</span><br><span class="line"></span><br><span class="line">av.logging.set_level(av.logging.VERBOSE)</span><br><span class="line">container = av.<span class="built_in">open</span>(path_to_video)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, frame <span class="keyword">in</span> <span class="built_in">enumerate</span>(container.decode(video=<span class="number">0</span>)):</span><br><span class="line">    frame.to_image().save(<span class="string">f&quot;frame-<span class="subst">&#123;index:04d&#125;</span>.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --- 调度器函数 ---</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crop_video_pyav</span>(<span class="params">input_video_path, output_video_path, ...</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据环境自动选择最佳方式裁剪视频。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 检查硬件加速是否受支持</span></span><br><span class="line">    <span class="keyword">if</span> HW_ACCEL_SUPPORTED:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 优先尝试硬件加速</span></span><br><span class="line">            logger.info(<span class="string">&quot;检测到硬件加速支持，尝试 Metal 路径...&quot;</span>)</span><br><span class="line">            success = _crop_video_pyav_metal(...)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">                <span class="comment"># 如果硬件路径明确返回失败，则降级</span></span><br><span class="line">                logger.warning(<span class="string">&quot;硬件加速路径执行失败，自动降级到纯软件模式。&quot;</span>)</span><br><span class="line">                success = _crop_video_software(...)</span><br><span class="line">            <span class="keyword">return</span> success</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 如果硬件路径意外崩溃，则降级</span></span><br><span class="line">            logger.error(<span class="string">f&quot;硬件加速路径执行时发生意外异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            logger.warning(<span class="string">&quot;自动降级到纯软件模式。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> _crop_video_software(...)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 不支持硬件加速，直接走软件路径</span></span><br><span class="line">        logger.info(<span class="string">&quot;未检测到硬件加速支持，使用纯软件路径。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> _crop_video_software(...)</span><br></pre></td></tr></table></figure><p>接下来，我们将深入分析这两种核心实现。</p><h3 id="Part-1-健壮的基石-——-纯软件-CPU-实现">Part 1: 健壮的基石 —— 纯软件 (CPU) 实现</h3><p>这是我们后备方案的核心，也是理解PyAV基础操作的最佳入口。它不依赖任何特殊的硬件，可以在任何平台上运行。</p><h4 id="核心步骤">核心步骤</h4><ol><li><p><strong>参数准备</strong>:<br>最关键的一步是确保输出的分辨率永远是偶数。像 <code>libx264</code> 这样的H.264编码器无法处理宽度或高度为奇数的视频。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">final_w = w - (w % <span class="number">2</span>)</span><br><span class="line">final_h = h - (h % <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>打开输入/输出容器</strong>:<br>使用 <code>av.open()</code>，就像Python内置的 <code>open()</code> 一样简单，但它可以同时用于读和写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> av.<span class="built_in">open</span>(input_video_path, mode=<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> in_container:</span><br><span class="line">    <span class="keyword">with</span> av.<span class="built_in">open</span>(output_video_path, mode=<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> out_container:</span><br><span class="line">        <span class="comment"># ...</span></span><br></pre></td></tr></table></figure></li><li><p><strong>创建输出流</strong>:<br>最简单的方式是从输入流创建模板。这会自动复制编解码器、码率等大部分参数。然后我们再手动覆盖需要修改的参数，比如新的宽度和高度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找所有输入流</span></span><br><span class="line">in_video_stream = in_container.streams.video[<span class="number">0</span>]</span><br><span class="line">in_audio_stream = in_container.streams.audio[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从模板创建输出流</span></span><br><span class="line">out_video_stream = out_container.add_stream_from_template(in_video_stream)</span><br><span class="line">out_audio_stream = out_container.add_stream_from_template(in_audio_stream)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 覆盖视频流的尺寸</span></span><br><span class="line">out_video_stream.width = final_w</span><br><span class="line">out_video_stream.height = final_h</span><br></pre></td></tr></table></figure></li><li><p><strong>核心处理循环</strong>:<br>这是最精彩的部分，完美体现了PyAV与Pillow的结合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> packet <span class="keyword">in</span> in_container.demux(streams_to_demux):</span><br><span class="line">    <span class="keyword">if</span> packet.stream.<span class="built_in">type</span> == <span class="string">&#x27;video&#x27;</span>:</span><br><span class="line">        <span class="keyword">for</span> frame <span class="keyword">in</span> packet.decode():</span><br><span class="line">            <span class="comment"># a. 解码帧并转换为Pillow Image对象</span></span><br><span class="line">            img = frame.to_image()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># b. 使用Pillow的强大功能进行图像处理</span></span><br><span class="line">            cropped_img = img.crop((x, y, x + w, y + h))</span><br><span class="line">            <span class="keyword">if</span> needs_scaling:</span><br><span class="line">                cropped_img = cropped_img.resize((final_w, final_h))</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># c. 将处理后的Pillow Image转换回PyAV的VideoFrame</span></span><br><span class="line">            new_frame = av.VideoFrame.from_image(cropped_img)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># d. 编码新帧并混合到输出文件</span></span><br><span class="line">            <span class="keyword">for</span> out_packet <span class="keyword">in</span> out_video_stream.encode(new_frame):</span><br><span class="line">                out_container.mux(out_packet)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> packet.stream.<span class="built_in">type</span> == <span class="string">&#x27;audio&#x27;</span>:</span><br><span class="line">        <span class="comment"># 音频直通：不解码，直接复制数据包，效率最高</span></span><br><span class="line">        packet.stream = out_audio_stream</span><br><span class="line">        out_container.mux(packet)</span><br></pre></td></tr></table></figure></li><li><p><strong>冲洗 (Flush) 编码器</strong>:<br>处理完所有帧后，编码器的内部可能还缓存着一些数据。我们通过发送一个 <code>None</code> 来告诉它结束编码，并清空所有缓冲区。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> out_packet <span class="keyword">in</span> out_video_stream.encode(<span class="literal">None</span>):</span><br><span class="line">    out_container.mux(out_packet)</span><br></pre></td></tr></table></figure></li></ol><h3 id="Part-2-极致性能-——-Metal硬件加速-GPU-实现">Part 2: 极致性能 —— Metal硬件加速 (GPU) 实现</h3><p>这是脚本的“高性能模式”，专门为macOS设计。它尽可能地将所有操作都留在GPU上，避免了昂贵的CPU&lt;-&gt;GPU数据拷贝。</p><h4 id="核心步骤-2">核心步骤</h4><ol><li><p><strong>创建硬件设备上下文</strong>:<br>这是开启硬件加速的第一步，我们告诉PyAV我们要使用苹果的 <code>videotoolbox</code> 框架。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hw_device = av.hwdevice.Device(<span class="string">&quot;videotoolbox&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>配置硬件解码</strong>:<br>这是现代PyAV中配置硬件解码的关键。我们不是手动设置上下文，而是为输入流的 <code>codec_context</code> 提供一个 <code>get_format</code> 回调函数。当解码器准备好时，它会调用这个函数并提供一个它支持的像素格式列表。我们的函数只需从中选择 <code>'videotoolbox'</code> 格式即可。这告诉解码器：“请直接将帧解码到GPU显存中，不要下载到CPU内存。”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hw_pix_fmt = <span class="string">&#x27;videotoolbox&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hw_format</span>(<span class="params">formats</span>):</span><br><span class="line">    <span class="keyword">for</span> fmt <span class="keyword">in</span> formats:</span><br><span class="line">        <span class="keyword">if</span> fmt.name == hw_pix_fmt:</span><br><span class="line">            <span class="keyword">return</span> fmt</span><br><span class="line">    <span class="keyword">raise</span> av.EncoderNotFoundError(<span class="string">&quot;未找到 &#x27;videotoolbox&#x27; 硬件格式。&quot;</span>)</span><br><span class="line"></span><br><span class="line">in_stream.codec_context.get_format = get_hw_format</span><br></pre></td></tr></table></figure></li><li><p><strong>构建硬件滤镜图 (Filter Graph)</strong>:<br>裁剪和缩放是通过FFmpeg的滤镜系统完成的。PyAV允许我们用代码构建这个处理链。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">graph = av.<span class="built_in">filter</span>.Graph()</span><br><span class="line">buffer_src = graph.add_buffer(template=in_stream) <span class="comment"># 输入源</span></span><br><span class="line">buffer_sink = graph.add(<span class="string">&quot;buffersink&quot;</span>) <span class="comment"># 输出汇</span></span><br><span class="line"></span><br><span class="line">filter_chain = <span class="string">f&quot;crop=<span class="subst">&#123;...&#125;</span>,scale=<span class="subst">&#123;...&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接：源 -&gt; 滤镜链 -&gt; 汇</span></span><br><span class="line">filters = graph.add_filter(filter_chain, <span class="string">&quot;filters&quot;</span>)</span><br><span class="line">buffer_src.link_to(filters)</span><br><span class="line">filters.link_to(buffer_sink)</span><br><span class="line"></span><br><span class="line">graph.configure()</span><br></pre></td></tr></table></figure><p>这里最巧妙的是，即使 <code>crop</code> 和 <code>scale</code> 滤镜是纯CPU操作，FFmpeg也会在后台<strong>自动</strong>处理硬件帧的下载（GPU-&gt;CPU）、应用滤镜、再上传（CPU-&gt;GPU）的过程。</p></li><li><p><strong>配置硬件编码</strong>:<br>我们创建一个使用 <code>h264_videotoolbox</code> 编码器的输出流。它会自动接收来自滤镜图的、已经处理好的帧（这些帧可能在CPU上，也可能在GPU上，编码器会自动处理）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">out_stream = out_container.add_stream(<span class="string">&quot;h264_videotoolbox&quot;</span>, rate=rate)</span><br><span class="line">out_stream.width = final_w</span><br><span class="line">out_stream.height = final_h</span><br><span class="line">out_stream.pix_fmt = <span class="string">&quot;nv12&quot;</span> <span class="comment"># VideoToolbox 编码器偏好的像素格式</span></span><br></pre></td></tr></table></figure></li><li><p><strong>硬件处理循环</strong>:<br>循环的主体结构类似，但操作对象变成了滤镜图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> frame <span class="keyword">in</span> packet.decode(): <span class="comment"># 解码出的 frame 是一个指向GPU显存的硬件帧</span></span><br><span class="line">    graph.push(frame) <span class="comment"># 将硬件帧推入滤镜图处理</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            filtered_frame = buffer_sink.pull() <span class="comment"># 从滤镜图拉取处理好的帧</span></span><br><span class="line">            <span class="keyword">for</span> out_packet <span class="keyword">in</span> out_stream.encode(filtered_frame):</span><br><span class="line">                output_container.mux(out_packet)</span><br><span class="line">        <span class="keyword">except</span> (av.error.EOFError, av.error.BlockingIOError):</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实际处理">实际处理</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 检查当前 PyAV 环境是否支持硬件加速</span></span><br><span class="line">HW_ACCEL_SUPPORTED = <span class="built_in">hasattr</span>(av, <span class="string">&#x27;hwdevice&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> HW_ACCEL_SUPPORTED:</span><br><span class="line">    <span class="comment"># 进一步检查平台是否为 macOS</span></span><br><span class="line">    <span class="keyword">if</span> platform.system() == <span class="string">&#x27;Darwin&#x27;</span>:</span><br><span class="line">        logger.info(<span class="string">&quot;硬件加速 (VideoToolbox) 可用。将优先使用 Metal 路径。&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        HW_ACCEL_SUPPORTED = <span class="literal">False</span></span><br><span class="line">        logger.warning(<span class="string">&quot;PyAV 支持硬件加速，但当前系统不是 macOS。VideoToolbox 不可用。&quot;</span>)</span><br><span class="line">        logger.warning(<span class="string">&quot;所有视频处理将回退到纯软件模式。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    logger.warning(<span class="string">&quot;当前 PyAV 环境中未找到硬件加速模块 (&#x27;av.hwdevice&#x27;)。&quot;</span>)</span><br><span class="line">    logger.warning(<span class="string">&quot;所有视频处理将回退到纯软件模式，速度会较慢。&quot;</span>)</span><br><span class="line">    logger.warning(<span class="string">&quot;要解决此问题，请确保您的项目解释器配置正确，并使用了完整编译的 PyAV 库。&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 2. 主调度器函数 ---</span></span><br><span class="line"><span class="comment"># 您的外部代码应该只调用这个函数</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crop_video_pyav</span>(<span class="params"></span></span><br><span class="line"><span class="params">        input_video_path: <span class="built_in">str</span>, output_video_path: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">        crop_x: <span class="built_in">float</span>, crop_y: <span class="built_in">float</span>, crop_w: <span class="built_in">float</span>, crop_h: <span class="built_in">float</span>,</span></span><br><span class="line"><span class="params">        log_queue=<span class="literal">None</span>,  <span class="comment"># log_queue 和其他参数保留以兼容您的接口</span></span></span><br><span class="line"><span class="params">        min_short_side_output_px: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        assigned_gpu_id: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        **kwargs  <span class="comment"># 捕获任何其他未使用的参数</span></span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据环境自动选择最佳方式裁剪视频。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    如果支持硬件加速，则尝试使用Metal路径；否则，或Metal路径失败时，</span></span><br><span class="line"><span class="string">    自动回退到纯软件路径。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    crop_params = &#123;</span><br><span class="line">        <span class="string">&#x27;x&#x27;</span>: crop_x, <span class="string">&#x27;y&#x27;</span>: crop_y, <span class="string">&#x27;w&#x27;</span>: crop_w, <span class="string">&#x27;h&#x27;</span>: crop_h</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> HW_ACCEL_SUPPORTED:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 优先尝试硬件加速路径</span></span><br><span class="line">            logger.info(<span class="string">f&quot;检测到硬件加速支持，尝试 Metal 路径...&quot;</span>)</span><br><span class="line">            success = _crop_video_pyav_metal(</span><br><span class="line">                input_video_path, output_video_path, crop_params,</span><br><span class="line">                min_short_side_output_px</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">                logger.warning(<span class="string">&quot;硬件加速路径执行失败，自动降级到纯软件模式。&quot;</span>)</span><br><span class="line">                success = _crop_video_software(</span><br><span class="line">                    input_video_path, output_video_path, crop_params,</span><br><span class="line">                    min_short_side_output_px</span><br><span class="line">                )</span><br><span class="line">            <span class="keyword">return</span> success</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.opt(exception=<span class="literal">True</span>).error(<span class="string">f&quot;硬件加速路径执行时发生意外异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            logger.warning(<span class="string">&quot;自动降级到纯软件模式。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> _crop_video_software(</span><br><span class="line">                input_video_path, output_video_path, crop_params,</span><br><span class="line">                min_short_side_output_px</span><br><span class="line">            )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 如果一开始就不支持硬件加速，直接走软件路径</span></span><br><span class="line">        logger.info(<span class="string">f&quot;未检测到硬件加速支持，使用纯软件路径。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> _crop_video_software(</span><br><span class="line">            input_video_path, output_video_path, crop_params,</span><br><span class="line">            min_short_side_output_px</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 3. 硬件加速实现 (内部函数) ---</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_crop_video_pyav_metal</span>(<span class="params"></span></span><br><span class="line"><span class="params">        input_video_path: <span class="built_in">str</span>, output_video_path: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">        crop_rect: <span class="type">Dict</span>,</span></span><br><span class="line"><span class="params">        min_short_side_output_px: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 PyAV 和 VideoToolbox (Metal) 进行硬件加速的视频裁剪。</span></span><br><span class="line"><span class="string">    这是一个内部函数，假设硬件支持已确认。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    logger.info(<span class="string">f&quot;Metal路径: 开始处理 <span class="subst">&#123;os.path.basename(input_video_path)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 参数准备</span></span><br><span class="line">    crop_w_f = <span class="built_in">int</span>(crop_rect[<span class="string">&#x27;w&#x27;</span>]) - (<span class="built_in">int</span>(crop_rect[<span class="string">&#x27;w&#x27;</span>]) % <span class="number">2</span>)</span><br><span class="line">    crop_h_f = <span class="built_in">int</span>(crop_rect[<span class="string">&#x27;h&#x27;</span>]) - (<span class="built_in">int</span>(crop_rect[<span class="string">&#x27;h&#x27;</span>]) % <span class="number">2</span>)</span><br><span class="line">    crop_x_f = <span class="built_in">int</span>(crop_rect[<span class="string">&#x27;x&#x27;</span>]) - (<span class="built_in">int</span>(crop_rect[<span class="string">&#x27;x&#x27;</span>]) % <span class="number">2</span>)</span><br><span class="line">    crop_y_f = <span class="built_in">int</span>(crop_rect[<span class="string">&#x27;y&#x27;</span>]) - (<span class="built_in">int</span>(crop_rect[<span class="string">&#x27;y&#x27;</span>]) % <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> crop_w_f &lt;= <span class="number">0</span> <span class="keyword">or</span> crop_h_f &lt;= <span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    final_w, final_h = crop_w_f, crop_h_f</span><br><span class="line">    needs_scaling = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> min_short_side_output_px <span class="keyword">and</span> <span class="built_in">min</span>(crop_w_f, crop_h_f) &lt; min_short_side_output_px:</span><br><span class="line">        needs_scaling = <span class="literal">True</span></span><br><span class="line">        scale_factor = min_short_side_output_px / <span class="built_in">min</span>(crop_w_f, crop_h_f)</span><br><span class="line">        final_w = math.ceil((crop_w_f * scale_factor) / <span class="number">2</span>) * <span class="number">2</span></span><br><span class="line">        final_h = math.ceil((crop_h_f * scale_factor) / <span class="number">2</span>) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    input_container = <span class="literal">None</span></span><br><span class="line">    output_container = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># --- 硬件设备与容器 ---</span></span><br><span class="line">        logger.debug(<span class="string">&quot;Metal路径: 创建 VideoToolbox 上下文。&quot;</span>)</span><br><span class="line">        hw_device = av.hwdevice.Device(<span class="string">&quot;videotoolbox&quot;</span>)</span><br><span class="line"></span><br><span class="line">        input_container = av.<span class="built_in">open</span>(input_video_path, mode=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        output_container = av.<span class="built_in">open</span>(output_video_path, mode=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        in_stream = input_container.streams.video[<span class="number">0</span>]</span><br><span class="line">        in_stream.thread_type = <span class="string">&quot;AUTO&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 配置硬件解码 (现代方式) ---</span></span><br><span class="line">        logger.debug(<span class="string">&quot;Metal路径: 配置硬件解码。&quot;</span>)</span><br><span class="line">        hw_pix_fmt = <span class="string">&#x27;videotoolbox&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get_hw_format</span>(<span class="params">formats</span>):</span><br><span class="line">            <span class="keyword">for</span> fmt <span class="keyword">in</span> formats:</span><br><span class="line">                <span class="keyword">if</span> fmt.name == hw_pix_fmt:</span><br><span class="line">                    <span class="keyword">return</span> fmt</span><br><span class="line">            <span class="keyword">raise</span> av.EncoderNotFoundError(<span class="string">f&quot;未找到 &#x27;<span class="subst">&#123;hw_pix_fmt&#125;</span>&#x27; 硬件格式。&quot;</span>)</span><br><span class="line"></span><br><span class="line">        in_stream.codec_context.get_format = get_hw_format</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 配置滤镜图 ---</span></span><br><span class="line">        <span class="comment"># FFmpeg 会在后台自动插入 hwupload/hwdownload 滤镜</span></span><br><span class="line">        logger.debug(<span class="string">&quot;Metal路径: 配置滤镜图。&quot;</span>)</span><br><span class="line">        graph = av.<span class="built_in">filter</span>.Graph()</span><br><span class="line">        buffer_src = graph.add_buffer(template=in_stream)</span><br><span class="line"></span><br><span class="line">        filter_chain = <span class="string">f&quot;crop=<span class="subst">&#123;crop_w_f&#125;</span>:<span class="subst">&#123;crop_h_f&#125;</span>:<span class="subst">&#123;crop_x_f&#125;</span>:<span class="subst">&#123;crop_y_f&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> needs_scaling:</span><br><span class="line">            filter_chain += <span class="string">f&quot;,scale=<span class="subst">&#123;final_w&#125;</span>:<span class="subst">&#123;final_h&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 滤镜图的终点是 buffer_sink</span></span><br><span class="line">        buffer_sink = graph.add(<span class="string">&quot;buffersink&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 链接滤镜</span></span><br><span class="line">        buffer_src.link_to(graph.add_filter(filter_chain, <span class="string">&quot;filters&quot;</span>))</span><br><span class="line">        graph.get_filter(<span class="string">&quot;filters&quot;</span>).link_to(buffer_sink)</span><br><span class="line"></span><br><span class="line">        graph.configure()</span><br><span class="line">        logger.info(<span class="string">f&quot;Metal路径: 滤镜图配置成功: &#x27;<span class="subst">&#123;filter_chain&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 配置硬件编码 ---</span></span><br><span class="line">        logger.debug(<span class="string">&quot;Metal路径: 配置硬件编码。&quot;</span>)</span><br><span class="line">        rate = in_stream.base_rate <span class="keyword">or</span> in_stream.guessed_rate <span class="keyword">or</span> in_stream.average_rate</span><br><span class="line">        out_stream = output_container.add_stream(<span class="string">&quot;h264_videotoolbox&quot;</span>, rate=rate)</span><br><span class="line">        out_stream.width = final_w</span><br><span class="line">        out_stream.height = final_h</span><br><span class="line">        out_stream.pix_fmt = <span class="string">&quot;nv12&quot;</span>  <span class="comment"># VideoToolbox 编码器通常使用 nv12</span></span><br><span class="line">        out_stream.time_base = in_stream.time_base</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 音频流处理 (直通) ---</span></span><br><span class="line">        in_audio_stream = <span class="built_in">next</span>((s <span class="keyword">for</span> s <span class="keyword">in</span> input_container.streams <span class="keyword">if</span> s.<span class="built_in">type</span> == <span class="string">&#x27;audio&#x27;</span>), <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> in_audio_stream:</span><br><span class="line">            out_audio_stream = output_container.add_stream(<span class="string">&#x27;aac&#x27;</span>, template=in_audio_stream)</span><br><span class="line">            streams_to_demux = (in_stream, in_audio_stream)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            out_audio_stream = <span class="literal">None</span></span><br><span class="line">            streams_to_demux = in_stream</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 核心处理循环 ---</span></span><br><span class="line">        <span class="keyword">for</span> packet <span class="keyword">in</span> input_container.demux(streams_to_demux):</span><br><span class="line">            <span class="keyword">if</span> packet.dts <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> packet.stream.<span class="built_in">type</span> == <span class="string">&#x27;video&#x27;</span>:</span><br><span class="line">                <span class="keyword">for</span> frame <span class="keyword">in</span> packet.decode():</span><br><span class="line">                    graph.push(frame)</span><br><span class="line">                    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            filtered_frame = buffer_sink.pull()</span><br><span class="line">                            <span class="keyword">for</span> out_packet <span class="keyword">in</span> out_stream.encode(filtered_frame):</span><br><span class="line">                                output_container.mux(out_packet)</span><br><span class="line">                        <span class="keyword">except</span> (av.error.EOFError, av.error.BlockingIOError):</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> out_audio_stream <span class="keyword">and</span> packet.stream.<span class="built_in">type</span> == <span class="string">&#x27;audio&#x27;</span>:</span><br><span class="line">                packet.stream = out_audio_stream</span><br><span class="line">                output_container.mux(packet)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 冲洗(Flush) ---</span></span><br><span class="line">        logger.debug(<span class="string">&quot;Metal路径: 冲洗滤镜和编码器。&quot;</span>)</span><br><span class="line">        graph.push(<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                filtered_frame = buffer_sink.pull()</span><br><span class="line">                <span class="keyword">for</span> out_packet <span class="keyword">in</span> out_stream.encode(filtered_frame):</span><br><span class="line">                    output_container.mux(out_packet)</span><br><span class="line">            <span class="keyword">except</span> (av.error.EOFError, av.error.BlockingIOError):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> out_packet <span class="keyword">in</span> out_stream.encode(<span class="literal">None</span>):</span><br><span class="line">            output_container.mux(out_packet)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 正常关闭</span></span><br><span class="line">        output_container.close()</span><br><span class="line">        input_container.close()</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">f&quot;Metal路径: 视频处理成功 -&gt; <span class="subst">&#123;os.path.basename(output_video_path)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.opt(exception=<span class="literal">True</span>).error(<span class="string">f&quot;Metal路径处理时发生致命错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 清理</span></span><br><span class="line">        <span class="keyword">if</span> output_container:</span><br><span class="line">            output_container.close()</span><br><span class="line">        <span class="keyword">if</span> input_container:</span><br><span class="line">            input_container.close()</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(output_video_path):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.remove(output_video_path)</span><br><span class="line">            <span class="keyword">except</span> OSError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 4. 纯软件备用方案 (内部函数) ---</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_crop_video_software</span>(<span class="params"></span></span><br><span class="line"><span class="params">        input_video_path: <span class="built_in">str</span>, output_video_path: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">        crop_rect: <span class="type">Dict</span>,</span></span><br><span class="line"><span class="params">        min_short_side_output_px: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用纯软件 (CPU) 进行视频裁剪的备用方法。</span></span><br><span class="line"><span class="string">    这个方法总是可用的，但速度比硬件加速慢。</span></span><br><span class="line"><span class="string">    它确保输出尺寸为偶数，以兼容H.264等编码器。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    logger.info(<span class="string">f&quot;软件路径: 开始处理 <span class="subst">&#123;os.path.basename(input_video_path)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    input_container = <span class="literal">None</span></span><br><span class="line">    output_container = <span class="literal">None</span></span><br><span class="line">    success = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># --- 1. 参数准备 (关键修正部分) ---</span></span><br><span class="line">        x, y, w, h = <span class="built_in">int</span>(crop_rect[<span class="string">&#x27;x&#x27;</span>]), <span class="built_in">int</span>(crop_rect[<span class="string">&#x27;y&#x27;</span>]), <span class="built_in">int</span>(crop_rect[<span class="string">&#x27;w&#x27;</span>]), <span class="built_in">int</span>(crop_rect[<span class="string">&#x27;h&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> w &lt;= <span class="number">0</span> <span class="keyword">or</span> h &lt;= <span class="number">0</span>:</span><br><span class="line">            logger.error(<span class="string">f&quot;裁剪尺寸无效 (w=<span class="subst">&#123;w&#125;</span>, h=<span class="subst">&#123;h&#125;</span>)。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始的最终尺寸就是裁剪后的尺寸</span></span><br><span class="line">        final_w, final_h = w, h</span><br><span class="line">        needs_scaling = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否需要缩放</span></span><br><span class="line">        <span class="keyword">if</span> min_short_side_output_px <span class="keyword">and</span> <span class="built_in">min</span>(w, h) &lt; min_short_side_output_px:</span><br><span class="line">            needs_scaling = <span class="literal">True</span></span><br><span class="line">            scale_factor = min_short_side_output_px / <span class="built_in">min</span>(w, h)</span><br><span class="line">            final_w = <span class="built_in">int</span>(w * scale_factor)</span><br><span class="line">            final_h = <span class="built_in">int</span>(h * scale_factor)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># *** 核心修正：确保最终的输出尺寸永远是偶数 ***</span></span><br><span class="line">        <span class="comment"># 这对于 H.264 (libx264) 和许多其他编码器至关重要</span></span><br><span class="line">        final_w = final_w - (final_w % <span class="number">2</span>)</span><br><span class="line">        final_h = final_h - (final_h % <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> final_w &lt;= <span class="number">0</span> <span class="keyword">or</span> final_h &lt;= <span class="number">0</span>:</span><br><span class="line">            logger.error(<span class="string">f&quot;计算后的输出尺寸无效 (<span class="subst">&#123;final_w&#125;</span>x<span class="subst">&#123;final_h&#125;</span>)。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 2. 打开容器并设置流 ---</span></span><br><span class="line">        <span class="keyword">with</span> av.<span class="built_in">open</span>(input_video_path, mode=<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> in_container:</span><br><span class="line">            <span class="keyword">with</span> av.<span class="built_in">open</span>(output_video_path, mode=<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> out_container:</span><br><span class="line"></span><br><span class="line">                <span class="comment"># a. 查找所有输入流</span></span><br><span class="line">                in_video_stream = <span class="built_in">next</span>((s <span class="keyword">for</span> s <span class="keyword">in</span> in_container.streams <span class="keyword">if</span> s.<span class="built_in">type</span> == <span class="string">&#x27;video&#x27;</span>), <span class="literal">None</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> in_video_stream:</span><br><span class="line">                    logger.error(<span class="string">&quot;输入文件中未找到视频流。&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                in_video_stream.thread_type = <span class="string">&quot;AUTO&quot;</span></span><br><span class="line"></span><br><span class="line">                in_audio_stream = <span class="built_in">next</span>((s <span class="keyword">for</span> s <span class="keyword">in</span> in_container.streams <span class="keyword">if</span> s.<span class="built_in">type</span> == <span class="string">&#x27;audio&#x27;</span>), <span class="literal">None</span>)</span><br><span class="line">                in_subtitle_stream = <span class="built_in">next</span>((s <span class="keyword">for</span> s <span class="keyword">in</span> in_container.streams <span class="keyword">if</span> s.<span class="built_in">type</span> == <span class="string">&#x27;subtitle&#x27;</span>), <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># b. 为每个输入流创建对应的输出流</span></span><br><span class="line">                out_video_stream = out_container.add_stream_from_template(in_video_stream)</span><br><span class="line">                out_video_stream.width = final_w</span><br><span class="line">                out_video_stream.height = final_h</span><br><span class="line"></span><br><span class="line">                out_audio_stream = out_container.add_stream_from_template(in_audio_stream) <span class="keyword">if</span> in_audio_stream <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">                out_subtitle_stream = out_container.add_stream_from_template(</span><br><span class="line">                    in_subtitle_stream) <span class="keyword">if</span> in_subtitle_stream <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">                streams_to_demux = [s <span class="keyword">for</span> s <span class="keyword">in</span> [in_video_stream, in_audio_stream, in_subtitle_stream] <span class="keyword">if</span> s]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># --- 3. 核心处理循环 ---</span></span><br><span class="line">                <span class="keyword">for</span> packet <span class="keyword">in</span> in_container.demux(streams_to_demux):</span><br><span class="line">                    <span class="keyword">if</span> packet.dts <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> packet.stream.<span class="built_in">type</span> == <span class="string">&#x27;video&#x27;</span>:</span><br><span class="line">                        <span class="keyword">for</span> frame <span class="keyword">in</span> packet.decode():</span><br><span class="line">                            img = frame.to_image()</span><br><span class="line"></span><br><span class="line">                            <span class="comment"># 裁剪</span></span><br><span class="line">                            cropped_img = img.crop((x, y, x + w, y + h))</span><br><span class="line"></span><br><span class="line">                            <span class="comment"># 如果需要，进行缩放</span></span><br><span class="line">                            <span class="keyword">if</span> needs_scaling:</span><br><span class="line">                                <span class="comment"># Pillow 的 resize 需要一个 (width, height) 元组</span></span><br><span class="line">                                cropped_img = cropped_img.resize((final_w, final_h))</span><br><span class="line"></span><br><span class="line">                            new_frame = av.VideoFrame.from_image(cropped_img)</span><br><span class="line">                            new_frame.pts = frame.pts</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span> out_packet <span class="keyword">in</span> out_video_stream.encode(new_frame):</span><br><span class="line">                                out_container.mux(out_packet)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">elif</span> packet.stream.<span class="built_in">type</span> == <span class="string">&#x27;audio&#x27;</span> <span class="keyword">and</span> out_audio_stream:</span><br><span class="line">                        packet.stream = out_audio_stream</span><br><span class="line">                        out_container.mux(packet)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">elif</span> packet.stream.<span class="built_in">type</span> == <span class="string">&#x27;subtitle&#x27;</span> <span class="keyword">and</span> out_subtitle_stream:</span><br><span class="line">                        packet.stream = out_subtitle_stream</span><br><span class="line">                        out_container.mux(packet)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># --- 4. 冲洗(Flush)视频编码器 ---</span></span><br><span class="line">                logger.debug(<span class="string">&quot;软件路径: 冲洗视频编码器。&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> out_packet <span class="keyword">in</span> out_video_stream.encode(<span class="literal">None</span>):</span><br><span class="line">                    out_container.mux(out_packet)</span><br><span class="line"></span><br><span class="line">        success = <span class="literal">True</span></span><br><span class="line">        logger.info(<span class="string">f&quot;软件路径: 视频处理成功 -&gt; <span class="subst">&#123;os.path.basename(output_video_path)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.opt(exception=<span class="literal">True</span>).error(<span class="string">f&quot;软件路径处理时发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> output_container <span class="keyword">and</span> <span class="keyword">not</span> output_container.closed:</span><br><span class="line">            output_container.close()</span><br><span class="line">        <span class="keyword">if</span> input_container <span class="keyword">and</span> <span class="keyword">not</span> input_container.closed:</span><br><span class="line">            input_container.close()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> success <span class="keyword">and</span> os.path.exists(output_video_path):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.remove(output_video_path)</span><br><span class="line">                logger.info(<span class="string">f&quot;已清理失败的输出文件: <span class="subst">&#123;output_video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> OSError <span class="keyword">as</span> err:</span><br><span class="line">                logger.warning(<span class="string">f&quot;清理失败的输出文件时出错: <span class="subst">&#123;err&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="one-more-thing">one more thing</h2><ul><li>gpu acc</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GPU Acceleration Defaults</span></span><br><span class="line">GPU_ACCELERATION_DEFAULT = &#123;</span><br><span class="line">    <span class="string">&quot;gpu_opencv_decode&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&quot;opencv_cuda_device&quot;</span>: <span class="number">0</span>,  <span class="comment"># Default/primary GPU for OpenCV CUDA operations</span></span><br><span class="line">    <span class="string">&quot;ffmpeg_hwaccel&quot;</span>: <span class="string">&quot;videotoolbox&quot;</span>,     <span class="comment"># e.g., &quot;cuda&quot;, &quot;qsv&quot;, &quot;vaapi&quot;, &quot;videotoolbox&quot;</span></span><br><span class="line">    <span class="string">&quot;ffmpeg_gpu_encoder&quot;</span>: <span class="string">&quot;h264_videotoolbox&quot;</span>, <span class="comment"># e.g., &quot;h264_nvenc&quot;, &quot;hevc_qsv&quot;, h264_videotoolbox</span></span><br><span class="line">    <span class="string">&quot;gpu_ids_to_use&quot;</span>: <span class="string">&quot;0&quot;</span>      <span class="comment"># New: Comma-separated list of GPU IDs (e.g., &quot;0,1&quot;) for general processing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GPU_ACCELERATION_DEFAULT_win = &#123;</span><br><span class="line">    <span class="string">&quot;gpu_opencv_decode&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&quot;opencv_cuda_device&quot;</span>: <span class="number">0</span>,  <span class="comment"># Default/primary GPU for OpenCV CUDA operations</span></span><br><span class="line">    <span class="string">&quot;ffmpeg_hwaccel&quot;</span>: <span class="string">&quot;cuda&quot;</span>,     <span class="comment"># e.g., &quot;cuda&quot;, &quot;qsv&quot;, &quot;vaapi&quot;, &quot;videotoolbox&quot;</span></span><br><span class="line">    <span class="string">&quot;ffmpeg_gpu_encoder&quot;</span>: <span class="string">&quot;h264_nvenc&quot;</span>, <span class="comment"># e.g., &quot;h264_nvenc&quot;, &quot;hevc_qsv&quot;, h264_videotoolbox</span></span><br><span class="line">    <span class="string">&quot;gpu_ids_to_use&quot;</span>: <span class="string">&quot;0&quot;</span>      <span class="comment"># New: Comma-separated list of GPU IDs (e.g., &quot;0,1&quot;) for general processing</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="See">See</h2><ul><li>1.<a href="https://github.com/PyAV-Org/PyAV/tree/main/docs/api">https://github.com/PyAV-Org/PyAV/tree/main/docs/api</a></li><li>2.<a href="https://ffmpeg.org/documentation.html">https://ffmpeg.org/documentation.html</a></li><li>3.<a href="https://pyav.basswood-io.com/docs/stable/">https://pyav.basswood-io.com/docs/stable/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字水印系统实现</title>
      <link href="/2025/07/22/watermark-gen-valid/"/>
      <url>/2025/07/22/watermark-gen-valid/</url>
      
        <content type="html"><![CDATA[<h2 id="实现流程框架">实现流程框架</h2><p>无论使用哪种技术，一个完整的数字水印系统通常都包括两个基本过程：</p><ol><li><p><strong>水印嵌入 (Watermark Embedding)</strong>：</p><ul><li><strong>输入</strong>：原始载体（如图片A）、水印信息（如字符串&quot;ID:123&quot;或一个Logo图片B）。</li><li><strong>过程</strong>：通过特定算法，将水印信息B处理后，“叠加”或“融入”到原始载体A中。</li><li><strong>输出</strong>：一个带有水印、但看起来和原始载体几乎没区别的载体A’。</li></ul></li><li><p><strong>水印提取/检测 (Watermark Extraction/Detection)</strong>：</p><ul><li><strong>输入</strong>：可能被修改过的带水印载体A’'，有时还需要原始载体A或原始水印B作为参考。</li><li><strong>过程</strong>：通过与嵌入过程相逆的算法，从载体A’'中解码出隐藏的水印信息。</li><li><strong>输出</strong>：提取出的水印信息B’，或者一个“是/否”的判断（确认是否存在某个特定水印）。</li></ul></li></ol><blockquote><p>现在，我们来看实现这些流程的具体技术。</p></blockquote><hr><h3 id="一、-空域（Spatial-Domain）技术">一、 空域（Spatial Domain）技术</h3><p><strong>核心思想</strong>：直接修改原始图像的像素值（比如RGB值）来嵌入信息。这种方法直观、简单。</p><h4 id="典型技术：LSB-Least-Significant-Bit-算法">典型技术：LSB (Least Significant Bit) 算法</h4><p>这是最经典、最简单的空域水印技术。</p><ul><li><p><strong>原理</strong>：</p><ul><li>计算机中的图像，每个像素的颜色由若干个二进制位（bits）表示。例如，一个8位的灰度图像，每个像素的灰度值范围是0-255，由8个二进制位组成。</li><li><strong>最低有效位 (LSB)</strong> 就是这8个位中最右边的那一位。改变这一位，对像素值的整体影响最小（最多改变1），人眼基本无法察觉。</li><li><strong>嵌入方法</strong>：将要隐藏的水印信息（比如一张黑白Logo图片）转换成二进制流（0和1的序列）。然后，用这个二进制流去替换原始图像中每个（或部分）像素的LSB。<ul><li>如果要嵌入<code>1</code>，就把像素的LSB改成<code>1</code>。</li><li>如果要嵌入<code>0</code>，就把像素的LSB改成<code>0</code>。</li></ul></li></ul></li><li><p><strong>提取方法</strong>：直接读取带水印图像中相应像素的LSB，就能还原出隐藏的二进制流，从而重构水印信息。</p></li><li><p><strong>优点</strong>：</p><ul><li><strong>实现简单</strong>：算法非常直接。</li><li><strong>容量大</strong>：每个像素都能藏1比特信息，可以隐藏大量数据。</li><li><strong>隐蔽性好</strong>：对视觉影响极小。</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li><strong>鲁棒性极差（非常脆弱）</strong>：这是它的致命弱点。任何对图像的轻微处理，如 <strong>JPEG压缩、缩放、裁剪、加个滤镜</strong>，都会破坏LSB层的数据，导致水印完全丢失。</li></ul></li><li><p><strong>应用场景</strong>：主要用于<strong>脆弱水印</strong>，即<strong>内容完整性认证</strong>。因为只要图片被改动，水印就会被破坏，从而可以证明“此图已被修改”。</p></li></ul><hr><h3 id="二、-变换域（Transform-Domain）技术">二、 变换域（Transform Domain）技术</h3><p><strong>核心思想</strong>：不直接改像素值，而是先对图像进行数学变换（如傅里叶变换、余弦变换），将其从空域转换到另一个域（如频域）。然后，在变换后的域中修改系数来嵌入水印。这是目前主流的、<strong>鲁棒水印</strong>的实现方式。</p><p><strong>为什么要这么做？</strong><br>因为像JPEG压缩这样的操作，主要丢弃的是图像的<strong>高频信息</strong>（细节），而保留<strong>中低频信息</strong>（轮廓、主要能量）。如果在中低频系数里嵌入水印，那么即使经过压缩，水印信息也能大概率被保留下来。</p><h4 id="1-基于DCT（离散余弦变换）的技术">1. 基于DCT（离散余弦变换）的技术</h4><ul><li><strong>背景</strong>：DCT是 <strong>JPEG 压缩</strong>的核心算法。它将图像分成8x8的小块，然后对每个块进行DCT变换，得到一个频率系数矩阵。这个矩阵中，左上角是低频系数（能量集中），右下角是高频系数。</li><li><strong>嵌入方法</strong>：<ol><li>将原始图像分块（如8x8）。</li><li>对每个块进行DCT变换。</li><li>选择<strong>中频区域</strong>的系数进行修改。为什么是中频？因为低频系数对视觉影响太大，高频系数容易在压缩中丢失，中频是最佳平衡点。</li><li>根据水印信息（0或1）来修改这些中频系数。例如，通过量化或比较两个系数的大小来嵌入1比特信息。</li><li>对修改后的系数矩阵进行<strong>逆DCT变换</strong> (IDCT)，得到带水印的图像块。</li></ol></li><li><strong>优点</strong>：<ul><li><strong>鲁棒性强</strong>：对JPEG压缩、轻微噪声、亮度调整等有很好的抵抗能力。</li><li><strong>隐蔽性好</strong>：利用了人类视觉系统对中频变化不敏感的特性。</li></ul></li><li><strong>应用场景</strong>：<strong>版权保护</strong>、<strong>盗版追踪</strong>等需要强鲁棒性的场合。</li></ul><h4 id="2-基于DWT（离散小波变换）的技术">2. 基于DWT（离散小波变换）的技术</h4><ul><li><strong>背景</strong>：DWT是 <strong>JPEG 2000</strong> 压缩标准的核心。与DCT不同，DWT能对整个图像进行多分辨率分析，得到不同尺度和方向的子带（低频、水平细节、垂直细节、对角线细节）。</li><li><strong>嵌入方法</strong>：<ol><li>对整个图像进行DWT变换。</li><li>水印通常被嵌入到<strong>中、低频子带</strong>的系数中。</li><li>因为DWT提供了图像的空间和频率局部化信息，所以它对裁剪、缩放等几何攻击的抵抗性更好。</li></ol></li><li><strong>优点</strong>：<ul><li><strong>多分辨率特性</strong>：鲁棒性比DCT更全面，尤其在抗几何攻击方面。</li><li><strong>与人类视觉系统（HVS）匹配更好</strong>：可以更精细地控制水印的嵌入强度，达到更好的隐蔽性。</li></ul></li><li><strong>应用场景</strong>：同DCT，用于需要更高鲁棒性的版权保护系统。</li></ul><h4 id="3-基于DFT（离散傅里叶变换）的技术">3. 基于DFT（离散傅里叶变换）的技术</h4><ul><li><strong>背景</strong>：DFT将图像转换成幅度和相位谱。</li><li><strong>特点</strong>：图像的幅度谱对<strong>旋转、缩放和平移（RST攻击）</strong> 具有不变性或特定的变化规律。</li><li><strong>嵌入方法</strong>：通过修改DFT变换后的<strong>幅度谱</strong>来嵌入水印。</li><li><strong>优点</strong>：<ul><li>对旋转、缩放等几何攻击具有天然的鲁棒性。</li></ul></li><li><strong>缺点</strong>：<ul><li>实现复杂，且容易出现图像块效应。</li></ul></li><li><strong>应用场景</strong>：主要用于抵抗几何变换的特定场合。</li></ul><hr><h2 id="实现">实现</h2><h3 id="核心的Python库：">核心的Python库：</h3><ul><li><strong>Pillow (PIL Fork)</strong>: 用于图像的读写和基本的像素操作（实现LSB）。</li><li><strong>NumPy</strong>: 用于高效的数组和矩阵运算，是所有图像处理的基础。</li><li><strong>PyWavelets (pywt)</strong>: 用于实现DWT（离散小波变换）。</li><li><strong>OpenCV-Python (cv2)</strong>: 功能最强大的计算机视觉库，可以方便地实现DCT、DFT以及各种图像处理操作。</li></ul><hr><h3 id="1-空域-Spatial-Domain-LSB-算法">1. 空域 (Spatial Domain) - LSB 算法</h3><p><strong>核心库</strong>: <code>Pillow</code> (PIL), <code>NumPy</code></p><p>这个算法不依赖复杂的数学库，Pillow和NumPy足以胜任。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_lsb</span>(<span class="params">image_path, secret_message</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;将秘密信息嵌入到图片的LSB层&quot;&quot;&quot;</span></span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_path, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    width, height = img.size</span><br><span class="line">    img_array = np.array(img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 将秘密信息转换为二进制流</span></span><br><span class="line">    binary_secret = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">format</span>(<span class="built_in">ord</span>(c), <span class="string">&#x27;08b&#x27;</span>) <span class="keyword">for</span> c <span class="keyword">in</span> secret_message])</span><br><span class="line">    binary_secret += <span class="string">&#x27;1111111111111110&#x27;</span> <span class="comment"># 添加结束标记</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(binary_secret) &gt; width * height * <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;信息过长，无法嵌入到图片中！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    data_index = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 2. 遍历像素并修改LSB</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            pixel = img_array[y, x]</span><br><span class="line">            <span class="comment"># 遍历RGB三个通道</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> data_index &lt; <span class="built_in">len</span>(binary_secret):</span><br><span class="line">                    <span class="comment"># 清除LSB并设置新的位</span></span><br><span class="line">                    pixel[i] = (pixel[i] &amp; <span class="number">0xFE</span>) | <span class="built_in">int</span>(binary_secret[data_index])</span><br><span class="line">                    data_index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> data_index &gt;= <span class="built_in">len</span>(binary_secret):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> data_index &gt;= <span class="built_in">len</span>(binary_secret):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 创建并保存新图片</span></span><br><span class="line">    encoded_image = Image.fromarray(img_array)</span><br><span class="line">    encoded_image.save(<span class="string">&quot;encoded_image.png&quot;</span>, <span class="string">&quot;PNG&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;信息嵌入成功，已保存为 encoded_image.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_lsb</span>(<span class="params">image_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从图片的LSB层提取秘密信息&quot;&quot;&quot;</span></span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_path, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    img_array = np.array(img)</span><br><span class="line">    width, height = img.size</span><br><span class="line"></span><br><span class="line">    binary_data = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 遍历像素并提取LSB</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            pixel = img_array[y, x]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                binary_data += <span class="built_in">str</span>(pixel[i] &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 找到结束标记并转换信息</span></span><br><span class="line">    end_marker = <span class="string">&#x27;1111111111111110&#x27;</span></span><br><span class="line">    end_index = binary_data.find(end_marker)</span><br><span class="line">    <span class="keyword">if</span> end_index != -<span class="number">1</span>:</span><br><span class="line">        secret_binary = binary_data[:end_index]</span><br><span class="line">        secret_message = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(secret_binary), <span class="number">8</span>):</span><br><span class="line">            byte = secret_binary[i:i+<span class="number">8</span>]</span><br><span class="line">            secret_message += <span class="built_in">chr</span>(<span class="built_in">int</span>(byte, <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> secret_message</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;未找到结束标记或信息。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 使用示例 ---</span></span><br><span class="line"><span class="comment"># 请准备一张名为 &#x27;original.png&#x27; 的图片</span></span><br><span class="line"><span class="comment"># encode_lsb(&#x27;original.png&#x27;, &quot;This is a secret message!&quot;)</span></span><br><span class="line"><span class="comment"># message = decode_lsb(&#x27;encoded_image.png&#x27;)</span></span><br><span class="line"><span class="comment"># print(f&quot;提取到的信息: &#123;message&#125;&quot;)</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-变换域-Transform-Domain-DCT-算法">2. 变换域 (Transform Domain) - DCT 算法</h3><p><strong>核心库</strong>: <code>OpenCV-Python (cv2)</code>, <code>NumPy</code></p><p>OpenCV 提供了非常方便的 <code>cv2.dct()</code> 和 <code>cv2.idct()</code> 函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dct_watermark_embed</span>(<span class="params">image_path, watermark_path, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;基于DCT的中频带嵌入图像水印&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 准备载体和水印</span></span><br><span class="line">    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">    watermark = cv2.imread(watermark_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 确保水印尺寸小于载体</span></span><br><span class="line">    watermark = cv2.resize(watermark, (img.shape[<span class="number">1</span>], img.shape[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 对载体图像进行DCT变换</span></span><br><span class="line">    img_dct = cv2.dct(np.float32(img))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 对水印图像进行DCT变换 (也可以直接用二值化水印)</span></span><br><span class="line">    watermark_dct = cv2.dct(np.float32(watermark))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4. 将水印的DCT系数加到载体的中频DCT系数上</span></span><br><span class="line">    <span class="comment"># 这里简单地将整个水印DCT加到载体DCT上，更复杂的会选择特定区域</span></span><br><span class="line">    <span class="comment"># alpha 是嵌入强度</span></span><br><span class="line">    result_dct = img_dct + alpha * watermark_dct</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5. 进行逆DCT变换</span></span><br><span class="line">    result_img = cv2.idct(result_dct)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 裁剪值到 0-255 并转换为uint8</span></span><br><span class="line">    result_img = np.clip(result_img, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line"></span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;dct_embedded_image.png&#x27;</span>, result_img)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;DCT水印嵌入成功！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dct_watermark_extract</span>(<span class="params">embedded_image_path, original_image_path, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;提取DCT水印（需要原始图像）&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 这是一个非盲水印提取的例子</span></span><br><span class="line">    embedded_img = cv2.imread(embedded_image_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">    original_img = cv2.imread(original_image_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 对带水印图像和原始图像分别做DCT</span></span><br><span class="line">    embedded_dct = cv2.dct(np.float32(embedded_img))</span><br><span class="line">    original_dct = cv2.dct(np.float32(original_img))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 相减并除以强度因子，得到水印的DCT系数</span></span><br><span class="line">    extracted_watermark_dct = (embedded_dct - original_dct) / alpha</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 逆DCT变换，恢复水印</span></span><br><span class="line">    extracted_watermark = cv2.idct(extracted_watermark_dct)</span><br><span class="line">    extracted_watermark = np.clip(extracted_watermark, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line"></span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;dct_extracted_watermark.png&#x27;</span>, extracted_watermark)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;DCT水印提取成功！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 使用示例 ---</span></span><br><span class="line"><span class="comment"># 请准备 &#x27;original.png&#x27; 和 &#x27;watermark_logo.png&#x27;</span></span><br><span class="line"><span class="comment"># dct_watermark_embed(&#x27;original.png&#x27;, &#x27;watermark_logo.png&#x27;, alpha=0.1)</span></span><br><span class="line"><span class="comment"># dct_watermark_extract(&#x27;dct_embedded_image.png&#x27;, &#x27;original.png&#x27;, alpha=0.1)</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>: 上述DCT示例是一个<strong>非盲水印</strong>，提取时需要原始图像。实现盲水印（无需原图）会更复杂，通常涉及在中频带选择特定的系数对进行比较，而不是直接叠加。</p><hr><h3 id="3-变换域-Transform-Domain-DWT-算法">3. 变换域 (Transform Domain) - DWT 算法</h3><p><strong>核心库</strong>: <code>PyWavelets (pywt)</code>, <code>NumPy</code>, <code>OpenCV-Python (cv2)</code></p><p><code>pywt</code> 是Python中进行小波变换的标准库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pywt</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dwt_watermark_embed</span>(<span class="params">image_path, watermark_path, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;基于DWT的LL子带嵌入图像水印&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 准备载体和水印</span></span><br><span class="line">    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">    watermark = cv2.imread(watermark_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 对载体图像进行DWT变换</span></span><br><span class="line">    <span class="comment"># &#x27;haar&#x27; 是最简单的小波基</span></span><br><span class="line">    coeffs_img = pywt.dwt2(img, <span class="string">&#x27;haar&#x27;</span>)</span><br><span class="line">    LL, (LH, HL, HH) = coeffs_img</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确保水印尺寸与LL子带匹配</span></span><br><span class="line">    watermark_resized = cv2.resize(watermark, (LL.shape[<span class="number">1</span>], LL.shape[<span class="number">0</span>]))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 将水印添加到低频子带 (LL)</span></span><br><span class="line">    <span class="comment"># LL子带能量最集中，鲁棒性最强，但对画质影响也最大</span></span><br><span class="line">    LL_watermarked = LL + alpha * watermark_resized</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 重构图像</span></span><br><span class="line">    coeffs_watermarked = (LL_watermarked, (LH, HL, HH))</span><br><span class="line">    img_watermarked = pywt.idwt2(coeffs_watermarked, <span class="string">&#x27;haar&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    img_watermarked = np.clip(img_watermarked, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;dwt_embedded_image.png&#x27;</span>, img_watermarked)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;DWT水印嵌入成功！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dwt_watermark_extract</span>(<span class="params">embedded_image_path, original_image_path, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;提取DWT水印（需要原始图像）&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 同样是非盲水印提取</span></span><br><span class="line">    embedded_img = cv2.imread(embedded_image_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">    original_img = cv2.imread(original_image_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 对两张图分别做DWT</span></span><br><span class="line">    coeffs_embedded = pywt.dwt2(embedded_img, <span class="string">&#x27;haar&#x27;</span>)</span><br><span class="line">    LL_embedded, _ = coeffs_embedded</span><br><span class="line">    </span><br><span class="line">    coeffs_original = pywt.dwt2(original_img, <span class="string">&#x27;haar&#x27;</span>)</span><br><span class="line">    LL_original, _ = coeffs_original</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 提取水印</span></span><br><span class="line">    extracted_watermark = (LL_embedded - LL_original) / alpha</span><br><span class="line">    </span><br><span class="line">    extracted_watermark = np.clip(extracted_watermark, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;dwt_extracted_watermark.png&#x27;</span>, extracted_watermark)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;DWT水印提取成功！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 使用示例 ---</span></span><br><span class="line"><span class="comment"># 请准备 &#x27;original.png&#x27; 和 &#x27;watermark_logo.png&#x27;</span></span><br><span class="line"><span class="comment"># dwt_watermark_embed(&#x27;original.png&#x27;, &#x27;watermark_logo.png&#x27;, alpha=0.2)</span></span><br><span class="line"><span class="comment"># dwt_watermark_extract(&#x27;dwt_embedded_image.png&#x27;, &#x27;original.png&#x27;, alpha=0.2)</span></span><br></pre></td></tr></table></figure><hr><h3 id="4-变换域-Transform-Domain-DFT-算法">4. 变换域 (Transform Domain) - DFT 算法</h3><p><strong>核心库</strong>: <code>NumPy</code>, <code>OpenCV-Python (cv2)</code></p><p>DFT的实现与DCT类似，但通常用于抵抗几何攻击。这里提供一个基础的嵌入思路。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dft_watermark_embed</span>(<span class="params">image_path, watermark_path, alpha=<span class="number">100</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;基于DFT幅度谱嵌入水印&quot;&quot;&quot;</span></span><br><span class="line">    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">    watermark = cv2.imread(watermark_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">    watermark = cv2.resize(watermark, (img.shape[<span class="number">1</span>], img.shape[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. DFT变换</span></span><br><span class="line">    <span class="comment"># OpenCV的dft需要输入float32，并会输出双通道复数结果</span></span><br><span class="line">    dft = cv2.dft(np.float32(img), flags=cv2.DFT_COMPLEX_OUTPUT)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 将频谱中心移到图像中央，便于观察和操作</span></span><br><span class="line">    dft_shift = np.fft.fftshift(dft)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 计算幅度和相位谱</span></span><br><span class="line">    magnitude_spectrum = cv2.magnitude(dft_shift[:,:,<span class="number">0</span>], dft_shift[:,:,<span class="number">1</span>])</span><br><span class="line">    phase_spectrum = cv2.phase(dft_shift[:,:,<span class="number">0</span>], dft_shift[:,:,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 在幅度谱上添加水印</span></span><br><span class="line">    magnitude_spectrum_watermarked = magnitude_spectrum + alpha * watermark</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5. 根据新的幅度和旧的相位，重构DFT结果</span></span><br><span class="line">    real_part = magnitude_spectrum_watermarked * np.cos(phase_spectrum)</span><br><span class="line">    imag_part = magnitude_spectrum_watermarked * np.sin(phase_spectrum)</span><br><span class="line">    dft_shift_watermarked = cv2.merge([real_part, imag_part])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 6. 将频谱中心移回左上角</span></span><br><span class="line">    dft_watermarked = np.fft.ifftshift(dft_shift_watermarked)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7. 逆DFT变换</span></span><br><span class="line">    img_back = cv2.idft(dft_watermarked)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取实部并恢复图像</span></span><br><span class="line">    img_back = cv2.magnitude(img_back[:,:,<span class="number">0</span>], img_back[:,:,<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    img_back = np.clip(img_back, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;dft_embedded_image.png&#x27;</span>, img_back)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;DFT水印嵌入成功！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 使用示例 ---</span></span><br><span class="line"><span class="comment"># 请准备 &#x27;original.png&#x27; 和 &#x27;watermark_logo.png&#x27;</span></span><br><span class="line"><span class="comment"># dft_watermark_embed(&#x27;original.png&#x27;, &#x27;watermark_logo.png&#x27;, alpha=100)</span></span><br><span class="line"><span class="comment"># 提取DFT水印通常也需要原始图像，过程与DCT/DWT类似。</span></span><br></pre></td></tr></table></figure><h3 id="安装依赖库">安装依赖库</h3><ul><li>pip安装：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow numpy opencv-python pywavelets</span><br></pre></td></tr></table></figure><h2 id="demo">demo</h2><h3 id="水印信息嵌入（LSB）">水印信息嵌入（LSB）</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_message_to_binary</span>(<span class="params">message: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Converts a string message into its binary representation.&quot;&quot;&quot;</span></span><br><span class="line">    binary_message = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">format</span>(<span class="built_in">ord</span>(char), <span class="string">&#x27;08b&#x27;</span>) <span class="keyword">for</span> char <span class="keyword">in</span> message)</span><br><span class="line">    <span class="keyword">return</span> binary_message</span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_binary_to_message</span>(<span class="params">binary_message: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Converts a binary string back into a string message.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Ensure the binary string is a multiple of 8</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(binary_message) % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">        logger.warning(<span class="string">&quot;Binary string length is not a multiple of 8; data may be incomplete.&quot;</span>)</span><br><span class="line">        binary_message = binary_message[:-(<span class="built_in">len</span>(binary_message) % <span class="number">8</span>)]</span><br><span class="line"></span><br><span class="line">    message = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_message), <span class="number">8</span>):</span><br><span class="line">        byte = binary_message[i:i + <span class="number">8</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(byte) == <span class="number">8</span>:</span><br><span class="line">            message += <span class="built_in">chr</span>(<span class="built_in">int</span>(byte, <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_lsb</span>(<span class="params">input_image_path: <span class="built_in">str</span>, secret_message: <span class="built_in">str</span>, output_image_path: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Encodes a secret message into an image using the LSB (Least Significant Bit) technique.</span></span><br><span class="line"><span class="string">    The output image will be saved in a lossless format (PNG) to preserve the watermark.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        input_image_path (str): The path to the source image.</span></span><br><span class="line"><span class="string">        secret_message (str): The message to hide.</span></span><br><span class="line"><span class="string">        output_image_path (str): The path to save the watermarked image.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        logger.info(<span class="string">f&quot;Starting LSB encoding for &#x27;<span class="subst">&#123;input_image_path&#125;</span>&#x27;...&quot;</span>)</span><br><span class="line">        image = Image.<span class="built_in">open</span>(input_image_path, <span class="string">&#x27;r&#x27;</span>).convert(<span class="string">&quot;RGBA&quot;</span>) <span class="comment"># Convert to RGBA for consistency</span></span><br><span class="line">        width, height = image.size</span><br><span class="line">        img_array = np.array(<span class="built_in">list</span>(image.getdata()))</span><br><span class="line"></span><br><span class="line">        channels = <span class="number">4</span>  <span class="comment"># We are using RGBA</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add a unique delimiter to know where the message ends</span></span><br><span class="line">        binary_secret_message = _message_to_binary(secret_message + <span class="string">&quot;####&quot;</span>)</span><br><span class="line">        required_pixels = <span class="built_in">len</span>(binary_secret_message)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> required_pixels &gt; width * height * channels:</span><br><span class="line">            logger.error(<span class="string">&quot;Error: Message is too long to be encoded in this image.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Modify the LSB of the pixel data</span></span><br><span class="line">        data_index = <span class="number">0</span></span><br><span class="line">        flat_array = img_array.flatten()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flat_array)):</span><br><span class="line">            <span class="keyword">if</span> data_index &lt; required_pixels:</span><br><span class="line">                <span class="comment"># Change the LSB of the color value</span></span><br><span class="line">                flat_array[i] = <span class="built_in">int</span>(<span class="built_in">bin</span>(flat_array[i])[<span class="number">2</span>:-<span class="number">1</span>] + binary_secret_message[data_index], <span class="number">2</span>)</span><br><span class="line">                data_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span> <span class="comment"># Stop once the message is encoded</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Create a new image with the modified pixel data</span></span><br><span class="line">        encoded_image = Image.fromarray(flat_array.reshape(height, width, channels).astype(<span class="string">&#x27;uint8&#x27;</span>), image.mode)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Save as PNG to ensure lossless storage of the watermark</span></span><br><span class="line">        encoded_image.save(output_image_path, <span class="string">&quot;PNG&quot;</span>)</span><br><span class="line">        logger.info(<span class="string">f&quot;Successfully encoded message into &#x27;<span class="subst">&#123;output_image_path&#125;</span>&#x27;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        logger.error(<span class="string">f&quot;Error: Input image not found at &#x27;<span class="subst">&#123;input_image_path&#125;</span>&#x27;.&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.exception(<span class="string">f&quot;An unexpected error occurred during encoding: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_lsb</span>(<span class="params">encoded_image_path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span> | <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Decodes a secret message from an image using the LSB technique.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        encoded_image_path (str): The path to the watermarked image.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        The decoded secret message, or None if an error occurs or no message is found.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        logger.info(<span class="string">f&quot;Starting LSB decoding for &#x27;<span class="subst">&#123;encoded_image_path&#125;</span>&#x27;...&quot;</span>)</span><br><span class="line">        image = Image.<span class="built_in">open</span>(encoded_image_path, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        img_array = np.array(<span class="built_in">list</span>(image.getdata()))</span><br><span class="line"></span><br><span class="line">        binary_data = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> pixel <span class="keyword">in</span> img_array:</span><br><span class="line">            <span class="keyword">for</span> value <span class="keyword">in</span> pixel:</span><br><span class="line">                binary_data += <span class="built_in">bin</span>(value)[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Find the delimiter by decoding byte by byte</span></span><br><span class="line">        decoded_message = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_data), <span class="number">8</span>):</span><br><span class="line">            byte = binary_data[i:i+<span class="number">8</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(byte) &lt; <span class="number">8</span>:</span><br><span class="line">                <span class="keyword">break</span> <span class="comment"># End of data</span></span><br><span class="line">            decoded_message += <span class="built_in">chr</span>(<span class="built_in">int</span>(byte, <span class="number">2</span>))</span><br><span class="line">            <span class="keyword">if</span> decoded_message.endswith(<span class="string">&quot;####&quot;</span>):</span><br><span class="line">                logger.info(<span class="string">&quot;Successfully decoded the message.&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> decoded_message[:-<span class="number">4</span>]  <span class="comment"># Return message without the delimiter</span></span><br><span class="line"></span><br><span class="line">        logger.warning(<span class="string">&quot;Could not find the end-of-message delimiter in the image.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        logger.error(<span class="string">f&quot;Error: Encoded image not found at &#x27;<span class="subst">&#123;encoded_image_path&#125;</span>&#x27;.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.exception(<span class="string">f&quot;An unexpected error occurred during decoding: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="水印信息验证">水印信息验证</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_img_msg</span>(<span class="params">image_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Command-line tool to decode an invisible watermark from an image file.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    image_path = Path(image_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> image_path.is_file():</span><br><span class="line">        logger.debug(<span class="string">f&quot;Error: File not found at &#x27;<span class="subst">&#123;image_path&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    logger.debug(<span class="string">f&quot;Verifying &#x27;<span class="subst">&#123;image_path.name&#125;</span>&#x27;...&quot;</span>)</span><br><span class="line">    decoded_message = decode_lsb(<span class="built_in">str</span>(image_path))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> decoded_message:</span><br><span class="line">        logger.debug(<span class="string">&quot;\n--- ✅ Watermark Found! ---&quot;</span>)</span><br><span class="line">        <span class="comment"># Pretty logger.debug the decoded information</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> decoded_message.split(<span class="string">&#x27;|&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;:&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">                key, value = item.split(<span class="string">&#x27;:&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">                logger.debug(<span class="string">f&quot;  - <span class="subst">&#123;key.strip():&lt;<span class="number">15</span>&#125;</span>: <span class="subst">&#123;value.strip()&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logger.debug(<span class="string">f&quot;  - <span class="subst">&#123;item&#125;</span>&quot;</span>)</span><br><span class="line">        logger.debug(<span class="string">&quot;--------------------------\n&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logger.debug(<span class="string">&quot;\n--- ❌ No Watermark Found ---&quot;</span>)</span><br><span class="line">        logger.debug(<span class="string">&quot;No hidden message could be decoded from this image.&quot;</span>)</span><br><span class="line">        logger.debug(<span class="string">&quot;--------------------------\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> decoded_message</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="水印信息嵌入（EXIF）">水印信息嵌入（EXIF）</h3> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> piexif</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 UserComment 的标准前缀，UNDEFINED 表示未定义编码，允许我们使用 UTF-8。</span></span><br><span class="line"><span class="comment"># 这是符合 EXIF 规范的推荐做法。</span></span><br><span class="line">USER_COMMENT_PREFIX = <span class="string">b&#x27;UNDEFINED\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_exif</span>(<span class="params">input_image_path: <span class="built_in">str</span>, secret_message: <span class="built_in">str</span>, output_image_path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将秘密信息作为隐形水印编码到图片的EXIF元数据中。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        input_image_path: 输入图片的路径。</span></span><br><span class="line"><span class="string">        secret_message: 要隐藏的信息。</span></span><br><span class="line"><span class="string">        output_image_path: 保存带水印图片的路径。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        如果编码成功，返回 True，否则返回 False。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        logger.info(<span class="string">f&quot;正在为 &#x27;<span class="subst">&#123;Path(input_image_path).name&#125;</span>&#x27; 添加EXIF水印...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打开图片</span></span><br><span class="line">        image = Image.<span class="built_in">open</span>(input_image_path)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 复制原始图片信息，以便在保存时保留质量、DPI等设置</span></span><br><span class="line">        image_info = image.info.copy()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查图片是否已有EXIF数据，如果没有则创建一个空的</span></span><br><span class="line">        exif_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;exif&quot;</span> <span class="keyword">in</span> image_info <span class="keyword">and</span> image_info[<span class="string">&#x27;exif&#x27;</span>]:</span><br><span class="line">            exif_dict = piexif.load(image_info[<span class="string">&quot;exif&quot;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># [FIXED] 确保 &#x27;Exif&#x27; 子字典存在，防止 KeyError</span></span><br><span class="line">        <span class="keyword">if</span> piexif.ImageIFD.ExifPtr <span class="keyword">not</span> <span class="keyword">in</span> exif_dict:</span><br><span class="line">             exif_dict[<span class="string">&#x27;Exif&#x27;</span>] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># [FIXED] 将秘密信息编码并添加标准前缀，然后放入 UserComment 字段</span></span><br><span class="line">        <span class="comment"># 这是存储任意用户数据的标准字段</span></span><br><span class="line">        user_comment_payload = USER_COMMENT_PREFIX + secret_message.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        exif_dict[<span class="string">&#x27;Exif&#x27;</span>][piexif.ExifIFD.UserComment] = user_comment_payload</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将更新后的EXIF字典转换为字节流</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            exif_bytes = piexif.dump(exif_dict)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 有时 EXIF 数据可能包含 piexif 不支持的格式</span></span><br><span class="line">            logger.error(<span class="string">f&quot;无法序列化 EXIF 数据: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="comment"># 尝试移除可能导致问题的缩略图数据</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;thumbnail&#x27;</span> <span class="keyword">in</span> exif_dict:</span><br><span class="line">                <span class="keyword">del</span> exif_dict[<span class="string">&#x27;thumbnail&#x27;</span>]</span><br><span class="line">                exif_bytes = piexif.dump(exif_dict)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># [FIXED] 保存图片，并附上新的EXIF数据</span></span><br><span class="line">        <span class="comment"># 对于 JPEG，传递原始 info 字典以保留质量等设置</span></span><br><span class="line">        <span class="comment"># 对于 PNG 等其他格式，直接使用 exif 参数</span></span><br><span class="line">        <span class="keyword">if</span> image.<span class="built_in">format</span> == <span class="string">&#x27;JPEG&#x27;</span>:</span><br><span class="line">            image.save(output_image_path, <span class="string">&quot;jpeg&quot;</span>, exif=exif_bytes, **image_info)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            image.save(output_image_path, exif=exif_bytes)</span><br><span class="line"></span><br><span class="line">        logger.success(<span class="string">f&quot;成功将EXIF水印写入 &#x27;<span class="subst">&#123;Path(output_image_path).name&#125;</span>&#x27;.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        logger.error(<span class="string">f&quot;输入文件未找到: <span class="subst">&#123;input_image_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.exception(<span class="string">f&quot;添加EXIF水印时发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_exif</span>(<span class="params">encoded_image_path: <span class="built_in">str</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">str</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从图片的EXIF元数据中解码出隐藏的秘密信息。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        encoded_image_path: 带水印图片的路径。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        解码后的信息字符串，如果未找到或发生错误则返回 None。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        logger.info(<span class="string">f&quot;正在从 &#x27;<span class="subst">&#123;Path(encoded_image_path).name&#125;</span>&#x27; 解码EXIF水印...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        image = Image.<span class="built_in">open</span>(encoded_image_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查图片是否有EXIF数据</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;exif&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> image.info <span class="keyword">or</span> <span class="keyword">not</span> image.info[<span class="string">&#x27;exif&#x27;</span>]:</span><br><span class="line">            logger.warning(<span class="string">&quot;图片中未找到EXIF数据。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加载EXIF数据</span></span><br><span class="line">        exif_dict = piexif.load(image.info[<span class="string">&quot;exif&quot;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># [FIXED] 安全地从 UserComment 字段读取信息，防止 KeyError</span></span><br><span class="line">        exif_ifd = exif_dict.get(<span class="string">&#x27;Exif&#x27;</span>, &#123;&#125;)</span><br><span class="line">        user_comment_bytes = exif_ifd.get(piexif.ExifIFD.UserComment)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user_comment_bytes:</span><br><span class="line">            <span class="comment"># [FIXED] 检查是否存在我们定义的前缀，并剥离它</span></span><br><span class="line">            <span class="keyword">if</span> user_comment_bytes.startswith(USER_COMMENT_PREFIX):</span><br><span class="line">                message_bytes = user_comment_bytes[<span class="built_in">len</span>(USER_COMMENT_PREFIX):]</span><br><span class="line">                <span class="comment"># 将字节解码回字符串</span></span><br><span class="line">                decoded_message = message_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">                logger.success(<span class="string">&quot;成功解码EXIF水印。&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> decoded_message</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logger.warning(<span class="string">&quot;在&#x27;UserComment&#x27;字段中找到数据，但不包含预期的水印前缀。&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.warning(<span class="string">&quot;在EXIF中未找到&#x27;UserComment&#x27;水印字段。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        logger.error(<span class="string">f&quot;文件未找到: <span class="subst">&#123;encoded_image_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.exception(<span class="string">f&quot;解码EXIF水印时发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="技术总结对比">技术总结对比</h3><table><thead><tr><th style="text-align:left">技术类别</th><th style="text-align:left">核心算法</th><th style="text-align:left">主要优点</th><th style="text-align:left">主要缺点</th><th style="text-align:left">典型应用</th></tr></thead><tbody><tr><td style="text-align:left"><strong>空域 (Spatial Domain)</strong></td><td style="text-align:left"><strong>LSB</strong></td><td style="text-align:left">实现简单、容量大</td><td style="text-align:left"><strong>鲁棒性极差</strong>，一碰就坏</td><td style="text-align:left"><strong>完整性认证 (脆弱水印)</strong></td></tr><tr><td style="text-align:left"><strong>变换域 (Transform Domain)</strong></td><td style="text-align:left"><strong>DCT</strong></td><td style="text-align:left"><strong>对压缩鲁棒</strong>、隐蔽性好</td><td style="text-align:left">对几何攻击抵抗力一般</td><td style="text-align:left"><strong>版权保护 (鲁棒水印)</strong></td></tr><tr><td style="text-align:left"><strong>变换域 (Transform Domain)</strong></td><td style="text-align:left"><strong>DWT</strong></td><td style="text-align:left"><strong>综合鲁棒性强</strong>，尤其对裁剪等</td><td style="text-align:left">算法比DCT复杂</td><td style="text-align:left"><strong>版权保护 (鲁棒水印)</strong></td></tr><tr><td style="text-align:left"><strong>变换域 (Transform Domain)</strong></td><td style="text-align:left"><strong>DFT</strong></td><td style="text-align:left"><strong>对旋转/缩放鲁棒</strong></td><td style="text-align:left">实现复杂，可能影响画质</td><td style="text-align:left"><strong>抵抗几何攻击的特殊应用</strong></td></tr></tbody></table><p>简单来说：</p><ul><li>想做<strong>防伪标签</strong>，一改就失效，用 <strong>LSB</strong>。</li><li>想做<strong>版权印章</strong>，不怕压缩和基本处理，用 <strong>DCT</strong> 或 <strong>DWT</strong>。它们是目前最实用和最主流的鲁棒水印技术。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 部署 Tailscale</title>
      <link href="/2025/07/17/tailscale-docker-build/"/>
      <url>/2025/07/17/tailscale-docker-build/</url>
      
        <content type="html"><![CDATA[<h2 id="简介">简介</h2><h3 id="一、Tailscale-到底是什么？">一、Tailscale 到底是什么？</h3><p>你可以把它理解成一个**“为你所有设备打造的、私人的、加密的虚拟局域网”**。</p><ul><li><strong>传统的VPN</strong>：像是在你家（局域网）和公司（另一个局域网）之间挖了一条秘密隧道。</li><li><strong>Tailscale</strong>：更像是给你的每一台设备（NAS、电脑、手机、平板）都穿上了一件“隐身衣”，并给它们一个秘密的联络暗号。无论这些设备身处世界何地，只要它们都穿着这件“隐身衣”（安装了 Tailscale 客户端并用同一账号登录），它们就能互相看见、互相通信，仿佛就在同一个房间里。</li></ul><p>这个“虚拟局域网”是建立在互联网之上的，但它又是完全隔离和加密的，外界无法窥探。</p><h3 id="二、它如何解决你的-NAS-外链问题？">二、它如何解决你的 NAS 外链问题？</h3><p>Tailscale 通过以下几个核心功能来解决你的问题：</p><ol><li><strong>稳定的虚拟 IP 地址</strong>：一旦你的 NAS 加入了 Tailscale 网络，它会被分配一个 <code>100.x.x.x</code> 开头的、独一无二且固定的 IP 地址。你再也不用关心家里宽带的公网 IP 是不是变了。</li><li><strong>零配置穿透 (Zero-config NAT traversal)</strong>：你不需要在路由器上做任何端口转发。Tailscale 会自动想办法在你的设备之间“打洞”，建立点对点（P2P）的加密连接。这意味着数据传输速度很快，因为大部分时间数据是直连的，不经过第三方服务器中转。</li><li><strong>极高的安全性</strong>：它基于目前最先进的 VPN 协议 <strong>WireGuard®</strong> 构建，所有通信都是端到端加密的。因为你没有在路由器上开放任何端口，所以你的 NAS 不会暴露在公网上，大大降低了被黑客扫描和攻击的风险。</li><li><strong>设备间的无缝访问</strong>：只要你的电脑或手机也安装并登录了 Tailscale，你就可以在任何地方，直接通过 NAS 的那个 <code>100.x.x.x</code> 虚拟 IP 来访问它的管理页面、File Station 等所有服务，体验和在家里一模一样。</li></ol><h2 id="部署">部署</h2><h3 id="部署方式一：使用-docker-run-命令（单次部署）">部署方式一：使用 <code>docker run</code> 命令（单次部署）</h3><p>这是最直接的方式，适合快速启动。</p><h4 id="步骤-1：准备持久化目录">步骤 1：准备持久化目录</h4><p>为了让 Tailscale 的状态（主要是它的身份密钥）在容器重启后不丢失，我们需要在主机上创建一个目录来持久化存储它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 SSH 登录到你的 NAS 或服务器</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /path/to/your/appdata/tailscale</span><br><span class="line"><span class="comment"># 注意：请将 /path/to/your/appdata 替换为你自己存放应用数据的实际路径</span></span><br><span class="line"><span class="comment"># 例如，在群晖上可能是 /volume1/docker/tailscale</span></span><br></pre></td></tr></table></figure><h4 id="步骤-2：运行-Docker-容器">步骤 2：运行 Docker 容器</h4><p>复制并执行以下命令。这条命令已经包含了运行 Tailscale 所需的所有关键配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name=tailscaled \</span><br><span class="line">  -v /path/to/your/appdata/tailscale:/var/lib/tailscale \</span><br><span class="line">  -v /dev/net/tun:/dev/net/tun \</span><br><span class="line">  --network=host \</span><br><span class="line">  --cap-add=NET_ADMIN \</span><br><span class="line">  --cap-add=NET_RAW \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  tailscale/tailscale</span><br></pre></td></tr></table></figure><p><strong>命令参数详解：</strong></p><ul><li><code>docker run -d</code>: 在后台（detached mode）运行容器。</li><li><code>--name=tailscaled</code>: 给容器起一个好记的名字，方便管理。</li><li><code>-v /path/to/your/appdata/tailscale:/var/lib/tailscale</code>: <strong>【核心】</strong> 将主机上的目录挂载到容器内，用于保存 Tailscale 的状态。<strong>务必替换为你自己的路径</strong>。</li><li><code>-v /dev/net/tun:/dev/net/tun</code>: 将主机的 TUN 设备挂载到容器内，这是 Tailscale 创建虚拟网卡所必需的。</li><li><code>--network=host</code>: <strong>【核心】</strong> 让容器直接使用主机的网络，这是最简单且功能最全的模式。容器可以轻松访问主机的所有端口，也方便将主机作为子网路由（Subnet Router）。</li><li><code>--cap-add=NET_ADMIN --cap-add=NET_RAW</code>: 授予容器操作网络接口所需的 Linux Capabilities 权限。</li><li><code>--restart unless-stopped</code>: 设置容器的重启策略，除非手动停止，否则 Docker 重启时会自动启动该容器。</li><li><code>tailscale/tailscale</code>: 指定要使用的官方 Docker 镜像。</li></ul><h4 id="步骤-3：将-NAS-加入你的-Tailscale-网络">步骤 3：将 NAS 加入你的 Tailscale 网络</h4><p>容器已经在运行了，但它还不知道自己是谁。我们需要执行一条命令来让它登录。</p><ol><li><p>执行以下命令，启动 Tailscale 并获取登录链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> tailscaled tailscale up</span><br></pre></td></tr></table></figure></li><li><p>命令执行后，终端会输出一个登录 URL，看起来像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">To authenticate, visit:</span><br><span class="line"></span><br><span class="line">    https://login.tailscale.com/a/123456789ABC</span><br></pre></td></tr></table></figure></li><li><p>复制这个 URL，在你的电脑浏览器中打开，用你的 Tailscale 账户登录并授权这台新设备。</p></li><li><p>授权成功后，回到你的 <a href="https://login.tailscale.com/admin/machines">Tailscale Admin Console</a> 后台，你就能看到这台新设备已经加入了你的网络。</p></li></ol><p><strong>至此，你的 NAS 已经成功通过 Docker 加入了 Tailscale 网络！</strong> 你可以在任何其他已登录 Tailscale 的设备上，通过分配的 <code>100.x.x.x</code> IP 地址来访问你的 NAS。</p><hr><h3 id="部署方式二：使用-docker-compose（推荐，便于管理）">部署方式二：使用 <code>docker-compose</code>（推荐，便于管理）</h3><p>如果你需要管理多个容器，或者希望将配置以文件形式保存下来，<code>docker-compose</code> 是更好的选择。</p><h4 id="步骤-1：创建-docker-compose-yml-文件">步骤 1：创建 <code>docker-compose.yml</code> 文件</h4><p>在你喜欢的位置（例如 <code>/volume1/docker/tailscale</code>）创建一个名为 <code>docker-compose.yml</code> 的文件，并将以下内容粘贴进去：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">tailscaled:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tailscale/tailscale</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tailscaled</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">my-nas</span> <span class="comment"># 在 Tailscale 管理后台显示的设备名</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/tailscale</span> <span class="comment"># 将状态保存在当前目录下的 data 文件夹</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dev/net/tun:/dev/net/tun</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NET_RAW</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><code>hostname</code>: 你可以自定义一个名字，这样在 Tailscale 后台一眼就能认出是哪台设备。</li><li><code>volumes</code>: <code>- ./data:/var/lib/tailscale</code> 这种相对路径的写法表示将状态文件保存在 <code>docker-compose.yml</code> 文件同级的 <code>data</code> 文件夹内，非常方便。</li></ul><h4 id="步骤-2：启动服务">步骤 2：启动服务</h4><p>在 <code>docker-compose.yml</code> 文件所在的目录中，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h4 id="步骤-3：登录和授权">步骤 3：登录和授权</h4><p>这一步和 <code>docker run</code> 方式完全一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">exec</span> tailscaled tailscale up</span><br></pre></td></tr></table></figure><p>然后复制输出的 URL 到浏览器完成授权。</p><hr><h3 id="高级功能：如何生成外链和访问内网？">高级功能：如何生成外链和访问内网？</h3><p>部署成功后，你可以利用 Tailscale 的高级功能来实现最初的目标。</p><h4 id="1-将-NAS-作为子网路由-Subnet-Router">1. 将 NAS 作为子网路由 (Subnet Router)</h4><p><strong>场景</strong>：你想通过手机（已连接 Tailscale）访问你家里的其他设备，比如打印机 (<code>192.168.1.100</code>)。</p><ol><li><p>修改启动命令，使其“宣告”它可以路由的内网网段。在执行 <code>tailscale up</code> 时加入 <code>--advertise-routes</code> 参数。</p><ul><li>你需要先 <code>down</code> 再 <code>up</code>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> tailscaled tailscale down</span><br><span class="line">docker <span class="built_in">exec</span> tailscaled tailscale up --advertise-routes=192.168.1.0/24</span><br><span class="line"><span class="comment"># !!! 将 192.168.1.0/24 替换为你自己的局域网网段 !!!</span></span><br><span class="line">docker <span class="built_in">exec</span> tailscaled tailscale up --advertise-routes=192.168.10.0/24 -accept-dns=<span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>在 Tailscale Admin Console 后台，找到你的 NAS 设备，点击右侧的 “…”，选择 “Edit route settings…”。</p></li><li><p>勾选并启用你刚刚宣告的子网路由。</p></li></ol><p>现在，你任何连接了 Tailscale 的设备，都可以直接访问 <code>192.168.1.x</code> 网段的所有设备了，就像在家一样。</p><h4 id="2-使用-Tailscale-Funnel-生成外链">2. 使用 Tailscale Funnel 生成外链</h4><p><strong>场景</strong>：你想临时分享 NAS 上的一个文件给没有安装 Tailscale 的朋友。</p><ol><li><p>确保你的 Docker 容器已经通过 <code>tailscale up</code> 成功连接。</p></li><li><p>假设你想分享的服务在主机的 <code>8080</code> 端口上（比如一个临时的文件服务器）。</p><ul><li>由于我们使用了 <code>--network=host</code>，容器可以直接访问到主机的 <code>8080</code> 端口。</li></ul></li><li><p>执行 Funnel 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> tailscaled tailscale funnel 8080</span><br></pre></td></tr></table></figure></li><li><p>命令会输出一个公网可访问的 HTTPS 链接，形如 <code>https://your-nas-hostname.ts.net</code>。将这个链接发给你的朋友即可。</p></li><li><p>分享完毕后，按 <code>Ctrl+C</code> 停止 Funnel，外链即刻失效，非常安全。如果想在后台运行，可以加上 <code>--bg</code> 参数。</p></li></ol><h3 id="总结：如何使用部署后的服务">总结：如何使用部署后的服务</h3><table><thead><tr><th style="text-align:left">你的需求</th><th style="text-align:left">使用的功能</th><th style="text-align:left">具体操作</th></tr></thead><tbody><tr><td style="text-align:left"><strong>在外面用</strong></td><td style="text-align:left"><strong>Tailscale 核心连接 + MagicDNS</strong></td><td style="text-align:left">在你的电脑/手机上安装并登录 Tailscale，然后像在家里一样，用 <code>http://设备名:端口</code> 的方式访问 NAS 的各项服务。</td></tr><tr><td style="text-align:left"><strong>映射为电脑硬盘</strong></td><td style="text-align:left"><strong>SMB/AFP over Tailscale</strong></td><td style="text-align:left">在电脑的“映射网络驱动器”或“连接服务器”功能中，使用 <code>\\设备名</code> 或 <code>smb://设备名</code> 作为地址。</td></tr><tr><td style="text-align:left"><strong>分享文件给别人</strong></td><td style="text-align:left"><strong>Tailscale Funnel</strong></td><td style="text-align:left">在 NAS 上用 Python 或其他方式启动一个临时 Web 服务器，然后用 <code>tailscale funnel &lt;端口号&gt;</code> 命令生成一个临时的公网下载链接。</td></tr><tr><td style="text-align:left"><strong>访问家里其他设备</strong></td><td style="text-align:left"><strong>子网路由 (Subnet Router)</strong></td><td style="text-align:left">在部署 Tailscale 时宣告内网网段，并在管理后台启用。之后就能直接通过内网 IP 访问家里所有设备。</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NAS 文件借助 MinIO 转换OSS</title>
      <link href="/2025/07/16/minio-nas-build/"/>
      <url>/2025/07/16/minio-nas-build/</url>
      
        <content type="html"><![CDATA[<h3 id="整体架构">整体架构</h3><p>这个架构的核心思想是：<strong>MinIO 作为对象存储的“前端”，而你的 NAS 仍然是数据的“后端”物理存储。</strong> 用户和应用程序只与 MinIO 交互，完全不需要关心文件具体存放在 NAS 的哪个物理路径下。</p><h3 id="方案优点">方案优点</h3><ol><li><strong>协议现代化</strong>：将传统的、基于文件系统的访问（如 NFS, SMB）升级为现代的、基于 HTTP 的 S3 API 访问。</li><li><strong>无需数据迁移</strong>：数据仍然存放在 NAS 上，你不需要花费大量时间去拷贝或迁移 TB 级的海量数据。MinIO 直接在 NAS 的文件系统之上运行。</li><li><strong>统一访问入口</strong>：无论你有多少个 NAS 卷或目录，都可以通过 MinIO 的 Bucket（存储桶）来组织和访问，形成一个统一的视图。</li><li><strong>生态兼容性</strong>：几乎所有现代云原生应用、大数据框架、备份工具都原生支持 S3 协议，可以无缝对接。</li><li><strong>高性能</strong>：MinIO 本身是为高性能而设计的，可以直接利用 NAS 的硬件性能。</li></ol><hr><h3 id="第一步：准备工作">第一步：准备工作</h3><ol><li><strong>一台服务器/虚拟机</strong>：你需要一台 Linux 服务器来运行 MinIO。这台服务器<strong>必须能够高速挂载（mount）你的 NAS 目录</strong>。这台服务器的 CPU 和内存资源会影响 MinIO 的性能，但对于一般的文件服务，配置要求不高（例如 2核4G 内存即可起步）。我们称这台服务器为 “MinIO Server”。</li><li><strong>网络连接</strong>：确保 MinIO Server 和 NAS 之间有高速、低延迟的网络连接（例如，千兆或万兆以太网）。</li><li><strong>NAS 目录</strong>：确定你要提供为对象存储的 NAS 上的一个或多个目录。例如，<code>/volume1/data</code>。</li></ol><h3 id="第二步：在-MinIO-Server-上挂载-NAS-目录">第二步：在 MinIO Server 上挂载 NAS 目录</h3><p>这是最关键的一步。你必须将 NAS 的共享目录挂载到 MinIO Server 的本地文件系统上。</p><p>假设你的 NAS IP 是 <code>192.168.1.100</code>，共享的目录是 <code>shared_data</code>，你希望将它挂载到 MinIO Server 的 <code>/mnt/nas_data</code> 目录。</p><h4 id="使用-NFS-挂载（推荐）">使用 NFS 挂载（推荐）</h4><ol><li><p><strong>在 NAS 上</strong>：确保 NFS 服务已开启，并且 <code>shared_data</code> 目录已经通过 NFS 共享出去，同时授权 MinIO Server 的 IP (<code>192.168.1.50</code> 假设) 有读写权限。</p></li><li><p><strong>在 MinIO Server 上</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 安装 NFS 客户端</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y nfs-common</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建本地挂载点</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /mnt/nas_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 手动挂载进行测试</span></span><br><span class="line"><span class="comment"># -o nfsvers=4 指定版本，可根据你的NAS调整</span></span><br><span class="line"><span class="built_in">sudo</span> mount -t nfs 192.168.1.100:/shared_data /mnt/nas_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 验证挂载是否成功</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br><span class="line"><span class="comment"># 你应该能看到类似下面的一行</span></span><br><span class="line"><span class="comment"># 192.168.1.100:/shared_data   50T   10T   40T   20% /mnt/nas_data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. (重要) 设置开机自动挂载，防止服务器重启后服务失效</span></span><br><span class="line"><span class="comment"># 编辑 /etc/fstab 文件</span></span><br><span class="line"><span class="built_in">sudo</span> nano /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件末尾添加一行 (使用 nofail 选项防止NAS故障导致服务器无法启动)</span></span><br><span class="line">192.168.1.100:/shared_data /mnt/nas_data nfs defaults,nofail 0 0</span><br></pre></td></tr></table></figure></li></ol><h3 id="第三步：使用-Docker-Compose-部署-MinIO">第三步：使用 Docker Compose 部署 MinIO</h3><p>使用 Docker Compose 是部署和管理 MinIO 最简单、最可靠的方式。</p><ol><li><p><strong>在 MinIO Server 上安装 Docker 和 Docker Compose。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Docker</span></span><br><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line"><span class="built_in">sudo</span> sh get-docker.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Docker Compose</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y docker-compose</span><br></pre></td></tr></table></figure></li><li><p><strong>创建一个工作目录并编写 <code>docker-compose.yml</code> 文件。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> minio-deployment</span><br><span class="line"><span class="built_in">cd</span> minio-deployment</span><br><span class="line">nano docker-compose.yml</span><br></pre></td></tr></table></figure></li><li><p><strong>将以下内容粘贴到 <code>docker-compose.yml</code> 文件中：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="comment"># 使用官方 MinIO 镜像</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">local-oss-server</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义环境变量 (请务必修改密码)</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># MinIO 的登录 Access Key (用户名)</span></span><br><span class="line">      <span class="attr">MINIO_ROOT_USER:</span> <span class="string">minioadmin</span></span><br><span class="line">      <span class="comment"># MinIO 的登录 Secret Key (密码, 至少8位)</span></span><br><span class="line">      <span class="attr">MINIO_ROOT_PASSWORD:</span> <span class="string">VERY_SECRET_PASSWORD_CHANGE_ME</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># volumes 卷挂载是核心</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># 将我们刚刚挂载的 NAS 目录，映射到 MinIO 容器内部的 /data 目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mnt/nas_data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mnt/nas:/data2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ports 端口映射</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># 9000 端口是 S3 API 的访问端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">      <span class="comment"># 9001 端口是 MinIO Web 控制台的访问端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9001:9001&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># command 命令</span></span><br><span class="line">    <span class="comment"># 告诉 MinIO 启动一个服务器，并使用容器内的 /data 目录作为存储根目录</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">server</span> <span class="string">/data</span> <span class="string">/data2</span> <span class="string">--console-address</span> <span class="string">&quot;:9001&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 健康检查，确保服务正常运行</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:9000/minio/health/live&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>启动 MinIO 服务：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li></ol><h3 id="第四步：验证和使用">第四步：验证和使用</h3><p>现在，你的本地 OSS 服务已经搭建完成并开始运行了！</p><ol><li><p><strong>访问 Web 控制台</strong>：</p><ul><li>在浏览器中打开 <code>http://&lt;MinIO_Server_IP&gt;:9001</code>。</li><li>使用你在 <code>docker-compose.yml</code> 中设置的 <code>MINIO_ROOT_USER</code> (minioadmin) 和 <code>MINIO_ROOT_PASSWORD</code> 登录。</li></ul></li><li><p><strong>查看数据</strong>：</p><ul><li>登录后，你会看到 MinIO 的界面。点击 “Buckets”（存储桶）。</li><li><strong>你会惊喜地发现，你在 NAS 目录 <code>/mnt/nas_data</code> 下的所有一级子目录，都已经自动变成了 MinIO 的 Buckets！</strong></li><li>例如，如果你的 NAS 目录结构是：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/mnt/nas_data/</span><br><span class="line">├── images/</span><br><span class="line">│   ├── cat.jpg</span><br><span class="line">│   └── dog.png</span><br><span class="line">└── videos/</span><br><span class="line">    └── movie.mp4</span><br></pre></td></tr></table></figure></li><li>那么在 MinIO 控制台里，你就会看到两个 bucket：<code>images</code> 和 <code>videos</code>。你可以直接点击进入并管理里面的文件。</li></ul></li><li><p><strong>使用 S3 API 访问</strong>：</p><ul><li><strong>Endpoint (服务地址)</strong>: <code>http://&lt;MinIO_Server_IP&gt;:9000</code></li><li><strong>Access Key</strong>: <code>minioadmin</code></li><li><strong>Secret Key</strong>: <code>VERY_SECRET_PASSWORD_CHANGE_ME</code></li><li>你可以使用任何支持 S3 的客户端工具（如 <code>s3cmd</code>, <code>mc</code>, AWS SDK）来连接和操作你的数据。</li></ul><p><strong>使用 MinIO Client (mc) 的示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 下载 mc</span></span><br><span class="line">wget https://dl.min.io/client/mc/release/linux-amd64/mc</span><br><span class="line"><span class="built_in">chmod</span> +x mc</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> mc /usr/local/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 配置一个别名，指向你的本地 OSS</span></span><br><span class="line">mc <span class="built_in">alias</span> <span class="built_in">set</span> local-oss http://&lt;MinIO_Server_IP&gt;:9000 minioadmin VERY_SECRET_PASSWORD_CHANGE_ME</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 列出所有的 bucket (即 NAS 上的一级目录)</span></span><br><span class="line">mc <span class="built_in">ls</span> local-oss</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 列出 images bucket 里的所有文件</span></span><br><span class="line">mc <span class="built_in">ls</span> local-oss/images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 上传一个新文件到 videos bucket</span></span><br><span class="line">mc <span class="built_in">cp</span> my_new_video.mp4 local-oss/videos</span><br><span class="line"><span class="comment"># 执行后，你会在 NAS 的 /mnt/nas_data/videos/ 目录下看到 my_new_video.mp4 文件</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="问题">问题</h3><ul><li>重启后残留文件清理</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf .minio.sys</span><br><span class="line">docker-compose down &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure><h3 id="总结">总结</h3><p>通过 <strong>NAS 挂载 + MinIO Docker 部署</strong> 这个简单的两步组合，你成功地将传统的 NAS 文件存储“包装”成了一个功能强大、接口标准、易于扩展的本地对象存储服务。这个方案兼具了 NAS 的大容量存储成本优势和 OSS 的现代化接口优势，是盘活存量数据资产的绝佳实践。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 FFmpeg 的视频场景（镜头边界）检测</title>
      <link href="/2025/07/02/ffmpeg-detect-scene/"/>
      <url>/2025/07/02/ffmpeg-detect-scene/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在视频处理领域，场景检测（Scene Detection）或称镜头分割（Shot Boundary Detection）是一项基础且关键的任务，广泛应用于视频索引、自动剪辑、内容摘要等场景。</p></blockquote><h2 id="1-技术可行性分析-Feasibility-Analysis"><strong>1. 技术可行性分析 (Feasibility Analysis)</strong></h2><p>将 FFmpeg 用于场景检测不仅可行，而且是一种非常成熟和高效的方案。其可行性主要基于以下几点：</p><ul><li><strong>内置的专业滤镜</strong>: FFmpeg 内置了专门为媒体分析设计的强大滤镜（filters），如 <code>scdet</code> 和 <code>select</code>，它们可以直接访问视频帧的底层数据，并进行快速的数学运算。</li><li><strong>像素级差异计算</strong>: 场景检测的核心原理是计算连续视频帧之间的视觉差异。当差异超过某个阈值时，即认为发生了场景切换。FFmpeg 的滤镜能够高效地执行这种像素级的直方图或帧差计算，并将结果量化为一个“场景变化分数”（scene score）。</li><li><strong>跨平台与标准化</strong>: FFmpeg 是一个跨平台的命令行工具，在 Windows, macOS, Linux 上表现一致，无需依赖复杂的图形界面或特定操作系统API。这使其成为自动化、服务器端处理流程的理想选择。</li><li><strong>轻量级与零依赖</strong>: 与需要安装庞大依赖库的专业软件或Python库相比，FFmpeg 只有一个可执行文件，部署简单，资源占用极低。</li></ul><p><strong>结论</strong>: FFmpeg 提供了实现场景检测所需的核心功能，其性能和标准化特性使其成为一个高度可行的技术选型。</p><h2 id="2-实现方法-Implementation"><strong>2. 实现方法 (Implementation)</strong></h2><p>实现 FFmpeg 场景检测的最佳实践是结合 <code>select</code> 和 <code>showinfo</code> 两个滤镜。这种方法比单独使用老旧的 <code>scdet</code> 滤镜输出更干净、更可靠。</p><p><strong>核心命令</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;input.mp4&quot;</span> -vf <span class="string">&quot;select=&#x27;gt(scene,THRESHOLD)&#x27;,showinfo&quot;</span> -f null -</span><br></pre></td></tr></table></figure><p><strong>命令解析</strong>:</p><ol><li><code>ffmpeg -i &quot;input.mp4&quot;</code>: 指定输入视频文件。</li><li><code>-vf &quot;...&quot;</code>: <code>-vf</code> 是 <code>-filter:v</code> 的缩写，用于指定视频滤镜链。</li><li><code>select='gt(scene,THRESHOLD)'</code>: 这是核心的<strong>选择滤镜</strong>。<ul><li><code>scene</code>: FFmpeg 内置的一个变量，代表当前帧与前一帧的场景变化分数（范围 0.0 到 1.0）。</li><li><code>gt(a, b)</code>: “Greater Than” 函数，当 <code>a &gt; b</code> 时返回真。</li><li><code>THRESHOLD</code>: 这是一个<strong>可调阈值</strong>（例如 <code>0.4</code>）。值越低，检测越灵敏。该滤镜会筛选出所有场景变化分数大于阈值的视频帧。</li></ul></li><li><code>,showinfo</code>: 这是<strong>信息打印滤镜</strong>。它会接收由 <code>select</code> 滤镜筛选出的帧，并在标准错误流（stderr）中打印出这些帧的详细信息，格式高度统一。</li><li><code>-f null -</code>: 指示 FFmpeg 不生成任何输出文件，仅执行滤镜分析，并将结果输出到标准输出/错误流。</li></ol><p><strong>Python 脚本实现</strong>:</p><p>在实际应用中，我们通常使用 Python 的 <code>subprocess</code> 模块来调用此命令并解析其输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_scenes_with_ffmpeg</span>(<span class="params">video_path, threshold=<span class="number">0.4</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用 FFmpeg 检测视频场景切换点。&quot;&quot;&quot;</span></span><br><span class="line">    command = [</span><br><span class="line">        <span class="string">&quot;ffmpeg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-i&quot;</span>, video_path,</span><br><span class="line">        <span class="string">&quot;-vf&quot;</span>, <span class="string">f&quot;select=&#x27;gt(scene,<span class="subst">&#123;threshold&#125;</span>)&#x27;,showinfo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;null&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    process = subprocess.Popen(command, stderr=subprocess.PIPE, text=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    timestamps = []</span><br><span class="line">    <span class="comment"># 正则表达式专门匹配 showinfo 输出的 pts_time</span></span><br><span class="line">    regex = <span class="string">r&quot;\[Parsed_showinfo.*\] .* pts_time:([0-9]+\.?[0-9]*)&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> process.stderr:</span><br><span class="line">        <span class="keyword">match</span> = re.search(regex, line)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            timestamps.append(<span class="built_in">float</span>(<span class="keyword">match</span>.group(<span class="number">1</span>)))</span><br><span class="line">            </span><br><span class="line">    process.wait()</span><br><span class="line">    <span class="keyword">if</span> process.returncode != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;FFmpeg command failed.&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> timestamps</span><br></pre></td></tr></table></figure><h2 id="3-测试与验证方法-Testing-Validation"><strong>3. 测试与验证方法 (Testing &amp; Validation)</strong></h2><p>要验证 FFmpeg 场景检测的准确性，需要系统性的测试方法。</p><ol><li><p><strong>构建测试集 (Test Dataset Construction)</strong>:</p><ul><li><strong>正样本</strong>: 包含多种类型场景切换的视频。<ul><li><strong>硬切 (Hard Cuts)</strong>: 瞬间切换，FFmpeg 检测效果最好。</li><li><strong>淡入淡出 (Fades)</strong>: 逐渐变黑或从黑屏出现。</li><li><strong>叠化 (Dissolves)</strong>: 两个场景平滑过渡。</li><li><strong>快速运动/闪光</strong>: 容易产生误报的场景，如爆炸、相机快速摇晃、闪光灯。</li></ul></li><li><strong>负样本</strong>: 长镜头、无明显切换的视频，用于测试是否会产生误报。</li></ul></li><li><p><strong>人工标注 (Ground Truth Annotation)</strong>:</p><ul><li>使用视频编辑软件（如 Adobe Premiere, Final Cut Pro）手动记录测试集中所有场景切换的精确时间戳，作为“黄金标准”或“基准真相”（Ground Truth）。</li></ul></li><li><p><strong>量化评估指标 (Quantitative Metrics)</strong>:</p><ul><li>将 FFmpeg 检测出的时间戳与人工标注的时间戳进行比对（允许一个小的容忍窗口，如 ±0.5秒）。</li><li>计算以下指标：<ul><li><strong>精确率 (Precision)</strong>: <code>TP / (TP + FP)</code>，检测出的转场中有多少是正确的。</li><li><strong>召回率 (Recall)</strong>: <code>TP / (TP + FN)</code>，所有真实转场中，有多少被成功检测出来了。</li><li><strong>F1-Score</strong>: <code>2 * (Precision * Recall) / (Precision + Recall)</code>，精确率和召回率的调和平均值，是综合评估性能的常用指标。</li><li><code>TP</code> (True Positives): 正确检测到的转场。</li><li><code>FP</code> (False Positives): 误报的转场。</li><li><code>FN</code> (False Negatives): 漏掉的转场。</li></ul></li></ul></li><li><p><strong>阈值调优</strong>:</p><ul><li>通过在测试集上运行不同阈值（例如从 0.2 到 0.7），绘制 Precision-Recall 曲线，找到在特定应用场景下 F1-Score 最高的最佳阈值。</li></ul></li></ol><h2 id="4-优缺点分析-Pros-and-Cons"><strong>4. 优缺点分析 (Pros and Cons)</strong></h2><p><strong>优点 (Pros)</strong>:</p><ul><li><strong>性能卓越</strong>: 作为C语言编写的高度优化的程序，FFmpeg 的处理速度极快，远超许多高级语言实现的库。</li><li><strong>资源占用低</strong>: 内存和CPU占用都很小，非常适合在资源受限的环境或大规模服务器集群上运行。</li><li><strong>部署简单</strong>: 无需复杂的依赖安装，一个可执行文件即可搞定。</li><li><strong>高度可定制与集成</strong>: 可以通过调整阈值来控制灵敏度，并且能与 FFmpeg 其他上百种滤镜和功能（如切片、转码、截图）在同一个命令中无缝集成，形成强大的处理流水线。</li><li><strong>免费与开源</strong>: 无任何商业成本，社区活跃，文档丰富。</li></ul><p><strong>缺点 (Cons)</strong>:</p><ul><li><strong>仅基于像素，不理解内容</strong>: 这是其核心局限。FFmpeg 无法理解视频的语义。<ul><li><strong>对渐变转场不敏感</strong>: 对于淡入淡出、叠化等缓慢变化的转场，由于连续帧差异小，很容易被漏检 (False Negatives)。</li><li><strong>对剧烈运动敏感</strong>: 快速的镜头移动、爆炸、闪光灯等非场景切换的剧烈视觉变化，很容易被误报 (False Positives)。</li><li><strong>无法识别转场类型</strong>: 它只能告诉你“这里发生了变化”，但无法区分是硬切还是其他特效。</li></ul></li><li><strong>阈值依赖性强</strong>: 效果好坏严重依赖于阈值的设定，而“最佳阈值”对于不同类型（如动画、电影、Vlog）的视频可能完全不同，需要经验或实验来确定。</li><li><strong>需要外部调用与解析</strong>: 它不是一个原生库，在 Python 等语言中使用时，必须通过子进程调用，并编写正则表达式等代码来解析其文本输出，增加了集成的复杂性。</li></ul><h2 id="5-效率评估-Efficiency-Evaluation"><strong>5. 效率评估 (Efficiency Evaluation)</strong></h2><p>FFmpeg 的效率是其最显著的优势之一。</p><ul><li><strong>处理速度</strong>: 在现代多核 CPU 上，处理一个 1080p 的视频文件，其速度通常可以达到实时速度的数倍甚至数十倍（例如，处理1小时的视频可能只需要几分钟）。由于其主要进行数学计算，性能瓶颈通常在于磁盘 I/O 或 CPU 单核性能。</li><li><strong>与 PySceneDetect 的对比</strong>:<ul><li><code>PySceneDetect</code> (使用 OpenCV 后端) 同样高效，但通常会比 FFmpeg 稍慢，因为它有 Python 层的开销。</li><li>当 <code>PySceneDetect</code> 使用更复杂的检测器（如 <code>ThresholdDetector</code>，检测黑场/白场）时，其开销会进一步增加。</li><li>FFmpeg 的优势在于其纯 C 实现和极简的计算逻辑，使其在原始速度上通常保持领先。</li></ul></li><li><strong>内存使用</strong>: FFmpeg 采用流式处理（streaming），一次只在内存中保留少量帧进行计算，因此内存占用非常稳定且低下，即便是处理数小时的长视频也不会耗尽内存。</li></ul><p><strong>优化建议</strong>: 虽然 FFmpeg 已经很快，但对于超高分辨率视频（如 4K, 8K），可以通过在滤镜链中加入 <code>scale</code> 滤镜进行<strong>降采样</strong>来进一步提速，例如 <code>scale=640:-1</code>，这通常不会影响硬切检测的准确性。</p><h2 id="6-案例">6. 案例</h2><ul><li>code</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Dict</span>, <span class="type">Any</span>, <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 1. Setup Logging ---</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_logging</span>(<span class="params">log_file: <span class="built_in">str</span> = <span class="string">&quot;analysis.log&quot;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Configures logging to file and console.&quot;&quot;&quot;</span></span><br><span class="line">    logging.basicConfig(</span><br><span class="line">        level=logging.INFO,</span><br><span class="line">        <span class="built_in">format</span>=<span class="string">&quot;%(asctime)s [%(levelname)s] - %(message)s&quot;</span>,</span><br><span class="line">        handlers=[</span><br><span class="line">            logging.FileHandler(log_file, mode=<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">            logging.StreamHandler()  <span class="comment"># Also print to console</span></span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">analyze_video_transitions</span>(<span class="params"></span></span><br><span class="line"><span class="params">        video_path: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">        ffmpeg_path: <span class="built_in">str</span> = <span class="string">&quot;ffmpeg&quot;</span>,</span></span><br><span class="line"><span class="params">        threshold: <span class="built_in">float</span> = <span class="number">0.4</span></span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="type">Tuple</span>[<span class="type">List</span>[<span class="built_in">float</span>], <span class="built_in">str</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Analyzes a video file for scene transitions using ffmpeg.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This function uses the &#x27;select&#x27; and &#x27;showinfo&#x27; filters in ffmpeg, which is a</span></span><br><span class="line"><span class="string">    more robust method than parsing the output of &#x27;scdet&#x27; alone. It identifies</span></span><br><span class="line"><span class="string">    frames where the scene change score exceeds a given threshold.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        video_path: The absolute or relative path to the video file.</span></span><br><span class="line"><span class="string">        ffmpeg_path: The path to the ffmpeg executable. Defaults to &#x27;ffmpeg&#x27;.</span></span><br><span class="line"><span class="string">        threshold: The sensitivity for scene detection, from 0.0 to 1.0.</span></span><br><span class="line"><span class="string">                   Lower values detect more transitions. A common default is 0.4.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        A tuple containing:</span></span><br><span class="line"><span class="string">        - A sorted list of timestamps (in seconds) where transitions were detected.</span></span><br><span class="line"><span class="string">        - The complete, raw stderr output from the ffmpeg command for debugging.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        FileNotFoundError: If the ffmpeg executable is not found at ffmpeg_path.</span></span><br><span class="line"><span class="string">        FFmpegError: If ffmpeg returns a non-zero exit code, indicating an error</span></span><br><span class="line"><span class="string">                     (e.g., invalid video file, incorrect parameters).</span></span><br><span class="line"><span class="string">        ValueError: If the provided video_path does not exist.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># It&#x27;s good practice to check for file existence early</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(video_path):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Video file not found at: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This command is more robust:</span></span><br><span class="line">    <span class="comment"># - `select=&#x27;gt(scene,&#123;threshold&#125;)&#x27;`: Selects frames where the scene change</span></span><br><span class="line">    <span class="comment">#   score is greater than the threshold.</span></span><br><span class="line">    <span class="comment"># - `showinfo`: Prints information about the selected frames to stderr.</span></span><br><span class="line">    <span class="comment"># The output is structured and easy to parse.</span></span><br><span class="line">    command = [</span><br><span class="line">        ffmpeg_path,</span><br><span class="line">        <span class="string">&quot;-i&quot;</span>, video_path,</span><br><span class="line">        <span class="string">&quot;-vf&quot;</span>, <span class="string">f&quot;select=&#x27;gt(scene,<span class="subst">&#123;threshold&#125;</span>)&#x27;,showinfo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;null&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-&quot;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        process = subprocess.Popen(</span><br><span class="line">            command,</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.PIPE,</span><br><span class="line">            text=<span class="literal">True</span>,</span><br><span class="line">            encoding=<span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">            errors=<span class="string">&#x27;replace&#x27;</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">raise</span> FileNotFoundError(</span><br><span class="line">            <span class="string">f&quot;ffmpeg executable not found at &#x27;<span class="subst">&#123;ffmpeg_path&#125;</span>&#x27;. &quot;</span></span><br><span class="line">            <span class="string">&quot;Please install ffmpeg or provide the correct path.&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Process stderr line-by-line for memory efficiency</span></span><br><span class="line">    timestamps = []</span><br><span class="line">    <span class="comment"># The regex now specifically looks for &#x27;pts_time&#x27; from the showinfo filter</span></span><br><span class="line">    regex = <span class="string">r&quot;\[Parsed_showinfo.*\] .* pts_time:([0-9]+\.?[0-9]*)&quot;</span></span><br><span class="line"></span><br><span class="line">    stderr_lines = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> process.stderr:</span><br><span class="line">        stderr_lines.append(line)</span><br><span class="line">        <span class="keyword">match</span> = re.search(regex, line)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            time_str = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> time_str:</span><br><span class="line">                timestamps.append(<span class="built_in">float</span>(time_str))</span><br><span class="line"></span><br><span class="line">    process.wait()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check for ffmpeg errors after processing is complete</span></span><br><span class="line">    <span class="keyword">if</span> process.returncode != <span class="number">0</span>:</span><br><span class="line">        full_stderr = <span class="string">&quot;&quot;</span>.join(stderr_lines)</span><br><span class="line">        <span class="comment"># raise FFmpegError(</span></span><br><span class="line">        <span class="comment">#     f&quot;ffmpeg failed with exit code &#123;process.returncode&#125;.\n&quot;</span></span><br><span class="line">        <span class="comment">#     f&quot;Command: &#123;&#x27; &#x27;.join(command)&#125;\n&quot;</span></span><br><span class="line">        <span class="comment">#     f&quot;Stderr:\n&#123;full_stderr&#125;&quot;</span></span><br><span class="line">        <span class="comment"># )</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Timestamps from showinfo should already be in order, but sorting is safe</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(timestamps), <span class="string">&quot;&quot;</span>.join(stderr_lines)</span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Main function to run the analysis script.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- Configuration ---</span></span><br><span class="line">    <span class="comment"># 1. Setup logging first</span></span><br><span class="line">    log_file = <span class="string">&quot;./logs/transition_analysis.log&quot;</span></span><br><span class="line">    os.makedirs(log_file, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    setup_logging(log_file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. Get user input for video directory</span></span><br><span class="line">    video_directory = <span class="string">&quot;/Volumes/share/新建文件夹/7，1数据&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. Output JSON file path</span></span><br><span class="line">    output_json_path = <span class="string">&quot;./data/transition_analysis_results.json&quot;</span></span><br><span class="line"></span><br><span class="line">    os.makedirs(<span class="string">&quot;./data&quot;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. (Optional) FFmpeg executable path</span></span><br><span class="line">    ffmpeg_executable = <span class="string">&quot;ffmpeg&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5. Supported video file extensions</span></span><br><span class="line">    supported_extensions = &#123;<span class="string">&quot;.mp4&quot;</span>, <span class="string">&quot;.mkv&quot;</span>, <span class="string">&quot;.mov&quot;</span>, <span class="string">&quot;.avi&quot;</span>, <span class="string">&quot;.webm&quot;</span>, <span class="string">&quot;.flv&quot;</span>&#125;</span><br><span class="line">    <span class="comment"># --- End of Configuration ---</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(video_directory):</span><br><span class="line">        logging.error(<span class="string">f&quot;Directory not found at &#x27;<span class="subst">&#123;video_directory&#125;</span>&#x27;. Aborting.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    all_results: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">&quot;Starting video transition analysis...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- 2. Find all video files first to set up the progress bar ---</span></span><br><span class="line">    video_files_to_process = []</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(video_directory):</span><br><span class="line">        file_path = os.path.join(video_directory, filename)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(file_path) <span class="keyword">and</span> Path(filename).suffix.lower() <span class="keyword">in</span> supported_extensions:</span><br><span class="line">            video_files_to_process.append(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> video_files_to_process:</span><br><span class="line">        logging.warning(<span class="string">&quot;No video files found in the specified directory.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- 3. Process files with a tqdm progress bar ---</span></span><br><span class="line">    <span class="keyword">with</span> tqdm(total=<span class="built_in">len</span>(video_files_to_process), desc=<span class="string">&quot;Analyzing Videos&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">        <span class="keyword">for</span> video_path <span class="keyword">in</span> video_files_to_process:</span><br><span class="line">            filename = os.path.basename(video_path)</span><br><span class="line">            pbar.set_description(<span class="string">f&quot;Processing <span class="subst">&#123;filename[:<span class="number">20</span>]&#125;</span>...&quot;</span>)  <span class="comment"># Update progress bar description</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                transition_times, ffmpeg_log = analyze_video_transitions(video_path, ffmpeg_executable)</span><br><span class="line"></span><br><span class="line">                logging.info(<span class="string">f&quot;Successfully analyzed &#x27;<span class="subst">&#123;filename&#125;</span>&#x27;. Found <span class="subst">&#123;<span class="built_in">len</span>(transition_times)&#125;</span> transitions.&quot;</span>)</span><br><span class="line">                all_results[filename] = &#123;</span><br><span class="line">                    <span class="string">&quot;file_path&quot;</span>: video_path,</span><br><span class="line">                    <span class="string">&quot;transitions&quot;</span>: transition_times,</span><br><span class="line">                    <span class="string">&quot;transition_count&quot;</span>: <span class="built_in">len</span>(transition_times)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logging.error(<span class="string">f&quot;Failed to analyze &#x27;<span class="subst">&#123;filename&#125;</span>&#x27;: <span class="subst">&#123;e&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">                <span class="comment"># Also log the full ffmpeg output for debugging</span></span><br><span class="line">                logging.debug(<span class="string">f&quot;FFmpeg stderr for failed file &#x27;<span class="subst">&#123;filename&#125;</span>&#x27;:\n<span class="subst">&#123;ffmpeg_log&#125;</span>&quot;</span>)</span><br><span class="line">                all_results[filename] = &#123;</span><br><span class="line">                    <span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            pbar.update(<span class="number">1</span>)  <span class="comment"># Move progress bar forward by one step</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Save the results to a JSON file</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(output_json_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(all_results, f, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">        logging.info(<span class="string">f&quot;Analysis complete. Results saved to &#x27;<span class="subst">&#123;output_json_path&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;Error saving results to JSON file: <span class="subst">&#123;e&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>output</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;6月27日 (1)-71.mp4&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;file_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Volumes/share/新建文件夹/7，1数据/6月27日 (1)-71.mp4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;transitions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="number">4.0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">7.666667</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">11.766667</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">16.566667</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">22.866667</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">27.066667</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">29.266667</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">34.766667</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">36.966667</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">49.566667</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">57.066667</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">61.766667</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">63.5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">69.866667</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">74.8</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">79.466667</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">81.266667</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">84.066667</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">88.266667</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;transition_count&quot;</span><span class="punctuation">:</span> <span class="number">19</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>log</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2025-07-02 17:50:43,359 [INFO] - Successfully analyzed &#x27;._6月27日 (1)-36.mp4&#x27;. Found 0 transitions.</span><br><span class="line">2025-07-02 17:50:55,619 [INFO] - Successfully analyzed &#x27;6月27日 (1)-71.mp4&#x27;. Found 19 transitions.</span><br><span class="line">2025-07-02 17:50:55,620 [INFO] - Analysis complete. Results saved to &#x27;transition_analysis_results.json&#x27;</span><br></pre></td></tr></table></figure><h2 id="结论"><strong>结论</strong></h2><h3 id="检出效果对比">检出效果对比</h3><table><thead><tr><th style="text-align:left">对比项</th><th style="text-align:left"><strong>方法一: PySceneDetect (pyscenedetect_analysis.py)</strong></th><th style="text-align:left"><strong>方法二: FFmpeg (transition_analysis.py)</strong></th></tr></thead><tbody><tr><td style="text-align:left"><strong>核心技术</strong></td><td style="text-align:left">使用专业的Python场景检测库 <code>scenedetect</code>。通过 <code>ContentDetector</code> 算法，比较连续帧在亮度（luma）和色度（chroma）上的变化来识别场景切换。</td><td style="text-align:left">调用外部命令行工具 FFmpeg，并使用其内置的 <code>select</code> 和 <code>showinfo</code> 滤镜组合。该方法基于一个简单的“场景变化分数”（scene score）进行阈值判断。</td></tr><tr><td style="text-align:left"><strong>检测灵敏度与准确性</strong></td><td style="text-align:left"><strong>高</strong>。此方法非常灵敏，能稳定地识别出大量的有效场景切换点。其算法对硬切（Hard Cuts）的识别准确率很高。</td><td style="text-align:left"><strong>依赖阈值，默认较低</strong>。在 <code>threshold=0.4</code> 的设置下，灵敏度可能不足，导致大量明显的镜头切换被漏检。需要针对视频内容进行细致的阈值调优才能达到理想效果。</td></tr><tr><td style="text-align:left"><strong>结果对比 (示例)</strong></td><td style="text-align:left"><code>6月27日 (1)-47.mp4</code>: 检出 <strong>46</strong> 个<br><code>6月27日 (1)-49.mp4</code>: 检出 <strong>43</strong> 个<br><code>6.27(1)-64.mp4</code>: 检出 <strong>17</strong> 个</td><td style="text-align:left"><code>6月27日 (1)-47.mp4</code>: 检出 <strong>0</strong> 个<br><code>6月27日 (1)-49.mp4</code>: 检出 <strong>33</strong> 个<br><code>6.27(1)-64.mp4</code>: 检出 <strong>4</strong> 个</td></tr><tr><td style="text-align:left"><strong>文件处理健壮性</strong></td><td style="text-align:left"><strong>高</strong>。脚本中加入了明确的逻辑，能自动识别并跳过 macOS 系统产生的无效元数据文件（如 <code>._filename.mp4</code>），避免了因处理无效文件而导致的程序崩溃或错误。</td><td style="text-align:left"><strong>中等</strong>。脚本会尝试处理 <code>._</code> 开头的无效文件。虽然 FFmpeg 本身通常不会因此崩溃（会报告错误并退出），但这浪费了处理时间，并在日志和结果文件中留下了无效条目。</td></tr><tr><td style="text-align:left"><strong>性能与效率</strong></td><td style="text-align:left"><strong>中等</strong>。单个文件处理速度相对较慢，因其在Python层有一定开销。但通过自动降采样（downscaling）高分辨率视频，性能已得到显著优化，最终以可接受的速度换取高质量的检测结果。</td><td style="text-align:left"><strong>非常高</strong>。作为C语言编写的底层工具，单个文件处理速度极快。但这种速度优势建立在算法相对简单的基础上，牺牲了部分准确性和对复杂转场的识别能力。</td></tr><tr><td style="text-align:left"><strong>易用性与集成</strong></td><td style="text-align:left"><strong>高</strong>。作为原生Python库，集成方便，无需处理外部进程和解析文本输出。API友好，返回直接可用的Python数据结构（如列表）。</td><td style="text-align:left"><strong>中等</strong>。需要通过 <code>subprocess</code> 模块调用，并编写正则表达式来解析 <code>stderr</code> 输出，集成相对复杂，且容易因FFmpeg版本更新导致解析逻辑失效。</td></tr><tr><td style="text-align:left"><strong>依赖与部署</strong></td><td style="text-align:left"><strong>中等</strong>。需要通过 <code>pip</code> 安装 <code>scenedetect</code> 及其依赖（如 <code>opencv-python</code>），环境配置相对复杂。</td><td style="text-align:left"><strong>简单</strong>。仅依赖于一个单一的 FFmpeg 可执行文件，部署和分发非常方便。</td></tr><tr><td style="text-align:left"><strong>推荐场景</strong></td><td style="text-align:left">适用于对<strong>检测准确性要求高</strong>、需要稳定可靠结果的应用。是构建专业视频分析工具和服务的首选。</td><td style="text-align:left">适用于对<strong>处理速度要求极高</strong>、资源受限，且主要任务是检测硬切（Hard Cuts）的批量自动化流程。</td></tr></tbody></table><h3 id="检出数目对比">检出数目对比</h3><table><thead><tr><th style="text-align:left">检测方法</th><th style="text-align:left">分析的视频总数</th><th style="text-align:left">成功检出转场的视频数</th><th style="text-align:left">检出率</th></tr></thead><tbody><tr><td style="text-align:left">方法一: PySceneDetect</td><td style="text-align:left">48</td><td style="text-align:left">37</td><td style="text-align:left">77.1%</td></tr><tr><td style="text-align:left">方法二: FFmpeg</td><td style="text-align:left">48</td><td style="text-align:left">19</td><td style="text-align:left">39.6%</td></tr></tbody></table><h3 id="总结">总结</h3><ul><li><p>PySceneDetect 效果远胜 FFmpeg：PySceneDetect 成功在 37 个视频中找到了转场，而 FFmpeg 只在其中的 19 个视频中找到了转场。PySceneDetect 的“命中率”几乎是 FFmpeg 的两倍。</p></li><li><p>FFmpeg 漏检严重：从数据可以看出，FFmpeg 的方法漏掉了大量有转场的视频。例如，在 PySceneDetect 检出 80 个转场的 6月27日 (1)-7.mp4 视频中，FFmpeg 的结果为 0。这种巨大的差异表明 FFmpeg 的 scdet 滤镜在当前参数下过于迟钝，不适合用于精确的场景切分。</p></li></ul><blockquote><p>FFmpeg 是一种用于视频场景检测的“快、准（对硬切而言）、狠”的工具**。它非常适合于需要<strong>大规模、自动化、快速处理</strong>视频，且主要目标是检测<strong>硬切</strong>的场景。它的高性能、低资源占用和强大的集成能力使其在后端服务和数据预处理流程中具有不可替代的价值。</p></blockquote><h2 id="See">See</h2><ul><li><a href="https://ffmpeg.org/ffmpeg-bitstream-filters.html">https://ffmpeg.org/ffmpeg-bitstream-filters.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TransNetV2模型用于视频复杂转场检测</title>
      <link href="/2025/06/09/TransNetV2-model-use/"/>
      <url>/2025/06/09/TransNetV2-model-use/</url>
      
        <content type="html"><![CDATA[<h2 id="TransNet-V2-模型介绍">TransNet V2 模型介绍</h2><ol><li>目标：<br>TransNet V2 的目标是创建一个快速且准确的镜头边界检测（Shot Boundary Detection, SBD）模型。它能够识别视频中的两种主要类型的镜头切换：<ul><li>硬切 (Hard Cuts): 两个镜头之间的突变。</li><li>渐变转场 (Gradual Transitions): 如溶解 (dissolves)、淡入淡出 (fades)、划像 (wipes) 等，这些转场会持续数帧。</li></ul></li></ol><ul><li>模型架构</li></ul><p><img src="/2025/06/09/TransNetV2-model-use/transnetv2_struct.png" class="lazyload placeholder" data-srcset="/2025/06/09/TransNetV2-model-use/transnetv2_struct.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ol start="2"><li><p>核心思想：<br>TransNet V2 是一个深度神经网络。它直接处理一系列连续的、低分辨率的 RGB 视频帧，来预测每一帧发生镜头转换的概率，并能区分转场类型。</p></li><li><p>关键架构特点：</p><ul><li>输入 (Input)：<ul><li>模型接收 <code>N</code> 个连续的、低分辨率 RGB 视频帧作为输入（例如，论文中常使用 <code>N=100</code> 帧，每帧分辨率缩小到 <code>48x27</code> 像素）。</li><li>直接使用原始的、降采样后的 RGB 帧（而不是预先计算的特征，如帧差或光流）使得网络可以端到端地学习最优的视觉特征。</li></ul></li><li>帧编码 (Frame Encoding)：<ul><li>输入的每一帧首先会经过两个 2D 卷积层和最大池化层，用于提取空间特征。</li><li>这些特征图随后被展平 (flatten) 并按时间顺序堆叠起来，形成一个特征序列。</li></ul></li><li>时间建模 (Temporal Modeling) - 核心部分：<ul><li>TransNet V2 的核心是一堆一维扩张卷积 (1D Dilated Convolutions) 块，它们作用于帧特征序列。</li><li>一维卷积： 非常适合处理序列数据，计算效率高。</li><li>扩张卷积 (Dilated Convolutions)： 允许网络在不显著增加参数数量或计算成本（通过避免过多的池化层）的情况下，拥有非常大的感受野（即能看到很长的时间上下文）。这对于检测跨越多帧的渐变转场至关重要。每个扩张卷积块通常包含一个扩张一维卷积层、批量归一化 (Batch Normalization)、ReLU 激活函数和 Dropout。</li></ul></li><li>双预测头 (Dual Prediction Heads)：<br>网络从最后一个扩张卷积层的输出特征中引出两个分支（预测头）：<ol><li>转场概率预测 (Transition Probability Prediction)： 一个核大小为 1 的一维卷积层，后接 Sigmoid 激活函数。对输入序列中的每一帧输出一个概率值（0 到 1），表示该帧是镜头边界（硬切或渐变转场的中心）的可能性。使用二元交叉熵 (BCE) 损失进行训练。</li><li>转场类型预测 (Transition Type Prediction - One-Hot)： 另一个核大小为 1 的一维卷积层，有 3 个输出通道，每个通道后接 Sigmoid。它们分别预测每一帧属于以下类别的概率：<ul><li>无镜头转场</li><li>硬切</li><li>渐变转场的中心<br>这被视为三个独立的二分类问题，同样使用 BCE 损失训练。这个辅助任务有助于网络学习更丰富的特征。</li></ul></li></ol></li><li>组合损失 (Combined Loss)：<br>总损失是两个预测头 BCE 损失的加权和。</li></ul></li><li><p>模型优势：</p><ul><li>高准确性： 在多个标准 SBD 数据集（如 ClipShots, TRECVID IACC.3, RAI, BBC Planet Earth）上取得了业界领先 (SOTA) 的结果。</li><li>高速度： 为效率而设计，在现代 GPU 上能够实现远超实时的处理速度（例如，在 NVIDIA V100 上网络推理部分约 150 FPS，不包括视频解码）。</li><li>鲁棒性强： 能够有效处理硬切和各种复杂的渐变转场。</li><li>端到端学习： 直接从低分辨率 RGB 帧中学习特征，无需复杂的手动特征工程。</li></ul></li></ol><h2 id="TransNet-V2-使用方法-推理与后处理">TransNet V2 使用方法 (推理与后处理)</h2><ol><li><p>输入视频处理：</p><ul><li>将视频解码成单独的帧。</li><li>将每一帧的大小调整到网络所需的输入分辨率（例如 <code>48x27</code> 像素）。</li></ul></li><li><p>滑动窗口推理：</p><ul><li>视频以 <code>N</code> 帧（如 100 帧）的重叠窗口进行处理。</li><li>对于每个窗口，网络从主要的转场概率预测头输出 <code>N</code> 个概率值（对应窗口中的每一帧）。</li><li>由于窗口是重叠的，视频中的同一帧可能会获得多个预测。通常会对这些预测进行平均，以获得该帧更稳定的概率。</li></ul></li><li><p>预测结果后处理：</p><ul><li>阈值化 (Thresholding)：<ul><li>将（平均后的）逐帧概率与一个预定义的阈值 <code>P_thresh</code> 进行比较。概率超过此阈值的帧被认为是候选的镜头边界。</li><li>论文建议 <code>P_thresh = 0.5</code> 是一个不错的默认值，但可以根据实际情况调整。</li></ul></li><li>最小镜头长度 (Minimum Shot Length - <code>L_min</code>)：<ul><li>为了避免产生许多非常短的、可能是误报的镜头，会施加一个约束：任何会导致镜头长度小于 <code>L_min</code> 帧的检测边界都会被丢弃。</li><li>这通常通过遍历候选边界并确保其与前一个已接受边界的距离至少为 <code>L_min</code> 来实现。</li><li>论文中提到根据数据集或期望的粒度使用 <code>L_min</code> 值，如 10 帧或 25 帧。</li></ul></li></ul></li><li><p>输出：</p><ul><li>最终输出是一个列表，包含检测到的镜头边界所在的帧索引号。</li><li>可选地，可以使用转场类型预测头的输出来对检测到的边界进行分类，但通常主要关注的是边界的检测本<br>身。</li></ul></li></ol><ul><li>模型检测结果</li></ul><p><img src="/2025/06/09/TransNetV2-model-use/detect_result.png" class="lazyload placeholder" data-srcset="/2025/06/09/TransNetV2-model-use/detect_result.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="使用">使用</h2><h3 id="模型推理">模型推理</h3><ul><li>推理脚本如下：</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 引入 sys 以便使用 sys.stderr</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TransNetV2</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model_dir=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> model_dir <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            model_dir = os.path.join(os.path.dirname(__file__), <span class="string">&quot;transnetv2-weights/&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(model_dir):</span><br><span class="line">                <span class="keyword">raise</span> FileNotFoundError(<span class="string">f&quot;[TransNetV2] ERROR: <span class="subst">&#123;model_dir&#125;</span> is not a directory.&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2] Using weights from <span class="subst">&#123;model_dir&#125;</span>.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._input_size = (<span class="number">27</span>, <span class="number">48</span>, <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="variable language_">self</span>._model = tf.saved_model.load(model_dir)</span><br><span class="line">        <span class="keyword">except</span> OSError <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="keyword">raise</span> IOError(<span class="string">f&quot;[TransNetV2] It seems that files in <span class="subst">&#123;model_dir&#125;</span> are corrupted or missing. &quot;</span></span><br><span class="line">                          <span class="string">f&quot;Re-download them manually and retry. For more info, see: &quot;</span></span><br><span class="line">                          <span class="string">f&quot;https://github.com/soCzech/TransNetV2/issues/1#issuecomment-647357796&quot;</span>) <span class="keyword">from</span> exc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict_raw</span>(<span class="params">self, frames: np.ndarray</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(frames.shape) == <span class="number">5</span> <span class="keyword">and</span> frames.shape[<span class="number">2</span>:] == <span class="variable language_">self</span>._input_size, \</span><br><span class="line">            <span class="string">&quot;[TransNetV2] Input shape must be [batch, frames, height, width, 3].&quot;</span></span><br><span class="line">        frames = tf.cast(frames, tf.float32)</span><br><span class="line"></span><br><span class="line">        logits, dict_ = <span class="variable language_">self</span>._model(frames)</span><br><span class="line">        single_frame_pred = tf.sigmoid(logits)</span><br><span class="line">        all_frames_pred = tf.sigmoid(dict_[<span class="string">&quot;many_hot&quot;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> single_frame_pred, all_frames_pred</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict_frames</span>(<span class="params">self, frames: np.ndarray</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(frames.shape) == <span class="number">4</span> <span class="keyword">and</span> frames.shape[<span class="number">1</span>:] == <span class="variable language_">self</span>._input_size, \</span><br><span class="line">            <span class="string">&quot;[TransNetV2] Input shape must be [frames, height, width, 3].&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">input_iterator</span>():</span><br><span class="line">            <span class="comment"># return windows of size 100 where the first/last 25 frames are from the previous/next batch</span></span><br><span class="line">            <span class="comment"># the first and last window must be padded by copies of the first and last frame of the video</span></span><br><span class="line">            no_padded_frames_start = <span class="number">25</span></span><br><span class="line">            no_padded_frames_end = <span class="number">25</span> + <span class="number">50</span> - (<span class="built_in">len</span>(frames) % <span class="number">50</span> <span class="keyword">if</span> <span class="built_in">len</span>(frames) % <span class="number">50</span> != <span class="number">0</span> <span class="keyword">else</span> <span class="number">50</span>)  <span class="comment"># 25 - 74</span></span><br><span class="line"></span><br><span class="line">            start_frame = np.expand_dims(frames[<span class="number">0</span>], <span class="number">0</span>)</span><br><span class="line">            end_frame = np.expand_dims(frames[-<span class="number">1</span>], <span class="number">0</span>)</span><br><span class="line">            padded_inputs = np.concatenate(</span><br><span class="line">                ([start_frame] * no_padded_frames_start) + [frames] + ([end_frame] * no_padded_frames_end), <span class="number">0</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            ptr = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> ptr + <span class="number">100</span> &lt;= <span class="built_in">len</span>(padded_inputs):</span><br><span class="line">                out = padded_inputs[ptr:ptr + <span class="number">100</span>]</span><br><span class="line">                ptr += <span class="number">50</span></span><br><span class="line">                <span class="keyword">yield</span> out[np.newaxis]</span><br><span class="line"></span><br><span class="line">        predictions = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在循环外部初始化处理帧数的计数器</span></span><br><span class="line">        processed_frames_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> inp <span class="keyword">in</span> input_iterator():</span><br><span class="line">            single_frame_pred, all_frames_pred = <span class="variable language_">self</span>.predict_raw(inp)</span><br><span class="line">            predictions.append((single_frame_pred.numpy()[<span class="number">0</span>, <span class="number">25</span>:<span class="number">75</span>, <span class="number">0</span>],</span><br><span class="line">                                all_frames_pred.numpy()[<span class="number">0</span>, <span class="number">25</span>:<span class="number">75</span>, <span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">            processed_frames_count = <span class="built_in">min</span>(<span class="built_in">len</span>(predictions) * <span class="number">50</span>, <span class="built_in">len</span>(frames))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\r[TransNetV2] Processing video frames &#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                processed_frames_count, <span class="built_in">len</span>(frames)</span><br><span class="line">            ), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 确保即使视频帧数少于一个批次，也会打印最终的换行符</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(frames) &gt; <span class="number">0</span>:  <span class="comment"># 只有在有帧的情况下才打印换行，避免空视频也打印</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        single_frame_pred_list = [single_ <span class="keyword">for</span> single_, all_ <span class="keyword">in</span> predictions]</span><br><span class="line">        all_frames_pred_list = [all_ <span class="keyword">for</span> single_, all_ <span class="keyword">in</span> predictions]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> single_frame_pred_list:  <span class="comment"># 如果 predictions 为空 (例如，视频帧数非常少)</span></span><br><span class="line">            <span class="comment"># 根据 frames 的长度创建一个全零的预测数组</span></span><br><span class="line">            <span class="comment"># 这确保了即使没有通过迭代器处理任何内容，也会返回正确形状的数组</span></span><br><span class="line">            <span class="comment"># （尽管对于非常短的视频，这可能仍然不是理想的，但至少避免了 concatenate 空列表的错误）</span></span><br><span class="line">            <span class="built_in">print</span>(</span><br><span class="line">                <span class="string">f&quot;[TransNetV2 WARNING] No predictions generated from input_iterator for a video of length <span class="subst">&#123;<span class="built_in">len</span>(frames)&#125;</span>. Returning zeros.&quot;</span>,</span><br><span class="line">                file=sys.stderr)</span><br><span class="line">            empty_preds_shape = (<span class="built_in">len</span>(frames),)  <span class="comment"># 或者 (0,) 如果 len(frames) 是 0</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(frames) == <span class="number">0</span>:  <span class="comment"># 处理0帧视频的极端情况</span></span><br><span class="line">                <span class="keyword">return</span> np.array([]), np.array([])</span><br><span class="line">            <span class="keyword">return</span> np.zeros(empty_preds_shape, dtype=np.float32), np.zeros(empty_preds_shape, dtype=np.float32)</span><br><span class="line"></span><br><span class="line">        single_frame_pred_concatenated = np.concatenate(single_frame_pred_list)</span><br><span class="line">        all_frames_pred_concatenated = np.concatenate(all_frames_pred_list)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> single_frame_pred_concatenated[:<span class="built_in">len</span>(frames)], all_frames_pred_concatenated[</span><br><span class="line">                                                             :<span class="built_in">len</span>(frames)]  <span class="comment"># remove extra padded frames</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict_video</span>(<span class="params">self, video_fn: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">import</span> ffmpeg</span><br><span class="line">        <span class="keyword">except</span> ModuleNotFoundError:</span><br><span class="line">            <span class="keyword">raise</span> ModuleNotFoundError(<span class="string">&quot;For `predict_video` function `ffmpeg` needs to be installed in order to extract &quot;</span></span><br><span class="line">                                      <span class="string">&quot;individual frames from video file. Install `ffmpeg` command line tool and then &quot;</span></span><br><span class="line">                                      <span class="string">&quot;install python wrapper by `pip install ffmpeg-python`.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[TransNetV2] Extracting frames from &#123;&#125;&quot;</span>.<span class="built_in">format</span>(video_fn))</span><br><span class="line">        video_stream, err = <span class="literal">None</span>, <span class="literal">None</span>  <span class="comment"># Initialize</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            process = (</span><br><span class="line">                ffmpeg</span><br><span class="line">                .<span class="built_in">input</span>(video_fn)</span><br><span class="line">                .output(<span class="string">&quot;pipe:&quot;</span>, <span class="built_in">format</span>=<span class="string">&quot;rawvideo&quot;</span>, pix_fmt=<span class="string">&quot;rgb24&quot;</span>, s=<span class="string">&quot;48x27&quot;</span>)</span><br><span class="line">                .run_async(pipe_stdout=<span class="literal">True</span>, pipe_stderr=<span class="literal">True</span>)</span><br><span class="line">            )</span><br><span class="line">            video_stream, err = process.communicate()  <span class="comment"># Get output after process finishes</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> process.returncode != <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(</span><br><span class="line">                    <span class="string">f&quot;[TransNetV2 ERROR] ffmpeg process failed for <span class="subst">&#123;os.path.basename(video_fn)&#125;</span> with exit code <span class="subst">&#123;process.returncode&#125;</span>.&quot;</span>,</span><br><span class="line">                    file=sys.stderr)</span><br><span class="line">                <span class="keyword">if</span> err:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 ERROR] ffmpeg stderr:\n<span class="subst">&#123;err.decode(errors=<span class="string">&#x27;ignore&#x27;</span>)&#125;</span>&quot;</span>, file=sys.stderr)</span><br><span class="line">                <span class="keyword">return</span> np.array([]), np.array([]), np.array([])  <span class="comment"># Return empty arrays indicating failure</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> err:  <span class="comment"># Even if return code is 0, check stderr</span></span><br><span class="line">                <span class="comment"># Not all messages on stderr are errors, but log them as warnings</span></span><br><span class="line">                <span class="comment"># Filter out common non-error messages if necessary, or log all for debugging</span></span><br><span class="line">                decoded_err = err.decode(errors=<span class="string">&#x27;ignore&#x27;</span>).strip()</span><br><span class="line">                <span class="keyword">if</span> decoded_err:  <span class="comment"># Only print if there&#x27;s actual content</span></span><br><span class="line">                    <span class="built_in">print</span>(</span><br><span class="line">                        <span class="string">f&quot;[TransNetV2 WARNING] ffmpeg stderr for <span class="subst">&#123;os.path.basename(video_fn)&#125;</span> (exit code <span class="subst">&#123;process.returncode&#125;</span>):\n<span class="subst">&#123;decoded_err&#125;</span>&quot;</span>,</span><br><span class="line">                        file=sys.stderr)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> video_stream:</span><br><span class="line">                <span class="built_in">print</span>(</span><br><span class="line">                    <span class="string">f&quot;[TransNetV2 ERROR] ffmpeg produced no video stream for <span class="subst">&#123;os.path.basename(video_fn)&#125;</span>. Cannot proceed.&quot;</span>,</span><br><span class="line">                    file=sys.stderr)</span><br><span class="line">                <span class="keyword">return</span> np.array([]), np.array([]), np.array([])  <span class="comment"># Return empty</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> ffmpeg.Error <span class="keyword">as</span> e_ffmpeg:  <span class="comment"># Catch ffmpeg&#x27;s own errors</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 ERROR] ffmpeg.Error during frame extraction for <span class="subst">&#123;os.path.basename(video_fn)&#125;</span>:&quot;</span>,</span><br><span class="line">                  file=sys.stderr)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(e_ffmpeg, <span class="string">&#x27;stderr&#x27;</span>) <span class="keyword">and</span> e_ffmpeg.stderr:</span><br><span class="line">                <span class="built_in">print</span>(e_ffmpeg.stderr.decode(errors=<span class="string">&#x27;ignore&#x27;</span>), file=sys.stderr)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">str</span>(e_ffmpeg), file=sys.stderr)</span><br><span class="line">            <span class="keyword">return</span> np.array([]), np.array([]), np.array([])  <span class="comment"># Return empty</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e_generic_ffmpeg:  <span class="comment"># Catch other potential errors during ffmpeg processing</span></span><br><span class="line">            <span class="built_in">print</span>(</span><br><span class="line">                <span class="string">f&quot;[TransNetV2 ERROR] Generic exception during ffmpeg processing for <span class="subst">&#123;os.path.basename(video_fn)&#125;</span>: <span class="subst">&#123;e_generic_ffmpeg&#125;</span>&quot;</span>,</span><br><span class="line">                file=sys.stderr)</span><br><span class="line">            <span class="keyword">return</span> np.array([]), np.array([]), np.array([])  <span class="comment"># Return empty</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> video_stream <span class="keyword">is</span> <span class="literal">None</span>:  <span class="comment"># Should have been caught above, but as a safeguard</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 ERROR] video_stream is None after ffmpeg processing for <span class="subst">&#123;os.path.basename(video_fn)&#125;</span>.&quot;</span>,</span><br><span class="line">                  file=sys.stderr)</span><br><span class="line">            <span class="keyword">return</span> np.array([]), np.array([]), np.array([])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            video = np.frombuffer(video_stream, np.uint8).reshape([-<span class="number">1</span>, <span class="number">27</span>, <span class="number">48</span>, <span class="number">3</span>])</span><br><span class="line">        <span class="keyword">except</span> ValueError <span class="keyword">as</span> e_reshape:</span><br><span class="line">            <span class="built_in">print</span>(</span><br><span class="line">                <span class="string">f&quot;[TransNetV2 ERROR] Failed to reshape video_stream for <span class="subst">&#123;os.path.basename(video_fn)&#125;</span>. Stream length: <span class="subst">&#123;<span class="built_in">len</span>(video_stream)&#125;</span>. Error: <span class="subst">&#123;e_reshape&#125;</span>&quot;</span>,</span><br><span class="line">                file=sys.stderr)</span><br><span class="line">            <span class="keyword">return</span> np.array([]), np.array([]), np.array([])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> video.shape[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(</span><br><span class="line">                <span class="string">f&quot;[TransNetV2 ERROR] Extracted 0 frames from <span class="subst">&#123;os.path.basename(video_fn)&#125;</span> after ffmpeg. Cannot proceed.&quot;</span>,</span><br><span class="line">                file=sys.stderr)</span><br><span class="line">            <span class="keyword">return</span> np.array([]), np.array([]), np.array([])  <span class="comment"># Return empty</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (video, *<span class="variable language_">self</span>.predict_frames(video))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predictions_to_scenes</span>(<span class="params">predictions: np.ndarray, threshold: <span class="built_in">float</span> = <span class="number">0.5</span></span>):</span><br><span class="line">        <span class="keyword">if</span> predictions <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> predictions.size == <span class="number">0</span>:  <span class="comment"># Handle empty or None predictions</span></span><br><span class="line">            <span class="built_in">print</span>(</span><br><span class="line">                <span class="string">&quot;[TransNetV2 DEBUG] predictions_to_scenes received empty or None predictions. Returning empty scenes.&quot;</span>,</span><br><span class="line">                file=sys.stderr)</span><br><span class="line">            <span class="keyword">return</span> np.array([], dtype=np.int32)  <span class="comment"># Return empty array of correct type</span></span><br><span class="line"></span><br><span class="line">        predictions = (predictions &gt; threshold).astype(np.uint8)</span><br><span class="line"></span><br><span class="line">        scenes = []</span><br><span class="line">        t, t_prev, start = -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, t_current_frame_pred <span class="keyword">in</span> <span class="built_in">enumerate</span>(predictions):  <span class="comment"># Renamed &#x27;t&#x27; to avoid conflict</span></span><br><span class="line">            <span class="keyword">if</span> t_prev == <span class="number">1</span> <span class="keyword">and</span> t_current_frame_pred == <span class="number">0</span>:</span><br><span class="line">                start = i</span><br><span class="line">            <span class="keyword">if</span> t_prev == <span class="number">0</span> <span class="keyword">and</span> t_current_frame_pred == <span class="number">1</span> <span class="keyword">and</span> i != <span class="number">0</span>:</span><br><span class="line">                scenes.append([start, i])</span><br><span class="line">            t_prev = t_current_frame_pred</span><br><span class="line"></span><br><span class="line">        <span class="comment"># After loop, check if the video ends in a shot (t_prev will be 0 if it ended with a transition, or 1 if it ended mid-shot)</span></span><br><span class="line">        <span class="comment"># The original logic for &#x27;if t == 0:&#x27; was based on the last prediction value.</span></span><br><span class="line">        <span class="comment"># If the last prediction was 0 (meaning it&#x27;s part of a shot that started earlier)</span></span><br><span class="line">        <span class="keyword">if</span> t_prev == <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(predictions) &gt; <span class="number">0</span>:  <span class="comment"># Ensure there was at least one prediction</span></span><br><span class="line">            <span class="comment"># If start is not the beginning of the video and a shot has started</span></span><br><span class="line">            <span class="keyword">if</span> start &lt; <span class="built_in">len</span>(predictions):  <span class="comment"># Make sure start is a valid index</span></span><br><span class="line">                scenes.append([start, <span class="built_in">len</span>(predictions) - <span class="number">1</span>])  <span class="comment"># Shot goes to the end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># just fix if all predictions are 1 (no transitions found, so one scene from start to end)</span></span><br><span class="line">        <span class="comment"># or if all predictions are 0 (also one scene from start to end, after fixing start to 0)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> scenes <span class="keyword">and</span> <span class="built_in">len</span>(predictions) &gt; <span class="number">0</span>:  <span class="comment"># If no scenes were appended and there are predictions</span></span><br><span class="line">            <span class="built_in">print</span>(</span><br><span class="line">                <span class="string">&quot;[TransNetV2 DEBUG] No scenes detected by transition logic, assuming single scene for the entire video.&quot;</span>,</span><br><span class="line">                file=sys.stderr)</span><br><span class="line">            <span class="keyword">return</span> np.array([[<span class="number">0</span>, <span class="built_in">len</span>(predictions) - <span class="number">1</span>]], dtype=np.int32)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> scenes <span class="keyword">and</span> <span class="built_in">len</span>(predictions) == <span class="number">0</span>:  <span class="comment"># If no predictions at all</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[TransNetV2 DEBUG] No predictions, returning empty scenes array.&quot;</span>, file=sys.stderr)</span><br><span class="line">            <span class="keyword">return</span> np.array([], dtype=np.int32)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> np.array(scenes, dtype=np.int32)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">visualize_predictions</span>(<span class="params">frames: np.ndarray, predictions</span>):</span><br><span class="line">        <span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> frames <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> frames.size == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[TransNetV2 WARNING] visualize_predictions received no frames. Skipping visualization.&quot;</span>,</span><br><span class="line">                  file=sys.stderr)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># Or a placeholder image</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(predictions, np.ndarray):</span><br><span class="line">            predictions = [predictions]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Filter out None or empty prediction arrays</span></span><br><span class="line">        valid_predictions = []</span><br><span class="line">        <span class="keyword">for</span> p_arr <span class="keyword">in</span> predictions:</span><br><span class="line">            <span class="keyword">if</span> p_arr <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> p_arr.size &gt; <span class="number">0</span>:</span><br><span class="line">                valid_predictions.append(p_arr)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> valid_predictions:</span><br><span class="line">            <span class="built_in">print</span>(</span><br><span class="line">                <span class="string">&quot;[TransNetV2 WARNING] visualize_predictions received no valid prediction arrays. Skipping visualization.&quot;</span>,</span><br><span class="line">                file=sys.stderr)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># Or a placeholder image</span></span><br><span class="line">        predictions = valid_predictions</span><br><span class="line"></span><br><span class="line">        ih, iw, ic = frames.shape[<span class="number">1</span>:]</span><br><span class="line">        width = <span class="number">25</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pad frames so that length of the video is divisible by width</span></span><br><span class="line">        <span class="comment"># pad frames also by len(predictions) pixels in width in order to show predictions</span></span><br><span class="line">        pad_with = width - <span class="built_in">len</span>(frames) % width <span class="keyword">if</span> <span class="built_in">len</span>(frames) % width != <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># Ensure pad_with is not negative if len(frames) is 0</span></span><br><span class="line">        pad_with = <span class="built_in">max</span>(<span class="number">0</span>, pad_with)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Pad frames, ensuring frames is not empty</span></span><br><span class="line">        <span class="keyword">if</span> frames.size &gt; <span class="number">0</span>:</span><br><span class="line">            frames = np.pad(frames, [(<span class="number">0</span>, pad_with), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="built_in">len</span>(predictions)), (<span class="number">0</span>, <span class="number">0</span>)])</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># Should not happen if caught earlier, but as a safeguard</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        predictions = [np.pad(x, (<span class="number">0</span>, pad_with)) <span class="keyword">for</span> x <span class="keyword">in</span> predictions]</span><br><span class="line">        height = <span class="built_in">len</span>(frames) // width</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> height == <span class="number">0</span> <span class="keyword">or</span> width == <span class="number">0</span>:  <span class="comment"># Avoid division by zero or empty reshape</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[TransNetV2 WARNING] Cannot create visualization due to zero height or width after padding.&quot;</span>,</span><br><span class="line">                  file=sys.stderr)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        img = frames.reshape([height, width, ih + <span class="number">1</span>, iw + <span class="built_in">len</span>(predictions), ic])</span><br><span class="line">        img = np.concatenate(np.split(</span><br><span class="line">            np.concatenate(np.split(img, height, axis=<span class="number">0</span>), axis=<span class="number">2</span>)[<span class="number">0</span>], width, axis=<span class="number">1</span>  <span class="comment"># Corrected axis for split</span></span><br><span class="line">        ), axis=<span class="number">2</span>)[<span class="number">0</span>, :-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        img = Image.fromarray(img)</span><br><span class="line">        draw = ImageDraw.Draw(img)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># iterate over all frames</span></span><br><span class="line">        <span class="keyword">for</span> i, pred_tuple <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(*predictions)):  <span class="comment"># pred_tuple contains predictions for frame i</span></span><br><span class="line">            x_base, y_base = i % width, i // width  <span class="comment"># Top-left corner of the frame in the grid</span></span><br><span class="line">            x_offset, y_offset = x_base * (iw + <span class="built_in">len</span>(predictions)) + iw, y_base * (</span><br><span class="line">                    ih + <span class="number">1</span>) + ih - <span class="number">1</span>  <span class="comment"># Bottom-right of frame content, before prediction lines</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># we can visualize multiple predictions per single frame</span></span><br><span class="line">            <span class="keyword">for</span> j, p_value <span class="keyword">in</span> <span class="built_in">enumerate</span>(pred_tuple):  <span class="comment"># j is prediction type index, p_value is its value</span></span><br><span class="line">                color = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">                <span class="comment"># Cycle through R, G, B for different prediction types</span></span><br><span class="line">                color[j % <span class="number">3</span>] = <span class="number">255</span>  <span class="comment"># Use j for color to distinguish prediction types</span></span><br><span class="line"></span><br><span class="line">                value_scaled = <span class="built_in">round</span>(p_value * (ih - <span class="number">1</span>))  <span class="comment"># Scale prediction to frame height</span></span><br><span class="line">                <span class="keyword">if</span> value_scaled != <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># Draw line upwards from the bottom edge of the frame visualization area</span></span><br><span class="line">                    draw.line((x_offset + j, y_offset, x_offset + j, y_offset - value_scaled), fill=<span class="built_in">tuple</span>(color),</span><br><span class="line">                              width=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">import</span> argparse  <span class="comment"># Already imported sys</span></span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;files&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, nargs=<span class="string">&quot;+&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;path to video files to process&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--weights&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;path to TransNet V2 weights, tries to infer the location if not specified&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--visualize&#x27;</span>, action=<span class="string">&quot;store_true&quot;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;save a png file with prediction visualization for each extracted video&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        model = TransNetV2(args.weights)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e_model_load:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 CRITICAL] Failed to load TransNetV2 model: <span class="subst">&#123;e_model_load&#125;</span>&quot;</span>, file=sys.stderr)</span><br><span class="line">        sys.exit(<span class="number">1</span>)  <span class="comment"># Exit if model fails to load</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> args.files:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 INFO] Processing file: <span class="subst">&#123;file&#125;</span>&quot;</span>, file=sys.stderr)</span><br><span class="line">        <span class="comment"># This pre-check is fine, but the calling script test_and_cut_video.py now also does pre-cleanup</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(file + <span class="string">&quot;.predictions.txt&quot;</span>) <span class="keyword">or</span> os.path.exists(file + <span class="string">&quot;.scenes.txt&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2] <span class="subst">&#123;file&#125;</span>.predictions.txt or <span class="subst">&#123;file&#125;</span>.scenes.txt already exists. &quot;</span></span><br><span class="line">                  <span class="string">f&quot;Skipping video <span class="subst">&#123;file&#125;</span>.&quot;</span>, file=sys.stderr)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            video_frames, single_frame_predictions, all_frame_predictions = \</span><br><span class="line">                model.predict_video(file)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># --- Debugging: Check outputs of predict_video ---</span></span><br><span class="line">            <span class="keyword">if</span> video_frames <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> video_frames.size == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(</span><br><span class="line">                    <span class="string">f&quot;[TransNetV2 ERROR] predict_video returned no frames for <span class="subst">&#123;os.path.basename(file)&#125;</span>. Cannot save outputs.&quot;</span>,</span><br><span class="line">                    file=sys.stderr)</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># Skip to next file</span></span><br><span class="line">            <span class="keyword">if</span> single_frame_predictions <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> single_frame_predictions.size == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(</span><br><span class="line">                    <span class="string">f&quot;[TransNetV2 ERROR] predict_video returned no single_frame_predictions for <span class="subst">&#123;os.path.basename(file)&#125;</span>. Cannot save outputs.&quot;</span>,</span><br><span class="line">                    file=sys.stderr)</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># Skip to next file</span></span><br><span class="line">            <span class="comment"># all_frame_predictions can sometimes be legitimately empty if single_frame_predictions is also empty.</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 DEBUG] Returned from predict_video for <span class="subst">&#123;os.path.basename(file)&#125;</span>.&quot;</span>, file=sys.stderr)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 DEBUG]   video_frames shape: <span class="subst">&#123;video_frames.shape&#125;</span>&quot;</span>, file=sys.stderr)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 DEBUG]   single_frame_predictions shape: <span class="subst">&#123;single_frame_predictions.shape&#125;</span>&quot;</span>,</span><br><span class="line">                  file=sys.stderr)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 DEBUG]   all_frame_predictions shape: <span class="subst">&#123;all_frame_predictions.shape&#125;</span>&quot;</span>, file=sys.stderr)</span><br><span class="line">            <span class="comment"># --- End Debugging ---</span></span><br><span class="line"></span><br><span class="line">            predictions = np.stack([single_frame_predictions, all_frame_predictions], <span class="number">1</span>)</span><br><span class="line">            predictions_filepath = file + <span class="string">&quot;.predictions.txt&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                np.savetxt(predictions_filepath, predictions, fmt=<span class="string">&quot;%.6f&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 DEBUG] Attempted to save predictions to <span class="subst">&#123;predictions_filepath&#125;</span>&quot;</span>, file=sys.stderr)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(predictions_filepath):</span><br><span class="line">                    <span class="built_in">print</span>(</span><br><span class="line">                        <span class="string">f&quot;[TransNetV2 CRITICAL DEBUG] Saved predictions but file <span class="subst">&#123;predictions_filepath&#125;</span> does NOT exist!&quot;</span>,</span><br><span class="line">                        file=sys.stderr)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 DEBUG] File <span class="subst">&#123;predictions_filepath&#125;</span> successfully created.&quot;</span>, file=sys.stderr)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e_pred_save:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 ERROR] Exception saving predictions file <span class="subst">&#123;predictions_filepath&#125;</span>: <span class="subst">&#123;e_pred_save&#125;</span>&quot;</span>,</span><br><span class="line">                      file=sys.stderr)</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># Skip to next file if saving predictions fails</span></span><br><span class="line"></span><br><span class="line">            scenes = model.predictions_to_scenes(single_frame_predictions)</span><br><span class="line">            <span class="built_in">print</span>(</span><br><span class="line">                <span class="string">f&quot;[TransNetV2 DEBUG] Scenes array for <span class="subst">&#123;os.path.basename(file)&#125;</span> (shape: <span class="subst">&#123;scenes.shape <span class="keyword">if</span> scenes <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&#x27;None&#x27;</span>&#125;</span>):\n<span class="subst">&#123;scenes&#125;</span>&quot;</span>,</span><br><span class="line">                file=sys.stderr)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> scenes <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> scenes.size == <span class="number">0</span>:  <span class="comment"># Check if scenes array is empty</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 WARNING] Scenes array is empty or None for <span class="subst">&#123;os.path.basename(file)&#125;</span>. &quot;</span></span><br><span class="line">                      <span class="string">f&quot;No .scenes.txt will be saved, or it might be empty.&quot;</span>, file=sys.stderr)</span><br><span class="line">                <span class="comment"># Depending on desired behavior, you might &#x27;continue&#x27; here or let np.savetxt handle an empty array.</span></span><br><span class="line">                <span class="comment"># np.savetxt with an empty array will create an empty file.</span></span><br><span class="line">                <span class="comment"># If an empty scenes file is problematic for the parent script, handle it here.</span></span><br><span class="line">                <span class="comment"># For now, let it try to save, which will result in an empty file if scenes is empty.</span></span><br><span class="line"></span><br><span class="line">            scenes_filepath = file + <span class="string">&quot;.scenes.txt&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                np.savetxt(scenes_filepath, scenes, fmt=<span class="string">&quot;%d&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 DEBUG] Attempted to save scenes to <span class="subst">&#123;scenes_filepath&#125;</span>&quot;</span>, file=sys.stderr)</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(scenes_filepath):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 DEBUG] File <span class="subst">&#123;scenes_filepath&#125;</span> successfully created.&quot;</span>, file=sys.stderr)</span><br><span class="line">                    <span class="comment"># Optionally, check file size or content for empty scenes</span></span><br><span class="line">                    <span class="keyword">if</span> scenes <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> scenes.size == <span class="number">0</span> <span class="keyword">and</span> os.path.getsize(scenes_filepath) == <span class="number">0</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 DEBUG] <span class="subst">&#123;scenes_filepath&#125;</span> is empty as expected for empty scenes array.&quot;</span>,</span><br><span class="line">                              file=sys.stderr)</span><br><span class="line">                    <span class="keyword">elif</span> scenes <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> scenes.size &gt; <span class="number">0</span> <span class="keyword">and</span> os.path.getsize(scenes_filepath) == <span class="number">0</span>:</span><br><span class="line">                        <span class="built_in">print</span>(</span><br><span class="line">                            <span class="string">f&quot;[TransNetV2 WARNING] <span class="subst">&#123;scenes_filepath&#125;</span> is unexpectedly empty despite non-empty scenes array.&quot;</span>,</span><br><span class="line">                            file=sys.stderr)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(</span><br><span class="line">                        <span class="string">f&quot;[TransNetV2 CRITICAL DEBUG] Saved scenes but file <span class="subst">&#123;scenes_filepath&#125;</span> does NOT exist afterwards!&quot;</span>,</span><br><span class="line">                        file=sys.stderr)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e_save:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 ERROR] Exception during np.savetxt for .scenes.txt (<span class="subst">&#123;scenes_filepath&#125;</span>): <span class="subst">&#123;e_save&#125;</span>&quot;</span>,</span><br><span class="line">                      file=sys.stderr)</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># Skip to next file if saving scenes fails</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> args.visualize:</span><br><span class="line">                vis_filepath = file + <span class="string">&quot;.vis.png&quot;</span></span><br><span class="line">                <span class="keyword">if</span> os.path.exists(vis_filepath):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2] <span class="subst">&#123;vis_filepath&#125;</span> already exists. &quot;</span></span><br><span class="line">                          <span class="string">f&quot;Skipping visualization of video <span class="subst">&#123;file&#125;</span>.&quot;</span>, file=sys.stderr)</span><br><span class="line">                    <span class="comment"># continue # This continue was inside the loop for &#x27;file in args.files&#x27;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 DEBUG] Attempting to visualize predictions for <span class="subst">&#123;os.path.basename(file)&#125;</span>&quot;</span>,</span><br><span class="line">                          file=sys.stderr)</span><br><span class="line">                    pil_image = model.visualize_predictions(</span><br><span class="line">                        video_frames, predictions=(single_frame_predictions, all_frame_predictions))</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> pil_image:</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            pil_image.save(vis_filepath)</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 DEBUG] Saved visualization to <span class="subst">&#123;vis_filepath&#125;</span>&quot;</span>, file=sys.stderr)</span><br><span class="line">                        <span class="keyword">except</span> Exception <span class="keyword">as</span> e_vis_save:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 ERROR] Exception saving visualization <span class="subst">&#123;vis_filepath&#125;</span>: <span class="subst">&#123;e_vis_save&#125;</span>&quot;</span>,</span><br><span class="line">                                  file=sys.stderr)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 WARNING] Visualization not generated for <span class="subst">&#123;os.path.basename(file)&#125;</span>.&quot;</span>,</span><br><span class="line">                              file=sys.stderr)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e_video_processing:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[TransNetV2 ERROR] Unhandled exception during processing of video <span class="subst">&#123;file&#125;</span>: <span class="subst">&#123;e_video_processing&#125;</span>&quot;</span>,</span><br><span class="line">                  file=sys.stderr)</span><br><span class="line">            <span class="comment"># Optionally, re-raise or sys.exit(1) if this should halt the script</span></span><br><span class="line">            <span class="comment"># For now, it will just print the error and attempt the next file.</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[TransNetV2 INFO] Finished processing all files.&quot;</span>, file=sys.stderr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="调用推理脚本处理视频">调用推理脚本处理视频</h3><ul><li>benchmark</li></ul><p><img src="/2025/06/09/TransNetV2-model-use/model-benchmark.png" class="lazyload placeholder" data-srcset="/2025/06/09/TransNetV2-model-use/model-benchmark.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>处理输入视频为单一场景 检测视频转场并分割</li></ul><blockquote><p>自动跳过切割后视频前后500ms 去除转场动画</p></blockquote> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2025/6/7 19:00  # 修改为实际时间</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(Clara)</span></span><br><span class="line"><span class="string">Version:  V 1.4 # 版本更新: 修正 parse_scenes_file 函数以正确解析场景文件格式</span></span><br><span class="line"><span class="string">File:     test_and_cut_video.py</span></span><br><span class="line"><span class="string">date:     2025/6/7 # 修改为实际日期</span></span><br><span class="line"><span class="string">Describe: Write during the python at Tianjin</span></span><br><span class="line"><span class="string">GitHub link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">Blog link: https://caozhaoqi.github.io</span></span><br><span class="line"><span class="string">WeChat Official Account: 码间拾遗（Code Snippets）</span></span><br><span class="line"><span class="string">Power by macOS on Mac mini m4(2024)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> cv2  <span class="comment"># For getting total frames</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path  <span class="comment"># 用于更方便地处理路径</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm  <span class="comment"># 用于进度条</span></span><br><span class="line"><span class="keyword">import</span> shutil  <span class="comment"># 用于移动文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 配置日志 ---</span></span><br><span class="line">logging.basicConfig(level=logging.INFO,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s&#x27;</span>,</span><br><span class="line">                    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持的视频文件扩展名</span></span><br><span class="line">SUPPORTED_VIDEO_EXTENSIONS = [<span class="string">&#x27;.mp4&#x27;</span>, <span class="string">&#x27;.avi&#x27;</span>, <span class="string">&#x27;.mov&#x27;</span>, <span class="string">&#x27;.mkv&#x27;</span>, <span class="string">&#x27;.flv&#x27;</span>, <span class="string">&#x27;.wmv&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_video_files</span>(<span class="params">input_dir, output_dir_to_skip=<span class="literal">None</span></span>):  <span class="comment"># 增加一个可选参数</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recursively finds all video files in the given directory,</span></span><br><span class="line"><span class="string">    optionally skipping a specified output directory.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    video_files = []</span><br><span class="line">    logger.info(<span class="string">f&quot;Searching for video files in: <span class="subst">&#123;input_dir&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 规范化 output_dir_to_skip 以进行可靠的路径比较</span></span><br><span class="line">    normalized_output_skip_path = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> output_dir_to_skip:</span><br><span class="line">        normalized_output_skip_path = os.path.normpath(os.path.abspath(output_dir_to_skip))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(input_dir):</span><br><span class="line">        current_root_abs = os.path.normpath(os.path.abspath(root))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果当前遍历的目录是输出目录或其子目录，则跳过</span></span><br><span class="line">        <span class="keyword">if</span> normalized_output_skip_path <span class="keyword">and</span> current_root_abs.startswith(normalized_output_skip_path):</span><br><span class="line">            logger.info(<span class="string">f&quot;Skipping scan of output directory: <span class="subst">&#123;root&#125;</span>&quot;</span>)</span><br><span class="line">            dirs[:] = []  <span class="comment"># 清空 dirs 列表，阻止 os.walk 进入此目录的子目录</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="comment"># 过滤掉 macOS 的 ._* 文件和其他以点开头的隐藏文件</span></span><br><span class="line">            <span class="keyword">if</span> file.startswith(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(file.lower().endswith(ext) <span class="keyword">for</span> ext <span class="keyword">in</span> SUPPORTED_VIDEO_EXTENSIONS):</span><br><span class="line">                video_files.append(os.path.join(root, file))</span><br><span class="line">    logger.info(<span class="string">f&quot;Found <span class="subst">&#123;<span class="built_in">len</span>(video_files)&#125;</span> video file(s).&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> video_files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_transnet_inference</span>(<span class="params">video_path, transnet_script_path, model_dir, working_directory=<span class="string">&quot;.&quot;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Runs TransNetV2 inference to get shot boundaries.</span></span><br><span class="line"><span class="string">    Returns the path to the &#x27;.scenes.txt&#x27; file located in the working_directory.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    logger.info(<span class="string">f&quot;Running TransNetV2 inference on: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">    video_filename = os.path.basename(video_path)  <span class="comment"># e.g., &quot;myvideo.mp4&quot;</span></span><br><span class="line">    base_name = os.path.splitext(video_filename)[<span class="number">0</span>]  <span class="comment"># e.g., &quot;myvideo&quot; (for target filename in working_dir)</span></span><br><span class="line">    original_video_dir = os.path.dirname(video_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- Pre-cleanup: 尝试删除原始视频目录中与该视频相关的旧输出文件 ---</span></span><br><span class="line">    <span class="comment"># This should target the names transnetv2.py actually creates</span></span><br><span class="line">    files_to_pre_cleanup = [</span><br><span class="line">        video_path + <span class="string">&quot;.scenes.txt&quot;</span>,</span><br><span class="line">        video_path + <span class="string">&quot;.predictions.txt&quot;</span>,</span><br><span class="line">        video_path + <span class="string">&quot;.vis.png&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> old_file_path <span class="keyword">in</span> files_to_pre_cleanup:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(old_file_path):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.remove(old_file_path)</span><br><span class="line">                logger.info(<span class="string">f&quot;Pre-emptively removed old file: <span class="subst">&#123;old_file_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">                logger.warning(<span class="string">f&quot;Could not pre-emptively remove old file <span class="subst">&#123;old_file_path&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># --- 预清理结束 ---</span></span><br><span class="line"></span><br><span class="line">    command = [</span><br><span class="line">        <span class="string">&quot;python&quot;</span>, transnet_script_path,</span><br><span class="line">        video_path,</span><br><span class="line">        <span class="string">&quot;--weights&quot;</span>, model_dir</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=working_directory)</span><br><span class="line">        stdout_bytes, stderr_bytes = process.communicate(timeout=<span class="number">3600</span>)</span><br><span class="line"></span><br><span class="line">        process_stdout = stdout_bytes.decode(errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">        process_stderr = stderr_bytes.decode(errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> process.returncode != <span class="number">0</span>:</span><br><span class="line">            logger.error(<span class="string">f&quot;TransNetV2 inference failed for <span class="subst">&#123;video_filename&#125;</span>:&quot;</span>)</span><br><span class="line">            logger.error(<span class="string">f&quot;STDOUT: <span class="subst">&#123;process_stdout&#125;</span>&quot;</span>)</span><br><span class="line">            logger.error(<span class="string">f&quot;STDERR: <span class="subst">&#123;process_stderr&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">f&quot;TransNetV2 inference successful for <span class="subst">&#123;video_filename&#125;</span> (exit code 0).&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> process_stdout.strip():</span><br><span class="line">            logger.info(<span class="string">f&quot;TransNetV2 STDOUT for <span class="subst">&#123;video_filename&#125;</span>:\n<span class="subst">&#123;process_stdout.strip()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> process_stderr.strip():</span><br><span class="line">            logger.warning(</span><br><span class="line">                <span class="string">f&quot;TransNetV2 STDERR for <span class="subst">&#123;video_filename&#125;</span> (though exit code was 0):\n<span class="subst">&#123;process_stderr.strip()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> subprocess.TimeoutExpired:</span><br><span class="line">        logger.error(<span class="string">f&quot;TransNetV2 inference timed out for <span class="subst">&#123;video_filename&#125;</span>.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> process:</span><br><span class="line">            process.kill()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                stdout_bytes, stderr_bytes = process.communicate(timeout=<span class="number">5</span>)</span><br><span class="line">                process_stdout = stdout_bytes.decode(errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">                process_stderr = stderr_bytes.decode(errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> process_stdout.strip():</span><br><span class="line">                    logger.error(<span class="string">f&quot;STDOUT (on timeout): <span class="subst">&#123;process_stdout.strip()&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> process_stderr.strip():</span><br><span class="line">                    logger.error(<span class="string">f&quot;STDERR (on timeout): <span class="subst">&#123;process_stderr.strip()&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e_comm:</span><br><span class="line">                logger.error(<span class="string">f&quot;Error getting output after timeout kill: <span class="subst">&#123;e_comm&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;Exception during TransNetV2 inference for <span class="subst">&#123;video_filename&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- 文件查找和移动逻辑 ---</span></span><br><span class="line">    target_scenes_file_in_working_dir = os.path.join(working_directory, <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span>.scenes.txt&quot;</span>)</span><br><span class="line">    target_predictions_file_in_working_dir = os.path.join(working_directory, <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span>.predictions.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    expected_scenes_file_in_original_dir = video_path + <span class="string">&quot;.scenes.txt&quot;</span></span><br><span class="line">    expected_predictions_file_in_original_dir = video_path + <span class="string">&quot;.predictions.txt&quot;</span></span><br><span class="line"></span><br><span class="line">    scenes_file_found_path = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(target_scenes_file_in_working_dir):</span><br><span class="line">        logger.info(<span class="string">f&quot;Found scenes file directly in working directory: <span class="subst">&#123;target_scenes_file_in_working_dir&#125;</span>&quot;</span>)</span><br><span class="line">        scenes_file_found_path = target_scenes_file_in_working_dir</span><br><span class="line">    <span class="keyword">elif</span> os.path.exists(expected_scenes_file_in_original_dir):</span><br><span class="line">        logger.info(<span class="string">f&quot;Found scenes file in original video directory: <span class="subst">&#123;expected_scenes_file_in_original_dir&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            shutil.move(expected_scenes_file_in_original_dir, target_scenes_file_in_working_dir)</span><br><span class="line">            logger.info(<span class="string">f&quot;Moved scenes file to: <span class="subst">&#123;target_scenes_file_in_working_dir&#125;</span>&quot;</span>)</span><br><span class="line">            scenes_file_found_path = target_scenes_file_in_working_dir</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(expected_predictions_file_in_original_dir):</span><br><span class="line">                shutil.move(expected_predictions_file_in_original_dir, target_predictions_file_in_working_dir)</span><br><span class="line">                logger.info(<span class="string">f&quot;Moved predictions file to: <span class="subst">&#123;target_predictions_file_in_working_dir&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(</span><br><span class="line">                <span class="string">f&quot;Failed to move scenes/predictions file from &#x27;<span class="subst">&#123;expected_scenes_file_in_original_dir&#125;</span>&#x27; to &#x27;<span class="subst">&#123;target_scenes_file_in_working_dir&#125;</span>&#x27;: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logger.error(<span class="string">f&quot;Scenes file not found in working directory (<span class="subst">&#123;target_scenes_file_in_working_dir&#125;</span>) &quot;</span></span><br><span class="line">                     <span class="string">f&quot;nor in original video directory (<span class="subst">&#123;expected_scenes_file_in_original_dir&#125;</span>).&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> scenes_file_found_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_total_frames</span>(<span class="params">video_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Gets the total number of frames in a video.&quot;&quot;&quot;</span></span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">        <span class="comment"># Log OpenCV error if available (requires newer OpenCV versions for good messages)</span></span><br><span class="line">        <span class="comment"># For older versions, this might not give much info.</span></span><br><span class="line">        <span class="comment"># cv_error = cv2.getErrorMsg() if hasattr(cv2, &#x27;getErrorMsg&#x27;) else &quot;OpenCV error&quot;</span></span><br><span class="line">        <span class="comment"># logger.error(f&quot;Could not open video: &#123;video_path&#125;. OpenCV: &#123;cv_error&#125;&quot;)</span></span><br><span class="line">        logger.error(<span class="string">f&quot;Could not open video: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    total_frames = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">    cap.release()</span><br><span class="line">    <span class="keyword">return</span> total_frames</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_scenes_file</span>(<span class="params">scenes_file_path, total_frames</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Parses the .scenes.txt file which contains start and end frames for each shot,</span></span><br><span class="line"><span class="string">    one shot per line, space-separated.</span></span><br><span class="line"><span class="string">    Returns a list of (start_frame, end_frame) tuples for each shot.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(scenes_file_path):</span><br><span class="line">        logger.error(<span class="string">f&quot;Scenes file not found for parsing: <span class="subst">&#123;scenes_file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    shots = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(scenes_file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line_number, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(f, <span class="number">1</span>):</span><br><span class="line">                stripped_line = line.strip()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stripped_line:  <span class="comment"># Skip empty lines</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                parts = stripped_line.split()</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(parts) == <span class="number">2</span> <span class="keyword">and</span> parts[<span class="number">0</span>].isdigit() <span class="keyword">and</span> parts[<span class="number">1</span>].isdigit():</span><br><span class="line">                    start_frame = <span class="built_in">int</span>(parts[<span class="number">0</span>])</span><br><span class="line">                    end_frame = <span class="built_in">int</span>(parts[<span class="number">1</span>])  <span class="comment"># This is the end frame of the shot (inclusive)</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># Validate frames against total_frames</span></span><br><span class="line">                    <span class="keyword">if</span> start_frame &lt; <span class="number">0</span>:</span><br><span class="line">                        logger.warning(</span><br><span class="line">                            <span class="string">f&quot;Invalid start_frame <span class="subst">&#123;start_frame&#125;</span> &lt; 0 in <span class="subst">&#123;scenes_file_path&#125;</span> line <span class="subst">&#123;line_number&#125;</span>. Clamping to 0.&quot;</span>)</span><br><span class="line">                        start_frame = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># end_frame from TransNetV2 is inclusive and 0-indexed.</span></span><br><span class="line">                    <span class="comment"># If total_frames is N, valid frames are 0 to N-1.</span></span><br><span class="line">                    <span class="keyword">if</span> end_frame &gt;= total_frames <span class="keyword">and</span> total_frames &gt; <span class="number">0</span>:</span><br><span class="line">                        logger.warning(</span><br><span class="line">                            <span class="string">f&quot;End_frame <span class="subst">&#123;end_frame&#125;</span> from scenes file is &gt;= total_frames <span class="subst">&#123;total_frames&#125;</span> in <span class="subst">&#123;scenes_file_path&#125;</span> line <span class="subst">&#123;line_number&#125;</span>. Clamping to <span class="subst">&#123;total_frames - <span class="number">1</span>&#125;</span>.&quot;</span>)</span><br><span class="line">                        end_frame = total_frames - <span class="number">1</span></span><br><span class="line">                    <span class="keyword">elif</span> total_frames == <span class="number">0</span> <span class="keyword">and</span> end_frame &gt; <span class="number">0</span>:</span><br><span class="line">                        logger.warning(</span><br><span class="line">                            <span class="string">f&quot;Invalid end_frame <span class="subst">&#123;end_frame&#125;</span> for video with 0 total_frames in <span class="subst">&#123;scenes_file_path&#125;</span> line <span class="subst">&#123;line_number&#125;</span>. Skipping shot.&quot;</span>)</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">elif</span> total_frames == <span class="number">0</span> <span class="keyword">and</span> end_frame == <span class="number">0</span> <span class="keyword">and</span> start_frame == <span class="number">0</span>:  <span class="comment"># Special case for 0-frame video if it somehow yields a (0,0) shot</span></span><br><span class="line">                        <span class="keyword">pass</span>  <span class="comment"># Allow (0,0) for a 0-frame video if that&#x27;s a possible output</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> start_frame &gt; end_frame:</span><br><span class="line">                        logger.warning(</span><br><span class="line">                            <span class="string">f&quot;Invalid shot (start_frame <span class="subst">&#123;start_frame&#125;</span> &gt; end_frame <span class="subst">&#123;end_frame&#125;</span>) in <span class="subst">&#123;scenes_file_path&#125;</span> line <span class="subst">&#123;line_number&#125;</span>. Skipping shot.&quot;</span>)</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                    shots.append((start_frame, end_frame))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># This warning will catch lines that are not two integers.</span></span><br><span class="line">                    logger.warning(</span><br><span class="line">                        <span class="string">f&quot;Malformed line in scenes file &#x27;<span class="subst">&#123;scenes_file_path&#125;</span>&#x27; line <span class="subst">&#123;line_number&#125;</span>: &#x27;<span class="subst">&#123;stripped_line&#125;</span>&#x27;. Expected two integers separated by space.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;Error reading or parsing scenes file <span class="subst">&#123;scenes_file_path&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> shots:</span><br><span class="line">        logger.warning(</span><br><span class="line">            <span class="string">f&quot;No valid shots derived from scenes file: <span class="subst">&#123;scenes_file_path&#125;</span>. Assuming single shot for the entire video.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> total_frames &gt; <span class="number">0</span>:</span><br><span class="line">            shots.append((<span class="number">0</span>, total_frames - <span class="number">1</span>))</span><br><span class="line">        <span class="comment"># If total_frames is 0, shots will remain empty, which is correct.</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Sort shots by start frame, just in case they are not ordered in the file</span></span><br><span class="line">        shots.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line">        logger.info(</span><br><span class="line">            <span class="string">f&quot;Detected <span class="subst">&#123;<span class="built_in">len</span>(shots)&#125;</span> shots for <span class="subst">&#123;os.path.basename(scenes_file_path)&#125;</span> (start_frame, end_frame_inclusive): <span class="subst">&#123;shots&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shots</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_video_into_shots</span>(<span class="params">video_path, shots, video_output_dir, padding_ms=<span class="number">500</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Cuts the video into shots using ffmpeg based on frame numbers.</span></span><br><span class="line"><span class="string">    The start and end of each shot are REDUCED by padding_ms.</span></span><br><span class="line"><span class="string">    (Note: The &#x27;padding_ms&#x27; parameter is used here as a reduction amount).</span></span><br><span class="line"><span class="string">    Saves shots into the video_specific output directory.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    video_basename = Path(video_path).stem</span><br><span class="line">    logger.info(<span class="string">f&quot;Starting to cut <span class="subst">&#123;<span class="built_in">len</span>(shots)&#125;</span> shots for video: <span class="subst">&#123;video_basename&#125;</span>, REDUCING each end by <span class="subst">&#123;padding_ms&#125;</span>ms.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get video properties (FPS and total frames) once</span></span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">        logger.error(<span class="string">f&quot;Could not open video <span class="subst">&#123;video_path&#125;</span> for properties. Skipping cutting.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    fps = cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line">    video_total_frames = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">    cap.release()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> fps &gt; <span class="number">0</span>:</span><br><span class="line">        logger.error(<span class="string">f&quot;Could not determine FPS for <span class="subst">&#123;video_path&#125;</span>. Skipping reduction cut.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> video_total_frames == <span class="number">0</span>:</span><br><span class="line">        logger.error(<span class="string">f&quot;Video <span class="subst">&#123;video_path&#125;</span> has 0 frames. Skipping cutting.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Convert the reduction amount from milliseconds to frames</span></span><br><span class="line">    reduction_frames = <span class="built_in">round</span>(padding_ms / <span class="number">1000</span> * fps)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, (start_frame, end_frame) <span class="keyword">in</span> <span class="built_in">enumerate</span>(tqdm(shots, desc=<span class="string">f&quot;Cutting shots for <span class="subst">&#123;video_basename&#125;</span>&quot;</span>, unit=<span class="string">&quot;shot&quot;</span>)):</span><br><span class="line">        start_frame = <span class="built_in">int</span>(start_frame)</span><br><span class="line">        end_frame = <span class="built_in">int</span>(end_frame)  <span class="comment"># Inclusive end frame from parse_scenes_file</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Calculate new target start and end frames after reduction</span></span><br><span class="line">        target_start_frame = start_frame + reduction_frames</span><br><span class="line">        target_end_frame = end_frame - reduction_frames  <span class="comment"># This will also be an inclusive frame index</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Check if the shot is too short for the reduction, making it invalid</span></span><br><span class="line">        <span class="keyword">if</span> target_end_frame &lt; target_start_frame:</span><br><span class="line">            logger.warning(</span><br><span class="line">                <span class="string">f&quot;Shot <span class="subst">&#123;i + <span class="number">1</span>&#125;</span> (original: <span class="subst">&#123;start_frame&#125;</span>-<span class="subst">&#123;end_frame&#125;</span>) is too short to apply <span class="subst">&#123;padding_ms&#125;</span>ms reduction &quot;</span></span><br><span class="line">                <span class="string">f&quot;from both ends (would result in invalid segment: <span class="subst">&#123;target_start_frame&#125;</span>-<span class="subst">&#123;target_end_frame&#125;</span>). &quot;</span></span><br><span class="line">                <span class="string">f&quot;Original duration: <span class="subst">&#123;(end_frame - start_frame + <span class="number">1</span>) / fps:<span class="number">.2</span>f&#125;</span>s. Skipping this shot.&quot;</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Clamp the target frames to the video&#x27;s actual boundaries</span></span><br><span class="line">        <span class="comment"># (0 to video_total_frames - 1)</span></span><br><span class="line">        final_start_frame = <span class="built_in">max</span>(<span class="number">0</span>, target_start_frame)</span><br><span class="line">        final_start_frame = <span class="built_in">min</span>(final_start_frame, video_total_frames - <span class="number">1</span>)  <span class="comment"># Ensure start isn&#x27;t past video end</span></span><br><span class="line"></span><br><span class="line">        final_end_frame = <span class="built_in">min</span>(video_total_frames - <span class="number">1</span>, target_end_frame)</span><br><span class="line">        final_end_frame = <span class="built_in">max</span>(<span class="number">0</span>, final_end_frame)  <span class="comment"># Ensure end isn&#x27;t before video start</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Re-check validity after clamping.</span></span><br><span class="line">        <span class="comment"># This handles cases where clamping itself might make the segment invalid.</span></span><br><span class="line">        <span class="keyword">if</span> final_end_frame &lt; final_start_frame:</span><br><span class="line">            logger.warning(</span><br><span class="line">                <span class="string">f&quot;Shot <span class="subst">&#123;i + <span class="number">1</span>&#125;</span> (original: <span class="subst">&#123;start_frame&#125;</span>-<span class="subst">&#123;end_frame&#125;</span>) became invalid after reduction and clamping to video boundaries: &quot;</span></span><br><span class="line">                <span class="string">f&quot;intended reduced (<span class="subst">&#123;target_start_frame&#125;</span>-<span class="subst">&#123;target_end_frame&#125;</span>), &quot;</span></span><br><span class="line">                <span class="string">f&quot;clamped to (<span class="subst">&#123;final_start_frame&#125;</span>-<span class="subst">&#123;final_end_frame&#125;</span>). Skipping this shot.&quot;</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        output_shot_filename = <span class="string">f&quot;<span class="subst">&#123;video_basename&#125;</span>_shot_<span class="subst">&#123;i + <span class="number">1</span>:03d&#125;</span>.mp4&quot;</span></span><br><span class="line">        output_shot_path = os.path.join(video_output_dir, output_shot_filename)</span><br><span class="line"></span><br><span class="line">        logger.debug(</span><br><span class="line">            <span class="string">f&quot;Preparing to cut shot <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>: original (<span class="subst">&#123;start_frame&#125;</span>-<span class="subst">&#123;end_frame&#125;</span>), &quot;</span></span><br><span class="line">            <span class="string">f&quot;target reduced frames (<span class="subst">&#123;final_start_frame&#125;</span>-<span class="subst">&#123;final_end_frame&#125;</span>) -&gt; <span class="subst">&#123;output_shot_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        ffmpeg_command = [</span><br><span class="line">            <span class="string">&quot;ffmpeg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-loglevel&quot;</span>, <span class="string">&quot;error&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-i&quot;</span>, video_path,</span><br><span class="line">            <span class="string">&quot;-vf&quot;</span>, <span class="string">f&quot;select=&#x27;between(n,<span class="subst">&#123;final_start_frame&#125;</span>,<span class="subst">&#123;final_end_frame&#125;</span>)&#x27;,setpts=PTS-STARTPTS&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-af&quot;</span>, <span class="string">f&quot;aselect=&#x27;between(n,<span class="subst">&#123;final_start_frame&#125;</span>,<span class="subst">&#123;final_end_frame&#125;</span>)&#x27;,asetpts=PTS-STARTPTS&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-c:v&quot;</span>, <span class="string">&quot;libx264&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-preset&quot;</span>, <span class="string">&quot;ultrafast&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-crf&quot;</span>, <span class="string">&quot;23&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-c:a&quot;</span>, <span class="string">&quot;aac&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-y&quot;</span>,  <span class="comment"># Overwrite output files without asking</span></span><br><span class="line">            output_shot_path</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            process = subprocess.Popen(ffmpeg_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">            stdout_bytes, stderr_bytes = process.communicate(timeout=<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">            stdout = stdout_bytes.decode(errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">            stderr = stderr_bytes.decode(errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> process.returncode != <span class="number">0</span>:</span><br><span class="line">                logger.error(<span class="string">f&quot;ffmpeg failed for shot <span class="subst">&#123;output_shot_filename&#125;</span>:&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> stderr.strip(): logger.error(<span class="string">f&quot;FFMPEG STDERR: <span class="subst">&#123;stderr.strip()&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> stdout.strip(): logger.error(<span class="string">f&quot;FFMPEG STDOUT: <span class="subst">&#123;stdout.strip()&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logger.info(<span class="string">f&quot;Successfully created <span class="subst">&#123;output_shot_filename&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> subprocess.TimeoutExpired:</span><br><span class="line">            logger.error(<span class="string">f&quot;ffmpeg timed out for shot <span class="subst">&#123;output_shot_filename&#125;</span>.&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> process:</span><br><span class="line">                process.kill()</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    stdout_bytes, stderr_bytes = process.communicate(timeout=<span class="number">5</span>)</span><br><span class="line">                    stdout = stdout_bytes.decode(errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">                    stderr = stderr_bytes.decode(errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">                    <span class="keyword">if</span> stderr.strip(): logger.error(<span class="string">f&quot;FFMPEG STDERR (on timeout kill): <span class="subst">&#123;stderr.strip()&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> stdout.strip(): logger.error(<span class="string">f&quot;FFMPEG STDOUT (on timeout kill): <span class="subst">&#123;stdout.strip()&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e_comm_kill:</span><br><span class="line">                    logger.error(<span class="string">f&quot;Error getting output after ffmpeg timeout kill: <span class="subst">&#123;e_comm_kill&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(<span class="string">f&quot;Exception during ffmpeg processing for shot <span class="subst">&#123;output_shot_filename&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">f&quot;Finished cutting <span class="subst">&#123;<span class="built_in">len</span>(shots)&#125;</span> shots for video: <span class="subst">&#123;video_basename&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        description=<span class="string">&quot;Process videos using TransNetV2 to detect shot boundaries and cut the videos into shots.&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;input_source&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Path to a directory containing video files to process.&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--transnet_script&quot;</span>, required=<span class="literal">False</span>, default=<span class="string">&quot;inference/transnetv2.py&quot;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;Path to the transnetv2.py script.&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--model_dir&quot;</span>, required=<span class="literal">False</span>, default=<span class="string">&quot;inference/transnetv2-weights&quot;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;Path to the TransNetV2 model directory.&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--output_dir&quot;</span>, required=<span class="literal">False</span>, default=<span class="string">&quot;./r&quot;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;Base directory to output processed videos.  A subdirectory will be created for each video.&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--log_file&quot;</span>, required=<span class="literal">False</span>, default=<span class="string">&quot;my_processing_log.txt&quot;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;Path to the log file.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- 日志文件设置 ---</span></span><br><span class="line">    log_file_path = args.log_file</span><br><span class="line">    log_dir = os.path.dirname(log_file_path)  <span class="comment"># 获取日志文件所在目录</span></span><br><span class="line">    <span class="keyword">if</span> log_dir <span class="keyword">and</span> <span class="keyword">not</span> os.path.exists(log_dir):</span><br><span class="line">        os.makedirs(log_dir)  <span class="comment"># 如果日志目录不存在，则创建它</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个file handler，将日志写入文件</span></span><br><span class="line">    file_handler = logging.FileHandler(log_file_path, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    file_handler.setLevel(logging.INFO)  <span class="comment"># 设置日志级别为INFO</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个formatter并将其添加到handler</span></span><br><span class="line">    formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s&#x27;</span>,</span><br><span class="line">                                  datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    file_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将handler添加到logger</span></span><br><span class="line">    logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;Script started.&quot;</span>)</span><br><span class="line">    logger.info(<span class="string">f&quot;Arguments: <span class="subst">&#123;args&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    input_source = args.input_source</span><br><span class="line">    transnet_script = args.transnet_script</span><br><span class="line">    model_dir = args.model_dir</span><br><span class="line">    output_dir = args.output_dir</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确保输出目录存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">        os.makedirs(output_dir)</span><br><span class="line">        logger.info(<span class="string">f&quot;Created base output directory: <span class="subst">&#123;output_dir&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logger.info(<span class="string">f&quot;Base output directory already exists: <span class="subst">&#123;output_dir&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    video_files = find_video_files(input_source, output_dir_to_skip=output_dir)  <span class="comment"># 排除 output_dir</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> video_files:</span><br><span class="line">        logger.warning(<span class="string">&quot;No video files found to process.&quot;</span>)</span><br><span class="line">        logger.info(<span class="string">&quot;All processing complete.&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">f&quot;Processing <span class="subst">&#123;<span class="built_in">len</span>(video_files)&#125;</span> video(s)...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> video_path <span class="keyword">in</span> video_files:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># --- 视频特定处理开始 ---</span></span><br><span class="line">            video_basename = Path(video_path).stem</span><br><span class="line">            logger.info(<span class="string">f&quot;--- Starting processing for video: <span class="subst">&#123;video_path&#125;</span> ---&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 为当前视频创建处理目录和输出目录</span></span><br><span class="line">            video_output_dir = os.path.join(output_dir, video_basename)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(video_output_dir):</span><br><span class="line">                os.makedirs(video_output_dir)</span><br><span class="line">                logger.info(<span class="string">f&quot;Created processing/output directory for this video: <span class="subst">&#123;video_output_dir&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logger.info(<span class="string">f&quot;Processing/output directory already exists: <span class="subst">&#123;video_output_dir&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            total_frames = get_total_frames(video_path)</span><br><span class="line">            <span class="keyword">if</span> total_frames <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> total_frames == <span class="number">0</span>:</span><br><span class="line">                logger.error(</span><br><span class="line">                    <span class="string">f&quot;Cannot process video <span class="subst">&#123;video_path&#125;</span> as it has no frames or could not be read. Skipping.&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># Skip to the next video</span></span><br><span class="line">            logger.info(<span class="string">f&quot;Total frames in <span class="subst">&#123;os.path.basename(video_path)&#125;</span>: <span class="subst">&#123;total_frames&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 运行 TransNetV2 推理</span></span><br><span class="line">            scenes_file = run_transnet_inference(video_path, transnet_script, model_dir,</span><br><span class="line">                                                 working_directory=video_output_dir)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> scenes_file <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                logger.error(<span class="string">f&quot;Failed to get scenes file for <span class="subst">&#123;video_path&#125;</span>. Skipping this video.&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># Skip to the next video</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 解析场景文件</span></span><br><span class="line">            shots = parse_scenes_file(scenes_file, total_frames)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将视频剪切成镜头</span></span><br><span class="line">            cut_video_into_shots(video_path, shots, video_output_dir, padding_ms=<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(<span class="string">f&quot;An unexpected error occurred while processing <span class="subst">&#123;video_path&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;All processing complete.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>检测输出结果</li></ul><p><img src="/2025/06/09/TransNetV2-model-use/test-result.png" class="lazyload placeholder" data-srcset="/2025/06/09/TransNetV2-model-use/test-result.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="See">See</h2><ul><li>1.<a href="https://arxiv.org/pdf/2008.04838">https://arxiv.org/pdf/2008.04838</a></li><li>2.<a href="https://github.com/soCzech/TransNetV2/tree/master">https://github.com/soCzech/TransNetV2/tree/master</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>场景检测性能优化方向与测试方法</title>
      <link href="/2025/05/30/scene-detect-benchmark/"/>
      <url>/2025/05/30/scene-detect-benchmark/</url>
      
        <content type="html"><![CDATA[<h1>场景检测性能优化方向与测试方法</h1><h2 id="1-引言">1. 引言</h2><p>本指南旨在提供一套系统化的方法，用于验证和分析视频处理项目的效率，特别是针对场景检测模块的性能。通过收集关键性能指标 (KPIs)<br>和剖析代码执行，我们可以识别性能瓶颈，并为后续的代码优化提供数据支持。</p><h2 id="2-准备工作">2. 准备工作</h2><h3 id="2-1-定义关键性能指标-KPIs">2.1. 定义关键性能指标 (KPIs)</h3><p>在开始测试前，明确需要衡量的性能指标：</p><ul><li>总处理时间 (End-to-End Time)*衡量单个视频从场景检测开始到结束的总耗时。</li><li>场景检测函数耗时<code>detect_scenes</code> 函数的精确执行时间。</li><li>CPU 使用率场景检测过程中的平均和峰值 CPU 使用率。</li><li>内存使用量 场景检测过程中的峰值和平均内存消耗。</li><li>GPU 使用率 (若启用)：GPU 计算单元和显存的使用率。</li><li>检测到的场景数作为检测结果的一个基本衡量。</li><li>检测时使用的帧率记录 <code>detect_scenes</code> 内部实际使用的视频帧率。</li></ul><h3 id="2-2-选择测试数据集">2.2. 选择测试数据集</h3><ul><li>多样性 准备一组包含不同特征的视频文件：<ul><li>不同分辨率 (例如：720p, 1080p, 4K)。</li><li>不同编码格式 (例如：H.264, HEVC)。</li><li>不同时长 (例如：短视频 &lt; 1分钟，中等视频 5-10分钟，长视频 &gt; 30分钟)。</li><li>不同场景复杂度 (例如：场景切换频繁的预告片，场景切换较少的讲座视频)。</li></ul></li><li>代表性 测试视频应能代表项目实际应用中常见的视频类型。</li><li>可重复性 使用固定的视频集进行所有测试，以便比较不同优化版本的效果。</li></ul><h3 id="2-3-搭建测试环境">2.3. 搭建测试环境</h3><ul><li>硬件一致性 所有基准测试应在同一台机器上进行，以消除硬件差异。记录测试机器的 CPU、内存、GPU型号、磁盘类型等规格。</li><li>软件环境一致性 确保 Python 版本、操作系统以及所有相关依赖库 (如 PySceneDetect, OpenCV, FFmpeg) 的版本在测试期间保持不变。可以从<br><code>requirements.txt</code> 文件中获取依赖列表。</li><li>环境隔离 测试时，尽量关闭其他不必要的应用程序，以减少对测试结果的干扰。</li></ul><h3 id="2-4-配置测试参数">2.4. 配置测试参数</h3><ul><li><code>config.ini</code> 基准测试脚本会加载此文件。确保其中的路径配置 (如 <code>ffmpeg_path</code>, <code>ffprobe_path</code>) 和默认的检测器参数是你想要测试的基础配置。</li><li>测试脚本内配置 <code>benchmark_scene_detector.py</code> 脚本允许定义多种测试配置 ( <code>configurations_to_test</code> 列表)，例如：<ul><li>CPU vs GPU 解码。</li><li>使用不同的检测器组合 (例如，仅 <code>ContentDetector</code> vs <code>MultiDetector</code> 全启用)。</li><li>不同的检测器参数 (例如，不同的 <code>threshold</code> 或 <code>min_scene_len_frames</code>)。</li></ul></li></ul><h2 id="3-测试执行">3. 测试执行</h2><h3 id="3-1-测试脚本：benchmark-scene-detector-py">3.1. 测试脚本：<code>benchmark_scene_detector.py</code></h3><ul><li>基础库安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install memory-profiler psutil snakeviz # snakeviz 用于可视化 cProfile 结果</span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li>基准测试脚本运行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python src/video/benchmark_scene_detector.py</span><br></pre></td></tr></table></figure><ul><li>性能分析</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m pstats profiling_results/profile_your_test_video1_Config_Default_CPU.prof</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snakeviz profiling_results/profile_your_test_video1_Config_Default_CPU.prof</span><br></pre></td></tr></table></figure><h3 id="3-2-性能剖析-Profiling">3.2. 性能剖析 (Profiling)</h3><ul><li>当测试配置中 <code>&quot;profile&quot;: True</code> 时，脚本会为该次运行生成一个 <code>.prof</code> 文件，保存在 <code>profiling_results</code> 目录下。</li><li>这些文件包含了函数调用次数、每次调用的耗时、累计耗时等详细信息。</li></ul><h3 id="3-3-资源监控">3.3. 资源监控</h3><ul><li>手动监控 在测试脚本运行时，使用操作系统自带的工具（如 Windows 的任务管理器，Linux 的 <code>top</code>/<code>htop</code>，macOS 的活动监视器）观察<br>CPU 和内存的实时使用情况。</li><li>GPU 监控 如果测试 GPU 加速，使用特定于 GPU 厂商的工具（如 NVIDIA 的 <code>nvidia-smi</code>）监控 GPU 利用率和显存使用。</li><li>脚本内监控 (可选) 可以修改 <code>benchmark_scene_detector.py</code>，使用 <code>psutil</code> 库在调用 <code>detect_scenes</code> 前后记录进程的 CPU<br>和内存快照，以获得更精确的数据。</li></ul><h3 id="3-4-比较耗时：">3.4 比较耗时：</h3><ul><li>对比 CPU 和 GPU 配置下的耗时，评估 GPU 加速的实际效果。从示例输出来看，对于“建筑家园-02.mp4”，使用 GPU (<br>Config_Default_GPU) 将处理时间从约 15.1 秒降低到了约 8.6 秒，有显著提升。</li><li>对比不同检测器组合或参数下的耗时。例如，Config_ContentDetectorOnly_CPU (仅使用 ContentDetector) 的耗时约为 5.4 秒，远快于使用<br>MultiDetector 的 Config_Default_CPU (15.1 秒)，但检测到的场景数也从 12 个减少到了 9 个。这需要在速度和检测全面性之间进行权衡。</li><li>观察不同特性视频（如时长、分辨率）对处理时间的影响（需要更多测试视频样本来分析此项）。4.2. 分析性能剖析 (.prof) 文件使用<br>Python 的 pstats 模块或 snakeviz 工具来分析 .prof 文件。使用 pstats (命令行)：</li></ul><h2 id="4-结果分析">4. 结果分析</h2><h3 id="4-1-分析基准测试日志">4.1. 分析基准测试日志</h3><blockquote><p>脚本执行完毕后，会打印一个总结报告，显示每个视频在不同配置下的处理时长和检测到的场景数。</p></blockquote><h4 id="在-pstats-交互式-shell-中，常用命令：">在 pstats 交互式 shell 中，常用命令：</h4><ul><li>sort cumulative: 按累计耗时排序。</li><li>stats 20: 显示耗时最多的前 20 个函数。</li><li>callers function_name: 查看哪些函数调用了 function_name。</li><li>callees function_name: 查看 function_name 调用了哪些函数。</li></ul><h4 id="使用-snakeviz-Web-界面，推荐-：">使用 snakeviz (Web 界面，推荐)：</h4><ul><li><p>比较耗时</p><ul><li>对比 CPU 和 GPU 配置下的耗时，评估 GPU 加速的实际效果。从示例输出来看，对于“建筑家园-02.mp4”，使用 GPU (<br><code>Config_Default_GPU</code>) 将处理时间从约 15.1 秒降低到了约 8.6 秒，有显著提升。</li><li>对比不同检测器组合或参数下的耗时。例如，<code>Config_ContentDetectorOnly_CPU</code> (仅使用 ContentDetector) 的耗时约为 5.4<br>秒，远快于使用 <code>MultiDetector</code> 的 <code>Config_Default_CPU</code> (15.1 秒)，但检测到的场景数也从 12 个减少到了 9<br>个。这需要在速度和检测全面性之间进行权衡。</li><li>观察不同特性视频（如时长、分辨率）对处理时间的影响（需要更多测试视频样本来分析此项）。</li></ul></li><li><p>比较耗时 (Updated Interpretation based on new logs)</p><ul><li>对比 CPU 和 GPU 配置下的耗时，评估 GPU 加速的实际效果。从最新的示例输出来看，对于“建筑家园-02.mp4” (一个60fps的视频):<ul><li><code>Config_Default_CPU</code> (MultiDetector, CPU decode): 433.73 秒</li><li><code>Config_Default_GPU</code> (MultiDetector, GPU decode requested): 411.56 秒</li><li>观察: 在这个特定的测试中 (macOS, <code>VideoStreamCv2</code> 被用作回退)，请求 GPU 解码相比纯 CPU 解码略有性能提升 (约<br>22 秒，或 5% 的提升)。这表明在 macOS 上，即使 PySceneDetect 回退到 <code>VideoStreamCv2</code>，底层的 OpenCV 和<br>AVFoundation/VideoToolbox 可能仍然利用了一些硬件加速。然而，这与之前日志中在非 macOS 环境下使用<br><code>VideoStreamCv2Cuda</code> 可能带来的更显著提升有所不同。文档中应指出，GPU 加速的效果高度依赖于操作系统、OpenCV<br>的编译选项、PySceneDetect 的后端选择以及具体的 GPU 硬件。</li></ul></li><li>对比不同检测器组合或参数下的耗时。例如:<ul><li><code>Config_ContentDetectorOnly_CPU</code> (仅使用 ContentDetector, CPU decode): 400.30 秒</li><li>观察: 仅使用 <code>ContentDetector</code> 仍然是最快的配置，比使用 <code>MultiDetector</code> 的 CPU 配置快了约 33 秒。但检测到的场景数从<br>214 个减少到了 164 个。这再次强调了在速度和检测全面性/准确性之间的权衡。</li></ul></li><li>重要提示:<ul><li>日志中出现 <code>Backend None not available. Trying another backend: opencv</code>，并且在请求 GPU 解码时，最终仍然是<br><code>opened with VideoStreamCv2</code>。这表明在当前的 macOS 测试环境下，<code>VideoStreamCv2Cuda</code> (如果期望使用的话)<br>并未被成功加载或使用，PySceneDetect 回退到了标准的 OpenCV 后端 (<code>VideoStreamCv2</code>)。文档应该提及这一点，并建议用户检查其<br>PySceneDetect 和 OpenCV (包括 CUDA 支持) 的安装，尤其是在非 macOS 环境下期望使用 NVIDIA GPU 加速时。</li><li>日志中出现 <code>min_delta_hsv is deprecated, use min_content_val instead.</code> 这是来自 <code>AdaptiveDetector</code><br>的一个警告。虽然不影响基准测试的耗时记录，但在文档中或代码注释中提及，并建议更新 <code>config.ini</code> 或<br><code>AdaptiveDetector</code> 的参数以使用新的 <code>min_content_val</code> 是一个好做法，以保持与库更新的兼容性。</li></ul></li></ul></li></ul><p>macOS性能测试结果解释:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">/Users/zg/PycharmProjects/scene_detect_split/.venv/bin/python /Users/zg/PycharmProjects/scene_detect_split/src/tests/benchmark_scene_detector.py </span><br><span class="line">2025-05-30 10:46:40.555 | INFO     | config.config:initialize_settings:147 - Configuration successfully loaded from: /Users/zg/PycharmProjects/scene_detect_split/src/run/config.ini</span><br><span class="line">2025-05-30 10:46:40.556 | INFO     | __main__:&lt;module&gt;:118 - Configuration loaded from: /Users/zg/PycharmProjects/scene_detect_split/src/run/config.ini</span><br><span class="line">2025-05-30 10:46:40.556 | INFO     | __main__:&lt;module&gt;:210 - </span><br><span class="line">===== Processing Video: /Volumes/shared/样例/CG渲染样例/建筑家园/建筑家园-02.mp4 =====</span><br><span class="line">2025-05-30 10:46:40.556 | INFO     | __main__:&lt;module&gt;:214 - --- Running with Configuration: Config_Default_CPU ---</span><br><span class="line">2025-05-30 10:46:40.556 | INFO     | __main__:run_detection_benchmark:50 - --- Benchmarking: 建筑家园-02.mp4 ---</span><br><span class="line">2025-05-30 10:46:40.556 | INFO     | __main__:run_detection_benchmark:51 - Detector Setup: MultiDetector</span><br><span class="line">2025-05-30 10:46:40.556 | INFO     | __main__:run_detection_benchmark:52 - Using GPU for OpenCV decode: False</span><br><span class="line">2025-05-30 10:46:40.556 | INFO     | video.scene_detector:detect_scenes:69 - [MainThread] Starting detect_scenes for &#x27;建筑家园-02.mp4&#x27;</span><br><span class="line">Backend None not available.</span><br><span class="line">Trying another backend: opencv</span><br><span class="line">2025-05-30 10:46:40.720 | INFO     | video.scene_detector:detect_scenes:99 - [MainThread] Video &#x27;建筑家园-02.mp4&#x27; opened with VideoStreamCv2.</span><br><span class="line">2025-05-30 10:46:40.720 | INFO     | video.scene_detector:detect_scenes:126 - [MainThread] Configured detector type: MultiDetector for &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">2025-05-30 10:46:40.721 | INFO     | video.scene_detector:detect_scenes:133 - [MainThread] Effective global min_scene_len (frames) for detectors: 15 for &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">min_delta_hsv is deprecated, use min_content_val instead.</span><br><span class="line">2025-05-30 10:53:54.141 | INFO     | video.scene_detector:detect_scenes:302 - [MainThread] SceneManager detected 214 scenes in &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">2025-05-30 10:53:54.143 | INFO     | video.scene_detector:detect_scenes:334 - [MainThread] Final 214 scenes for &#x27;建筑家园-02.mp4&#x27; after adjustments.</span><br><span class="line">2025-05-30 10:53:54.296 | INFO     | __main__:run_detection_benchmark:76 - Profiling data saved to: profiling_results/profile_建筑家园_02_Config_Default_CPU.prof</span><br><span class="line">2025-05-30 10:53:54.297 | INFO     | __main__:run_detection_benchmark:83 - Video: 建筑家园-02.mp4</span><br><span class="line">2025-05-30 10:53:54.297 | INFO     | __main__:run_detection_benchmark:85 - Detected Scenes: 214</span><br><span class="line">2025-05-30 10:53:54.298 | INFO     | __main__:run_detection_benchmark:86 - Detected Frame Rate: 60.00 fps</span><br><span class="line">2025-05-30 10:53:54.298 | INFO     | __main__:run_detection_benchmark:87 - Processing Time: 433.7327 seconds</span><br><span class="line">2025-05-30 10:53:54.298 | INFO     | __main__:run_detection_benchmark:90 - --- Benchmark End ---</span><br><span class="line">2025-05-30 10:53:54.298 | INFO     | __main__:&lt;module&gt;:214 - --- Running with Configuration: Config_Default_GPU ---</span><br><span class="line">2025-05-30 10:53:54.298 | INFO     | __main__:run_detection_benchmark:50 - --- Benchmarking: 建筑家园-02.mp4 ---</span><br><span class="line">2025-05-30 10:53:54.298 | INFO     | __main__:run_detection_benchmark:51 - Detector Setup: MultiDetector</span><br><span class="line">2025-05-30 10:53:54.298 | INFO     | __main__:run_detection_benchmark:52 - Using GPU for OpenCV decode: True</span><br><span class="line">2025-05-30 10:53:54.298 | INFO     | video.scene_detector:detect_scenes:69 - [MainThread] Starting detect_scenes for &#x27;建筑家园-02.mp4&#x27;</span><br><span class="line">2025-05-30 10:53:54.299 | INFO     | video.scene_detector:detect_scenes:95 - [MainThread] GPU decode (AVFoundation/VideoToolbox likely) on macOS for &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">Backend None not available.</span><br><span class="line">Trying another backend: opencv</span><br><span class="line">2025-05-30 10:53:54.381 | INFO     | video.scene_detector:detect_scenes:99 - [MainThread] Video &#x27;建筑家园-02.mp4&#x27; opened with VideoStreamCv2.</span><br><span class="line">2025-05-30 10:53:54.381 | INFO     | video.scene_detector:detect_scenes:126 - [MainThread] Configured detector type: MultiDetector for &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">2025-05-30 10:53:54.381 | INFO     | video.scene_detector:detect_scenes:133 - [MainThread] Effective global min_scene_len (frames) for detectors: 15 for &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">min_delta_hsv is deprecated, use min_content_val instead.</span><br><span class="line">2025-05-30 11:00:45.457 | INFO     | video.scene_detector:detect_scenes:302 - [MainThread] SceneManager detected 214 scenes in &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">2025-05-30 11:00:45.458 | INFO     | video.scene_detector:detect_scenes:334 - [MainThread] Final 214 scenes for &#x27;建筑家园-02.mp4&#x27; after adjustments.</span><br><span class="line">2025-05-30 11:00:45.865 | INFO     | __main__:run_detection_benchmark:76 - Profiling data saved to: profiling_results/profile_建筑家园_02_Config_Default_GPU.prof</span><br><span class="line">2025-05-30 11:00:45.865 | INFO     | __main__:run_detection_benchmark:83 - Video: 建筑家园-02.mp4</span><br><span class="line">2025-05-30 11:00:45.865 | INFO     | __main__:run_detection_benchmark:85 - Detected Scenes: 214</span><br><span class="line">2025-05-30 11:00:45.865 | INFO     | __main__:run_detection_benchmark:86 - Detected Frame Rate: 60.00 fps</span><br><span class="line">2025-05-30 11:00:45.865 | INFO     | __main__:run_detection_benchmark:87 - Processing Time: 411.5587 seconds</span><br><span class="line">2025-05-30 11:00:45.865 | INFO     | __main__:run_detection_benchmark:90 - --- Benchmark End ---</span><br><span class="line">2025-05-30 11:00:45.865 | INFO     | __main__:&lt;module&gt;:214 - --- Running with Configuration: Config_ContentDetectorOnly_CPU ---</span><br><span class="line">2025-05-30 11:00:45.865 | INFO     | __main__:run_detection_benchmark:50 - --- Benchmarking: 建筑家园-02.mp4 ---</span><br><span class="line">2025-05-30 11:00:45.865 | INFO     | __main__:run_detection_benchmark:51 - Detector Setup: ContentDetector</span><br><span class="line">2025-05-30 11:00:45.865 | INFO     | __main__:run_detection_benchmark:52 - Using GPU for OpenCV decode: False</span><br><span class="line">2025-05-30 11:00:45.865 | INFO     | video.scene_detector:detect_scenes:69 - [MainThread] Starting detect_scenes for &#x27;建筑家园-02.mp4&#x27;</span><br><span class="line">Backend None not available.</span><br><span class="line">Trying another backend: opencv</span><br><span class="line">2025-05-30 11:00:45.939 | INFO     | video.scene_detector:detect_scenes:99 - [MainThread] Video &#x27;建筑家园-02.mp4&#x27; opened with VideoStreamCv2.</span><br><span class="line">2025-05-30 11:00:45.939 | INFO     | video.scene_detector:detect_scenes:126 - [MainThread] Configured detector type: ContentDetector for &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">2025-05-30 11:00:45.939 | INFO     | video.scene_detector:detect_scenes:133 - [MainThread] Effective global min_scene_len (frames) for detectors: 15 for &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">2025-05-30 11:07:26.007 | INFO     | video.scene_detector:detect_scenes:302 - [MainThread] SceneManager detected 164 scenes in &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">2025-05-30 11:07:26.011 | INFO     | video.scene_detector:detect_scenes:334 - [MainThread] Final 164 scenes for &#x27;建筑家园-02.mp4&#x27; after adjustments.</span><br><span class="line">2025-05-30 11:07:26.170 | INFO     | __main__:run_detection_benchmark:83 - Video: 建筑家园-02.mp4</span><br><span class="line">2025-05-30 11:07:26.170 | INFO     | __main__:run_detection_benchmark:85 - Detected Scenes: 164</span><br><span class="line">2025-05-30 11:07:26.170 | INFO     | __main__:run_detection_benchmark:86 - Detected Frame Rate: 60.00 fps</span><br><span class="line">2025-05-30 11:07:26.170 | INFO     | __main__:run_detection_benchmark:87 - Processing Time: 400.2969 seconds</span><br><span class="line">2025-05-30 11:07:26.170 | INFO     | __main__:run_detection_benchmark:90 - --- Benchmark End ---</span><br><span class="line">2025-05-30 11:07:26.170 | INFO     | __main__:&lt;module&gt;:236 - </span><br><span class="line"></span><br><span class="line">===== Benchmark Summary =====</span><br><span class="line">2025-05-30 11:07:26.170 | INFO     | __main__:&lt;module&gt;:238 - </span><br><span class="line">Video: 建筑家园-02.mp4</span><br><span class="line">2025-05-30 11:07:26.170 | INFO     | __main__:&lt;module&gt;:240 -   Config: Config_Default_CPU             | Duration: 433.7327s | Scenes: 214</span><br><span class="line">2025-05-30 11:07:26.170 | INFO     | __main__:&lt;module&gt;:240 -   Config: Config_Default_GPU             | Duration: 411.5587s | Scenes: 214</span><br><span class="line">2025-05-30 11:07:26.170 | INFO     | __main__:&lt;module&gt;:240 -   Config: Config_ContentDetectorOnly_CPU | Duration: 400.2969s | Scenes: 164</span><br><span class="line">2025-05-30 11:07:26.170 | INFO     | __main__:&lt;module&gt;:242 - </span><br><span class="line">To analyze .prof files, use a tool like &#x27;snakeviz&#x27; or Python&#x27;s pstats module.</span><br><span class="line">2025-05-30 11:07:26.170 | INFO     | __main__:&lt;module&gt;:243 - Example: python -m pstats profiling_results/your_profile_file.prof</span><br><span class="line">2025-05-30 11:07:26.170 | INFO     | __main__:&lt;module&gt;:244 - Then in pstats shell: sort cumulative, stats 20</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>macOS 上的 GPU 解码:<ul><li>在 “GPU 监控” 或 “比较耗时” 部分，可以特别说明在 macOS 上，即使没有明确的 <code>VideoStreamCv2Cuda</code>，PySceneDetect 通过<br><code>VideoStreamCv2</code> 也可能间接利用 VideoToolbox/AVFoundation 进行硬件加速解码，但效果可能与专用 CUDA 后端不同。</li></ul></li><li>PySceneDetect 后端回退:<ul><li>在 “结果分析” 或 “故障排查” (如果添加此章节) 部分，解释<br><code>Backend None not available. Trying another backend: opencv</code> 日志的含义，即 PySceneDetect<br>尝试了默认后端（可能是用户指定的或库的优选）但失败，然后回退到 OpenCV。这对于理解实际使用的解码路径很重要。</li></ul></li><li>依赖库版本的重要性:<ul><li>再次强调在 “软件环境一致性” 部分，PySceneDetect、OpenCV (及其 CUDA/OpenCL 支持的编译方式)、FFmpeg<br>的版本都会显著影响性能和功能，包括硬件加速的可用性。</li></ul></li><li><code>min_delta_hsv</code> 废弃警告:<ul><li>在 “配置测试参数” 或 “结果分析” 部分，提示用户注意 PySceneDetect 的废弃警告，并及时更新其配置文件或代码以使用推荐的新参数。</li></ul></li></ul><p>通过这些补充，<code>benchmark_test.md</code> 文档将更准确地反映实际的测试情况，并为用户提供更有价值的性能分析指导。</p><h3 id="4-2-分析性能剖析-prof-文件">4.2. 分析性能剖析 (<code>.prof</code>) 文件</h3><p>使用 Python 的 <code>pstats</code> 模块或 <code>snakeviz</code> 工具来分析 <code>.prof</code> 文件。</p><ul><li>使用 <code>pstats</code> (命令行)</li><li>snakeviz 会在浏览器中打开一个交互式的火焰图或旭日图，直观地展示函数调用栈和各部分耗时。</li><li>关注点：</li><li>耗时最多的函数：这些是首要的优化目标。通常会是 PySceneDetect 库中与视频解码、帧处理以及各检测器核心算法相关的函数。</li><li>PySceneDetect 内部函数：如果瓶颈在 PySceneDetect 库内部（如特定检测器的 process_frame<br>方法，视频解码函数），优化方向可能包括调整检测器参数、选择更快的检测器、或优化视频解码方式（如验证 GPU 解码效果，尝试帧降采样）。</li><li>自定义逻辑：如果 detect_scenes 函数中自定义的逻辑部分（例如，在 scene_detector.py 中添加检测器、调整场景列表的循环）耗时较长，需要针对性优化。</li></ul><h3 id="4-3-分析资源监控数据">4.3. 分析资源监控数据</h3><h4 id="CPU-瓶颈：">CPU 瓶颈：</h4><ul><li>如果 CPU 单核或多核长时间处于高负载状态，表明计算是瓶颈。</li><li>检查是否存在某个核心远高于其他核心的情况（可能表示并行度不足或某些操作无法有效并行，尽管 detect_scenes 本身是单线程的，但其调用的<br>OpenCV 或 FFmpeg 后端可能利用多核）。</li></ul><h4 id="内存瓶颈：">内存瓶颈：</h4><ul><li>如果内存使用持续增长或达到系统上限，可能存在内存泄漏或处理大数据时内存管理不当。</li><li>PySceneDetect 通常是流式处理，但某些配置或长视频仍可能消耗较多内存。确保 video_api_obj.reset() 被正确调用。</li></ul><h4 id="GPU-瓶颈：">GPU 瓶颈：</h4><ul><li>如果启用了 GPU 加速，但 GPU 利用率低，检查驱动、CUDA/OpenCV 配置，以及数据传输到 GPU 的开销。示例输出显示 GPU 配置 (<br>Config_Default_GPU) 速度更快，表明 GPU 在此场景下可能得到了有效利用。</li><li>如果 GPU 利用率高，但性能提升不明显，可能瓶颈在其他部分（如 Python 代码本身、磁盘 I/O）。</li></ul><h2 id="5-根据分析结果改进代码-优化方向示例">5.根据分析结果改进代码 (优化方向示例)</h2><blockquote><p>基于上述分析，可以针对性地对 scene_detector.py 及相关模块进行优化：</p></blockquote><h4 id="场景检测策略优化：">场景检测策略优化：</h4><ul><li>调整检测器：根据性能和准确度需求，在 config.ini 中启用或禁用特定的检测器，或调整其参数（如 threshold,<br>min_scene_len_frames）。从示例输出看，仅使用 ContentDetector 速度最快，但场景数略少。需要根据业务需求决定是否值得牺牲一些检测场景换取速度。</li><li>帧降采样：对于长视频，在 scene_detector.py 中为 SceneManager 设置 frame_skip 或通过<br>video_api_obj.set_downscale_factor() 来减少处理的帧数/分辨率，以大幅提升速度。将其作为可配置项。视频解码优化：</li><li>基于测试结果，确定 CPU 解码或 GPU 解码 (VideoStreamCv2Cuda) 在何种情况下更优，并相应调整配置。示例中 GPU 解码效果明显。</li></ul><h4 id="代码逻辑优化：">代码逻辑优化：</h4><ul><li>检查 detect_scenes 内部是否有可优化的循环或数据处理。确保资源（如 video_api_obj）得到正确和及时的释放。</li></ul><h4 id="长视频特定优化：">长视频特定优化：</h4><ul><li>考虑更细粒度的检查点机制（如果 detect_scenes 本身耗时过长）。</li><li>探索分块处理长视频的策略。</li></ul><h2 id="6-迭代与验证">6. 迭代与验证</h2><blockquote><p>性能优化是一个迭代过程。每次应用优化后，都应重新运行基准测试，以验证优化的效果，并确保没有引入新的性能问题或功能性缺陷。</p></blockquote><blockquote><p>通过遵循本指南，您可以系统地评估和提升视频处理项目的性能，特别是在处理计算密集的场景检测任务时。</p></blockquote><h2 id="总结">总结</h2><h3 id="macOS-场景检测性能测试总结">macOS 场景检测性能测试总结</h3><p>测试视频: <code>建筑家园-02.mp4</code> (60fps)<br>测试日期: 2025-05-30</p><h4 id="关键测试数据">关键测试数据</h4><table><thead><tr><th style="text-align:left">测试配置</th><th style="text-align:left">解码方式</th><th style="text-align:left">检测器组合</th><th style="text-align:left">处理时长 (秒)</th><th style="text-align:left">检测场景数</th><th style="text-align:left">帧率 (fps)</th></tr></thead><tbody><tr><td style="text-align:left"><code>Config_Default_CPU</code></td><td style="text-align:left">CPU</td><td style="text-align:left">MultiDetector</td><td style="text-align:left">433.7327</td><td style="text-align:left">214</td><td style="text-align:left">60.00</td></tr><tr><td style="text-align:left"><code>Config_Default_GPU</code></td><td style="text-align:left">GPU (请求)</td><td style="text-align:left">MultiDetector</td><td style="text-align:left">411.5587</td><td style="text-align:left">214</td><td style="text-align:left">60.00</td></tr><tr><td style="text-align:left"><code>Config_ContentDetectorOnly_CPU</code></td><td style="text-align:left">CPU</td><td style="text-align:left">ContentDetector</td><td style="text-align:left">400.2969</td><td style="text-align:left">164</td><td style="text-align:left">60.00</td></tr></tbody></table><h4 id="主要结论">主要结论</h4><ol><li><p>GPU 加速在 macOS 上的表现:</p><ul><li>当请求 GPU 解码时 (<code>Config_Default_GPU</code>)，即使 PySceneDetect 日志显示回退到标准的 <code>VideoStreamCv2</code> 后端 (而非 <code>VideoStreamCv2Cuda</code>)，处理速度相比纯 CPU 解码 (<code>Config_Default_CPU</code>) 仍有约 5% 的提升 (从 433.73 秒降至 411.56 秒)。</li><li>这表明在 macOS 上，<code>VideoStreamCv2</code> 可能间接利用了系统级的硬件加速框架 (如 AVFoundation/VideoToolbox) 进行视频解码。</li><li>需要注意的是，这种提升幅度可能不如在具有专用 NVIDIA GPU 和正确配置 CUDA 的环境中使用 <code>VideoStreamCv2Cuda</code> 时显著。</li></ul></li><li><p>检测器选择对性能和结果的显著影响:</p><ul><li>仅使用 <code>ContentDetector</code> (<code>Config_ContentDetectorOnly_CPU</code>) 的配置速度最快，处理时长为 400.30 秒。</li><li>与使用 <code>MultiDetector</code> 的 CPU 配置 (<code>Config_Default_CPU</code>) 相比，速度提升了约 7.7% (快了约 33 秒)。</li><li>然而，仅使用 <code>ContentDetector</code> 时，检测到的场景数从 214 个减少到 164 个，表明牺牲了一定的检测全面性。这需要在处理效率和检测结果的完整性之间进行权衡。</li></ul></li><li><p>PySceneDetect 后端行为:</p><ul><li>测试日志中出现 <code>Backend None not available. Trying another backend: opencv</code>，表明 PySceneDetect 在尝试使用一个（可能是用户配置的或库优选的）后端失败后，成功回退到了 OpenCV 后端 (<code>VideoStreamCv2</code>)。这对于理解实际的解码路径和排查配置问题非常重要。</li></ul></li><li><p>库的兼容性提示:</p><ul><li>日志中 <code>AdaptiveDetector</code> 相关的警告 <code>min_delta_hsv is deprecated, use min_content_val instead.</code> 提示需要更新配置文件中的参数，以确保与 PySceneDetect 库的持续兼容性和最佳实践。</li></ul></li></ol><h3 id="windows-测试结果">windows 测试结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">D:\pythonProject\venv1\Scripts\python.exe D:\pythonProject\scene-detect-split1\src\tests\benchmark_scene_detector.py </span><br><span class="line">2025-05-30 14:11:57.528 | INFO     | config.config:initialize_settings:147 - Configuration successfully loaded from: D:\pythonProject\scene-detect-split1\src\run\config.ini</span><br><span class="line">2025-05-30 14:11:57.529 | INFO     | __main__:&lt;module&gt;:118 - Configuration loaded from: D:\pythonProject\scene-detect-split1\src\run\config.ini</span><br><span class="line">2025-05-30 14:11:57.869 | INFO     | __main__:&lt;module&gt;:210 - </span><br><span class="line">===== Processing Video: Z:\样例\CG渲染样例\建筑家园\建筑家园-02.mp4 =====</span><br><span class="line">2025-05-30 14:11:57.869 | INFO     | __main__:&lt;module&gt;:214 - --- Running with Configuration: Config_Default_CPU ---</span><br><span class="line">2025-05-30 14:11:57.869 | INFO     | __main__:run_detection_benchmark:50 - --- Benchmarking: 建筑家园-02.mp4 ---</span><br><span class="line">2025-05-30 14:11:57.869 | INFO     | __main__:run_detection_benchmark:51 - Detector Setup: ContentDetector</span><br><span class="line">2025-05-30 14:11:57.869 | INFO     | __main__:run_detection_benchmark:52 - Using GPU for OpenCV decode: False</span><br><span class="line">2025-05-30 14:11:57.870 | INFO     | video.scene_detector:detect_scenes:69 - [MainThread] Starting detect_scenes for &#x27;建筑家园-02.mp4&#x27;</span><br><span class="line">Backend None not available.</span><br><span class="line">Trying another backend: opencv</span><br><span class="line">2025-05-30 14:11:58.075 | INFO     | video.scene_detector:detect_scenes:99 - [MainThread] Video &#x27;建筑家园-02.mp4&#x27; opened with VideoStreamCv2.</span><br><span class="line">2025-05-30 14:11:58.075 | INFO     | video.scene_detector:detect_scenes:126 - [MainThread] Configured detector type: ContentDetector for &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">2025-05-30 14:11:58.075 | INFO     | video.scene_detector:detect_scenes:133 - [MainThread] Effective global min_scene_len (frames) for detectors: 15 for &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">2025-05-30 14:16:45.990 | INFO     | video.scene_detector:detect_scenes:302 - [MainThread] SceneManager detected 159 scenes in &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">2025-05-30 14:16:45.990 | INFO     | video.scene_detector:detect_scenes:334 - [MainThread] Final 159 scenes for &#x27;建筑家园-02.mp4&#x27; after adjustments.</span><br><span class="line">2025-05-30 14:16:46.113 | INFO     | __main__:run_detection_benchmark:76 - Profiling data saved to: profiling_results\profile_建筑家园_02_Config_Default_CPU.prof</span><br><span class="line">2025-05-30 14:16:46.113 | INFO     | __main__:run_detection_benchmark:83 - Video: 建筑家园-02.mp4</span><br><span class="line">2025-05-30 14:16:46.113 | INFO     | __main__:run_detection_benchmark:85 - Detected Scenes: 159</span><br><span class="line">2025-05-30 14:16:46.113 | INFO     | __main__:run_detection_benchmark:86 - Detected Frame Rate: 60.00 fps</span><br><span class="line">2025-05-30 14:16:46.113 | INFO     | __main__:run_detection_benchmark:87 - Processing Time: 288.2435 seconds</span><br><span class="line">2025-05-30 14:16:46.113 | INFO     | __main__:run_detection_benchmark:90 - --- Benchmark End ---</span><br><span class="line">2025-05-30 14:16:46.113 | INFO     | __main__:&lt;module&gt;:214 - --- Running with Configuration: Config_Default_GPU ---</span><br><span class="line">2025-05-30 14:16:46.113 | INFO     | __main__:run_detection_benchmark:50 - --- Benchmarking: 建筑家园-02.mp4 ---</span><br><span class="line">2025-05-30 14:16:46.113 | INFO     | __main__:run_detection_benchmark:51 - Detector Setup: ContentDetector</span><br><span class="line">2025-05-30 14:16:46.113 | INFO     | __main__:run_detection_benchmark:52 - Using GPU for OpenCV decode: True</span><br><span class="line">2025-05-30 14:16:46.113 | INFO     | video.scene_detector:detect_scenes:69 - [MainThread] Starting detect_scenes for &#x27;建筑家园-02.mp4&#x27;</span><br><span class="line">2025-05-30 14:16:46.147 | WARNING  | video.scene_detector:detect_scenes:93 - [MainThread] VideoStreamCv2Cuda not available. Using CPU for &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">Backend None not available.</span><br><span class="line">Trying another backend: opencv</span><br><span class="line">2025-05-30 14:16:46.242 | INFO     | video.scene_detector:detect_scenes:99 - [MainThread] Video &#x27;建筑家园-02.mp4&#x27; opened with VideoStreamCv2.</span><br><span class="line">2025-05-30 14:16:46.243 | INFO     | video.scene_detector:detect_scenes:126 - [MainThread] Configured detector type: ContentDetector for &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">2025-05-30 14:16:46.243 | INFO     | video.scene_detector:detect_scenes:133 - [MainThread] Effective global min_scene_len (frames) for detectors: 15 for &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">2025-05-30 14:20:35.982 | INFO     | video.scene_detector:detect_scenes:302 - [MainThread] SceneManager detected 159 scenes in &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">2025-05-30 14:20:35.982 | INFO     | video.scene_detector:detect_scenes:334 - [MainThread] Final 159 scenes for &#x27;建筑家园-02.mp4&#x27; after adjustments.</span><br><span class="line">2025-05-30 14:20:36.101 | INFO     | __main__:run_detection_benchmark:76 - Profiling data saved to: profiling_results\profile_建筑家园_02_Config_Default_GPU.prof</span><br><span class="line">2025-05-30 14:20:36.101 | INFO     | __main__:run_detection_benchmark:83 - Video: 建筑家园-02.mp4</span><br><span class="line">2025-05-30 14:20:36.102 | INFO     | __main__:run_detection_benchmark:85 - Detected Scenes: 159</span><br><span class="line">2025-05-30 14:20:36.102 | INFO     | __main__:run_detection_benchmark:86 - Detected Frame Rate: 60.00 fps</span><br><span class="line">2025-05-30 14:20:36.102 | INFO     | __main__:run_detection_benchmark:87 - Processing Time: 229.9882 seconds</span><br><span class="line">2025-05-30 14:20:36.102 | INFO     | __main__:run_detection_benchmark:90 - --- Benchmark End ---</span><br><span class="line">2025-05-30 14:20:36.102 | INFO     | __main__:&lt;module&gt;:214 - --- Running with Configuration: Config_ContentDetectorOnly_CPU ---</span><br><span class="line">2025-05-30 14:20:36.102 | INFO     | __main__:run_detection_benchmark:50 - --- Benchmarking: 建筑家园-02.mp4 ---</span><br><span class="line">2025-05-30 14:20:36.102 | INFO     | __main__:run_detection_benchmark:51 - Detector Setup: ContentDetector</span><br><span class="line">2025-05-30 14:20:36.102 | INFO     | __main__:run_detection_benchmark:52 - Using GPU for OpenCV decode: False</span><br><span class="line">2025-05-30 14:20:36.102 | INFO     | video.scene_detector:detect_scenes:69 - [MainThread] Starting detect_scenes for &#x27;建筑家园-02.mp4&#x27;</span><br><span class="line">Backend None not available.</span><br><span class="line">Trying another backend: opencv</span><br><span class="line">2025-05-30 14:20:36.194 | INFO     | video.scene_detector:detect_scenes:99 - [MainThread] Video &#x27;建筑家园-02.mp4&#x27; opened with VideoStreamCv2.</span><br><span class="line">2025-05-30 14:20:36.194 | INFO     | video.scene_detector:detect_scenes:126 - [MainThread] Configured detector type: ContentDetector for &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">2025-05-30 14:20:36.194 | INFO     | video.scene_detector:detect_scenes:133 - [MainThread] Effective global min_scene_len (frames) for detectors: 15 for &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">2025-05-30 14:24:23.153 | INFO     | video.scene_detector:detect_scenes:302 - [MainThread] SceneManager detected 159 scenes in &#x27;建筑家园-02.mp4&#x27;.</span><br><span class="line">2025-05-30 14:24:23.153 | INFO     | video.scene_detector:detect_scenes:334 - [MainThread] Final 159 scenes for &#x27;建筑家园-02.mp4&#x27; after adjustments.</span><br><span class="line">2025-05-30 14:24:23.278 | INFO     | __main__:run_detection_benchmark:83 - Video: 建筑家园-02.mp4</span><br><span class="line">2025-05-30 14:24:23.278 | INFO     | __main__:run_detection_benchmark:85 - Detected Scenes: 159</span><br><span class="line">2025-05-30 14:24:23.278 | INFO     | __main__:run_detection_benchmark:86 - Detected Frame Rate: 60.00 fps</span><br><span class="line">2025-05-30 14:24:23.278 | INFO     | __main__:run_detection_benchmark:87 - Processing Time: 227.1770 seconds</span><br><span class="line">2025-05-30 14:24:23.278 | INFO     | __main__:run_detection_benchmark:90 - --- Benchmark End ---</span><br><span class="line">2025-05-30 14:24:23.278 | INFO     | __main__:&lt;module&gt;:236 - </span><br><span class="line"></span><br><span class="line">===== Benchmark Summary =====</span><br><span class="line">2025-05-30 14:24:23.280 | INFO     | __main__:&lt;module&gt;:238 - </span><br><span class="line">Video: 建筑家园-02.mp4</span><br><span class="line">2025-05-30 14:24:23.280 | INFO     | __main__:&lt;module&gt;:240 -   Config: Config_Default_CPU             | Duration: 288.2435s | Scenes: 159</span><br><span class="line">2025-05-30 14:24:23.280 | INFO     | __main__:&lt;module&gt;:240 -   Config: Config_Default_GPU             | Duration: 229.9882s | Scenes: 159</span><br><span class="line">2025-05-30 14:24:23.280 | INFO     | __main__:&lt;module&gt;:240 -   Config: Config_ContentDetectorOnly_CPU | Duration: 227.1770s | Scenes: 159</span><br><span class="line">2025-05-30 14:24:23.280 | INFO     | __main__:&lt;module&gt;:242 - </span><br><span class="line">To analyze .prof files, use a tool like &#x27;snakeviz&#x27; or Python&#x27;s pstats module.</span><br><span class="line">2025-05-30 14:24:23.280 | INFO     | __main__:&lt;module&gt;:243 - Example: python -m pstats profiling_results/your_profile_file.prof</span><br><span class="line">2025-05-30 14:24:23.280 | INFO     | __main__:&lt;module&gt;:244 - Then in pstats shell: sort cumulative, stats 20</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Windows-平台场景检测性能测试总结">Windows 平台场景检测性能测试总结</h4><p>测试视频: <code>建筑家园-02.mp4</code> (60fps)<br>测试日期: 2025-05-30<br>测试平台: Windows</p><h5 id="关键测试数据-2">关键测试数据</h5><table><thead><tr><th style="text-align:left">测试配置</th><th style="text-align:left">解码方式</th><th style="text-align:left">检测器设置</th><th style="text-align:left">处理时长 (秒)</th><th style="text-align:left">检测场景数</th></tr></thead><tbody><tr><td style="text-align:left"><code>Config_Default_CPU</code></td><td style="text-align:left">CPU</td><td style="text-align:left">ContentDetector*</td><td style="text-align:left">288.2435</td><td style="text-align:left">159</td></tr><tr><td style="text-align:left"><code>Config_Default_GPU</code></td><td style="text-align:left">GPU (请求)</td><td style="text-align:left">ContentDetector*</td><td style="text-align:left">229.9882</td><td style="text-align:left">159</td></tr><tr><td style="text-align:left"><code>Config_ContentDetectorOnly_CPU</code></td><td style="text-align:left">CPU</td><td style="text-align:left">ContentDetector</td><td style="text-align:left">227.1770</td><td style="text-align:left">159</td></tr></tbody></table><ul><li>重要: 日志显示所有配置（包括 <code>Config_Default_CPU</code> 和 <code>Config_Default_GPU</code>）的 <code>Detector Setup</code> 均为 <code>ContentDetector</code>。这表明 <code>benchmark_scene_detector.py</code> 中的这些 “Default” 配置可能错误地仅指定了 <code>ContentDetector</code>，而不是 <code>config.ini</code> 中定义的 <code>MultiDetector</code>。因此，以下分析基于所有测试实际上都只使用了 <code>ContentDetector</code>。</li></ul><h5 id="主要结论-2">主要结论</h5><ol><li><p>GPU 加速请求在 Windows 上的表现 (当 CUDA 后端不可用时):</p><ul><li>当请求 GPU 解码时 (<code>Config_Default_GPU</code>)，日志明确指出 <code>VideoStreamCv2Cuda not available. Using CPU...</code>。最终视频流通过标准的 <code>VideoStreamCv2</code> 后端由 CPU 完成解码。</li><li>尽管如此，<code>Config_Default_GPU</code> (229.99 秒) 仍然比 <code>Config_Default_CPU</code> (288.24 秒) 快了约 58.25 秒，性能提升约 20.2%。</li><li>这可能归因于 Windows 平台上 OpenCV 的 CPU 解码后端（如 Media Foundation 或 DirectShow）在特定路径或针对某些视频格式时，相比纯粹的 CPU 路径有更优化的表现，或者系统资源调度差异。</li></ul></li><li><p><code>ContentDetectorOnly_CPU</code> 作为最快配置:</p><ul><li><code>Config_ContentDetectorOnly_CPU</code> (227.18 秒) 是所有配置中最快的，符合预期。</li><li>它与 <code>Config_Default_GPU</code> (实际也是 ContentDetector + CPU 解码) 的性能差异较小 (约 2.8 秒)，可能在测量误差范围内。</li></ul></li><li><p>PySceneDetect 后端回退:</p><ul><li>日志清晰展示了当优选后端（如 CUDA）不可用时，PySceneDetect 回退到标准 OpenCV (<code>VideoStreamCv2</code>) 的行为。</li></ul></li><li><p>与 macOS 测试的对比 (针对同一视频，但检测器配置可能不同):</p><ul><li>在 Windows 上仅使用 <code>ContentDetector</code> (CPU) 处理此视频 (约 227-288 秒) 比之前在 macOS 上使用 <code>MultiDetector</code> (CPU) (约 433 秒) 要快。如果 macOS 也仅用 <code>ContentDetector</code> (约 400 秒)，Windows 仍然更快。这可能反映了操作系统底层视频处理框架的效率差异。</li><li>在“请求GPU但回退到CPU”的情况下，Windows 平台显示出相对更大的性能提升 (约 20.2%)，而 macOS 平台 (针对 <code>MultiDetector</code>) 约为 5%。</li></ul></li></ol><h5 id="关键问题点与后续行动建议">关键问题点与后续行动建议</h5><ol><li><p>核实并修正 <code>benchmark_scene_detector.py</code> 中的测试配置:</p><ul><li>首要任务: 确保 <code>Config_Default_CPU</code> 和 <code>Config_Default_GPU</code> 配置正确地使用了您期望的 <code>MultiDetector</code> 设置（从 <code>config.ini</code> 的 <code>[SceneDetectorSetup]</code> 加载）。如果当前它们被错误地指向了仅 <code>ContentDetector</code>，那么对 <code>MultiDetector</code> 的性能评估是不准确的。</li></ul></li><li><p>彻底排查 <code>VideoStreamCv2Cuda not available</code> 问题:</p><ul><li>检查 OpenCV-Python 版本 (确保是为 Windows 编译的、包含 CUDA 支持的版本)。</li><li>检查 CUDA Toolkit 和 cuDNN 的安装与兼容性。</li><li>检查 系统环境变量 (如 <code>PATH</code>, <code>CUDA_PATH</code>)。</li><li>检查 NVIDIA 驱动程序版本。</li><li>运行项目中的 <code>cuda_available_verify.py</code> 脚本获取直接反馈。</li></ul></li><li><p>在 CUDA 成功启用后重新进行基准测试:</p><ul><li>只有当 <code>VideoStreamCv2Cuda</code> 能够成功加载和使用时，才能真正评估 GPU 对视频解码的加速效果。</li><li>届时，重点对比 <code>MultiDetector</code> 配置下 CPU 与 GPU (CUDA) 的性能。</li></ul></li><li><p>分析 <code>.prof</code> 文件:</p><ul><li>对于修正配置后的 <code>MultiDetector</code> 测试，使用 <code>snakeviz</code> 分析 <code>.prof</code> 文件。</li><li>关注视频 I/O (<code>cv2.VideoCapture</code> 的 <code>retrieve</code> 和 <code>grab</code> 方法) 和各个子检测器在 CPU 与 GPU 配置下的耗时。</li></ul></li><li><p>继续测试帧降采样:</p><ul><li>无论 CUDA 是否成功启用，如果视频 I/O 依然是主要瓶颈，帧降采样 (<code>frame_skip</code> 和 <code>downscale_factor</code>) 都是至关重要的优化策略。</li></ul></li></ol><h2 id="后续分析建议">后续分析建议</h2><ul><li>深入剖析 <code>.prof</code> 文件: 使用 <code>snakeviz</code> 或 <code>pstats</code> 分析 <code>MultiDetector</code> 配置下各具体检测器的耗时，以精确定位性能瓶颈。</li><li>测试帧降采样: 鉴于当前处理时间较长，强烈建议测试帧降采样 (<code>frame_skip</code> 或 <code>downscale_factor</code>) 对长视频处理效率的影响。</li><li>参数调优: 针对 <code>MultiDetector</code> 中的各个检测器，细致调整其参数，寻找性能与准确度的最佳平衡点。</li><li>多样化测试: 使用更多不同类型和长度的视频进行测试，以验证当前结论的普适性。</li></ul><h4 id="测试结果如图">测试结果如图</h4><h5 id="macOS平台测试结果图示">macOS平台测试结果图示</h5><ul><li>cpu</li></ul><p><img src="/2025/05/30/scene-detect-benchmark/cpu_prof.png" class="lazyload placeholder" data-srcset="/2025/05/30/scene-detect-benchmark/cpu_prof.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><img src="/2025/05/30/scene-detect-benchmark/cpu_profile_1.png" class="lazyload placeholder" data-srcset="/2025/05/30/scene-detect-benchmark/cpu_profile_1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>gpu</li></ul><p><img src="/2025/05/30/scene-detect-benchmark/gpu_prof.png" class="lazyload placeholder" data-srcset="/2025/05/30/scene-detect-benchmark/gpu_prof.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><img src="/2025/05/30/scene-detect-benchmark/gpu_prof_1.png" class="lazyload placeholder" data-srcset="/2025/05/30/scene-detect-benchmark/gpu_prof_1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h5 id="window平台测试结果图示">window平台测试结果图示</h5><ul><li>cpu</li></ul><p><img src="/2025/05/30/scene-detect-benchmark/cpu_win_pro.png" class="lazyload placeholder" data-srcset="/2025/05/30/scene-detect-benchmark/cpu_win_pro.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><img src="/2025/05/30/scene-detect-benchmark/cpu_win_pro_1.png" class="lazyload placeholder" data-srcset="/2025/05/30/scene-detect-benchmark/cpu_win_pro_1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>gpu</li></ul><p><img src="/2025/05/30/scene-detect-benchmark/gpu_win_pro.png" class="lazyload placeholder" data-srcset="/2025/05/30/scene-detect-benchmark/gpu_win_pro.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><img src="/2025/05/30/scene-detect-benchmark/gpu_win_pro_1.png" class="lazyload placeholder" data-srcset="/2025/05/30/scene-detect-benchmark/gpu_win_pro_1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PySceneDetect 中场景检测器</title>
      <link href="/2025/05/15/scene-detect-method/"/>
      <url>/2025/05/15/scene-detect-method/</url>
      
        <content type="html"><![CDATA[<h1>PySceneDetect 中场景检测器</h1><blockquote><p>主要包括：<code>ContentDetector</code>, <code>ThresholdDetector</code>, <code>AdaptiveDetector</code>的算法及参数含义、算法思想以及如何确定这些参数。</p></blockquote><h2 id="通用概念"><strong>通用概念</strong></h2><ul><li><strong>场景 (Scene):</strong> 一系列连续的、在视觉上或叙事上构成一个单元的镜头。</li><li><strong>切点 (Cut/Scene Break):</strong> 两个不同场景之间的边界。</li><li><strong>帧间差异 (Frame-to-Frame Difference):</strong> 检测器通常通过比较连续（或间隔的）视频帧之间的差异来识别潜在的切点。差异的计算方式因检测器而异。</li><li><strong>阈值 (Threshold):</strong> 一个预设的数值。当计算出的帧间差异超过这个阈值时，检测器就认为可能发生了一个场景切换。</li><li><strong>最小场景长度 (Min Scene Length / <code>min_scene_len</code>):</strong> 检测到的场景必须达到的最短持续时间（通常以帧数或时间码表示）。如果两个检测到的原始切点之间的距离小于这个值，它们可能会被合并，以避免产生过多非常短的、无意义的场景片段。<strong>为了分析和找到最佳检测参数，我们通常将这个值设为1帧，以观察检测器最原始的输出。</strong></li></ul><hr><h2 id="算法概述">算法概述</h2><p><strong>1. <code>ThresholdDetector</code> (阈值检测器)</strong></p><blockquote><p>主要检测淡入淡出到黑屏或白屏场景</p></blockquote><ul><li><p><strong>命令:</strong> <code>detect-threshold</code></p></li><li><p><strong>核心思想:</strong> 主要通过监测视频帧的<strong>平均亮度/强度</strong>是否跨越一个固定的阈值来判断淡入/淡出事件。它假设场景切换（特别是淡入淡出）会伴随着画面整体变亮或变暗到某个程度。</p></li><li><p><strong>主要参数及其含义：</strong></p><ul><li><p><strong><code>threshold</code> (或 <code>-t VAL</code>)</strong>:</p><ul><li><strong>含义:</strong> 一个 0-255 之间的整数（或浮点数）。这是判断画面是否进入“淡出”或“淡入”状态的亮度基准。</li><li><strong>算法交互:</strong> 与 <code>method</code> 参数配合使用。</li><li><strong>如何确定:</strong><ol><li><strong>使用亮度分析工具 (如我们之前编写的 <code>analyze_brightness.py</code>)</strong>：查看你的视频在发生淡入淡出到“黑屏”或“白屏”时，那些“黑/白”帧的实际平均亮度值。</li><li>如果使用 <code>method = FLOOR</code> (检测淡出到暗/从暗淡入)：<code>threshold</code> 应略高于视频中“黑屏”状态的平均亮度。例如，如果黑屏亮度在 2-5 之间，你可以尝试 <code>threshold = 5</code> 或 <code>8</code> 或 <code>10</code>。如果阈值设得太低（比如1），那么只有几乎纯黑的帧才会被识别。</li><li>如果使用 <code>method = CEILING</code> (检测淡出到亮/从亮淡入)：<code>threshold</code> 应略低于视频中“白屏”状态的平均亮度。例如，如果白屏亮度在 250-253 之间，你可以尝试 <code>threshold = 250</code> 或 <code>245</code>。</li><li><strong>实验法：</strong> 从一个相对宽松的值开始（例如，对于 FLOOR 方法，从 15-20 开始；对于 CEILING，从 230-240 开始），然后逐渐向更严格的值调整（FLOOR 向下调，CEILING 向上调），同时观察 <code>save-images</code> 的结果。</li></ol></li></ul></li><li><p><strong><code>fade_bias</code> (或 <code>-f PERCENT</code>)</strong>:</p><ul><li><strong>含义:</strong> 一个百分比值（命令行是 -100 到 100，Python 类内部是 -1.0 到 +1.0）。它调整检测到的淡入淡出切点的<strong>精确位置</strong>。</li><li><strong>算法交互:</strong> 当检测器识别到一次亮度从阈值一侧跨越到另一侧（例如，从高于阈值变为低于阈值，再恢复到高于阈值，这构成一次淡出再淡入），<code>fade_bias</code> 决定切点放在这个过程的哪个阶段。<ul><li>命令行 <code>-100</code> (Python <code>-1.0</code>): 切点尽可能靠近完全淡出到黑/白的时刻，或者刚开始从黑/白恢复的时刻（取决于具体实现和淡入/淡出方向）。</li><li>命令行 <code>0</code> (Python <code>0.0</code>): 切点放在淡出和淡入过程的中间。</li><li>命令行 <code>+100</code> (Python <code>+1.0</code>): 切点尽可能靠近刚开始淡出或完全淡入完成的时刻。</li></ul></li><li><strong>如何确定:</strong><ol><li>通常对于视频间的切换，我们希望在画面完全变黑/白之后，或者刚开始有新画面时进行切割。所以一个中等到较大的负偏置（例如命令行的 <code>30</code> 到 <code>70</code>，对应 Python 的 <code>(PERCENT/50.0) - 1.0</code>）可能是合适的，这会使切点更倾向于“黑场”的边缘。</li><li><strong>实验法：</strong> 设置一个基础的 <code>threshold</code>，然后尝试不同的 <code>fade_bias</code> 值（例如 -80, -50, 0, 50, 80），观察 <code>save-images</code> 中切点图片的位置，看哪个最符合你的期望。</li></ol></li></ul></li><li><p><strong><code>method</code> (Python 类参数，<code>ThresholdDetector.Method.FLOOR</code> 或 <code>ThresholdDetector.Method.CEILING</code>)</strong>:</p><ul><li><strong>含义:</strong> 定义了如何将帧的平均亮度与 <code>threshold</code> 进行比较来触发事件。<ul><li><code>FLOOR</code>: 当帧亮度<strong>低于 (falls below)</strong> <code>threshold</code> 时，认为是淡出（到暗）；当从低于状态恢复到<strong>高于等于</strong> <code>threshold</code> 时，认为是淡入（从暗）。</li><li><code>CEILING</code>: 当帧亮度<strong>高于 (rises above)</strong> <code>threshold</code> 时，认为是淡出（到亮）；当从高于状态恢复到<strong>低于</strong> <code>threshold</code> 时，认为是淡入（从亮）。</li></ul></li><li><strong>如何确定:</strong><ol><li>如果你的视频主要是淡入淡出到<strong>黑色</strong>，或者从黑色淡入，选择 <code>FLOOR</code>。</li><li>如果你的视频主要是淡入淡出到<strong>白色</strong>，或者从白色淡入，选择 <code>CEILING</code> (并配合非常高的 <code>threshold</code>)。</li><li>你的 <code>config.ini</code> 中 <code>method = FLOOR</code> (因为 <code>FRAME_AVERAGE</code> 会回退到 <code>FLOOR</code>)，所以当前是针对暗场景的。</li></ol></li></ul></li><li><p><strong><code>min_scene_len</code> (或 <code>-m TIMECODE</code>，命令行是 <code>-m 1</code> 表示1帧)</strong>:</p><ul><li><strong>含义:</strong> 最小场景长度。</li><li><strong>如何确定:</strong> 为了分析检测器的原始性能和找到最佳的 <code>threshold</code> / <code>fade_bias</code>，<strong>始终将其设置为 <code>1</code> (或 <code>1f</code>，根据具体命令格式)</strong>。在确定了最佳检测参数后，如果需要避免过多短片段，再在最终处理时考虑增大这个值。</li></ul></li></ul></li></ul><hr><p><strong>2. <code>ContentDetector</code> (内容检测器)</strong></p><ul><li><p><strong>命令:</strong> <code>detect-content</code></p></li><li><p><strong>核心思想:</strong> 通过比较连续帧之间<strong>视觉内容的整体差异</strong>来检测场景切换。它不仅仅看亮度，还会考虑颜色分布（色调 Hue, 饱和度 Saturation）和可能的边缘信息。对于平均亮度变化不大但内容发生显著改变的切换（如交叉淡化、某些快速剪辑）通常更有效。</p></li><li><p><strong>主要参数及其含义：</strong></p><ul><li><p><strong><code>threshold</code> (或 <code>-t VAL</code>)</strong>:</p><ul><li><strong>含义:</strong> 一个浮点数，表示帧间内容差异的阈值。这个差异值是综合了色调、饱和度、亮度（以及可能有的边缘）通道的变化计算出来的。</li><li><strong>算法交互:</strong> 当计算出的帧间内容综合差异值<strong>超过</strong>此阈值时，触发切点。</li><li><strong>如何确定:</strong><ol><li><code>ContentDetector</code> 的阈值范围和敏感度与 <code>ThresholdDetector</code> 不同。默认值通常在 20-35 之间。</li><li><strong>较低的阈值意味着更敏感。</strong> 对于平滑的交叉淡化或细微的内容变化，你可能需要将阈值降低到 15-25，甚至更低（5-15）。</li><li><strong>实验法是关键：</strong><ul><li><strong>使用 <code>threshold_explorer.py</code> 工具（代码见后）</strong>：这是最系统的方法。设定一个阈值范围（例如，从 5.0 到 30.0，步长 1.0 或 2.0），对抽样视频运行。</li><li><strong>观察图表：</strong> 查看“平均场景数 vs. 阈值”图。寻找曲线的“拐点”——即阈值再降低，场景数开始急剧增加（可能引入噪声）；或者阈值再升高，场景数急剧减少（可能遗漏切换）的那个临界区域。</li><li><strong>结合 <code>save-images</code>：</strong> 对于你在图表上找到的几个有希望的阈值点，使用 <code>--save_images_for</code> 选项（在 <code>threshold_explorer.py</code> 中）或直接用 <code>scenedetect</code> 命令行工具（配合 <code>save-images</code>）来实际查看这些阈值下的切点图片。人工判断这些切点是否符合你对交叉淡化或其他场景切换的定义。</li></ul></li><li><strong>从一个相对保守的值开始（例如 25-30），如果检测不到足够的场景，逐渐降低阈值，并观察结果。</strong></li></ol></li></ul></li><li><p><strong><code>min_scene_len</code> (或 <code>-m TIMECODE</code>，命令行通常是 <code>-m 1</code> 表示1帧)</strong>:</p><ul><li><strong>含义:</strong> 最小场景长度。</li><li><strong>如何确定:</strong> 同 <code>ThresholdDetector</code>，在参数探索阶段，<strong>始终将其设置为 <code>1</code></strong>。</li></ul></li><li><p><strong><code>weights</code> (Hue, Saturation, Luma, Edges - Python 类参数)</strong>:</p><ul><li><strong>含义:</strong> 定义在计算帧间内容差异时，色调、饱和度、亮度、边缘这几个分量各自所占的权重。</li><li><strong>算法交互:</strong> 影响最终的综合差异值。</li><li><strong>如何确定:</strong><ol><li><strong>通常从默认权重开始。</strong> PySceneDetect 的默认权重是经过一定调优的。</li><li>如果默认权重效果不佳，并且你对视频内容的特性有了解：<ul><li>如果场景切换主要体现在<strong>颜色</strong>变化上（例如，从冷色调场景交叉淡化到暖色调场景），可以尝试<strong>增加 <code>weights_hue</code> 和 <code>weights_saturation</code></strong> 的权重，同时<strong>减少 <code>weights_luma</code></strong> 的权重。</li><li>如果场景切换主要体现在<strong>结构或物体轮廓</strong>变化上，确保边缘检测被启用并且 <code>weights_edges</code> 有合适的权重。</li><li>这部分调整通常需要更多的实验和对视频内容的细致分析。你的 <code>config.ini</code> 和 <code>scene_detector.py</code> 允许你设置这些权重。</li></ul></li></ol></li></ul></li><li><p><strong><code>luma_only</code> (布尔值)</strong>:</p><ul><li><strong>含义:</strong> 如果为 <code>true</code>，则在计算内容差异时只考虑亮度通道，忽略色调和饱和度。</li><li><strong>算法交互:</strong> 相当于将 <code>weights_hue</code> 和 <code>weights_saturation</code> 设为 0。</li><li><strong>如何确定:</strong><ol><li>对于颜色信息丰富且对场景区分很重要的视频（尤其是交叉淡化），通常应将此设为 <code>false</code>（默认）。</li><li>如果视频是黑白的，或者颜色信息干扰性强且不重要，可以设为 <code>true</code>。</li></ol></li></ul></li></ul></li></ul><hr><p><strong>3. <code>AdaptiveDetector</code> (自适应检测器)</strong></p><ul><li><p><strong>命令:</strong> <code>detect-adaptive</code></p></li><li><p><strong>核心思想:</strong> 与 <code>ContentDetector</code> 类似，它也计算帧间内容的差异。但不同之处在于，它不是使用一个固定的全局阈值，而是根据最近一段视频窗口内的帧间差异动态地计算一个自适应阈值。当某一帧的差异显著高于这个动态计算出的局部平均差异时，触发切点。</p></li><li><p><strong>适用场景:</strong> 对于视频整体亮度或内容变化幅度不一致的情况可能有用。例如，一个视频可能有些部分变化剧烈，有些部分变化平缓。固定阈值可能难以同时适应这两种情况。</p></li><li><p><strong>主要参数及其含义：</strong></p><ul><li><p><strong><code>adaptive_threshold</code> (或 <code>-t VAL</code>)</strong>:</p><ul><li><strong>含义:</strong> 一个乘数因子（通常是较小的浮点数，例如 2.0-5.0，默认可能是 3.0）。</li><li><strong>算法交互:</strong> 检测器会计算一个基于滑动窗口的帧间差异的统计量（例如平均值或移动平均值）。如果当前帧的差异超过了这个统计量乘以 <code>adaptive_threshold</code>，则认为是一个切点。值越大，检测越不敏感（需要更大的相对变化）。</li><li><strong>如何确定:</strong><ol><li><strong>实验法：</strong> 从默认值（例如 3.0）开始。</li><li>如果检测到的场景太少，尝试降低此值（例如 2.5, 2.0）。</li><li>如果检测到的场景太多（噪声），尝试增加此值（例如 3.5, 4.0）。</li><li>同样，结合 <code>save-images</code> 进行人工检查。</li></ol></li></ul></li><li><p><strong><code>min_scene_len</code> (或 <code>-m TIMECODE</code>)</strong>:</p><ul><li><strong>含义:</strong> 最小场景长度。</li><li><strong>如何确定:</strong> 同上，参数探索阶段设为 <code>1</code>。</li></ul></li><li><p><strong><code>window_width</code> (或 <code>--window_width VAL</code>, 帧数)</strong>:</p><ul><li><strong>含义:</strong> 用于计算自适应阈值的滑动窗口的宽度（以帧为单位）。如果为 0，检测器通常会根据视频帧率自动设置一个合理的窗口大小。</li><li><strong>算法交互:</strong> 窗口越大，自适应阈值对局部快速变化的敏感度越低，对较长时间的平均变化更敏感。窗口越小，对局部突变越敏感。</li><li><strong>如何确定:</strong><ol><li>通常可以从默认值 (0，即自动) 开始。</li><li>如果自动设置效果不佳，可以根据视频的平均镜头长度或变化节奏来手动设置。例如，如果快速剪辑多，可以尝试较小的窗口；如果长镜头多，可以尝试较大的窗口。</li></ol></li></ul></li><li><p><strong><code>min_delta_hsv</code> (浮点数 0-255)</strong>:</p><ul><li><strong>含义:</strong> 有些版本的 <code>AdaptiveDetector</code> 可能使用这个参数。它设定了一个帧间 HSV（色调、饱和度、亮度）差异的最小绝对值。即使相对差异（通过 <code>adaptive_threshold</code> 判断）很大，但如果绝对差异本身非常小（例如，在几乎全黑的场景中微小的噪声变化），也可能不被视为切点。这有助于过滤掉在非常低对比度区域的噪声。</li><li><strong>如何确定:</strong><ol><li>如果你的视频中有非常暗或对比度非常低的区域，并且 <code>AdaptiveDetector</code> 在这些区域产生了误报，可以尝试增加此值（例如从默认的 10-15 增加到 20-25）。</li></ol></li></ul></li></ul></li></ul><h2 id="通用参数确定流程："><strong>通用参数确定流程：</strong></h2><ol><li><p><strong>选择检测器类型：</strong></p><ul><li><strong>淡入淡出到黑/白：</strong> 优先尝试 <code>ThresholdDetector</code>。</li><li><strong>交叉淡化、内容变化明显但亮度变化不大：</strong> 优先尝试 <code>ContentDetector</code>。</li><li><strong>视频内容变化特征不一致，难以用固定阈值把握：</strong> 可以尝试 <code>AdaptiveDetector</code>。</li><li><strong>不确定或想组合使用：</strong> 可以使用 <code>MultiDetector</code>，并分别配置上述检测器（在你的 <code>config.ini</code> 中将 <code>[SceneDetectorSetup]</code> 的 <code>detector_type</code> 设为 <code>MultiDetector</code>，然后在各个检测器的配置节中设置 <code>enabled = true</code> 和相应的参数）。</li></ul></li><li><p><strong>设置 <code>min_scene_len = 1</code>：</strong> 在寻找最佳检测参数的阶段，始终这样做。</p></li><li><p><strong>选择一个（或几个）代表性的抽样视频：</strong> 这些视频应该包含你期望检测到的各种场景切换效果。</p></li><li><p><strong>对于选定的检测器，系统地扫描其主要阈值参数：</strong></p><ul><li><strong><code>ThresholdDetector</code></strong>: 扫描 <code>threshold</code> 和 <code>fade_bias</code>。</li><li><strong><code>ContentDetector</code></strong>: 主要扫描 <code>threshold</code>。可以后续再调整 <code>weights</code>。</li><li><strong><code>AdaptiveDetector</code></strong>: 主要扫描 <code>adaptive_threshold</code>。可以后续再调整 <code>window_width</code>。</li><li><strong>使用你的 <code>threshold_explorer.py</code> 工具</strong> (如果它是针对 <code>ContentDetector</code> 的，你需要为其他检测器做类似的参数扫描逻辑，或者修改它使其更通用)。</li></ul></li><li><p><strong>可视化和人工检查：</strong></p><ul><li>查看场景数量随阈值变化的图表。</li><li>对于几个有希望的阈值设置，使用 <code>save-images</code> 生成的图片进行人工检查，看切点是否准确、是否有漏检或误报。</li></ul></li><li><p><strong>迭代和微调：</strong> 根据可视化和人工检查的结果，调整参数范围，进行更细致的扫描，或者尝试调整次要参数（如权重、窗口宽度等）。</p></li><li><p><strong>选择“最佳”参数：</strong> “最佳”通常是在“召回率”（找到所有想找的切换）和“精确率”（找到的切换都是正确的）之间的一个平衡。这取决于你的具体需求。可能没有一组参数对所有视频都完美，你可能需要根据视频类型选择不同的参数集，或者接受一定的折衷。</p></li></ol><h2 id="可视化确定内容检测阈值方法">可视化确定内容检测阈值方法</h2><h3 id="内容检测器阈值参考代码">内容检测器阈值参考代码</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Tuple</span>, <span class="type">Dict</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scenedetect <span class="keyword">import</span> open_video, SceneManager, ContentDetector, FrameTimecode, VideoStreamCv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">    <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">    MATPLOTLIB_AVAILABLE = <span class="literal">True</span></span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    MATPLOTLIB_AVAILABLE = <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;警告: Matplotlib 或 Pandas 未安装，将无法生成可视化图表。&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请运行: pip install matplotlib pandas&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 日志设置 ---</span></span><br><span class="line">logger = logging.getLogger(<span class="string">&quot;ThresholdExplorer&quot;</span>)</span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_video_files</span>(<span class="params">input_path: Path, extensions: <span class="type">List</span>[<span class="built_in">str</span>], recursive: <span class="built_in">bool</span></span>) -&gt; <span class="type">List</span>[Path]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从指定路径收集视频文件列表。&quot;&quot;&quot;</span></span><br><span class="line">    video_files = []</span><br><span class="line">    logger.info(<span class="string">f&quot;正在扫描目录: <span class="subst">&#123;input_path&#125;</span> (递归: <span class="subst">&#123;recursive&#125;</span>)，寻找扩展名: <span class="subst">&#123;extensions&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> ext <span class="keyword">in</span> extensions:</span><br><span class="line">        pattern = <span class="string">f&quot;**/*<span class="subst">&#123;ext&#125;</span>&quot;</span> <span class="keyword">if</span> recursive <span class="keyword">else</span> <span class="string">f&quot;*<span class="subst">&#123;ext&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">for</span> file_path <span class="keyword">in</span> input_path.glob(pattern):</span><br><span class="line">            <span class="keyword">if</span> file_path.is_file() <span class="keyword">and</span> <span class="keyword">not</span> file_path.name.startswith(<span class="string">&#x27;._&#x27;</span>):</span><br><span class="line">                video_files.append(file_path)</span><br><span class="line">    logger.info(<span class="string">f&quot;在文件系统中找到 <span class="subst">&#123;<span class="built_in">len</span>(video_files)&#125;</span> 个视频文件。&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> video_files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sampled_videos</span>(<span class="params">video_list: <span class="type">List</span>[Path], sample_ratio: <span class="built_in">float</span> = -<span class="number">1.0</span>, num_samples: <span class="built_in">int</span> = -<span class="number">1</span></span>) -&gt; <span class="type">List</span>[Path]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;根据比例或数量对视频列表进行抽样。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> video_list:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num_samples &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> num_samples &gt;= <span class="built_in">len</span>(video_list):</span><br><span class="line">            <span class="keyword">return</span> video_list</span><br><span class="line">        <span class="keyword">return</span> random.sample(video_list, num_samples)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.0</span> &lt; sample_ratio &lt;= <span class="number">1.0</span>:</span><br><span class="line">        k = <span class="built_in">int</span>(<span class="built_in">len</span>(video_list) * sample_ratio)</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(video_list) &gt; <span class="number">0</span>: k = <span class="number">1</span>  <span class="comment"># 至少抽一个样本</span></span><br><span class="line">        <span class="keyword">return</span> random.sample(video_list, k)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 默认不抽样，处理所有</span></span><br><span class="line">        <span class="keyword">return</span> video_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_detection_for_threshold</span>(<span class="params"></span></span><br><span class="line"><span class="params">        video_path: Path,</span></span><br><span class="line"><span class="params">        threshold_value: <span class="built_in">float</span>,</span></span><br><span class="line"><span class="params">        min_len: <span class="built_in">int</span> = <span class="number">1</span>,  <span class="comment"># 保持为1以获得原始切点</span></span></span><br><span class="line"><span class="params">        save_images_output_dir: Path = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        save_images_for_this_run: <span class="built_in">bool</span> = <span class="literal">False</span>  <span class="comment"># 是否为本次特定的阈值运行保存图像</span></span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;对单个视频和单个阈值运行 ContentDetector。&quot;&quot;&quot;</span></span><br><span class="line">    scene_manager = SceneManager()</span><br><span class="line">    <span class="comment"># 注意：ContentDetector 的其他参数（如 weights, luma_only）这里使用默认值。</span></span><br><span class="line">    <span class="comment"># 如果需要，也可以将它们作为参数传入。</span></span><br><span class="line">    detector = ContentDetector(threshold=threshold_value, min_scene_len=min_len)</span><br><span class="line">    scene_manager.add_detector(detector)</span><br><span class="line"></span><br><span class="line">    video = <span class="literal">None</span></span><br><span class="line">    num_scenes = <span class="number">0</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        video = open_video(<span class="built_in">str</span>(video_path))</span><br><span class="line">        <span class="comment"># video.set_downscale_factor(1) # 可以考虑降采样以加速，但可能影响检测精度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取有限的帧数进行分析，而不是整个视频，以加快速度</span></span><br><span class="line">        <span class="comment"># 这里我们仍然处理整个（抽样的）视频，因为交叉淡化可能在任何地方</span></span><br><span class="line">        <span class="comment"># 如果视频非常长，可以考虑只分析视频的一部分，但这会使抽样更复杂</span></span><br><span class="line">        scene_manager.detect_scenes(video=video, show_progress=<span class="literal">False</span>)</span><br><span class="line">        scene_list = scene_manager.get_scene_list()</span><br><span class="line">        num_scenes = <span class="built_in">len</span>(scene_list)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> save_images_for_this_run <span class="keyword">and</span> save_images_output_dir <span class="keyword">and</span> scene_list:</span><br><span class="line">            <span class="keyword">from</span> scenedetect.video_splitter <span class="keyword">import</span> save_images <span class="keyword">as</span> save_images_func</span><br><span class="line">            video_images_dir = save_images_output_dir / <span class="string">f&quot;<span class="subst">&#123;video_path.stem&#125;</span>_thresh_<span class="subst">&#123;threshold_value:<span class="number">.1</span>f&#125;</span>&quot;</span></span><br><span class="line">            video_images_dir.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">            logger.info(<span class="string">f&quot;为视频 <span class="subst">&#123;video_path.name&#125;</span> (阈值 <span class="subst">&#123;threshold_value:<span class="number">.1</span>f&#125;</span>) 保存场景图片到 <span class="subst">&#123;video_images_dir&#125;</span>&quot;</span>)</span><br><span class="line">            save_images_func(</span><br><span class="line">                scene_list=scene_list,</span><br><span class="line">                video_manager=video,  <span class="comment"># open_video 返回的是 VideoManager 或其后端实例</span></span><br><span class="line">                num_images=<span class="number">2</span>,  <span class="comment"># 每个切点前后各一张</span></span><br><span class="line">                output_dir=<span class="built_in">str</span>(video_images_dir),</span><br><span class="line">                image_name_template=<span class="string">&#x27;$VIDEO_NAME-Scene-$SCENE_NUMBER-$IMAGE_NUMBER&#x27;</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;处理视频 <span class="subst">&#123;video_path.name&#125;</span> (阈值 <span class="subst">&#123;threshold_value&#125;</span>) 时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        num_scenes = -<span class="number">1</span>  <span class="comment"># 表示错误</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> video:</span><br><span class="line">            <span class="comment"># 尝试通用的 release 方法 (适用于 VideoManager)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(video, <span class="string">&#x27;release&#x27;</span>) <span class="keyword">and</span> <span class="built_in">callable</span>(<span class="built_in">getattr</span>(video, <span class="string">&#x27;release&#x27;</span>)):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    video.release()</span><br><span class="line">                    logger.debug(<span class="string">f&quot;Released video object for <span class="subst">&#123;video_path.name&#125;</span> via .release()&quot;</span>)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e_rel:</span><br><span class="line">                    logger.warning(<span class="string">f&quot;Error calling .release() on video object for <span class="subst">&#123;video_path.name&#125;</span>: <span class="subst">&#123;e_rel&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="comment"># 针对 VideoStreamCv2 (以及继承它的 VideoStreamCv2Cuda) 的特殊处理</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(video, VideoStreamCv2):  <span class="comment"># VideoStreamCv2 是从 scenedetect.backends.opencv 导入的</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">hasattr</span>(video, <span class="string">&#x27;_cap&#x27;</span>) <span class="keyword">and</span> video._cap <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="keyword">if</span> video._cap.isOpened():</span><br><span class="line">                            video._cap.release()</span><br><span class="line">                            logger.debug(<span class="string">f&quot;Released VideoStreamCv2._cap for <span class="subst">&#123;video_path.name&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e_cap_rel:</span><br><span class="line">                        logger.warning(<span class="string">f&quot;Error releasing VideoStreamCv2._cap for <span class="subst">&#123;video_path.name&#125;</span>: <span class="subst">&#123;e_cap_rel&#125;</span>&quot;</span>)</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">                logger.warning(</span><br><span class="line">                    <span class="string">f&quot;Video object for <span class="subst">&#123;video_path.name&#125;</span> (type: <span class="subst">&#123;<span class="built_in">type</span>(video).__name__&#125;</span>) &quot;</span></span><br><span class="line">                    <span class="string">&quot;does not have a public .release() method and is not a known direct backend &quot;</span></span><br><span class="line">                    <span class="string">&quot;with a specific release pattern. Relying on __del__ for cleanup.&quot;</span></span><br><span class="line">                )</span><br><span class="line">    <span class="keyword">return</span> num_scenes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">explore_thresholds</span>(<span class="params"></span></span><br><span class="line"><span class="params">        video_paths: <span class="type">List</span>[Path],</span></span><br><span class="line"><span class="params">        threshold_range: <span class="type">Tuple</span>[<span class="built_in">float</span>, <span class="built_in">float</span>, <span class="built_in">float</span>],  <span class="comment"># (start, end, step)</span></span></span><br><span class="line"><span class="params">        sample_ratio: <span class="built_in">float</span> = -<span class="number">1.0</span>,</span></span><br><span class="line"><span class="params">        num_sample_videos: <span class="built_in">int</span> = -<span class="number">1</span>,</span></span><br><span class="line"><span class="params">        min_scene_len: <span class="built_in">int</span> = <span class="number">1</span>,</span></span><br><span class="line"><span class="params">        output_dir_base: Path = Path(<span class="params"><span class="string">&quot;threshold_exploration_output&quot;</span></span>),</span></span><br><span class="line"><span class="params">        save_images_for_thresholds: <span class="type">List</span>[<span class="built_in">float</span>] = <span class="literal">None</span>  <span class="comment"># 指定哪些阈值需要保存图像</span></span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对一批视频，在一系列阈值下运行 ContentDetector，并记录结果。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> video_paths:</span><br><span class="line">        logger.warning(<span class="string">&quot;没有提供视频文件进行分析。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    sampled_videos = get_sampled_videos(video_paths, sample_ratio, num_sample_videos)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sampled_videos:</span><br><span class="line">        logger.warning(<span class="string">&quot;抽样后没有视频可供分析。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">f&quot;将对以下 <span class="subst">&#123;<span class="built_in">len</span>(sampled_videos)&#125;</span> 个抽样视频进行分析:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> vid_path <span class="keyword">in</span> sampled_videos:</span><br><span class="line">        logger.info(<span class="string">f&quot;  - <span class="subst">&#123;vid_path.name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    start_thresh, end_thresh, step_thresh = threshold_range</span><br><span class="line">    thresholds_to_test = np.arange(start_thresh, end_thresh + step_thresh / <span class="number">2</span>, step_thresh)  <span class="comment"># +step/2 确保包含 end_thresh</span></span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">f&quot;将测试以下阈值: <span class="subst">&#123;thresholds_to_test&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建主输出目录</span></span><br><span class="line">    output_dir_base.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    images_base_dir = output_dir_base / <span class="string">&quot;saved_scene_images&quot;</span></span><br><span class="line">    <span class="keyword">if</span> save_images_for_thresholds:</span><br><span class="line">        images_base_dir.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    results = []  <span class="comment"># 存储 (video_name, threshold, num_scenes)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> video_path <span class="keyword">in</span> sampled_videos:</span><br><span class="line">        logger.info(<span class="string">f&quot;--- 开始处理视频: <span class="subst">&#123;video_path.name&#125;</span> ---&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> threshold <span class="keyword">in</span> thresholds_to_test:</span><br><span class="line">            logger.info(<span class="string">f&quot;  测试阈值: <span class="subst">&#123;threshold:<span class="number">.2</span>f&#125;</span> for <span class="subst">&#123;video_path.name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            save_images_this_run = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> save_images_for_thresholds <span class="keyword">and</span> <span class="built_in">any</span>(</span><br><span class="line">                    <span class="built_in">abs</span>(threshold - t_save) &lt; <span class="number">1e-5</span> <span class="keyword">for</span> t_save <span class="keyword">in</span> save_images_for_thresholds):</span><br><span class="line">                save_images_this_run = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            num_scenes = run_detection_for_threshold(</span><br><span class="line">                video_path,</span><br><span class="line">                threshold,</span><br><span class="line">                min_len=min_scene_len,</span><br><span class="line">                save_images_output_dir=images_base_dir <span class="keyword">if</span> save_images_this_run <span class="keyword">else</span> <span class="literal">None</span>,</span><br><span class="line">                save_images_for_this_run=save_images_this_run</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> num_scenes != -<span class="number">1</span>:  <span class="comment"># 如果没有发生错误</span></span><br><span class="line">                results.append(&#123;</span><br><span class="line">                    <span class="string">&quot;video_name&quot;</span>: video_path.name,</span><br><span class="line">                    <span class="string">&quot;threshold&quot;</span>: threshold,</span><br><span class="line">                    <span class="string">&quot;num_scenes&quot;</span>: num_scenes</span><br><span class="line">                &#125;)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logger.warning(<span class="string">f&quot;跳过记录视频 <span class="subst">&#123;video_path.name&#125;</span> 在阈值 <span class="subst">&#123;threshold:<span class="number">.2</span>f&#125;</span> 的结果，因为检测出错。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> results:</span><br><span class="line">        logger.warning(<span class="string">&quot;没有收集到任何有效的检测结果。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    results_df = pd.DataFrame(results) <span class="keyword">if</span> MATPLOTLIB_AVAILABLE <span class="keyword">and</span> pd <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存原始数据到 CSV</span></span><br><span class="line">    csv_output_path = output_dir_base / <span class="string">&quot;threshold_scan_results.csv&quot;</span></span><br><span class="line">    <span class="keyword">if</span> results_df <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            results_df.to_csv(csv_output_path, index=<span class="literal">False</span>)</span><br><span class="line">            logger.info(<span class="string">f&quot;详细扫描结果已保存到: <span class="subst">&#123;csv_output_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(<span class="string">f&quot;无法保存扫描结果到 CSV: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 如果 pandas 不可用，尝试手动保存</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(csv_output_path, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                writer = csv.writer(f)</span><br><span class="line">                writer.writerow([<span class="string">&#x27;video_name&#x27;</span>, <span class="string">&#x27;threshold&#x27;</span>, <span class="string">&#x27;num_scenes&#x27;</span>])</span><br><span class="line">                <span class="keyword">for</span> res_dict <span class="keyword">in</span> results:</span><br><span class="line">                    writer.writerow([res_dict[<span class="string">&#x27;video_name&#x27;</span>], res_dict[<span class="string">&#x27;threshold&#x27;</span>], res_dict[<span class="string">&#x27;num_scenes&#x27;</span>]])</span><br><span class="line">            logger.info(<span class="string">f&quot;详细扫描结果已保存到: <span class="subst">&#123;csv_output_path&#125;</span> (手动保存)&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(<span class="string">f&quot;无法手动保存扫描结果到 CSV: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可视化</span></span><br><span class="line">    <span class="keyword">if</span> MATPLOTLIB_AVAILABLE <span class="keyword">and</span> results_df <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 图1: 每个视频的场景数 vs 阈值</span></span><br><span class="line">            plt.figure(figsize=(<span class="number">12</span>, <span class="number">7</span>))</span><br><span class="line">            <span class="keyword">for</span> video_name, group <span class="keyword">in</span> results_df.groupby(<span class="string">&quot;video_name&quot;</span>):</span><br><span class="line">                plt.plot(group[<span class="string">&quot;threshold&quot;</span>], group[<span class="string">&quot;num_scenes&quot;</span>], marker=<span class="string">&#x27;o&#x27;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>, label=video_name)</span><br><span class="line">            plt.xlabel(<span class="string">&quot;ContentDetector Threshold&quot;</span>)</span><br><span class="line">            plt.ylabel(<span class="string">&quot;Number of Detected Scenes&quot;</span>)</span><br><span class="line">            plt.title(<span class="string">&quot;Number of Scenes vs. Threshold (Per Video)&quot;</span>)</span><br><span class="line">            plt.legend(bbox_to_anchor=(<span class="number">1.05</span>, <span class="number">1</span>), loc=<span class="string">&#x27;upper left&#x27;</span>, borderaxespad=<span class="number">0.</span>)</span><br><span class="line">            plt.grid(<span class="literal">True</span>)</span><br><span class="line">            plt.tight_layout(rect=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.85</span>, <span class="number">1</span>])  <span class="comment"># 给 legend 留空间</span></span><br><span class="line">            plot_path1 = output_dir_base / <span class="string">&quot;scenes_vs_threshold_per_video.png&quot;</span></span><br><span class="line">            plt.savefig(plot_path1)</span><br><span class="line">            logger.info(<span class="string">f&quot;每个视频的场景数-阈值图已保存到: <span class="subst">&#123;plot_path1&#125;</span>&quot;</span>)</span><br><span class="line">            plt.close()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 图2: 平均场景数 vs 阈值</span></span><br><span class="line">            avg_scenes_df = results_df.groupby(<span class="string">&quot;threshold&quot;</span>)[<span class="string">&quot;num_scenes&quot;</span>].mean().reset_index()</span><br><span class="line">            plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">            plt.plot(avg_scenes_df[<span class="string">&quot;threshold&quot;</span>], avg_scenes_df[<span class="string">&quot;num_scenes&quot;</span>], marker=<span class="string">&#x27;o&#x27;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            plt.xlabel(<span class="string">&quot;ContentDetector Threshold&quot;</span>)</span><br><span class="line">            plt.ylabel(<span class="string">&quot;Average Number of Detected Scenes&quot;</span>)</span><br><span class="line">            plt.title(<span class="string">&quot;Average Number of Scenes vs. Threshold (Across Sampled Videos)&quot;</span>)</span><br><span class="line">            plt.grid(<span class="literal">True</span>)</span><br><span class="line">            plot_path2 = output_dir_base / <span class="string">&quot;avg_scenes_vs_threshold.png&quot;</span></span><br><span class="line">            plt.savefig(plot_path2)</span><br><span class="line">            logger.info(<span class="string">f&quot;平均场景数-阈值图已保存到: <span class="subst">&#123;plot_path2&#125;</span>&quot;</span>)</span><br><span class="line">            plt.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(<span class="string">f&quot;生成图表时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提出建议（基于启发式，用户仍需判断）</span></span><br><span class="line">    logger.info(<span class="string">&quot;--- 阈值选择建议 ---&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> results_df <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># 启发式：寻找场景数开始急剧下降然后趋于平缓的“拐点”</span></span><br><span class="line">        <span class="comment"># 或者场景数在一个小范围内波动但相对稳定的区域</span></span><br><span class="line">        avg_scenes_series = results_df.groupby(<span class="string">&quot;threshold&quot;</span>)[<span class="string">&quot;num_scenes&quot;</span>].mean()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> avg_scenes_series.empty:</span><br><span class="line">            logger.info(<span class="string">&quot;请查看 &#x27;avg_scenes_vs_threshold.png&#x27; 图表。&quot;</span>)</span><br><span class="line">            logger.info(<span class="string">&quot;理想的阈值通常位于以下区域：&quot;</span>)</span><br><span class="line">            logger.info(<span class="string">&quot;  - 场景数量开始显著减少之前的点（如果你想捕捉更多细节）。&quot;</span>)</span><br><span class="line">            logger.info(<span class="string">&quot;  - 场景数量趋于稳定，不再随阈值增加而大幅减少的点（如果你想更鲁棒，减少误报）。&quot;</span>)</span><br><span class="line">            logger.info(<span class="string">&quot;  - 避免阈值过低导致场景数过多（可能是噪声或微小变化）。&quot;</span>)</span><br><span class="line">            logger.info(<span class="string">&quot;  - 避免阈值过高导致场景数过少（可能遗漏真实切换）。&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 尝试找到一个“拐点”的简单启发式</span></span><br><span class="line">            <span class="comment"># 计算二阶差分，寻找变化最大的地方，但这可能不稳定</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                diff1 = avg_scenes_series.diff().fillna(<span class="number">0</span>)</span><br><span class="line">                diff2 = diff1.diff().fillna(<span class="number">0</span>)</span><br><span class="line">                <span class="comment"># 寻找 diff2 绝对值最大的几个点，或者第一个显著的正值（表示下降趋势减缓）</span></span><br><span class="line">                <span class="comment"># 这是一个非常简化的方法，实际效果可能有限</span></span><br><span class="line">                potential_elbow_threshold = diff2.<span class="built_in">abs</span>().nlargest(<span class="number">3</span>).index.tolist()</span><br><span class="line">                <span class="keyword">if</span> potential_elbow_threshold:</span><br><span class="line">                    logger.info(</span><br><span class="line">                        <span class="string">f&quot;  根据简单的变化率分析，可以关注以下阈值附近的表现：<span class="subst">&#123;<span class="built_in">sorted</span>(potential_elbow_threshold)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">pass</span>  <span class="comment"># 启发式失败，不影响主要功能</span></span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">&quot;结合 &#x27;saved_scene_images&#x27; (如果生成了) 中的实际场景图片进行人工判断。&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.warning(<span class="string">&quot;未能计算平均场景数，无法提供基于图表的建议。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">f&quot;请检查输出目录 &#x27;<span class="subst">&#123;output_dir_base&#125;</span>&#x27; 中的结果。&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> results_df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        description=<span class="string">&quot;为一批视频探索 ContentDetector 的最佳阈值。&quot;</span>,</span><br><span class="line">        formatter_class=argparse.ArgumentDefaultsHelpFormatter</span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(<span class="string">&quot;input_source&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;包含视频文件的目录路径，或单个视频文件路径。&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-e&quot;</span>, <span class="string">&quot;--extensions&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;.mp4,.mkv,.mov,.avi&quot;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;逗号分隔的视频文件扩展名 (例如: .mp4,.mov)。&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-r&quot;</span>, <span class="string">&quot;--recursive&quot;</span>, action=<span class="string">&quot;store_true&quot;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;如果 input_source 是目录，则递归扫描子目录。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 抽样参数</span></span><br><span class="line">    sample_group = parser.add_mutually_exclusive_group()</span><br><span class="line">    sample_group.add_argument(<span class="string">&quot;--sample_ratio&quot;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=-<span class="number">1.0</span>,</span><br><span class="line">                              <span class="built_in">help</span>=<span class="string">&quot;要处理的视频占总数的比例 (0.0 到 1.0)。例如 0.1 表示 10%%。默认为-1.0 (处理所有)。&quot;</span>)</span><br><span class="line">    sample_group.add_argument(<span class="string">&quot;--num_sample_videos&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=-<span class="number">1</span>,</span><br><span class="line">                              <span class="built_in">help</span>=<span class="string">&quot;要随机抽取的视频数量。默认为-1 (处理所有或按比例)。如果指定，则优先于 sample_ratio。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ContentDetector 参数</span></span><br><span class="line">    parser.add_argument(<span class="string">&quot;--threshold_start&quot;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">15.0</span>, <span class="built_in">help</span>=<span class="string">&quot;测试的 ContentDetector 阈值起始值。&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--threshold_end&quot;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">35.0</span>, <span class="built_in">help</span>=<span class="string">&quot;测试的 ContentDetector 阈值结束值。&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--threshold_step&quot;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">1.0</span>, <span class="built_in">help</span>=<span class="string">&quot;测试的 ContentDetector 阈值步长。&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--min_len&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;传递给 ContentDetector 的 min_scene_len 参数 (帧数)。建议保持为1以分析原始切点。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出和可视化</span></span><br><span class="line">    parser.add_argument(<span class="string">&quot;-o&quot;</span>, <span class="string">&quot;--output_dir&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;threshold_exploration_output&quot;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;保存结果 (CSV, 图表, 图片) 的主输出目录。&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--save_images_for&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;逗号分隔的阈值列表，将为这些阈值下的检测结果保存场景图片。例如 &#x27;15.0,20.0,25.0&#x27;。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">1</span>:</span><br><span class="line">        parser.print_help(sys.stderr)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    input_path_obj = Path(args.input_source)</span><br><span class="line">    video_files_to_scan = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> input_path_obj.is_dir():</span><br><span class="line">        ext_list = [e.strip().lower() <span class="keyword">for</span> e <span class="keyword">in</span> args.extensions.split(<span class="string">&#x27;,&#x27;</span>) <span class="keyword">if</span> e.strip()]</span><br><span class="line">        video_files_to_scan = get_video_files(input_path_obj, ext_list, args.recursive)</span><br><span class="line">    <span class="keyword">elif</span> input_path_obj.is_file():</span><br><span class="line">        video_files_to_scan.append(input_path_obj)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logger.error(<span class="string">f&quot;输入路径 &#x27;<span class="subst">&#123;args.input_source&#125;</span>&#x27; 不是有效的文件或目录。&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> video_files_to_scan:</span><br><span class="line">        logger.info(<span class="string">&quot;在指定路径下没有找到符合条件的视频文件。&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    threshold_r = (args.threshold_start, args.threshold_end, args.threshold_step)</span><br><span class="line">    output_dir_base_path = Path(args.output_dir)</span><br><span class="line"></span><br><span class="line">    save_thresholds_for_images = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> args.save_images_for:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            save_thresholds_for_images = [<span class="built_in">float</span>(t.strip()) <span class="keyword">for</span> t <span class="keyword">in</span> args.save_images_for.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            logger.error(<span class="string">&quot;`--save_images_for` 参数中的阈值列表格式错误。应为逗号分隔的数字。&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    explore_thresholds(</span><br><span class="line">        video_files_to_scan,</span><br><span class="line">        threshold_r,</span><br><span class="line">        sample_ratio=args.sample_ratio,</span><br><span class="line">        num_sample_videos=args.num_sample_videos,</span><br><span class="line">        min_scene_len=args.min_len,</span><br><span class="line">        output_dir_base=output_dir_base_path,</span><br><span class="line">        save_images_for_thresholds=save_thresholds_for_images</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;阈值探索完成。&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="亮度参数选定方法参考代码">亮度参数选定方法参考代码</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_average_brightness</span>(<span class="params">frame_bgr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算 BGR 帧的平均亮度。</span></span><br><span class="line"><span class="string">    一种常见的方法是先转换为灰度图，然后计算平均像素值。</span></span><br><span class="line"><span class="string">    另一种是直接计算 BGR 各通道的平均值，然后再取平均，或者使用加权平均（如亮度公式 Y = 0.299R + 0.587G + 0.114B）。</span></span><br><span class="line"><span class="string">    这里我们使用转换为灰度图的方法，因为它直接反映了人眼感知的亮度。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    gray_frame = cv2.cvtColor(frame_bgr, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    average_brightness = np.mean(gray_frame)</span><br><span class="line">    <span class="keyword">return</span> average_brightness</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">analyze_video_brightness</span>(<span class="params">video_path: <span class="built_in">str</span>, output_csv_path: <span class="built_in">str</span> = <span class="literal">None</span>, frame_skip: <span class="built_in">int</span> = <span class="number">0</span>, max_frames: <span class="built_in">int</span> = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    逐帧分析视频的平均亮度。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        video_path (str): 视频文件路径。</span></span><br><span class="line"><span class="string">        output_csv_path (str, optional): CSV文件输出路径。如果提供，则将结果保存到此文件。</span></span><br><span class="line"><span class="string">        frame_skip (int, optional): 每隔多少帧分析一次（0 表示逐帧分析）。</span></span><br><span class="line"><span class="string">        max_frames (int, optional): 最多分析多少帧。如果为 None，则分析整个视频。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> Path(video_path).exists():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 视频文件未找到: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 无法打开视频文件: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    total_frames_video = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">    fps = cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;视频信息: <span class="subst">&#123;Path(video_path).name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  总帧数: <span class="subst">&#123;total_frames_video&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  FPS: <span class="subst">&#123;fps:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;帧号\t平均亮度&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    csv_data = []</span><br><span class="line">    frame_count = <span class="number">0</span></span><br><span class="line">    processed_frame_num = <span class="number">0</span>  <span class="comment"># 实际处理的帧的计数器，用于 max_frames</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># 视频结束或读取错误</span></span><br><span class="line"></span><br><span class="line">        current_frame_num_video = <span class="built_in">int</span>(</span><br><span class="line">            cap.get(cv2.CAP_PROP_POS_FRAMES))  <span class="comment"># 获取当前帧在视频中的实际编号 (1-based for some backends, 0-based for others)</span></span><br><span class="line">        <span class="comment"># 或者直接用 frame_count 作为0-based的帧号</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> frame_count % (frame_skip + <span class="number">1</span>) == <span class="number">0</span>:  <span class="comment"># frame_skip=0 表示每帧都处理</span></span><br><span class="line">            avg_brightness = calculate_average_brightness(frame)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;frame_count&#125;</span>\t<span class="subst">&#123;avg_brightness:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> output_csv_path:</span><br><span class="line">                csv_data.append([frame_count, avg_brightness])</span><br><span class="line"></span><br><span class="line">            processed_frame_num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> max_frames <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> processed_frame_num &gt;= max_frames:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;\n已达到最大分析帧数限制: <span class="subst">&#123;max_frames&#125;</span> 帧。&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        frame_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    cap.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;分析完成。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> output_csv_path <span class="keyword">and</span> csv_data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            output_file = Path(output_csv_path)</span><br><span class="line">            output_file.parent.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)  <span class="comment"># 创建输出目录</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">import</span> csv</span><br><span class="line">                writer = csv.writer(f)</span><br><span class="line">                writer.writerow([<span class="string">&#x27;FrameNumber&#x27;</span>, <span class="string">&#x27;AverageBrightness&#x27;</span>])  <span class="comment"># 写入表头</span></span><br><span class="line">                writer.writerows(csv_data)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;亮度数据已保存到: <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;错误: 无法保存 CSV 文件到 <span class="subst">&#123;output_csv_path&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;分析视频每帧的平均亮度。&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;video_path&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;要分析的视频文件路径。&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-o&quot;</span>, <span class="string">&quot;--output_csv&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;可选：将结果保存到的 CSV 文件路径。例如：brightness_data.csv&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-s&quot;</span>, <span class="string">&quot;--frame_skip&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;可选：每隔多少帧分析一次（0 表示逐帧分析，1 表示隔1帧分析1帧，即处理第0,2,4...帧）。默认为0。&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-m&quot;</span>, <span class="string">&quot;--max_frames&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="literal">None</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;可选：最多分析的帧数。用于快速预览长视频。默认为分析整个视频。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">1</span>:  <span class="comment"># 如果没有参数，打印帮助信息并退出</span></span><br><span class="line">        parser.print_help(sys.stderr)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    analyze_video_brightness(args.video_path, args.output_csv, args.frame_skip, args.max_frames)</span><br></pre></td></tr></table></figure><h2 id="阈值选择方法">阈值选择方法</h2><blockquote><p>查看 avg_scenes_vs_threshold.png 图。通常，你会寻找一个点，在该点之后，进一步降低阈值会导致场景数量急剧增加（可能引入过多噪声或非期望的切点），或者在该点之前，提高阈值会导致场景数量急剧减少（可能遗漏真实切点）。一个“平稳”的区域或者一个明显的“拐点”可能是好的候选范围。<br>对于你在图表上选出的几个候选阈值</p></blockquote><ul><li>可视化阈值选择工具使用方法</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python threshold_explorer.py &quot;/Volumes/shared/czq/video/scene-detect/淡入淡出-result/无转场-result/无转场/无转场/无转场/无转场/无转场/无转场/无转场/无转场/无转场&quot; \</span><br><span class="line">   -e &quot;.mp4,.mkv&quot; \</span><br><span class="line">   -r \</span><br><span class="line">   --sample_ratio 0.2 \</span><br><span class="line">   --threshold_start 1.0 \</span><br><span class="line">   --threshold_end 30.0 \</span><br><span class="line">   --threshold_step 1.0 \</span><br><span class="line">   --min_len 1 \</span><br><span class="line">   --output_dir &quot;./content_detector_exploration&quot; \</span><br><span class="line">   --save_images_for &quot;8.0,12.0,15.0&quot;</span><br></pre></td></tr></table></figure><ul><li>亮度检测工具使用方法</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python analyze_brightness.py &#x27;/Volumes/shared/czq/video/scene-detect/淡入淡出-result/无转场-result/无转场/无转场/无转场/无转场/无转场/无转场/无转场/无转场/无转场/3 (15).mp4&#x27;</span><br></pre></td></tr></table></figure><h3 id="结果显示">结果显示</h3><blockquote><p>如图</p></blockquote><ul><li>平均阈值</li></ul><p><img src="/2025/05/15/scene-detect-method/avg_scenes_vs_threshold.png" class="lazyload placeholder" data-srcset="/2025/05/15/scene-detect-method/avg_scenes_vs_threshold.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>检测视频所有阈值</li></ul><p><img src="/2025/05/15/scene-detect-method/scenes_vs_threshold_per_video.png" class="lazyload placeholder" data-srcset="/2025/05/15/scene-detect-method/scenes_vs_threshold_per_video.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2025-05-14 19:17:47,588 - INFO - --- 阈值选择建议 ---</span><br><span class="line">2025-05-14 19:17:47,589 - INFO - 请查看 &#x27;avg_scenes_vs_threshold.png&#x27; 图表。</span><br><span class="line">2025-05-14 19:17:47,589 - INFO - 理想的阈值通常位于以下区域：</span><br><span class="line">2025-05-14 19:17:47,589 - INFO -   - 场景数量开始显著减少之前的点（如果你想捕捉更多细节）。</span><br><span class="line">2025-05-14 19:17:47,589 - INFO -   - 场景数量趋于稳定，不再随阈值增加而大幅减少的点（如果你想更鲁棒，减少误报）。</span><br><span class="line">2025-05-14 19:17:47,589 - INFO -   - 避免阈值过低导致场景数过多（可能是噪声或微小变化）。</span><br><span class="line">2025-05-14 19:17:47,589 - INFO -   - 避免阈值过高导致场景数过少（可能遗漏真实切换）。</span><br><span class="line">2025-05-14 19:17:47,590 - INFO -   根据简单的变化率分析，可以关注以下阈值附近的表现：[2.0, 3.0, 9.0]</span><br><span class="line">2025-05-14 19:17:47,590 - INFO - 结合 &#x27;saved_scene_images&#x27; (如果生成了) 中的实际场景图片进行人工判断。</span><br><span class="line">2025-05-14 19:17:47,590 - INFO - 请检查输出目录 &#x27;content_detector_exploration&#x27; 中的结果。</span><br><span class="line">2025-05-14 19:17:47,590 - INFO - 阈值探索完成。</span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><ul><li><ol><li><a href="https://www.scenedetect.com/docs/latest/cli.html#detect-threshold">https://www.scenedetect.com/docs/latest/cli.html#detect-threshold</a></li></ol></li><li><ol start="2"><li><a href="https://caozhaoqi.github.io/2025/04/03/video-secene-detect/">https://caozhaoqi.github.io/2025/04/03/video-secene-detect/</a></li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于yolov8根据CVAT标注结果训练模型</title>
      <link href="/2025/04/09/yolov8-train-model/"/>
      <url>/2025/04/09/yolov8-train-model/</url>
      
        <content type="html"><![CDATA[<h2 id="模型简介">模型简介</h2><blockquote><p>YOLO 是一种实时目标检测算法家族的名称。与传统的需要先进行区域提议（Region Proposal）再进行分类的两阶段检测器（如 Faster R-CNN）不同，YOLO 将目标检测视为一个回归问题，直接从整个图像中预测边界框的位置和类别概率，实现了端到端（end-to-end）的检测。</p></blockquote><ul><li><strong>核心思想:</strong><ol><li><strong>网格划分:</strong> 将输入图像划分为 S x S 的网格 (Grid Cells)。</li><li><strong>单元格负责制:</strong> 如果一个物体的中心落入某个网格单元，则该单元负责检测该物体。</li><li><strong>边界框预测:</strong> 每个网格单元预测 B 个边界框 (Bounding Boxes) 以及这些框的置信度 (Confidence Score，表示框内含有物体的概率及框的准确度)。每个边界框包含 5 个预测值：<code>x</code>, <code>y</code> (框中心相对单元格的坐标), <code>w</code>, <code>h</code> (框宽高相对整张图像的比例), 和 <code>confidence</code>。</li><li><strong>类别概率预测:</strong> 每个网格单元还预测 C 个条件类别概率 (Conditional Class Probabilities)，即在包含物体的前提下，该物体属于每个类别的概率。</li><li><strong>最终检测:</strong> 将每个边界框的置信度与对应单元格的类别概率相乘，得到每个框针对每个类别的得分。通过设置阈值过滤低分框，并使用非极大值抑制 (Non-Maximum Suppression, NMS) 消除冗余的重叠框，得到最终的检测结果。</li></ol></li></ul><h2 id="CVAT简介">CVAT简介</h2><blockquote><p>基于 Web 的、功能强大的计算机视觉数据标注工具。它支持对图像和视频进行多种类型的标注，是计算机视觉项目（尤其是监督学习）中数据准备阶段的重要工具</p></blockquote><ul><li><strong>主要功能:</strong><ul><li><strong>多种标注类型:</strong><ul><li><strong>边界框 (Bounding Boxes):</strong> 用于目标检测任务，框出物体的位置。</li><li><strong>多边形 (Polygons):</strong> 用于实例分割任务，精确勾勒物体的轮廓。</li><li><strong>关键点 (Points / Skeleton):</strong> 用于姿态估计、人脸关键点检测等任务。</li><li><strong>分割掩码 (Segmentation Masks):</strong> 用于语义分割任务，为图像中的每个像素分配类别。</li><li><strong>标签 (Tags):</strong> 用于图像分类任务，为整个图像分配类别标签。</li><li><strong>轨迹/立方体 (Tracks/Cuboids):</strong> 支持视频标注，可以跟踪物体或标注3D边界框。</li></ul></li><li><strong>图像和视频支持:</strong> 可以直接对单张图片或整个视频序列进行标注。视频标注支持插值（interpolation），可以减少手动标注的工作量。</li><li><strong>半自动和自动标注:</strong> 集成了多种 AI 模型（如目标检测、分割模型，包括 YOLO、SAM 等），可以预标注数据，然后由人工进行修正，提高效率。支持连接外部 AI 模型（如通过 Nuclio）。</li><li><strong>协作:</strong> 支持多用户协作，可以分配任务、进行审核等。</li><li><strong>数据管理:</strong> 提供项目 (Project) 和任务 (Task) 管理功能，方便组织数据。</li><li><strong>多种导出格式:</strong> 支持导出为多种常见的数据集格式，如 COCO JSON, Pascal VOC XML, YOLO, MOT, Segmentation Mask 等，方便与各种深度学习框架对接。</li><li><strong>可扩展性:</strong> 开源，可以通过插件或集成自定义工具进行扩展。</li><li><strong>部署:</strong> 可以通过 Docker 在本地、服务器或云上部署。</li></ul></li></ul><p><img src="/2025/04/09/yolov8-train-model/train_model.png" class="lazyload placeholder" data-srcset="/2025/04/09/yolov8-train-model/train_model.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="CVAT标注结果导出">CVAT标注结果导出</h2><blockquote><p>使用从 CVAT 导出的 YOLO 格式数据，并在 <strong>CPU</strong> 上训练一个新的 YOLOv8 模型（使用 Ultralytics 框架），以下详细步骤。</p></blockquote><p><strong>重要提示：</strong> 在 CPU 上训练目标检测模型（尤其是像 YOLOv8 这样较现代的模型）将会<strong>非常非常慢</strong>。根据你的数据集大小、模型大小和 CPU 性能，一个 epoch 可能需要数小时甚至更长时间。这通常只适用于非常小的数据集、快速原型验证或没有 GPU 可用的情况。请有心理准备。</p><p><strong>步骤 1：从 CVAT 导出 YOLO 格式数据</strong></p><ol><li><strong>登录 CVAT</strong> 并导航到你已完成标注的任务 (Task)。</li><li>点击任务卡片上的 <strong>“Actions”</strong> (或任务页面内的菜单按钮)。</li><li>选择 <strong>“Export task dataset”</strong>。</li><li>在弹出的窗口中：<ul><li><strong>选择格式:</strong> <strong>务必选择 <code>YOLO</code> 或 <code>YOLO ZIP</code></strong>。</li><li><strong>子集划分 (可选但推荐):</strong> 如果你在 CVAT 中已将数据分配到 <code>Train</code>, <code>Validation</code>, <code>Test</code> 子集，请确保勾选了相应的选项来导出这些子集。这会省去你手动划分的步骤。如果没划分，则导出整个数据集。</li><li><strong>保存图像:</strong> 确保勾选了 “Save images” 选项。</li></ul></li><li>点击 <strong>“OK”</strong> 或 <strong>“Export”</strong>。</li><li>等待导出任务完成，然后下载生成的 <strong>ZIP 文件</strong>。</li></ol><p><strong>步骤 2：准备数据集文件</strong></p><ol><li><strong>解压 ZIP 文件:</strong> 将下载的 ZIP 文件解压到你电脑上一个方便访问的位置，例如 <code>~/datasets/my_yolo_dataset</code>。</li><li><strong>检查文件结构:</strong> 解压后，检查里面的内容。一个典型的 YOLO 导出（特别是包含子集划分的）可能包含：<ul><li><code>data.yaml</code> (或 <code>obj.data</code> 和 <code>obj.names</code> 文件)：这是配置文件，非常重要。</li><li><code>train/</code> (或类似的名称)<ul><li><code>images/</code>: 包含训练集的图像文件 (<code>.jpg</code>, <code>.png</code> 等)。</li><li><code>labels/</code>: 包含训练集的标注文件 (<code>.txt</code>)，每个图像对应一个。</li></ul></li><li><code>valid/</code> (或 <code>val/</code>)<ul><li><code>images/</code>: 包含验证集的图像文件。</li><li><code>labels/</code>: 包含验证集的标注文件。</li></ul></li><li><code>test/</code> (可选)<ul><li><code>images/</code>: 包含测试集的图像文件。</li><li><code>labels/</code>: 包含测试集的标注文件。</li></ul></li><li><em>如果导出时没有划分:</em> 你可能只有一个 <code>images/</code> 和一个 <code>labels/</code> 文件夹，以及配置文件。</li></ul></li><li><strong>验证/修改 <code>data.yaml</code> (或创建它):</strong> 这是告诉 YOLOv8 框架如何找到你的数据的关键文件。<ul><li><strong>如果已有 <code>data.yaml</code>:</strong> 用文本编辑器打开它。它看起来类似这样：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">path:</span> <span class="string">../datasets/my_yolo_dataset</span> <span class="comment"># ！！可能需要修改：数据集根目录的相对或绝对路径</span></span><br><span class="line"><span class="attr">train:</span> <span class="string">train/images</span>             <span class="comment"># ！！训练集图片路径 (相对于 path)</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">valid/images</span>               <span class="comment"># ！！验证集图片路径 (相对于 path)</span></span><br><span class="line"><span class="comment"># test: test/images             # 可选：测试集图片路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Classes</span></span><br><span class="line"><span class="attr">nc:</span> <span class="number">9</span>                           <span class="comment"># ！！类别数量，必须准确</span></span><br><span class="line"><span class="attr">names:</span> [<span class="string">&#x27;bus&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;clock&#x27;</span>, <span class="string">...</span>] <span class="comment"># ！！类别名称列表，顺序必须与 labels/*.txt 中的类别ID (0, 1, 2...) 完全对应！</span></span><br></pre></td></tr></table></figure><strong>你需要仔细检查并可能修改：</strong><ul><li><code>path</code>: 确保它正确指向你解压数据集的<strong>根目录</strong>。<strong>相对于你将要运行训练命令的位置</strong>。使用绝对路径通常更安全。例如：<code>/home/your_user/datasets/my_yolo_dataset</code>。</li><li><code>train</code>, <code>val</code>, <code>test</code>: 确保它们正确指向包含图像文件的文件夹（相对于 <code>path</code> 定义的路径）。</li><li><code>nc</code>: 确保类别数量正确无误。</li><li><code>names</code>: <strong>极其重要！</strong> 确保这个列表中的类别名称<strong>顺序</strong>与 CVAT 导出时使用的类别 ID（从 0 开始）以及 <code>labels/</code> 文件夹下 <code>.txt</code> 文件中使用的数字 ID 完全一致。CVAT 导出 YOLO 格式时通常会保证这一点，但务必检查。</li></ul></li><li><strong>如果只有 <code>obj.data</code> 和 <code>obj.names</code>:</strong> 你需要<strong>手动创建一个 <code>data.yaml</code> 文件</strong>。<ul><li>打开 <code>obj.names</code>，将里面的类别名称按顺序列入 <code>data.yaml</code> 的 <code>names</code> 字段。计算类别数量填入 <code>nc</code>。</li><li>打开 <code>obj.data</code>，它通常包含类别数量、训练集/验证集图像列表文件的路径等信息。你需要根据这些信息和你的实际文件结构来填写 <code>data.yaml</code> 中的 <code>path</code>, <code>train</code>, <code>val</code> 字段。你可能需要将 <code>obj.data</code> 中指向的图像列表文件（例如 <code>train.txt</code>, <code>valid.txt</code>）也放到你的数据集目录中，或者直接修改 <code>data.yaml</code> 指向包含图像的文件夹。创建 <code>data.yaml</code> 通常更符合现代 YOLOv8 的习惯。</li></ul></li></ul></li><li><strong>手动划分数据集 (如果导出时未划分):</strong><ul><li>如果你只有一个 <code>images/</code> 和 <code>labels/</code> 文件夹，你需要手动将其划分为训练集和验证集。</li><li>创建子目录：在数据集根目录下创建 <code>train/images</code>, <code>train/labels</code>, <code>valid/images</code>, <code>valid/labels</code>。</li><li>编写脚本或手动移动文件：<ul><li>确定划分比例（例如，80% 训练，20% 验证）。</li><li>遍历 <code>images/</code> 文件夹中的所有图像文件。</li><li>对于每个图像文件（例如 <code>image1.jpg</code>），找到其对应的标注文件（<code>labels/image1.txt</code>）。</li><li>根据随机抽样或固定规则，将这对文件（图像和标注）移动到 <code>train/</code> 或 <code>valid/</code> 下相应的 <code>images</code> 和 <code>labels</code> 文件夹中。</li><li>确保图像和它的 <code>.txt</code> 标注文件始终在同一集合（train 或 valid）中。</li></ul></li><li>更新 <code>data.yaml</code> 中的 <code>train</code> 和 <code>val</code> 路径指向你新创建的 <code>train/images</code> 和 <code>valid/images</code> 文件夹。</li></ul></li></ol><p><strong>步骤 3：设置 Python 和 Ultralytics 环境</strong></p><ol><li><strong>安装 Python:</strong> 确保你安装了较新版本的 Python（推荐 3.8 - 3.11）。</li><li><strong>创建虚拟环境 (强烈推荐):</strong> 这可以避免库版本冲突。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 venv (Python 内置)</span></span><br><span class="line">python -m venv yolo_cpu_env</span><br><span class="line"><span class="built_in">source</span> yolo_cpu_env/bin/activate  <span class="comment"># Linux/macOS</span></span><br><span class="line"><span class="comment"># yolo_cpu_env\Scripts\activate  # Windows</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用 Conda</span></span><br><span class="line"><span class="comment"># conda create -n yolo_cpu_env python=3.9</span></span><br><span class="line"><span class="comment"># conda activate yolo_cpu_env</span></span><br></pre></td></tr></table></figure></li><li><strong>安装 Ultralytics YOLOv8:</strong> 在激活的虚拟环境中运行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ultralytics</span><br></pre></td></tr></table></figure>这会自动安装 PyTorch 的 CPU 版本（因为它检测不到兼容的 GPU/CUDA）以及其他必要的依赖库。</li></ol><p><strong>步骤 4：配置训练参数</strong></p><ol><li><strong>选择预训练模型:</strong> 为了利用迁移学习并加快（相对而言）收敛速度，你需要从一个预训练模型开始。对于 CPU 训练，<strong>强烈建议从小模型开始</strong>：<ul><li><code>yolov8n.pt</code> (Nano): 最快，占用资源最少，但精度相对较低。<strong>CPU 训练的首选起点。</strong></li><li><code>yolov8s.pt</code> (Small): 稍大，稍慢，精度稍高。如果 <code>yolov8n</code> 效果不佳且你的 CPU 尚可承受，可以尝试。</li><li>更大的模型 (<code>m</code>, <code>l</code>, <code>x</code>) 在 CPU 上训练几乎不可行。</li><li>Ultralytics 会在你第一次使用模型时自动下载 <code>.pt</code> 文件。</li></ul></li><li><strong>确定训练参数:</strong><ul><li><strong><code>model</code>:</strong> 你选择的预训练模型，例如 <code>yolov8n.pt</code>。</li><li><strong><code>data</code>:</strong> 指向你准备好的 <code>data.yaml</code> 文件的路径。</li><li><strong><code>epochs</code>:</strong> 训练的总轮数。对于 CPU，可以先设置一个较小的值（例如 10-50）来测试流程和观察初步结果，后续再增加。完整训练可能需要 100-300 轮甚至更多，但这在 CPU 上会耗费极长时间。</li><li><strong><code>batch</code>:</strong> 批处理大小。<strong>CPU 训练的关键参数</strong>。由于 CPU 计算能力和内存带宽限制，你需要设置一个<strong>非常小</strong>的值，例如 <code>2</code>, <code>4</code>, <code>8</code>。可以从 4 或 8 开始尝试，如果内存不足 (OOM) 或 CPU 占用过高导致系统卡顿，则需要减小。</li><li><strong><code>imgsz</code>:</strong> 输入图像的尺寸。通常设置为 640。更大的尺寸会显著增加 CPU 计算负担和内存占用。CPU 训练建议保持 640 或更小。</li><li><strong><code>device</code>:</strong> <strong>必须设置为 <code>cpu</code></strong>。<code>device=cpu</code>。</li><li><strong><code>workers</code>:</strong> 数据加载时使用的 CPU 核心数。可以设置为你 CPU 核心数的一部分，例如 <code>2</code>, <code>4</code>。不一定越多越好，过高可能导致 CPU 争用。</li></ul></li></ol><p><strong>步骤 5：执行训练</strong></p><ol><li><p><strong>打开终端或命令行。</strong></p></li><li><p><strong>激活你的虚拟环境</strong> (如 <code>source yolo_cpu_env/bin/activate</code>)。</p></li><li><p><strong>导航到你的项目目录</strong> (通常是你存放 <code>data.yaml</code> 或打算运行脚本的地方，确保 <code>data.yaml</code> 中的路径相对于此位置是正确的)。</p></li><li><p><strong>运行训练命令:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yolo train model=yolov8n.pt data=/path/to/your/data.yaml epochs=50 batch=4 imgsz=640 device=cpu workers=4</span><br></pre></td></tr></table></figure><ul><li><strong>请将 <code>/path/to/your/data.yaml</code> 替换为你的 <code>data.yaml</code> 文件的实际路径。</strong></li><li><strong>根据需要调整 <code>epochs</code>, <code>batch</code>, <code>workers</code> 的值。</strong></li><li><strong>再次强调：请有耐心！</strong> 你会看到训练开始，并显示每个 epoch 的进度、损失值等，但这会非常慢。</li></ul></li><li><p><strong>或者使用 Python 脚本进行训练:</strong> 创建一个 Python 文件（例如 <code>train_cpu.py</code>）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"><span class="keyword">import</span> torch <span class="comment"># 导入 torch 以便检查</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 检查 PyTorch 是否确实在使用 CPU</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;PyTorch device: <span class="subst">&#123;torch.cuda.is_available() <span class="keyword">and</span> torch.device(<span class="string">&#x27;cuda&#x27;</span>) <span class="keyword">or</span> torch.device(<span class="string">&#x27;cpu&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载一个预训练模型 (例如 yolov8n.pt)</span></span><br><span class="line">    <span class="comment"># 模型文件如果本地没有，首次运行时会自动下载</span></span><br><span class="line">    model = YOLO(<span class="string">&#x27;yolov8n.pt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始训练</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        results = model.train(</span><br><span class="line">            data=<span class="string">&#x27;/path/to/your/data.yaml&#x27;</span>,  <span class="comment"># ！！替换为你的 data.yaml 路径</span></span><br><span class="line">            epochs=<span class="number">50</span>,                      <span class="comment"># 训练轮数</span></span><br><span class="line">            batch=<span class="number">4</span>,                        <span class="comment"># 批大小 (根据CPU和内存调整)</span></span><br><span class="line">            imgsz=<span class="number">640</span>,                      <span class="comment"># 图像尺寸</span></span><br><span class="line">            device=<span class="string">&#x27;cpu&#x27;</span>,                   <span class="comment"># ！！指定使用 CPU</span></span><br><span class="line">            workers=<span class="number">4</span>,                      <span class="comment"># 数据加载进程数 (根据CPU核心数调整)</span></span><br><span class="line">            <span class="comment"># 其他可选参数:</span></span><br><span class="line">            <span class="comment"># project=&#x27;runs/train_cpu&#x27;,     # 自定义保存结果的项目名</span></span><br><span class="line">            <span class="comment"># name=&#x27;exp_cpu_run1&#x27;,          # 自定义本次运行的名称</span></span><br><span class="line">            <span class="comment"># patience=20,                  # 早停轮数 (如果验证集指标在20轮内没有提升则停止)</span></span><br><span class="line">            <span class="comment"># lr0=0.01,                     # 初始学习率 (通常用默认值)</span></span><br><span class="line">        )</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;训练完成！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;结果保存在: <span class="subst">&#123;results.save_dir&#125;</span>&quot;</span>) <span class="comment"># results 对象在 v8 中不直接包含 save_dir，需要从 model 或 trainer 获取，或者直接查找 runs/train 目录</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;训练过程中发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后运行脚本：<code>python train_cpu.py</code></p></li></ol><ul><li>GPU版本</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pip install ultralytics</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> torch <span class="comment"># Import torch to check CUDA availability first</span></span><br><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"><span class="keyword">import</span> os <span class="comment"># Import os for path joining if needed</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># --- Verify CUDA Availability ---</span></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        device_to_use = <span class="number">0</span> <span class="comment"># Use the first available GPU (index 0)</span></span><br><span class="line">        <span class="comment"># device_to_use = &#x27;cuda&#x27; # Alternative way to specify default GPU</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;CUDA is available! Training on GPU device: <span class="subst">&#123;torch.cuda.get_device_name(device_to_use)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;错误：未检测到兼容的 NVIDIA GPU 或 CUDA 配置不正确。&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请检查驱动、CUDA Toolkit、cuDNN 和 GPU 版本的 PyTorch 是否已正确安装。&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;将尝试在 CPU 上运行，但这会非常慢...&quot;</span>)</span><br><span class="line">        device_to_use = <span class="string">&#x27;cpu&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- Configuration ---</span></span><br><span class="line">    <span class="comment"># ！！确保 data.yaml 路径正确！！ (使用 os.path.join 或 pathlib 更佳)</span></span><br><span class="line">    data_yaml_path = <span class="string">r&#x27;C:\Users\DELL\Desktop\test_data\test_data\data.yaml&#x27;</span></span><br><span class="line">    model_to_load = <span class="string">&#x27;yolov8x.pt&#x27;</span> <span class="comment"># Using the extra-large model</span></span><br><span class="line">    num_epochs = <span class="number">50</span>            <span class="comment"># Number of training epochs</span></span><br><span class="line">    batch_size = <span class="number">16</span>            <span class="comment"># !! Batch size for GPU (Adjust based on VRAM: 8, 16, 32, etc.)</span></span><br><span class="line">    image_size = <span class="number">640</span>           <span class="comment"># Input image size</span></span><br><span class="line">    num_workers = <span class="number">4</span>            <span class="comment"># Data loading workers (Adjust based on CPU cores)</span></span><br><span class="line">    project_name = <span class="string">&#x27;runs/train_gpu&#x27;</span> <span class="comment"># Directory to save results</span></span><br><span class="line">    run_name = <span class="string">&#x27;exp_gpu_yolov8x&#x27;</span>    <span class="comment"># Specific name for this run</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- Load Model ---</span></span><br><span class="line">    <span class="comment"># Model file will be downloaded automatically if not present locally</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Loading model: <span class="subst">&#123;model_to_load&#125;</span>&quot;</span>)</span><br><span class="line">    model = YOLO(model_to_load)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- Start Training ---</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始训练...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  Data YAML: <span class="subst">&#123;data_yaml_path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  Epochs: <span class="subst">&#123;num_epochs&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  Batch Size: <span class="subst">&#123;batch_size&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  Image Size: <span class="subst">&#123;image_size&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  Device: <span class="subst">&#123;device_to_use&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  Workers: <span class="subst">&#123;num_workers&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        results = model.train(</span><br><span class="line">            data=data_yaml_path,</span><br><span class="line">            epochs=num_epochs,</span><br><span class="line">            batch=batch_size,</span><br><span class="line">            imgsz=image_size,</span><br><span class="line">            device=device_to_use,   <span class="comment"># !! Use the determined device (e.g., 0 or &#x27;cpu&#x27;)</span></span><br><span class="line">            workers=num_workers,</span><br><span class="line">            project=project_name,   <span class="comment"># Specify project directory</span></span><br><span class="line">            name=run_name,          <span class="comment"># Specify run name</span></span><br><span class="line">            <span class="comment"># Other potentially useful optional parameters for GPU:</span></span><br><span class="line">            <span class="comment"># cache=True,           # Cache images in RAM/disk for faster loading (if RAM/disk allows)</span></span><br><span class="line">            <span class="comment"># patience=20,          # Early stopping patience</span></span><br><span class="line">            <span class="comment"># lr0=0.01,             # Initial learning rate</span></span><br><span class="line">            <span class="comment"># optimizer=&#x27;AdamW&#x27;,    # Optimizer (e.g., &#x27;AdamW&#x27;, &#x27;SGD&#x27;)</span></span><br><span class="line">            <span class="comment"># amp=True,             # Use Automatic Mixed Precision (can speed up training, reduce memory, requires compatible GPU)</span></span><br><span class="line">        )</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;训练完成！&quot;</span>)</span><br><span class="line">        <span class="comment"># Note: The &#x27;results&#x27; object itself might not directly contain the save path in all versions/contexts.</span></span><br><span class="line">        <span class="comment"># The results are reliably saved in the project/name directory.</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;训练结果和模型权重保存在: <span class="subst">&#123;os.path.join(project_name, run_name)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> torch.cuda.OutOfMemoryError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;错误：GPU 显存不足 (Out of Memory)！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;尝试减小批处理大小 (batch=<span class="subst">&#123;batch_size&#125;</span>)。例如，尝试 batch=8 或 batch=4。&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;如果显存仍然不足，可以考虑减小图像尺寸 (imgsz) 或使用更小的模型 (如 yolov8l.pt, yolov8m.pt)。&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：找不到文件或目录: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请仔细检查 data.yaml 文件中的路径配置是否正确，特别是 &#x27;path&#x27;, &#x27;train&#x27;, &#x27;val&#x27; 字段。&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;确保 data.yaml 文件本身位于: <span class="subst">&#123;data_yaml_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;训练过程中发生意外错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">import</span> traceback</span><br><span class="line">        traceback.print_exc() <span class="comment"># Print detailed traceback for debugging</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2025/04/09/yolov8-train-model/train_model_cycle.png" class="lazyload placeholder" data-srcset="/2025/04/09/yolov8-train-model/train_model_cycle.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><strong>步骤 6：监控训练和评估结果</strong></p><ol><li><strong>观察终端输出:</strong> 查看每个 epoch 的进度、损失函数值（box_loss, cls_loss, dfl_loss）是否在下降，以及在验证集上的指标（如 P, R, mAP50, mAP50-95）是否在提升。</li><li><strong>查找结果:</strong> 训练过程和结果默认会保存在 <code>runs/train/exp&lt;N&gt;</code> 目录下（例如 <code>runs/train/exp</code>, <code>runs/train/exp2</code> 等）。里面包含：<ul><li><code>weights/</code>: 保存的模型权重文件。<code>best.pt</code> 是基于验证集指标最佳的模型，<code>last.pt</code> 是最后一个 epoch 的模型。<strong><code>best.pt</code> 通常是你需要的模型。</strong></li><li>日志文件 (TensorBoard logs)。</li><li>配置文件副本。</li><li>验证结果图表和图片（例如 <code>confusion_matrix.png</code>, <code>results.png</code>, <code>val_batch0_pred.jpg</code> 等）。</li></ul></li><li><strong>验证模型:</strong> 训练完成后（或中途），你可以使用 <code>best.pt</code> 在验证集上进行评估：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yolo val model=runs/train/exp&lt;N&gt;/weights/best.pt data=/path/to/your/data.yaml device=cpu</span><br></pre></td></tr></table></figure></li></ol><p><strong>步骤 7：使用训练好的模型</strong></p><p>训练完成后，你可以使用 <code>best.pt</code> 文件进行推理（目标检测）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yolo predict model=runs/train/exp&lt;N&gt;/weights/best.pt <span class="built_in">source</span>=/path/to/image.jpg device=cpu</span><br><span class="line"><span class="comment"># 或者对视频进行推理 (CPU上会很慢)</span></span><br><span class="line"><span class="comment"># yolo predict model=runs/train/exp&lt;N&gt;/weights/best.pt source=/path/to/video.mp4 device=cpu</span></span><br></pre></td></tr></table></figure><p>或者在 Python 脚本中使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载你训练好的模型</span></span><br><span class="line">model = YOLO(<span class="string">&#x27;runs/train/exp&lt;N&gt;/weights/best.pt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行预测</span></span><br><span class="line">results = model.predict(source=<span class="string">&#x27;/path/to/image.jpg&#x27;</span>, device=<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理结果 (例如，绘制边界框)</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">    boxes = r.boxes  <span class="comment"># Boxes object for bounding box outputs</span></span><br><span class="line">    masks = r.masks  <span class="comment"># Masks object for segmentation masks outputs</span></span><br><span class="line">    keypoints = r.keypoints  <span class="comment"># Keypoints object for pose outputs</span></span><br><span class="line">    probs = r.probs  <span class="comment"># Probs object for classification outputs</span></span><br><span class="line">    <span class="comment"># r.show()  # display to screen</span></span><br><span class="line">    r.save(filename=<span class="string">&#x27;result.jpg&#x27;</span>) <span class="comment"># save to disk</span></span><br></pre></td></tr></table></figure><p><strong>CPU训练的局限性:</strong></p><ul><li><strong>速度极慢:</strong></li><li><strong>内存限制:</strong> 小心 RAM 耗尽，特别是使用较大的 <code>batch</code> 或 <code>imgsz</code> 时。</li><li><strong>可行性:</strong> 对于非常大的数据集或需要高精度（需要训练更长时间或更大模型）的任务，CPU 训练可能实际上不可行。考虑使用 Google Colab（提供免费 GPU）、Kaggle Kernels 或其他云 GPU 服务可能是更好的选择。</li></ul><h2 id="验证数据集获取">验证数据集获取</h2><blockquote><p>获取验证数据集（Validation Set）是训练过程中非常重要的一步，用于评估模型在未见过数据上的表现并调整超参数。当你的数据来自 CVAT 并导出了 YOLO 格式时，有以下几种主要方法来获取或指定验证数据集：</p></blockquote><p><strong>方法一：在 CVAT 中划分并导出 (推荐)</strong></p><p>这是最方便、最不容易出错的方法，推荐优先考虑。</p><ol><li><strong>在 CVAT 中分配子集 (Subset):</strong><ul><li>在你 CVAT 的任务 (Task) 中，你可以将标注好的数据帧或图片分配到不同的子集。默认情况下，所有数据都在 <code>Default</code> 或 <code>Train</code> 子集中。</li><li>进入你的任务，选择一些帧或图片（例如，随机选择总数据的 10-20%）。</li><li>点击 “Actions” -&gt; “Change subset”。</li><li>在弹出的对话框中，选择 <code>Validation</code> 作为目标子集，然后确认。</li><li>这样你就告诉 CVAT，这些选中的数据属于验证集。你也可以同样地分配 <code>Test</code> 子集（如果需要）。</li></ul></li><li><strong>导出时包含子集:</strong><ul><li>在你导出任务数据集时，选择 <code>YOLO</code> 或 <code>YOLO ZIP</code> 格式。</li><li><strong>关键:</strong> 在导出选项中，确保你选择了导出所有子集，或者该格式默认就会将不同的子集分开导出。例如，<code>YOLO ZIP</code> 格式通常会自动创建 <code>train/</code>, <code>valid/</code>, <code>test/</code> 这样的子目录结构。</li></ul></li><li><strong>检查导出的文件:</strong><ul><li>解压下载的 ZIP 文件。</li><li>检查里面是否已经包含了类似 <code>train/</code> 和 <code>valid/</code> (或 <code>val/</code>) 的文件夹，每个文件夹下又分别有 <code>images/</code> 和 <code>labels/</code> 子目录。</li><li>同时检查 <code>data.yaml</code> 文件，它应该已经自动配置好了 <code>train:</code> 和 <code>val:</code> 指向这些对应的文件夹（例如 <code>train: train/images</code>, <code>val: valid/images</code>）。</li><li>如果导出文件已经是这种结构，那么你<strong>不需要</strong>再做任何事情，直接使用这个 <code>data.yaml</code> 文件进行训练即可。</li></ul></li></ol><p><strong>方法二：手动划分已导出的数据集</strong></p><p>如果你从 CVAT 导出时没有划分小子集，或者导出的格式没有自动区分，那么你只有一个包含所有图像和标签的集合。你需要手动将其划分为训练集和验证集。</p><ol><li><strong>确定划分比例:</strong> 根据你的总数据量，决定一个合适的划分比例。常见的比例是 80% 训练 / 20% 验证，或者 70% / 30%。如果数据量很大，验证集比例可以适当降低。</li><li><strong>创建目录结构:</strong> 在你的数据集根目录下（例如 <code>/home/user/my_dataset</code>），创建如下结构：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_dataset/</span><br><span class="line">├── train/</span><br><span class="line">│   ├── images/</span><br><span class="line">│   └── labels/</span><br><span class="line">├── valid/</span><br><span class="line">│   ├── images/</span><br><span class="line">│   └── labels/</span><br><span class="line">└── data.yaml  # 你需要创建或修改的文件</span><br></pre></td></tr></table></figure>（可能还需要保留原始的 <code>images/</code> 和 <code>labels/</code> 文件夹，或者直接从那里移动文件）。</li><li><strong>编写脚本或手动移动文件 (推荐脚本):</strong><ul><li><strong>核心原则:</strong> 必须保证<strong>同一张图片</strong> (<code>.jpg</code>, <code>.png</code> 等) 和其<strong>对应的标注文件</strong> (<code>.txt</code>) <strong>始终被划分到同一个集合</strong> (要么都在 <code>train</code>，要么都在 <code>valid</code>)。文件名通常是一一对应的（除了扩展名）。</li><li><strong>脚本方法 (Python 示例):</strong></li></ul></li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> yaml  <span class="comment"># 需要安装 PyYAML: pip install pyyaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 配置 ---</span></span><br><span class="line"><span class="comment"># ！！修改这里为你解压后的 CVAT 导出数据集的根目录！！</span></span><br><span class="line"><span class="comment"># 使用 Path 对象处理路径</span></span><br><span class="line">dataset_root = Path(<span class="string">r&#x27;/Users/zg/Downloads/task_13&#x27;</span>).resolve() <span class="comment"># &lt;&lt;--- 修改这里，并确保是绝对路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ！！指定你想要创建的新数据集根目录（如果想分开存放）！！</span></span><br><span class="line"><span class="comment"># 如果设为 None，则在原 dataset_root 下创建 train/valid 目录</span></span><br><span class="line"><span class="comment"># 使用 Path 对象处理路径</span></span><br><span class="line">output_root = dataset_root <span class="comment"># &lt;&lt;--- 可以修改为新的路径，例如 Path(&#x27;./yolov8_dataset&#x27;).resolve()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Path 对象定义源路径</span></span><br><span class="line">source_data_dir = dataset_root / <span class="string">&#x27;obj_train_data&#x27;</span> <span class="comment"># 包含图像和标签的源文件夹</span></span><br><span class="line">obj_names_file = dataset_root / <span class="string">&#x27;obj.names&#x27;</span>       <span class="comment"># 类别名称文件</span></span><br><span class="line">train_txt_file = dataset_root / <span class="string">&#x27;train.txt&#x27;</span>       <span class="comment"># 原始图像列表文件</span></span><br><span class="line"></span><br><span class="line">train_ratio = <span class="number">0.8</span>  <span class="comment"># 训练集比例 (例如 0.8 表示 80%)</span></span><br><span class="line">random_seed = <span class="number">42</span>   <span class="comment"># 设置随机种子以保证每次划分结果一致 (可选)</span></span><br><span class="line"><span class="comment"># ------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置随机种子</span></span><br><span class="line"><span class="keyword">if</span> random_seed:</span><br><span class="line">    random.seed(random_seed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 检查输入文件/目录是否存在 ---</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> dataset_root.is_dir():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;错误：数据集根目录不存在: <span class="subst">&#123;dataset_root&#125;</span>&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> source_data_dir.is_dir():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;错误：源数据目录不存在: <span class="subst">&#123;source_data_dir&#125;</span>&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> obj_names_file.is_file():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;错误：类别文件不存在: <span class="subst">&#123;obj_names_file&#125;</span>&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line">image_paths_from_txt = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> train_txt_file.is_file():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;警告：原始 train.txt 文件不存在: <span class="subst">&#123;train_txt_file&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;将尝试直接扫描源数据目录中的图像文件...&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># --- 从 train.txt 读取图像路径 ---</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;正在从 <span class="subst">&#123;train_txt_file&#125;</span> 读取图像路径...&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(train_txt_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># 读取原始路径行</span></span><br><span class="line">            raw_paths = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> f <span class="keyword">if</span> line.strip()]</span><br><span class="line"></span><br><span class="line">        image_paths_from_txt = []</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在验证 train.txt 中的图像路径...&quot;</span>)</span><br><span class="line">        processed_raw_paths_count = <span class="number">0</span> <span class="comment"># 计数器</span></span><br><span class="line">        <span class="keyword">for</span> raw_path <span class="keyword">in</span> raw_paths:</span><br><span class="line">            processed_raw_paths_count += <span class="number">1</span></span><br><span class="line">            <span class="comment"># --- 修复逻辑开始 ---</span></span><br><span class="line">            <span class="comment"># 1. 提取文件名 (例如 &#x27;frame_000000.png&#x27;)</span></span><br><span class="line">            filename = Path(raw_path).name</span><br><span class="line">            <span class="comment"># 2. 构建预期应该存在的路径 (在已知的 source_data_dir 下)</span></span><br><span class="line">            <span class="comment">#    使用 resolve() 确保是绝对路径</span></span><br><span class="line">            expected_path = (source_data_dir / filename).resolve()</span><br><span class="line">            <span class="comment"># --- 修复逻辑结束 ---</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 3. 验证这个构建出的预期路径是否存在</span></span><br><span class="line">            <span class="keyword">if</span> expected_path.is_file():</span><br><span class="line">                image_paths_from_txt.append(expected_path) <span class="comment"># 添加 *正确且存在的* 路径</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 打印更具体的警告，显示原始行和尝试查找的位置</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;警告：在 <span class="subst">&#123;source_data_dir&#125;</span> 中找不到 train.txt 行 &#x27;<span class="subst">&#123;raw_path&#125;</span>&#x27; 对应的文件 &#x27;<span class="subst">&#123;filename&#125;</span>&#x27; (预期路径: <span class="subst">&#123;expected_path&#125;</span>)，将跳过。&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;从 <span class="subst">&#123;train_txt_file&#125;</span> 原始读取 <span class="subst">&#123;<span class="built_in">len</span>(raw_paths)&#125;</span> 行。&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> image_paths_from_txt:</span><br><span class="line">             <span class="comment"># 如果修正后仍然没有有效路径，则触发后备扫描</span></span><br><span class="line">             <span class="keyword">raise</span> ValueError(<span class="string">&quot;train.txt 文件中没有找到任何有效且存在的图像文件。&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证后，有效图像路径数量: <span class="subst">&#123;<span class="built_in">len</span>(image_paths_from_txt)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理 train.txt 时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;将尝试直接扫描源数据目录中的图像文件...&quot;</span>)</span><br><span class="line">        image_paths_from_txt = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 如果无法从 train.txt 读取或验证失败，则扫描目录 ---</span></span><br><span class="line"><span class="keyword">if</span> image_paths_from_txt <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在扫描目录 <span class="subst">&#123;source_data_dir&#125;</span> 中的图像文件...&quot;</span>)</span><br><span class="line">    <span class="comment"># 直接使用 source_data_dir (已经是 Path 对象)</span></span><br><span class="line">    image_paths_from_dir = <span class="built_in">list</span>(source_data_dir.glob(<span class="string">&#x27;*.jpg&#x27;</span>)) + \</span><br><span class="line">                           <span class="built_in">list</span>(source_data_dir.glob(<span class="string">&#x27;*.png&#x27;</span>)) + \</span><br><span class="line">                           <span class="built_in">list</span>(source_data_dir.glob(<span class="string">&#x27;*.jpeg&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> image_paths_from_dir:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：在 <span class="subst">&#123;source_data_dir&#125;</span> 中未找到任何图像文件。&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    <span class="comment"># 确保路径是绝对路径</span></span><br><span class="line">    image_paths = [p.resolve() <span class="keyword">for</span> p <span class="keyword">in</span> image_paths_from_dir]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;在目录中找到 <span class="subst">&#123;<span class="built_in">len</span>(image_paths)&#125;</span> 个图像文件。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 如果从 train.txt 成功读取并验证了路径，则使用这个列表</span></span><br><span class="line">    image_paths = image_paths_from_txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在继续之前，最终检查 image_paths 是否为空</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> image_paths:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;错误：未能收集到任何有效的图像路径来继续处理。&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 读取类别名称 ---</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(obj_names_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        class_names = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> f <span class="keyword">if</span> line.strip()]</span><br><span class="line">    num_classes = <span class="built_in">len</span>(class_names)</span><br><span class="line">    <span class="keyword">if</span> num_classes == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：类别文件 <span class="subst">&#123;obj_names_file&#125;</span> 为空。&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;读取到 <span class="subst">&#123;num_classes&#125;</span> 个类别: <span class="subst">&#123;class_names&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;读取类别文件 <span class="subst">&#123;obj_names_file&#125;</span> 时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 创建输出目录 ---</span></span><br><span class="line"><span class="comment"># 确保 output_root 是 Path 对象</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(output_root, Path):</span><br><span class="line">    output_root = Path(output_root).resolve()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Path 对象定义目标目录</span></span><br><span class="line">train_img_dir = output_root / <span class="string">&#x27;train&#x27;</span> / <span class="string">&#x27;images&#x27;</span></span><br><span class="line">train_lbl_dir = output_root / <span class="string">&#x27;train&#x27;</span> / <span class="string">&#x27;labels&#x27;</span></span><br><span class="line">valid_img_dir = output_root / <span class="string">&#x27;valid&#x27;</span> / <span class="string">&#x27;images&#x27;</span></span><br><span class="line">valid_lbl_dir = output_root / <span class="string">&#x27;valid&#x27;</span> / <span class="string">&#x27;labels&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exist_ok=True 避免目录已存在时报错</span></span><br><span class="line">train_img_dir.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">train_lbl_dir.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">valid_img_dir.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">valid_lbl_dir.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 划分数据集 ---</span></span><br><span class="line"><span class="comment"># 打乱图像路径列表 (Path 对象列表)</span></span><br><span class="line">random.shuffle(image_paths)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算训练集和验证集的分割点</span></span><br><span class="line">split_index = <span class="built_in">int</span>(<span class="built_in">len</span>(image_paths) * train_ratio)</span><br><span class="line">train_image_paths = image_paths[:split_index]</span><br><span class="line">valid_image_paths = image_paths[split_index:]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;总有效图像数: <span class="subst">&#123;<span class="built_in">len</span>(image_paths)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;划分后训练集图像数: <span class="subst">&#123;<span class="built_in">len</span>(train_image_paths)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;划分后验证集图像数: <span class="subst">&#123;<span class="built_in">len</span>(valid_image_paths)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 复制或移动文件函数 ---</span></span><br><span class="line"><span class="comment"># copy_mode=True 复制文件, copy_mode=False 移动文件</span></span><br><span class="line">copy_mode = <span class="literal">True</span> <span class="comment"># 建议使用复制以保留原始数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_files</span>(<span class="params">source_img_paths, target_img_dir, target_lbl_dir, copy=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;将源图像和对应的标签文件复制或移动到目标目录&quot;&quot;&quot;</span></span><br><span class="line">    processed_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> img_path <span class="keyword">in</span> source_img_paths: <span class="comment"># img_path 是 Path 对象</span></span><br><span class="line">        <span class="comment"># 构建对应的标签文件路径 (.txt)，标签文件在源目录 source_data_dir 下</span></span><br><span class="line">        <span class="comment"># 使用 img_path.stem 获取不带扩展名的文件名</span></span><br><span class="line">        lbl_path = source_data_dir / (img_path.stem + <span class="string">&#x27;.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查图像和标签文件是否存在</span></span><br><span class="line">        <span class="comment"># 图像路径 img_path 已经验证过存在</span></span><br><span class="line">        <span class="keyword">if</span> lbl_path.is_file():</span><br><span class="line">            <span class="comment"># 目标路径</span></span><br><span class="line">            target_img_path = target_img_dir / img_path.name</span><br><span class="line">            target_lbl_path = target_lbl_dir / lbl_path.name</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> copy:</span><br><span class="line">                    shutil.copy2(<span class="built_in">str</span>(img_path), <span class="built_in">str</span>(target_img_path)) <span class="comment"># copy2 接收字符串路径</span></span><br><span class="line">                    shutil.copy2(<span class="built_in">str</span>(lbl_path), <span class="built_in">str</span>(target_lbl_path))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    shutil.move(<span class="built_in">str</span>(img_path), <span class="built_in">str</span>(target_img_path)) <span class="comment"># move 接收字符串路径</span></span><br><span class="line">                    shutil.move(<span class="built_in">str</span>(lbl_path), <span class="built_in">str</span>(target_lbl_path))</span><br><span class="line">                processed_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;处理文件 <span class="subst">&#123;img_path.name&#125;</span> 时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 图像文件应该存在，因为我们是从验证过的列表处理的</span></span><br><span class="line">            <span class="comment"># if not img_path.is_file():</span></span><br><span class="line">            <span class="comment">#      print(f&quot;警告：找不到图像文件 &#123;img_path&#125;，跳过。&quot;)</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;警告：找不到对应的标签文件 <span class="subst">&#123;lbl_path&#125;</span>，跳过图像 <span class="subst">&#123;img_path.name&#125;</span>。&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> processed_count</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 执行文件处理 ---</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;正在<span class="subst">&#123;<span class="string">&#x27;复制&#x27;</span> <span class="keyword">if</span> copy_mode <span class="keyword">else</span> <span class="string">&#x27;移动&#x27;</span>&#125;</span>训练集文件...&quot;</span>)</span><br><span class="line">train_processed = process_files(train_image_paths, train_img_dir, train_lbl_dir, copy=copy_mode)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;成功处理 <span class="subst">&#123;train_processed&#125;</span> 个训练集文件对。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;正在<span class="subst">&#123;<span class="string">&#x27;复制&#x27;</span> <span class="keyword">if</span> copy_mode <span class="keyword">else</span> <span class="string">&#x27;移动&#x27;</span>&#125;</span>验证集文件...&quot;</span>)</span><br><span class="line">valid_processed = process_files(valid_image_paths, valid_img_dir, valid_lbl_dir, copy=copy_mode)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;成功处理 <span class="subst">&#123;valid_processed&#125;</span> 个验证集文件对。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 生成 data.yaml 文件 ---</span></span><br><span class="line">yaml_path = output_root / <span class="string">&#x27;data.yaml&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用相对于 output_root 的路径</span></span><br><span class="line">yaml_data = &#123;</span><br><span class="line">    <span class="comment"># 使用 resolve() 获取绝对路径字符串</span></span><br><span class="line">    <span class="string">&#x27;path&#x27;</span>: <span class="built_in">str</span>(output_root.resolve()),</span><br><span class="line">    <span class="comment"># 相对路径指向新创建的目录</span></span><br><span class="line">    <span class="string">&#x27;train&#x27;</span>: <span class="string">&#x27;train/images&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;val&#x27;</span>: <span class="string">&#x27;valid/images&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;test&#x27;: &#x27;test/images&#x27;, # 如果有测试集</span></span><br><span class="line">    <span class="string">&#x27;nc&#x27;</span>: num_classes,</span><br><span class="line">    <span class="string">&#x27;names&#x27;</span>: class_names</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(yaml_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        yaml.dump(yaml_data, f, sort_keys=<span class="literal">False</span>, default_flow_style=<span class="literal">False</span>) <span class="comment"># default_flow_style=False 更好看</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;data.yaml 文件已生成: <span class="subst">&#123;yaml_path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;内容:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(yaml.dump(yaml_data, sort_keys=<span class="literal">False</span>, default_flow_style=<span class="literal">False</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据集划分完成！&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;生成 data.yaml 文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li><p>你需要根据你的实际情况修改 <code>dataset_root</code>, <code>source_images_dir</code>, <code>source_labels_dir</code> 和 <code>train_ratio</code>。</p></li><li><p>这个脚本会将文件<strong>移动</strong>到新目录。如果你想保留原始文件，可以将 <code>shutil.move</code> 改为 <code>shutil.copy</code>。</p></li><li><p><strong>手动方法 (仅适用于少量数据):</strong> 创建 <code>train</code> 和 <code>valid</code> 子目录，然后手动将图像和对应的 <code>.txt</code> 文件拖拽到相应的 <code>images</code> 和 <code>labels</code> 文件夹中，确保比例大致正确且配对无误。非常容易出错。</p></li></ul><ol start="4"><li><strong>修改/创建 <code>data.yaml</code> 文件:</strong><ul><li>在你手动创建了 <code>train/</code> 和 <code>valid/</code> 目录结构后，你需要像下面这样配置 <code>data.yaml</code>：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">path:</span> <span class="string">/home/user/my_dataset</span>   <span class="comment"># 数据集根目录</span></span><br><span class="line"><span class="attr">train:</span> <span class="string">train/images</span>          <span class="comment"># 指向训练图像文件夹</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">valid/images</span>            <span class="comment"># 指向验证图像文件夹</span></span><br><span class="line"><span class="comment"># test: test/images          # 如果有测试集</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nc:</span> <span class="number">3</span>                        <span class="comment"># 你的类别数量</span></span><br><span class="line"><span class="attr">names:</span> [<span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;person&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>] <span class="comment"># 你的类别名称列表</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p><strong>方法三：使用 <code>.txt</code> 文件列表 (如果你选择了方案A来创建<code>data.yaml</code>)</strong></p><p>如果你是根据 <code>obj.data</code> 文件中的 <code>train = .../train.txt</code> 和 <code>valid = .../valid.txt</code> 来配置 <code>data.yaml</code> 的，那么你需要确保：</p><ol><li><code>train.txt</code> 文件确实存在，并且里面列出了所有<strong>训练集</strong>图像的<strong>正确路径</strong>（绝对路径或相对于 <code>data.yaml</code> 中 <code>path</code> 的路径）。</li><li>你有一个类似的 <code>valid.txt</code> 文件，里面列出了所有<strong>验证集</strong>图像的<strong>正确路径</strong>。</li><li><code>data.yaml</code> 文件中的 <code>train:</code> 和 <code>val:</code> 字段正确指向了这两个 <code>.txt</code> 文件。</li></ol><p>如果你只有一个包含所有图像路径的 <code>.txt</code> 文件，你需要像方法二中划分文件一样，将这个 <code>.txt</code> 文件也<strong>划分成两个文件</strong>：<code>train.txt</code> 和 <code>valid.txt</code>，确保划分比例合适。</p><p><strong>总结:</strong></p><ul><li><strong>最佳方式:</strong> 在 CVAT 中就使用 “Subset” 功能区分好训练集和验证集，然后导出 <code>YOLO ZIP</code> 格式，通常 <code>data.yaml</code> 就配置好了。</li><li><strong>次佳方式:</strong> 如果导出的数据未划分，使用脚本（如上例）将其自动划分为 <code>train/</code> 和 <code>valid/</code> 目录结构，然后相应地配置 <code>data.yaml</code> 指向这些目录。</li><li><strong>如果依赖 <code>.txt</code> 列表:</strong> 确保你有分别列出训练图像和验证图像路径的 <code>train.txt</code> 和 <code>valid.txt</code> 文件，并在 <code>data.yaml</code> 中正确引用它们。</li></ul><p>无论哪种方法，最终目标都是要有一个明确区分的训练数据集和一个验证数据集，并且 <code>data.yaml</code> 文件能够准确地告诉 YOLOv8 框架去哪里找到它们。</p><h3 id="训练结果">训练结果</h3><p><img src="/2025/04/09/yolov8-train-model/gpu_train_model.png" class="lazyload placeholder" data-srcset="/2025/04/09/yolov8-train-model/gpu_train_model.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">python train_model.py </span><br><span class="line">PyTorch device: cpu</span><br><span class="line">Ultralytics 8.3.105 🚀 Python-3.12.3 torch-2.6.0+cu124 CPU (Intel Xeon E5-2690 v3 2.60GHz)</span><br><span class="line">engine/trainer: task=detect, mode=train, model=yolov8n.pt, data=/home/czq2/test_data/data.yaml, epochs=50, time=None, patience=100, batch=4, imgsz=640, save=True, save_period=-1, cache=False, device=cpu, workers=4, project=None, name=train2, exist_ok=False, pretrained=True, optimizer=auto, verbose=True, seed=0, deterministic=True, single_cls=False, rect=False, cos_lr=False, close_mosaic=10, resume=False, amp=True, fraction=1.0, profile=False, freeze=None, multi_scale=False, overlap_mask=True, mask_ratio=4, dropout=0.0, val=True, split=val, save_json=False, conf=None, iou=0.7, max_det=300, half=False, dnn=False, plots=True, source=None, vid_stride=1, stream_buffer=False, visualize=False, augment=False, agnostic_nms=False, classes=None, retina_masks=False, embed=None, show=False, save_frames=False, save_txt=False, save_conf=False, save_crop=False, show_labels=True, show_conf=True, show_boxes=True, line_width=None, format=torchscript, keras=False, optimize=False, int8=False, dynamic=False, simplify=True, opset=None, workspace=None, nms=False, lr0=0.01, lrf=0.01, momentum=0.937, weight_decay=0.0005, warmup_epochs=3.0, warmup_momentum=0.8, warmup_bias_lr=0.1, box=7.5, cls=0.5, dfl=1.5, pose=12.0, kobj=1.0, nbs=64, hsv_h=0.015, hsv_s=0.7, hsv_v=0.4, degrees=0.0, translate=0.1, scale=0.5, shear=0.0, perspective=0.0, flipud=0.0, fliplr=0.5, bgr=0.0, mosaic=1.0, mixup=0.0, copy_paste=0.0, copy_paste_mode=flip, auto_augment=randaugment, erasing=0.4, crop_fraction=1.0, cfg=None, tracker=botsort.yaml, save_dir=runs/detect/train2</span><br><span class="line">Downloading https://ultralytics.com/assets/Arial.Unicode.ttf to &#x27;/home/czq2/.config/Ultralytics/Arial.Unicode.ttf&#x27;...</span><br><span class="line"><span class="meta prompt_">100%</span><span class="language-bash">|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 22.2M/22.2M [00:01&lt;00:00, 21.2MB/s]</span></span><br><span class="line">Overriding model.yaml nc=80 with nc=4</span><br><span class="line"></span><br><span class="line">                   from  n    params  module                                       arguments                     </span><br><span class="line">  0                  -1  1       464  ultralytics.nn.modules.conv.Conv             [3, 16, 3, 2]                 </span><br><span class="line">  1                  -1  1      4672  ultralytics.nn.modules.conv.Conv             [16, 32, 3, 2]                </span><br><span class="line">  2                  -1  1      7360  ultralytics.nn.modules.block.C2f             [32, 32, 1, True]             </span><br><span class="line">  3                  -1  1     18560  ultralytics.nn.modules.conv.Conv             [32, 64, 3, 2]                </span><br><span class="line">  4                  -1  2     49664  ultralytics.nn.modules.block.C2f             [64, 64, 2, True]             </span><br><span class="line">  5                  -1  1     73984  ultralytics.nn.modules.conv.Conv             [64, 128, 3, 2]               </span><br><span class="line">  6                  -1  2    197632  ultralytics.nn.modules.block.C2f             [128, 128, 2, True]           </span><br><span class="line">  7                  -1  1    295424  ultralytics.nn.modules.conv.Conv             [128, 256, 3, 2]              </span><br><span class="line">  8                  -1  1    460288  ultralytics.nn.modules.block.C2f             [256, 256, 1, True]           </span><br><span class="line">  9                  -1  1    164608  ultralytics.nn.modules.block.SPPF            [256, 256, 5]                 </span><br><span class="line"> 10                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, &#x27;nearest&#x27;]          </span><br><span class="line"> 11             [-1, 6]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           </span><br><span class="line"> 12                  -1  1    148224  ultralytics.nn.modules.block.C2f             [384, 128, 1]                 </span><br><span class="line"> 13                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, &#x27;nearest&#x27;]          </span><br><span class="line"> 14             [-1, 4]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           </span><br><span class="line"> 15                  -1  1     37248  ultralytics.nn.modules.block.C2f             [192, 64, 1]                  </span><br><span class="line"> 16                  -1  1     36992  ultralytics.nn.modules.conv.Conv             [64, 64, 3, 2]                </span><br><span class="line"> 17            [-1, 12]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           </span><br><span class="line"> 18                  -1  1    123648  ultralytics.nn.modules.block.C2f             [192, 128, 1]                 </span><br><span class="line"> 19                  -1  1    147712  ultralytics.nn.modules.conv.Conv             [128, 128, 3, 2]              </span><br><span class="line"> 20             [-1, 9]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           </span><br><span class="line"> 21                  -1  1    493056  ultralytics.nn.modules.block.C2f             [384, 256, 1]                 </span><br><span class="line"> 22        [15, 18, 21]  1    752092  ultralytics.nn.modules.head.Detect           [4, [64, 128, 256]]           </span><br><span class="line">Model summary: 129 layers, 3,011,628 parameters, 3,011,612 gradients, 8.2 GFLOPs</span><br><span class="line"></span><br><span class="line">Transferred 319/355 items from pretrained weights</span><br><span class="line">Freezing layer &#x27;model.22.dfl.conv.weight&#x27;</span><br><span class="line">train: Scanning /home/czq2/test_data/train/labels... 495 images, 201 backgrounds, 0 corrupt: 100%|██████████| 495/495 [00:14&lt;00:00, 34.44it/s]</span><br><span class="line">train: New cache created: /home/czq2/test_data/train/labels.cache</span><br><span class="line">val: Scanning /home/czq2/test_data/valid/labels... 124 images, 47 backgrounds, 0 corrupt: 100%|██████████| 124/124 [00:03&lt;00:00, 37.91it/s]</span><br><span class="line">val: New cache created: /home/czq2/test_data/valid/labels.cache</span><br><span class="line">Plotting labels to runs/detect/train2/labels.jpg... </span><br><span class="line">/home/czq2/yolo_cpu_env/lib/python3.12/site-packages/ultralytics/utils/plotting.py:587: UserWarning: Glyph 35270 (\N&#123;CJK UNIFIED IDEOGRAPH-89C6&#125;) missing from font(s) DejaVu Sans.</span><br><span class="line">  plt.savefig(fname, dpi=200)</span><br><span class="line">/home/czq2/yolo_cpu_env/lib/python3.12/site-packages/ultralytics/utils/plotting.py:587: UserWarning: Glyph 39057 (\N&#123;CJK UNIFIED IDEOGRAPH-9891&#125;) missing from font(s) DejaVu Sans.</span><br><span class="line">optimizer: &#x27;optimizer=auto&#x27; found, ignoring &#x27;lr0=0.01&#x27; and &#x27;momentum=0.937&#x27; and determining best &#x27;optimizer&#x27;, &#x27;lr0&#x27; and &#x27;momentum&#x27; automatically... </span><br><span class="line">optimizer: AdamW(lr=0.00125, momentum=0.9) with parameter groups 57 weight(decay=0.0), 64 weight(decay=0.0005), 63 bias(decay=0.0)</span><br><span class="line">Image sizes 640 train, 640 val</span><br><span class="line">Using 0 dataloader workers</span><br><span class="line">Logging results to runs/detect/train2</span><br><span class="line">Starting training for 50 epochs...</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">       1/50         0G     0.6873      4.307      1.265          5        640:   2%|▏         | 2/124 [00:02&lt;02:20,  1.15s/it]Downloading https://ultralytics.com/assets/Arial.ttf to &#x27;/home/czq2/.config/Ultralytics/Arial.ttf&#x27;...</span><br><span class="line"><span class="meta prompt_">100%</span><span class="language-bash">|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 755k/755k [00:00&lt;00:00, 2.17MB/s]</span></span><br><span class="line">       1/50         0G      1.137      2.561      1.378          7        640: 100%|██████████| 124/124 [02:08&lt;00:00,  1.03s/it]                   | 512k/755k [00:00&lt;00:00, 1.86MB/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 16/16 [00:19&lt;00:00,  1.24s/it]</span><br><span class="line">                   all        124         77        0.7      0.948      0.802      0.538</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>参数定义</p></li><li><p>我们来详细解释一下 YOLOv8 训练过程中这一行输出的含义：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">12/50         0G     0.8517     0.8027      1.157          4        640: 100%|██████████| 124/124 [02:08&lt;00:00,  1.04s/it]</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 16/16 [00:19&lt;00:00,  1.23s/it]</span><br><span class="line">  all        124         77          1      0.999      0.995      0.853</span><br></pre></td></tr></table></figure><p><strong>第一部分：训练进度和损失 (Training Progress and Loss)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">12/50         0G     0.8517     0.8027      1.157          4        640: 100%|██████████| 124/124 [02:08&lt;00:00,  1.04s/it]</span><br></pre></td></tr></table></figure><ul><li><strong><code>Epoch</code></strong>: <code>12/50</code><ul><li>表示当前训练正在进行第 <strong>12</strong> 轮 (epoch)，总共计划训练 <strong>50</strong> 轮。一个 epoch 指的是模型完整地看过一遍所有的训练数据。</li></ul></li><li><strong><code>GPU_mem</code></strong>: <code>0G</code><ul><li>显示当前 <strong>GPU 显存 (VRAM) 的使用量</strong>。这里显示 <code>0G</code> <strong>非常奇怪</strong>，尤其是如果你指定了使用 GPU 进行训练。<ul><li><strong>可能的原因 1 (最可能):</strong> 训练实际上是在 <strong>CPU</strong> 上运行的，即使你可能指定了 <code>device=0</code> 或 <code>device='cuda'</code>。这通常发生在 PyTorch 无法正确检测或使用你的 GPU 时（驱动、CUDA、cuDNN 或 PyTorch 版本问题）。<strong>你需要回过头去验证你的 GPU 环境是否配置正确，以及 PyTorch 是否能真正使用 GPU (<code>torch.cuda.is_available()</code> 必须为 <code>True</code>)。</strong></li><li><strong>可能的原因 2 (不太可能):</strong> 你的模型和批次大小非常小，以至于显存占用可以忽略不计（对于 YOLOv8 尤其是 <code>x</code> 模型和 <code>batch=4</code> 来说几乎不可能）。</li><li><strong>可能的原因 3 (极少):</strong> 监控显存的工具或接口暂时失效。</li></ul></li><li><strong>正常的 GPU 训练</strong> 应该会显示一个非零的显存使用值，例如 <code>5.8G</code>, <code>10.2G</code> 等，具体取决于模型大小、批大小和图像尺寸。</li></ul></li><li><strong><code>box_loss</code></strong>: <code>0.8517</code><ul><li><strong>边界框损失 (Bounding Box Loss)</strong>。这个值衡量的是模型预测的边界框位置/大小与真实边界框之间的差异。值越低越好。</li></ul></li><li><strong><code>cls_loss</code></strong>: <code>0.8027</code><ul><li><strong>分类损失 (Classification Loss)</strong>。这个值衡量的是模型预测的物体类别与真实类别之间的差异。值越低越好。</li></ul></li><li><strong><code>dfl_loss</code></strong>: <code>1.157</code><ul><li><strong>分布焦点损失 (Distribution Focal Loss)</strong>。这是 YOLOv8（尤其是 v8 及更新版本）引入的一种用于边界框回归的损失，它将边界框的连续坐标回归问题转化为离散的概率分布预测问题，有助于提高定位精度。值越低越好。</li></ul></li><li><strong><code>Instances</code></strong>: <code>4</code><ul><li>当前正在处理的这个批次 (batch) 中包含的<strong>目标实例 (objects) 的数量</strong>。这里是 4 个。注意这不是批大小（batch size，即图像数量）。</li></ul></li><li><strong><code>Size</code></strong>: <code>640</code><ul><li>训练时输入模型的<strong>图像尺寸</strong> (通常是 height 和 width 都设为这个值，即 640x640)。</li></ul></li><li><strong><code>100%|██████████| 124/124 [02:08&lt;00:00, 1.04s/it]</code></strong>:<ul><li>这是一个<strong>进度条</strong>，显示当前 epoch 内训练数据的处理进度。</li><li><code>100%</code>: 表示当前 epoch 的训练数据已全部处理完毕。</li><li><code>124/124</code>: 表示当前 epoch 共处理了 124 个批次 (batches)，现在已经完成了第 124 个批次。 (总批次数 = 总训练图像数 / batch_size)</li><li><code>[02:08&lt;00:00</code>]: 当前 epoch 已用时 2 分 8 秒，预计剩余时间 0 秒。</li><li><code>1.04s/it]</code>: 处理一个批次 (iteration) 平均需要 1.04 秒。这个速度<strong>对于 GPU 来说相当慢</strong>，进一步印证了可能是在 CPU 上运行。GPU 训练通常是 <code>ms/it</code> (毫秒每迭代)。</li></ul></li></ul><p><strong>第二部分：验证结果评估 (Validation Results Evaluation)</strong></p><p>这部分通常在每个 epoch 的训练结束后（或者根据设置的频率）运行，使用验证集 (Validation Set) 来评估当前模型的性能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 16/16 [00:19&lt;00:00,  1.23s/it]</span><br><span class="line">  all        124         77          1      0.999      0.995      0.853</span><br></pre></td></tr></table></figure><ul><li><strong><code>Class</code></strong>: <code>all</code><ul><li>表示这一行显示的是<strong>所有类别</strong>的平均性能指标。如果你的数据集有多个类别，通常还会在这里或下面几行列出每个单独类别的指标。</li></ul></li><li><strong><code>Images</code></strong>: <code>124</code><ul><li>你的<strong>验证集</strong>中包含 <strong>124</strong> 张图像。</li></ul></li><li><strong><code>Instances</code></strong>: <code>77</code><ul><li>你的<strong>验证集</strong>中所有图像总共包含 <strong>77</strong> 个已标注的目标实例。</li></ul></li><li><strong><code>Box(P R mAP50 mAP50-95)</code></strong>: 这是目标检测任务最核心的评估指标：<ul><li><strong><code>P</code> (Precision / 精确率):</strong> <code>1</code><ul><li>指模型预测为正例（检测到物体）的样本中，<strong>真正是正例</strong>的比例。计算公式：<code>TP / (TP + FP)</code> (真阳性 / (真阳性 + 假阳性))。</li><li>值为 <code>1</code> 意味着所有模型检测到的物体都是正确的（没有误报）。这个值通常在 IoU (Intersection over Union) 阈值为 0.5 时计算，并且可能是针对某个最优置信度阈值得出的。</li></ul></li><li><strong><code>R</code> (Recall / 召回率):</strong> <code>0.999</code><ul><li>指所有<strong>真实的</strong>正例（所有实际存在的物体）中，被模型<strong>成功预测出来</strong>的比例。计算公式：<code>TP / (TP + FN)</code> (真阳性 / (真阳性 + 假阴性))。</li><li>值 <code>0.999</code> 意味着模型找回了验证集中几乎所有（99.9%）的真实物体（漏报非常少）。这个值通常也是在 IoU 阈值为 0.5 时计算，并且可能是针对某个最优置信度阈值得出的。</li></ul></li><li><strong><code>mAP50</code> (mean Average Precision @ IoU=0.5):</strong> <code>0.995</code><ul><li>IoU (交并比) 阈值设置为 0.5 时，计算所有类别的平均精度 (Average Precision, AP)，然后对所有类别求平均值 (mean AP)。AP 是综合了精确率和召回率的指标，它衡量的是 PR 曲线下的面积。</li><li><code>0.995</code> 是一个非常高的值，表示在 IoU=0.5 的标准下，模型性能非常好。</li></ul></li><li><strong><code>mAP50-95</code> (mean Average Precision @ IoU=0.5:0.95):</strong> <code>0.853</code><ul><li>这是更严格、也是 COCO 数据集竞赛等场景中更常用的标准。它计算了 IoU 阈值从 0.5 到 0.95、步长为 0.05 的一系列 IoU 值下的 mAP，然后对这些 mAP 求平均。</li><li>这个指标对检测框的定位精度要求更高。<code>0.853</code> (即 85.3%) 是一个相当不错的性能，表明模型不仅能检测到物体，而且定位也比较准确。</li></ul></li></ul></li><li><strong><code>100%|██████████| 16/16 [00:19&lt;00:00, 1.23s/it]</code></strong>:<ul><li>这是<strong>验证过程</strong>的进度条。</li><li><code>16/16</code>: 表示验证集被分成了 16 个批次进行处理，现在已经处理完了。 (验证批次数 = 总验证图像数 / 验证批大小，验证批大小可能与训练批大小不同)。</li><li><code>[00:19&lt;00:00</code>]: 整个验证过程用时 19 秒。</li><li><code>1.23s/it]</code>: 处理一个验证批次平均需要 1.23 秒。这个速度同样说明很可能是在 CPU 上运行。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuclio与CVAT使用yolov8目标检测模型实现半自动化标注</title>
      <link href="/2025/04/07/nuclio-build-use/"/>
      <url>/2025/04/07/nuclio-build-use/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Nuclio Dashboard 是 Nuclio Serverless 平台的一个基于 Web 的图形用户界面（GUI），它允许用户方便地管理（创建、查看、编辑、删除、部署）Nuclio 函数、项目、事件源（Triggers）等资源。</p></blockquote><p><strong>核心概念：</strong></p><ol><li><p><strong>部署 (Deployment) vs 构建 (Building from Source):</strong></p><ul><li><strong>部署:</strong> 对于大多数用户来说，“构建” Nuclio Dashboard 意味着<strong>部署</strong>预先构建好的 Docker 镜像。这是最常见和推荐的方式。你不需要从源代码编译它。</li><li><strong>从源码构建:</strong> 这是指获取 Nuclio Dashboard 的源代码并自行编译生成可执行文件或 Docker 镜像。这通常只在开发 Nuclio 本身或需要特殊定制时才需要，对于普通用户不推荐。</li></ul></li><li><p><strong>运行环境:</strong> Nuclio（及其 Dashboard）可以在多种环境中运行，最常见的是：</p><ul><li><strong>Standalone Docker:</strong> 在单个 Docker 主机上运行。</li><li><strong>Kubernetes:</strong> 在 Kubernetes 集群中运行，这是生产环境中最常见的方式。</li></ul></li></ol><p><strong>部署</strong> Nuclio Dashboard 的方法以及如何<strong>使用</strong>它。</p><hr><h3 id="一、部署-Nuclio-Dashboard">一、部署 Nuclio Dashboard</h3><p>Nuclio Dashboard 通常与 Nuclio Controller 一起部署。Controller 是 Nuclio 的核心控制平面，而 Dashboard 是其 UI。</p><p><strong>方法一：在 Standalone Docker 环境中部署</strong></p><p>这是最简单的方法，适合本地测试和开发。通常，当你运行 Nuclio Controller 容器时，它已经包含了 Dashboard。</p><ol><li><p><strong>拉取并运行 Nuclio Controller 镜像:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8070:8070 -v /var/run/docker.sock:/var/run/docker.sock --name nuclio-dashboard quay.io/nuclio/dashboard:stable-amd64</span><br></pre></td></tr></table></figure><ul><li><code>-d</code>: 后台运行容器。</li><li><code>-p 8070:8070</code>: 将主机的 8070 端口映射到容器的 8070 端口（Nuclio Dashboard 默认监听此端口）。</li><li><code>-v /var/run/docker.sock:/var/run/docker.sock</code>: 允许 Nuclio Controller 与宿主机的 Docker守护进程通信，以便构建和运行函数容器。<strong>（注意安全风险）</strong></li><li><code>-v /tmp:/tmp</code>: 提供临时文件存储。</li><li><code>--name nuclio-controller</code>: 给容器命名。</li><li><code>nuclio/controller:stable</code>: 使用的镜像。</li><li><code>--platform-kind &quot;local&quot;</code> 或 <code>&quot;docker&quot;</code>: 指定平台类型为本地 Docker 环境。</li></ul></li><li><p><strong>访问 Dashboard:</strong><br>部署成功后，在浏览器中打开 <code>http://&lt;你的主机IP&gt;:8070</code> 或 <code>http://localhost:8070</code> 即可访问 Nuclio Dashboard。</p></li></ol><p><strong>方法二：在 Kubernetes 环境中部署</strong></p><p>这是在生产或集群环境中最常用的方法。推荐使用 Helm Chart 来部署 Nuclio。</p><ol><li><p><strong>添加 Nuclio Helm 仓库 (如果尚未添加):</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm repo add nuclio https://nuclio.github.io/nuclio/charts</span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure></li><li><p><strong>安装 Nuclio Chart:</strong><br>这将同时部署 Nuclio Controller（包含 Dashboard）和其他必要的组件（如 CRDs）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个 namespace (推荐)</span></span><br><span class="line">kubectl create namespace nuclio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Helm 安装</span></span><br><span class="line">helm install nuclio nuclio/nuclio --namespace nuclio</span><br></pre></td></tr></table></figure><ul><li>你可以通过创建 <code>values.yaml</code> 文件或使用 <code>--set</code> 参数来自定义安装选项（例如，指定 Service 类型、资源限制等）。</li></ul></li><li><p><strong>访问 Dashboard:</strong><br>部署后，需要一种方式从集群外部访问 Dashboard Service。常用方法有：</p><ul><li><strong>Port Forwarding (用于临时访问/调试):</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到 Nuclio Dashboard Pod 的名称 (通常包含 &#x27;controller&#x27;)</span></span><br><span class="line">kubectl get pods -n nuclio</span><br><span class="line"><span class="comment"># 假设 pod 名称为 nuclio-controller-xxxxxxxxxx-yyyyy</span></span><br><span class="line">kubectl port-forward -n nuclio &lt;nuclio-controller-pod-name&gt; 8070:8070</span><br></pre></td></tr></table></figure>然后在浏览器中访问 <code>http://localhost:8070</code>。</li><li><strong>LoadBalancer Service:</strong> 如果你的 Kubernetes 集群支持 LoadBalancer 类型的 Service，并且你在 Helm 安装时配置了 Dashboard Service 为 LoadBalancer 类型，你可以获取其外部 IP 地址来访问。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc -n nuclio <span class="comment"># 查找 dashboard service 的 EXTERNAL-IP</span></span><br></pre></td></tr></table></figure>然后在浏览器中访问 <code>http://&lt;EXTERNAL-IP&gt;:8070</code>。</li><li><strong>NodePort Service:</strong> 如果配置为 NodePort，你可以通过 <code>http://&lt;任意节点IP&gt;:&lt;NodePort端口&gt;</code> 访问。</li><li><strong>Ingress:</strong> 配置 Ingress 资源，通过 Ingress Controller 提供的域名或路径来访问 Dashboard。这是生产环境中最推荐的方式。</li></ul></li></ol><p><img src="/2025/04/07/nuclio-build-use/nuclio_ui.png" class="lazyload placeholder" data-srcset="/2025/04/07/nuclio-build-use/nuclio_ui.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="二、使用-Nuclio-Dashboard">二、使用 Nuclio Dashboard</h3><p>当你成功访问 Nuclio Dashboard 后，你会看到一个用户友好的界面。以下是主要功能区域和常见操作：</p><ol><li><p><strong>概览 (Overview / Dashboard):</strong></p><ul><li>通常是进入后的首页，显示项目和函数的摘要信息，例如总数、运行状态等。</li></ul></li><li><p><strong>项目 (Projects):</strong></p><ul><li>Nuclio 使用项目来组织函数。一个项目可以包含多个函数。</li><li><strong>创建项目:</strong> 点击 “New Project” 或类似按钮，输入项目名称和可选的描述、标签。</li><li><strong>查看项目:</strong> 点击项目名称进入项目详情页，可以看到该项目下的所有函数。</li><li><strong>编辑/删除项目:</strong> 在项目列表或详情页通常有编辑和删除的操作按钮。</li></ul></li><li><p><strong>函数 (Functions):</strong></p><ul><li>这是 Nuclio 的核心。你可以在项目内部创建和管理函数。</li><li><strong>创建函数:</strong><ul><li>进入一个项目，点击 “New Function” 或 “Create Function”。</li><li><strong>模板选择:</strong> 你可以选择一个预定义的模板（例如，Go 的 HTTP 处理、Python 的事件处理等），或者从头开始。</li><li><strong>配置:</strong><ul><li><strong>Function Name:</strong> 函数的唯一名称。</li><li><strong>Description/Labels:</strong> 可选的描述和标签。</li><li><strong>Runtime:</strong> 选择函数的运行时语言（Go, Python, Node.js, Java, .NET Core, Shell, Binary）。</li><li><strong>Source Code:</strong><ul><li><strong>Inline Editor:</strong> 直接在 Web 编辑器中编写代码。</li><li><strong>Upload:</strong> 上传代码文件或压缩包 (zip, jar)。</li><li><strong>Git Repository:</strong> 从 Git 仓库拉取代码（需要配置）。</li><li><strong>Image:</strong> 使用一个已经包含函数代码和依赖的 Docker 镜像。</li></ul></li><li><strong>Handler:</strong> 指定函数入口点（例如，Python 文件名:函数名，<code>main:handler</code>）。</li><li><strong>Dependencies:</strong> 如果代码有外部依赖，需要在这里指定（例如，Python 的 <code>requirements.txt</code> 内容，Go 的 <code>go.mod</code> 等）。Nuclio 会在构建过程中安装它们。</li><li><strong>Triggers:</strong> 配置触发函数的方式。最常见的是 <code>http</code>（通过 HTTP 请求触发），但也支持 Kafka, Kinesis, RabbitMQ, Cron (定时任务) 等多种事件源。需要配置触发器的详细信息（如 HTTP 路径、方法，Kafka 主题等）。</li><li><strong>Environment Variables:</strong> 设置函数运行时可以访问的环境变量。</li><li><strong>Volumes:</strong> (Kubernetes 环境) 挂载存储卷到函数 Pod。</li><li><strong>Resources:</strong> 配置函数的资源请求和限制（CPU, Memory）。</li><li><strong>Scaling:</strong> 配置自动伸缩参数（最小/最大副本数，目标 CPU 使用率等）。</li><li><strong>Build Settings:</strong> 配置构建过程的参数，例如基础镜像、构建命令等。</li></ul></li></ul></li><li><strong>部署函数:</strong> 配置完成后，点击 “Deploy” 或 “Create”。Nuclio Controller 会开始构建函数镜像（如果需要）并将其实例化（在 Docker 中是启动容器，在 Kubernetes 中是创建 Deployment/Pod）。部署状态会显示在函数列表中（例如：Building, Ready, Error）。</li><li><strong>查看函数详情:</strong> 点击函数名称进入详情页。<ul><li><strong>Code &amp; Configuration:</strong> 查看或编辑函数的代码和配置。</li><li><strong>Triggers:</strong> 查看触发器信息，特别是 HTTP 触发器的调用 URL。</li><li><strong>Logs:</strong> 查看函数的实时或历史日志输出。</li><li><strong>Monitoring:</strong> 查看函数的调用次数、延迟、成功/失败率等指标（可能需要集成监控系统）。</li><li><strong>Versions:</strong> 查看函数的部署历史版本。</li></ul></li><li><strong>调用/测试函数:</strong> 对于 HTTP 触发器，可以直接在浏览器或使用 <code>curl</code> 等工具访问其 URL 来调用函数。Dashboard 有时也提供简单的调用测试界面。</li><li><strong>编辑/删除函数:</strong> 在函数列表或详情页进行操作。编辑后需要重新部署才能生效。</li></ul></li><li><p><strong>API Gateways:</strong> (如果使用了 Nuclio 的 API Gateway 功能)</p><ul><li>用于创建和管理 API 网关，将外部请求路由到不同的 Nuclio 函数。</li><li>可以配置路径、方法、认证、限流等。</li></ul></li><li><p><strong>设置/平台配置 (Settings / Platform Configuration):</strong> (可能在某些版本或模式下可见)</p><ul><li>查看 Nuclio 平台的配置信息。</li></ul></li></ol><h2 id="基于yolov8模型部署函数计算到nuclio">基于yolov8模型部署函数计算到nuclio</h2><h3 id="yml">yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">nuclio.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Function</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">yolov8-detector</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">nuclio</span> <span class="comment"># Or your preferred namespace</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nuclio.io/project-name:</span> <span class="comment"># Add your project name if using Nuclio projects</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">&quot;YOLOv8 Object Detection Function using model copied during build&quot;</span></span><br><span class="line">  <span class="attr">runtime:</span> <span class="string">python:3.9</span> <span class="comment"># Ensure this matches the Python version you need</span></span><br><span class="line">  <span class="attr">handler:</span> <span class="string">main:handler</span> <span class="comment"># Points to main.py -&gt; handler function</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">HTTP_PROXY</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">http://192.168.10.123:7890</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">HTTPS_PROXY</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">http://192.168.10.123:7890</span> <span class="comment"># 或者 https://... 如果代理本身用https</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NO_PROXY</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">localhost,127.0.0.1,kubernetes.default.svc</span> <span class="comment"># 添加其他内部地址</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">.</span> <span class="comment"># Build context is still copied somewhere by Nuclio, just maybe not where expected.</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;apt-get update &amp;&amp; apt-get install -y --no-install-recommends libgl1-mesa-glx libglib2.0-0&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;pip install --default-timeout=600 --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;pip install -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple --default-timeout=600 --no-cache-dir ultralytics Pillow nuclio-sdk numpy&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---- Runtime Configuration ----</span></span><br><span class="line">  <span class="comment"># (Optional but Recommended) Set resource limits, especially memory for large models</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">limits:</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">&quot;4Gi&quot;</span>   <span class="comment"># Adjust memory limit based on yolov8x needs (e.g., 4Gi, 6Gi, 8Gi)</span></span><br></pre></td></tr></table></figure><h3 id="python-code">python code</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> nuclio_sdk</span><br><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_context</span>(<span class="params">context: nuclio_sdk.Context</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;初始化函数上下文，加载模型&quot;&quot;&quot;</span></span><br><span class="line">    context.logger.info(<span class="string">&quot;Initializing YOLOv8 model...&quot;</span>)</span><br><span class="line">    <span class="comment"># 从函数工作目录加载模型文件 (假设 .pt 文件和 main.py 在同一目录)</span></span><br><span class="line">    <span class="comment"># 或者提供模型的绝对路径（如果在 function.yaml 中挂载了）</span></span><br><span class="line">    model_path = <span class="string">&quot;/detect/yolov8/yolov8x.pt&quot;</span></span><br><span class="line">    model = YOLO(model_path)</span><br><span class="line">    context.user_data.model = model</span><br><span class="line">    context.logger.info(<span class="string">&quot;Model loaded successfully.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handler</span>(<span class="params">context: nuclio_sdk.Context, event: nuclio_sdk.Event</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理输入的 HTTP 请求&quot;&quot;&quot;</span></span><br><span class="line">    context.logger.info(<span class="string">&quot;Received event.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查请求体类型</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(event.body, <span class="built_in">bytes</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(event.body.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            context.logger.error(<span class="string">f&quot;Failed to decode JSON body: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> context.Response(body=<span class="string">f&quot;Bad request: <span class="subst">&#123;e&#125;</span>&quot;</span>, status_code=<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(event.body, <span class="built_in">dict</span>):</span><br><span class="line">        data = event.body</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> context.Response(body=<span class="string">&quot;Unsupported event body type&quot;</span>, status_code=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求中获取 base64 编码的图像数据</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;image&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">return</span> context.Response(body=<span class="string">&quot;Missing &#x27;image&#x27; field in request body&quot;</span>, status_code=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        image_b64 = data[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">        image_bytes = base64.b64decode(image_b64)</span><br><span class="line">        image = Image.<span class="built_in">open</span>(io.BytesIO(image_bytes)).convert(<span class="string">&#x27;RGB&#x27;</span>) <span class="comment"># 确保是 RGB</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        context.logger.error(<span class="string">f&quot;Failed to decode base64 image: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> context.Response(body=<span class="string">f&quot;Invalid image data: <span class="subst">&#123;e&#125;</span>&quot;</span>, status_code=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用加载的模型进行预测</span></span><br><span class="line">    context.logger.info(<span class="string">&quot;Performing inference...&quot;</span>)</span><br><span class="line">    model = context.user_data.model</span><br><span class="line">    results = model(image) <span class="comment"># results 是一个列表，通常包含一个 Results 对象</span></span><br><span class="line">    context.logger.info(<span class="string">&quot;Inference complete.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理预测结果</span></span><br><span class="line">    detections = []</span><br><span class="line">    <span class="keyword">if</span> results <span class="keyword">and</span> results[<span class="number">0</span>]:</span><br><span class="line">        result = results[<span class="number">0</span>] <span class="comment"># 获取第一个图像的结果</span></span><br><span class="line">        boxes = result.boxes  <span class="comment"># Boxes object</span></span><br><span class="line">        names = result.names  <span class="comment"># Class names dict &#123;id: name&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(boxes)):</span><br><span class="line">            box = boxes[i]</span><br><span class="line">            xyxy = box.xyxy.cpu().numpy().flatten().tolist() <span class="comment"># [x1, y1, x2, y2]</span></span><br><span class="line">            conf = <span class="built_in">float</span>(box.conf.cpu().numpy()) <span class="comment"># 置信度</span></span><br><span class="line">            cls_id = <span class="built_in">int</span>(box.cls.cpu().numpy())   <span class="comment"># 类别 ID</span></span><br><span class="line">            label = names[cls_id]                 <span class="comment"># 类别名称</span></span><br><span class="line"></span><br><span class="line">            detections.append(&#123;</span><br><span class="line">                <span class="string">&quot;label&quot;</span>: label,</span><br><span class="line">                <span class="string">&quot;confidence&quot;</span>: conf,</span><br><span class="line">                <span class="comment"># CVAT 通常需要 [xtl, ytl, xbr, ybr] 格式的整数坐标</span></span><br><span class="line">                <span class="string">&quot;points&quot;</span>: [<span class="built_in">int</span>(xyxy[<span class="number">0</span>]), <span class="built_in">int</span>(xyxy[<span class="number">1</span>]), <span class="built_in">int</span>(xyxy[<span class="number">2</span>]), <span class="built_in">int</span>(xyxy[<span class="number">3</span>])]</span><br><span class="line">                <span class="comment"># 或者根据需要返回归一化坐标或其他格式</span></span><br><span class="line">                <span class="comment"># &quot;xtl&quot;: xyxy[0], &quot;ytl&quot;: xyxy[1], &quot;xbr&quot;: xyxy[2], &quot;ybr&quot;: xyxy[3]</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">    context.logger.info(<span class="string">f&quot;Detected <span class="subst">&#123;<span class="built_in">len</span>(detections)&#125;</span> objects.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回 JSON 格式的检测结果</span></span><br><span class="line">    <span class="keyword">return</span> context.Response(body=json.dumps(detections),</span><br><span class="line">                            content_type=<span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">                            status_code=<span class="number">200</span>)</span><br></pre></td></tr></table></figure><h2 id="web-http-调用-yolov8模型">web http 调用 yolov8模型</h2><blockquote><p>可输出 cvat v1.1格式的标注后xml文件，根据输入视频输出目标检测标注结果生成代码 获得标注结果后 压缩标注结果文件 导入cvat对应项目对应task</p></blockquote><ul><li>代码如下：</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">from</span> xml.dom <span class="keyword">import</span> minidom <span class="comment"># 用于美化打印XML</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 配置区 ---</span></span><br><span class="line">VIDEO_PATH = <span class="string">&quot;/Users/zg/PycharmProjects/CVAT_model_nuclio/src/run/data/1.mp4&quot;</span>  <span class="comment"># &lt;&lt;&lt;--- 修改这里: 你的视频文件的完整路径</span></span><br><span class="line">NUCLIO_FUNCTION_URL = <span class="string">&quot;http://192.168.10.158:32774&quot;</span> <span class="comment"># YOLOv8检测器的端口</span></span><br><span class="line">OUTPUT_DIR = <span class="string">&quot;./data/&quot;</span>  <span class="comment"># 输出XML文件的目录</span></span><br><span class="line">LOG_FILE = <span class="string">&quot;./logs/video_processing_cvat_images_cn.log&quot;</span>  <span class="comment"># 日志文件名</span></span><br><span class="line">FRAME_SKIP = <span class="number">5</span>  <span class="comment"># 处理每 N 帧 (1 = 处理所有帧, 5 = 每5帧处理1帧)</span></span><br><span class="line">REQUEST_TIMEOUT = <span class="number">30</span>  <span class="comment"># 等待Nuclio响应的超时时间（秒）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建日志和数据目录（如果不存在）</span></span><br><span class="line">os.makedirs(<span class="string">&#x27;./logs/&#x27;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(OUTPUT_DIR, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 设置日志记录 ---</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.INFO, <span class="comment"># 日志级别</span></span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>, <span class="comment"># 日志格式</span></span><br><span class="line">    handlers=[</span><br><span class="line">        logging.FileHandler(LOG_FILE, encoding=<span class="string">&#x27;utf-8&#x27;</span>),  <span class="comment"># 输出日志到文件，使用utf-8编码</span></span><br><span class="line">        logging.StreamHandler()  <span class="comment"># 同时输出日志到控制台</span></span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 辅助函数 ---</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_frame_to_base64</span>(<span class="params">frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;将OpenCV读取的帧(NumPy数组)编码为Base64字符串。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 将帧编码为内存中的JPEG格式</span></span><br><span class="line">        is_success, buffer = cv2.imencode(<span class="string">&quot;.jpg&quot;</span>, frame)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_success:</span><br><span class="line">            logging.error(<span class="string">&quot;无法将帧编码为JPEG。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 将字节缓冲区编码为Base64字符串</span></span><br><span class="line">        b64_string = base64.b64encode(buffer).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> b64_string</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;帧编码过程中出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_nuclio_detector</span>(<span class="params">base64_image_string, frame_number</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;将Base64编码的图像发送给Nuclio函数并返回检测结果。&quot;&quot;&quot;</span></span><br><span class="line">    payload = json.dumps(&#123;<span class="string">&quot;image&quot;</span>: base64_image_string&#125;)</span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="comment"># 发送POST请求</span></span><br><span class="line">        response = requests.post(NUCLIO_FUNCTION_URL, headers=headers, data=payload, timeout=REQUEST_TIMEOUT)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        logging.info(<span class="string">f&quot;帧 <span class="subst">&#123;frame_number&#125;</span>: Nuclio请求耗时 <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒。&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查响应状态码</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                detections = response.json()</span><br><span class="line">                <span class="comment"># 验证检测结果的基本结构</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(detections, <span class="built_in">list</span>):</span><br><span class="line">                     logging.error(<span class="string">f&quot;帧 <span class="subst">&#123;frame_number&#125;</span>: Nuclio响应不是列表。收到类型: <span class="subst">&#123;<span class="built_in">type</span>(detections)&#125;</span>&quot;</span>)</span><br><span class="line">                     <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">                valid_detections = []</span><br><span class="line">                <span class="keyword">for</span> det <span class="keyword">in</span> detections:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">isinstance</span>(det, <span class="built_in">dict</span>) <span class="keyword">and</span> <span class="string">&#x27;label&#x27;</span> <span class="keyword">in</span> det <span class="keyword">and</span> <span class="string">&#x27;points&#x27;</span> <span class="keyword">in</span> det <span class="keyword">and</span> <span class="string">&#x27;confidence&#x27;</span> <span class="keyword">in</span> det:</span><br><span class="line">                         <span class="keyword">if</span> <span class="built_in">isinstance</span>(det[<span class="string">&#x27;points&#x27;</span>], <span class="built_in">list</span>) <span class="keyword">and</span> <span class="built_in">len</span>(det[<span class="string">&#x27;points&#x27;</span>]) == <span class="number">4</span>:</span><br><span class="line">                              valid_detections.append(det)</span><br><span class="line">                         <span class="keyword">else</span>:</span><br><span class="line">                              logging.warning(<span class="string">f&quot;帧 <span class="subst">&#123;frame_number&#125;</span>: 跳过无效&#x27;points&#x27;的检测结果: <span class="subst">&#123;det.get(<span class="string">&#x27;points&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                         logging.warning(<span class="string">f&quot;帧 <span class="subst">&#123;frame_number&#125;</span>: 跳过缺少键或类型错误的检测结果: <span class="subst">&#123;det&#125;</span>&quot;</span>)</span><br><span class="line">                logging.info(<span class="string">f&quot;帧 <span class="subst">&#123;frame_number&#125;</span>: 收到 <span class="subst">&#123;<span class="built_in">len</span>(valid_detections)&#125;</span> 个有效检测结果。&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> valid_detections</span><br><span class="line">            <span class="keyword">except</span> json.JSONDecodeError:</span><br><span class="line">                logging.error(<span class="string">f&quot;帧 <span class="subst">&#123;frame_number&#125;</span>: 解析Nuclio的JSON响应失败。状态码: <span class="subst">&#123;response.status_code&#125;</span>, 响应体(前200字符): <span class="subst">&#123;response.text[:<span class="number">200</span>]&#125;</span>...&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e_val:</span><br><span class="line">                 logging.error(<span class="string">f&quot;帧 <span class="subst">&#123;frame_number&#125;</span>: 验证Nuclio响应结构时出错: <span class="subst">&#123;e_val&#125;</span>&quot;</span>)</span><br><span class="line">                 <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.error(<span class="string">f&quot;帧 <span class="subst">&#123;frame_number&#125;</span>: Nuclio函数返回错误。状态码: <span class="subst">&#123;response.status_code&#125;</span>, 响应体(前200字符): <span class="subst">&#123;response.text[:<span class="number">200</span>]&#125;</span>...&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.Timeout:</span><br><span class="line">        logging.error(<span class="string">f&quot;帧 <span class="subst">&#123;frame_number&#125;</span>: 请求Nuclio函数超时 (<span class="subst">&#123;REQUEST_TIMEOUT&#125;</span>秒)。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;帧 <span class="subst">&#123;frame_number&#125;</span>: 请求Nuclio函数失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;帧 <span class="subst">&#123;frame_number&#125;</span>: 调用Nuclio时发生意外错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- XML 生成 ---</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pretty_print_xml</span>(<span class="params">elem</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回包含声明且格式化（美化）的XML字符串。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 将ElementTree元素转换为utf-8字节字符串</span></span><br><span class="line">        rough_string = ET.tostring(elem, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="comment"># 使用minidom解析字节字符串</span></span><br><span class="line">        reparsed = minidom.parseString(rough_string)</span><br><span class="line">        <span class="comment"># 使用toprettyxml进行格式化，包含缩进和XML声明</span></span><br><span class="line">        <span class="comment"># 确保它返回utf-8编码的字节字符串，然后解码为python字符串</span></span><br><span class="line">        xml_str = reparsed.toprettyxml(indent=<span class="string">&quot;  &quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> xml_str</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;XML美化打印过程中出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 返回None，表示需要调用函数中的后备方案</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_results_to_cvat_image_xml</span>(<span class="params">all_results, xml_output_path, video_filename, frame_width, frame_height, total_processed_frames, original_total_frames</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;将检测结果保存为 CVAT XML 1.1 for Images 格式。&quot;&quot;&quot;</span></span><br><span class="line">    logging.info(<span class="string">f&quot;正在为 <span class="subst">&#123;<span class="built_in">len</span>(all_results)&#125;</span> 个处理过的帧构建CVAT图像XML输出...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- 构建XML结构 ---</span></span><br><span class="line">    root = ET.Element(<span class="string">&quot;annotations&quot;</span>)</span><br><span class="line">    ET.SubElement(root, <span class="string">&quot;version&quot;</span>).text = <span class="string">&quot;1.1&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Meta元信息</span></span><br><span class="line">    meta = ET.SubElement(root, <span class="string">&quot;meta&quot;</span>)</span><br><span class="line">    task = ET.SubElement(meta, <span class="string">&quot;task&quot;</span>)</span><br><span class="line">    ET.SubElement(task, <span class="string">&quot;id&quot;</span>).text = <span class="string">&quot;N/A&quot;</span> <span class="comment"># 占位符</span></span><br><span class="line">    ET.SubElement(task, <span class="string">&quot;name&quot;</span>).text = video_filename <span class="comment"># 使用视频名作为任务名</span></span><br><span class="line">    <span class="comment"># 注意: size在这里表示标注的图像数量 (即处理过的帧数)</span></span><br><span class="line">    ET.SubElement(task, <span class="string">&quot;size&quot;</span>).text = <span class="built_in">str</span>(total_processed_frames)</span><br><span class="line">    ET.SubElement(task, <span class="string">&quot;mode&quot;</span>).text = <span class="string">&quot;annotation&quot;</span> <span class="comment"># 模式改为 annotation (图像模式)</span></span><br><span class="line">    ET.SubElement(task, <span class="string">&quot;overlap&quot;</span>).text = <span class="string">&quot;0&quot;</span></span><br><span class="line">    ET.SubElement(task, <span class="string">&quot;bugtracker&quot;</span>).text = <span class="string">&quot;&quot;</span></span><br><span class="line">    current_time_utc = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S.%f&quot;</span>)[:-<span class="number">3</span>] + <span class="string">&quot;+00:00&quot;</span> <span class="comment"># 当前UTC时间</span></span><br><span class="line">    ET.SubElement(task, <span class="string">&quot;created&quot;</span>).text = current_time_utc</span><br><span class="line">    ET.SubElement(task, <span class="string">&quot;updated&quot;</span>).text = current_time_utc</span><br><span class="line">    ET.SubElement(task, <span class="string">&quot;start_frame&quot;</span>).text = <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="comment"># stop_frame对应最后一帧的索引(0-based)</span></span><br><span class="line">    <span class="comment"># 我们基于处理过的帧来计算，找到最大的帧号</span></span><br><span class="line">    last_processed_frame_num = <span class="built_in">max</span>(all_results.keys()) <span class="keyword">if</span> all_results <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    ET.SubElement(task, <span class="string">&quot;stop_frame&quot;</span>).text = <span class="built_in">str</span>(last_processed_frame_num - <span class="number">1</span> <span class="keyword">if</span> last_processed_frame_num &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    ET.SubElement(task, <span class="string">&quot;frame_filter&quot;</span>).text = <span class="string">&quot;&quot;</span> <span class="comment"># 如果有跳帧，可以写在这里，但通常导入时不需要</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取并添加标签信息</span></span><br><span class="line">    labels = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">if</span> all_results:</span><br><span class="line">        <span class="keyword">for</span> frame_dets <span class="keyword">in</span> all_results.values():</span><br><span class="line">            <span class="keyword">if</span> frame_dets:</span><br><span class="line">                <span class="keyword">for</span> det <span class="keyword">in</span> frame_dets:</span><br><span class="line">                    labels.add(<span class="built_in">str</span>(det.get(<span class="string">&#x27;label&#x27;</span>, <span class="string">&#x27;unknown&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">    labels_elem = ET.SubElement(task, <span class="string">&quot;labels&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> labels: <span class="comment"># 如果没有检测到任何标签，添加一个默认标签</span></span><br><span class="line">        logging.warning(<span class="string">&quot;在检测结果中未找到标签，添加默认&#x27;unknown&#x27;标签。&quot;</span>)</span><br><span class="line">        labels.add(<span class="string">&#x27;unknown&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> label_name <span class="keyword">in</span> <span class="built_in">sorted</span>(<span class="built_in">list</span>(labels)):</span><br><span class="line">         label_elem = ET.SubElement(labels_elem, <span class="string">&quot;label&quot;</span>)</span><br><span class="line">         ET.SubElement(label_elem, <span class="string">&quot;name&quot;</span>).text = label_name</span><br><span class="line">         ET.SubElement(label_elem, <span class="string">&quot;color&quot;</span>).text = <span class="string">&quot;&quot;</span> <span class="comment"># CVAT会自动分配颜色</span></span><br><span class="line">         ET.SubElement(label_elem, <span class="string">&quot;type&quot;</span>).text = <span class="string">&quot;rectangle&quot;</span> <span class="comment"># 假设都是矩形框</span></span><br><span class="line">         ET.SubElement(label_elem, <span class="string">&quot;attributes&quot;</span>) <span class="comment"># 这里不定义属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加最小化的 segments 信息 (CVAT格式要求)</span></span><br><span class="line">    segments = ET.SubElement(task, <span class="string">&quot;segments&quot;</span>)</span><br><span class="line">    segment = ET.SubElement(segments, <span class="string">&quot;segment&quot;</span>)</span><br><span class="line">    ET.SubElement(segment, <span class="string">&quot;id&quot;</span>).text = <span class="string">&quot;0&quot;</span></span><br><span class="line">    ET.SubElement(segment, <span class="string">&quot;start&quot;</span>).text = <span class="string">&quot;0&quot;</span></span><br><span class="line">    ET.SubElement(segment, <span class="string">&quot;stop&quot;</span>).text = <span class="built_in">str</span>(original_total_frames - <span class="number">1</span>) <span class="comment"># 使用原始视频的总帧数</span></span><br><span class="line">    ET.SubElement(segment, <span class="string">&quot;url&quot;</span>).text = <span class="string">&quot;N/A&quot;</span> <span class="comment"># 占位符</span></span><br><span class="line"></span><br><span class="line">    ET.SubElement(task, <span class="string">&quot;owner&quot;</span>) <span class="comment"># 空的 owner</span></span><br><span class="line">    ET.SubElement(task, <span class="string">&quot;assignee&quot;</span>) <span class="comment"># 空的 assignee</span></span><br><span class="line">    ET.SubElement(task, <span class="string">&quot;subset&quot;</span>).text = <span class="string">&quot;Default&quot;</span> <span class="comment"># 默认子集</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 原始尺寸信息 (需要)</span></span><br><span class="line">    original_size = ET.SubElement(meta, <span class="string">&quot;original_size&quot;</span>)</span><br><span class="line">    ET.SubElement(original_size, <span class="string">&quot;width&quot;</span>).text = <span class="built_in">str</span>(frame_width)</span><br><span class="line">    ET.SubElement(original_size, <span class="string">&quot;height&quot;</span>).text = <span class="built_in">str</span>(frame_height)</span><br><span class="line"></span><br><span class="line">    ET.SubElement(meta, <span class="string">&quot;dumped&quot;</span>).text = current_time_utc <span class="comment"># 导出时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为每个处理过的帧添加 &lt;image&gt; 标注</span></span><br><span class="line">    <span class="keyword">if</span> all_results:</span><br><span class="line">        <span class="keyword">for</span> frame_number <span class="keyword">in</span> <span class="built_in">sorted</span>(all_results.keys()): <span class="comment"># 按帧号排序</span></span><br><span class="line">            detections = all_results[frame_number]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> detections: <span class="comment"># 如果该帧没有检测结果，跳过（理论上不应发生，因为我们只存储有结果的帧）</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建 &lt;image&gt; 元素</span></span><br><span class="line">            image_elem = ET.SubElement(root, <span class="string">&quot;image&quot;</span>)</span><br><span class="line">            <span class="comment"># CVAT 使用 0-based 索引作为 id</span></span><br><span class="line">            image_elem.<span class="built_in">set</span>(<span class="string">&quot;id&quot;</span>, <span class="built_in">str</span>(frame_number - <span class="number">1</span>))</span><br><span class="line">            <span class="comment"># 生成一个规范的帧名 (可选，但推荐)</span></span><br><span class="line">            image_elem.<span class="built_in">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">f&quot;frame_<span class="subst">&#123;frame_number:06d&#125;</span>&quot;</span>) <span class="comment"># 格式化帧号，如 frame_000123</span></span><br><span class="line">            image_elem.<span class="built_in">set</span>(<span class="string">&quot;width&quot;</span>, <span class="built_in">str</span>(frame_width))</span><br><span class="line">            image_elem.<span class="built_in">set</span>(<span class="string">&quot;height&quot;</span>, <span class="built_in">str</span>(frame_height))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 在 &lt;image&gt; 元素内部添加 &lt;box&gt; 元素</span></span><br><span class="line">            <span class="keyword">for</span> det <span class="keyword">in</span> detections:</span><br><span class="line">                box_elem = ET.SubElement(image_elem, <span class="string">&quot;box&quot;</span>)</span><br><span class="line">                box_elem.<span class="built_in">set</span>(<span class="string">&quot;label&quot;</span>, <span class="built_in">str</span>(det.get(<span class="string">&#x27;label&#x27;</span>, <span class="string">&#x27;unknown&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">                points = det.get(<span class="string">&#x27;points&#x27;</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">                <span class="comment"># 坐标使用两位小数的浮点数格式</span></span><br><span class="line">                box_elem.<span class="built_in">set</span>(<span class="string">&quot;xtl&quot;</span>, <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">float</span>(points[<span class="number">0</span>]):<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">                box_elem.<span class="built_in">set</span>(<span class="string">&quot;ytl&quot;</span>, <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">float</span>(points[<span class="number">1</span>]):<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">                box_elem.<span class="built_in">set</span>(<span class="string">&quot;xbr&quot;</span>, <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">float</span>(points[<span class="number">2</span>]):<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">                box_elem.<span class="built_in">set</span>(<span class="string">&quot;ybr&quot;</span>, <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">float</span>(points[<span class="number">3</span>]):<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 对于图像格式，通常不需要 outside，但 occluded 可以保留</span></span><br><span class="line">                box_elem.<span class="built_in">set</span>(<span class="string">&quot;occluded&quot;</span>, <span class="string">&quot;0&quot;</span>) <span class="comment"># 0 表示未遮挡 (假设)</span></span><br><span class="line">                <span class="comment"># 在 CVAT for Images 格式中，不需要 keyframe 和 outside</span></span><br><span class="line">                <span class="comment"># box_elem.set(&quot;outside&quot;, &quot;0&quot;) # 通常不需要为图像设置outside</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将置信度添加为属性</span></span><br><span class="line">                attr_conf = ET.SubElement(box_elem, <span class="string">&quot;attribute&quot;</span>, name=<span class="string">&quot;confidence&quot;</span>)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    confidence_val = <span class="built_in">float</span>(det.get(<span class="string">&#x27;confidence&#x27;</span>, <span class="number">0.0</span>))</span><br><span class="line">                <span class="keyword">except</span> (ValueError, TypeError):</span><br><span class="line">                    confidence_val = <span class="number">0.0</span></span><br><span class="line">                attr_conf.text = <span class="string">f&quot;<span class="subst">&#123;confidence_val:<span class="number">.4</span>f&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- 结束构建XML结构 ---</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- 写入 XML 文件 ---</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取包含声明且格式化的完整XML字符串</span></span><br><span class="line">        full_xml_string = pretty_print_xml(root)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> full_xml_string:</span><br><span class="line">            <span class="comment"># 在写入前确保字符串以 &lt;?xml 开头</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> full_xml_string.strip().startswith(<span class="string">&quot;&lt;?xml&quot;</span>):</span><br><span class="line">                 logging.error(<span class="string">&quot;美化打印未能生成有效的XML开头。&quot;</span>)</span><br><span class="line">                 <span class="keyword">raise</span> ValueError(<span class="string">&quot;美化打印失败。&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(xml_output_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="comment"># 直接写入完整的字符串</span></span><br><span class="line">                f.write(full_xml_string)</span><br><span class="line">            logging.info(<span class="string">f&quot;检测结果已保存至 CVAT 图像 XML: <span class="subst">&#123;xml_output_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果 pretty_print_xml 返回 None，使用后备方案</span></span><br><span class="line">            logging.warning(<span class="string">&quot;美化打印失败，回退到基础XML写入器。&quot;</span>)</span><br><span class="line">            tree = ET.ElementTree(root)</span><br><span class="line">            <span class="comment"># 如果 Python &gt;= 3.9, 可以使用 ET.indent 添加基本缩进</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(ET, <span class="string">&#x27;indent&#x27;</span>):</span><br><span class="line">                 ET.indent(tree, space=<span class="string">&quot;  &quot;</span>, level=<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 使用 ElementTree 写入，并请求 XML 声明</span></span><br><span class="line">            tree.write(xml_output_path, encoding=<span class="string">&#x27;utf-8&#x27;</span>, xml_declaration=<span class="literal">True</span>)</span><br><span class="line">            logging.info(<span class="string">f&quot;检测结果已保存至基础 CVAT XML (后备方案): <span class="subst">&#123;xml_output_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;保存结果到 CVAT XML 文件失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 主处理逻辑 ---</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    logging.info(<span class="string">f&quot;开始处理视频: <span class="subst">&#123;VIDEO_PATH&#125;</span>&quot;</span>)</span><br><span class="line">    logging.info(<span class="string">f&quot;Nuclio 函数 URL: <span class="subst">&#123;NUCLIO_FUNCTION_URL&#125;</span>&quot;</span>)</span><br><span class="line">    logging.info(<span class="string">f&quot;处理帧间隔: 每 <span class="subst">&#123;FRAME_SKIP&#125;</span> 帧&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(VIDEO_PATH):</span><br><span class="line">        logging.error(<span class="string">f&quot;视频文件未找到: <span class="subst">&#123;VIDEO_PATH&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    cap = cv2.VideoCapture(VIDEO_PATH)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">        logging.error(<span class="string">f&quot;打开视频文件错误: <span class="subst">&#123;VIDEO_PATH&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取视频元数据</span></span><br><span class="line">    original_total_frames = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">    fps = cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line">    frame_width = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">    frame_height = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line">    <span class="keyword">if</span> original_total_frames &lt;= <span class="number">0</span>:</span><br><span class="line">        logging.error(<span class="string">f&quot;视频文件似乎为空或元数据错误 (总帧数: <span class="subst">&#123;original_total_frames&#125;</span>)。&quot;</span>)</span><br><span class="line">        cap.release()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    logging.info(<span class="string">f&quot;视频信息: 总帧数: <span class="subst">&#123;original_total_frames&#125;</span>, FPS: <span class="subst">&#123;fps:<span class="number">.2</span>f&#125;</span>, 尺寸: <span class="subst">&#123;frame_width&#125;</span>x<span class="subst">&#123;frame_height&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    frame_count = <span class="number">0</span> <span class="comment"># 已读取的帧计数 (1-based for logging)</span></span><br><span class="line">    processed_frame_count = <span class="number">0</span> <span class="comment"># 实际处理的帧计数</span></span><br><span class="line">    all_results = &#123;&#125; <span class="comment"># 存储结果: &#123;帧号 (1-based): [检测列表]&#125;</span></span><br><span class="line">    start_process_time = time.time() <span class="comment"># 开始计时</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 读取一帧</span></span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否成功读取</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            <span class="keyword">if</span> frame_count &lt; original_total_frames:</span><br><span class="line">                logging.warning(<span class="string">f&quot;无法读取帧 <span class="subst">&#123;frame_count + <span class="number">1</span>&#125;</span> (总帧数 <span class="subst">&#123;original_total_frames&#125;</span>)，假定视频结束。&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 logging.info(<span class="string">&quot;视频处理到达结尾。&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span> <span class="comment"># 退出循环</span></span><br><span class="line"></span><br><span class="line">        frame_count += <span class="number">1</span> <span class="comment"># 更新已读取帧计数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 跳帧逻辑 ---</span></span><br><span class="line">        <span class="keyword">if</span> FRAME_SKIP &gt; <span class="number">1</span> <span class="keyword">and</span> frame_count % FRAME_SKIP != <span class="number">0</span> :</span><br><span class="line">            <span class="keyword">continue</span> <span class="comment"># 跳过当前帧</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 处理当前帧 ---</span></span><br><span class="line">        processed_frame_count += <span class="number">1</span> <span class="comment"># 更新已处理帧计数</span></span><br><span class="line">        logging.info(<span class="string">f&quot;正在处理帧 <span class="subst">&#123;frame_count&#125;</span>/<span class="subst">&#123;original_total_frames&#125;</span>...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 编码帧</span></span><br><span class="line">        b64_string = encode_frame_to_base64(frame)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> b64_string:</span><br><span class="line">            logging.warning(<span class="string">f&quot;因编码错误跳过帧 <span class="subst">&#123;frame_count&#125;</span>。&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用 Nuclio 检测器</span></span><br><span class="line">        detections = call_nuclio_detector(b64_string, frame_count)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 存储检测结果 (仅当检测结果非空时存储)</span></span><br><span class="line">        <span class="keyword">if</span> detections:</span><br><span class="line">            all_results[frame_count] = detections <span class="comment"># 使用 1-based 帧号作为键</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 进度估计 (可选) ---</span></span><br><span class="line">        <span class="keyword">if</span> processed_frame_count &gt; <span class="number">0</span> <span class="keyword">and</span> processed_frame_count % <span class="number">10</span> == <span class="number">0</span>: <span class="comment"># 每处理10帧更新一次进度</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                elapsed_time = time.time() - start_process_time</span><br><span class="line">                <span class="comment"># 估计总共需要处理的帧数</span></span><br><span class="line">                estimated_total_to_process = (original_total_frames // FRAME_SKIP) <span class="keyword">if</span> FRAME_SKIP &gt; <span class="number">1</span> <span class="keyword">else</span> original_total_frames</span><br><span class="line">                <span class="keyword">if</span> estimated_total_to_process &gt; <span class="number">0</span>:</span><br><span class="line">                    fraction_done = processed_frame_count / estimated_total_to_process</span><br><span class="line">                    <span class="comment"># 避免除零错误和进度超过100%的情况</span></span><br><span class="line">                    <span class="keyword">if</span> fraction_done &gt; <span class="number">0</span> <span class="keyword">and</span> fraction_done &lt;= <span class="number">1</span>:</span><br><span class="line">                        total_estimated_time = elapsed_time / fraction_done</span><br><span class="line">                        estimated_remaining_time = <span class="built_in">max</span>(<span class="number">0</span>, total_estimated_time - elapsed_time) <span class="comment"># 确保不为负</span></span><br><span class="line">                        logging.info(</span><br><span class="line">                            <span class="string">f&quot;进度: 帧 <span class="subst">&#123;frame_count&#125;</span>/<span class="subst">&#123;original_total_frames&#125;</span>。已处理 <span class="subst">&#123;processed_frame_count&#125;</span> 帧。预计剩余时间: <span class="subst">&#123;timedelta(seconds=<span class="built_in">int</span>(estimated_remaining_time))&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">                logging.warning(<span class="string">&quot;无法估计剩余时间 (除零错误)。&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e_est:</span><br><span class="line">                logging.warning(<span class="string">f&quot;无法估计剩余时间: <span class="subst">&#123;e_est&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- 清理与保存 ---</span></span><br><span class="line">    cap.release() <span class="comment"># 释放视频捕获对象</span></span><br><span class="line">    logging.info(<span class="string">&quot;视频捕获已释放。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确定输出XML文件名</span></span><br><span class="line">    video_basename = os.path.basename(VIDEO_PATH)</span><br><span class="line">    video_name_no_ext, _ = os.path.splitext(video_basename)</span><br><span class="line">    <span class="comment"># 文件名表明是CVAT图像格式</span></span><br><span class="line">    xml_output_filename = <span class="string">f&quot;<span class="subst">&#123;video_name_no_ext&#125;</span>_cvat_images.xml&quot;</span></span><br><span class="line">    xml_output_path = os.path.join(OUTPUT_DIR, xml_output_filename)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存为 CVAT 图像 XML</span></span><br><span class="line">    <span class="keyword">if</span> all_results:</span><br><span class="line">         <span class="comment"># 传递处理过的帧数给size字段</span></span><br><span class="line">         save_results_to_cvat_image_xml(</span><br><span class="line">             all_results,</span><br><span class="line">             xml_output_path,</span><br><span class="line">             video_basename,</span><br><span class="line">             frame_width,</span><br><span class="line">             frame_height,</span><br><span class="line">             processed_frame_count, <span class="comment"># 传递处理过的帧数</span></span><br><span class="line">             original_total_frames <span class="comment"># 传递原始总帧数</span></span><br><span class="line">         )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">         logging.warning(<span class="string">&quot;没有记录到任何检测结果，将不会创建CVAT XML文件。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- 结束处理 ---</span></span><br><span class="line">    end_process_time = time.time()</span><br><span class="line">    total_time = <span class="built_in">max</span>(<span class="number">0</span>, end_process_time - start_process_time) <span class="comment"># 确保总时间非负</span></span><br><span class="line">    logging.info(<span class="string">f&quot;视频处理完成。总耗时: <span class="subst">&#123;timedelta(seconds=<span class="built_in">int</span>(total_time))&#125;</span>&quot;</span>)</span><br><span class="line">    logging.info(<span class="string">f&quot;总共读取帧数: <span class="subst">&#123;frame_count&#125;</span>。实际处理帧数: <span class="subst">&#123;processed_frame_count&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 程序入口 ---</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="see">see</h2><ul><li>1.<a href="https://github.com/nuclio/nuclio?tab=readme-ov-file#quick-start-steps">https://github.com/nuclio/nuclio?tab=readme-ov-file#quick-start-steps</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg分割视频与音频中的处理问题分析</title>
      <link href="/2025/04/07/ffmpeg-problem-video/"/>
      <url>/2025/04/07/ffmpeg-problem-video/</url>
      
        <content type="html"><![CDATA[<h2 id="背景">背景</h2><blockquote><p>ffmpeg is a universal media converter. It can read a wide variety of inputs - including live grabbing/recording devices - filter, and transcode them into a plethora of output formats.</p></blockquote><blockquote><p>ffmpg包含了一整套用于处理音频、视频、字幕以及其他多média数据流的库（libraries）和程序（programs）。</p></blockquote><h2 id="视频处理">视频处理</h2><h3 id="视频帧">视频帧</h3><blockquote><p>如图</p></blockquote><p><img src="/2025/04/07/ffmpeg-problem-video/kf.png" class="lazyload placeholder" data-srcset="/2025/04/07/ffmpeg-problem-video/kf.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li><strong>I 帧 (关键帧)</strong>: 完整的图像，独立解码，是解码起点和参考基准，压缩率最低，数据量最大。</li><li><strong>P 帧</strong>: 存储与前一帧的差异，依赖前一帧解码，压缩率较高，数据量中等。</li><li><strong>B 帧</strong>: 存储与前、后帧的差异，依赖前后帧解码，压缩率最高，数据量最小。</li><li><strong>GOP</strong>: 由一个 I 帧和若干 P/B 帧组成的序列，其长度影响压缩率和随机访问性能。</li></ul><h3 id="帧构成">帧构成</h3><blockquote><p>如图</p></blockquote><p><img src="/2025/04/07/ffmpeg-problem-video/gop.png" class="lazyload placeholder" data-srcset="/2025/04/07/ffmpeg-problem-video/gop.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li><p><strong>I 帧 (Intra-coded Picture / Keyframe / 关键帧)</strong></p></li><li><p><strong>构成</strong>: I 帧是一帧<strong>完整</strong>的图像。它不依赖于任何其他帧来进行解码。它本身包含了在该时间点显示完整画面所需的所有信息。</p></li><li><p><strong>编码方式</strong>: 它只利用了<strong>空间冗余</strong>进行压缩，其编码方式类似于静态图像压缩（如 JPEG）。它不对前后帧进行参考。</p></li><li><p><strong>作用</strong>:</p></li><li><p><strong>解码起点</strong>: 播放器可以从任何一个 I 帧开始解码并正确显示视频，因此 I 帧是视频随机访问（快进、快退、定位播放）的基础。</p></li><li><p><strong>参考基准</strong>: 它作为后续 P 帧和 B 帧进行预测和参考的“基准帧”。</p></li><li><p><strong>错误隔离</strong>: 如果传输或存储中出现错误，错误的影响通常只持续到下一个 I 帧，I 帧可以阻止错误的进一步传播。</p></li><li><p><strong>特点</strong>: 数据量最大，压缩率最低（相比 P/B 帧）。</p></li><li><p><strong>P 帧 (Predicted Picture / 前向预测帧)</strong></p></li><li><p><strong>构成</strong>: P 帧不是一个完整的图像。它存储的是当前画面与<strong>之前</strong>的某个 I 帧或 P 帧之间的<strong>差异信息</strong>。</p></li><li><p><strong>编码方式</strong>: 它利用了<strong>时间冗余</strong>。编码器会分析当前 P 帧与它参考的前一帧（I 或 P）之间的区别，主要是物体的运动（通过<strong>运动矢量 (Motion Vectors</strong> 描述物体移动的方向和距离）以及运动补偿后的残差信息（预测不完全准确的部分）。</p></li><li><p><strong>作用</strong>: 大大提高压缩率，因为只存储变化的部分，数据量远小于 I 帧。</p></li><li><p><strong>依赖性</strong>: 解码 P 帧<strong>必须</strong>先解码它所参考的那个前面的 I 帧或 P 帧。</p></li><li><p><strong>特点</strong>: 数据量介于 I 帧和 B 帧之间，压缩率较高。</p></li><li><p><strong>B 帧 (Bi-directionally Predicted Picture / 双向预测帧)</strong></p></li><li><p><strong>构成</strong>: B 帧也不是一个完整的图像。它存储的是当前画面与它<strong>前面</strong>的一个参考帧（I 或 P）以及<strong>后面</strong>的一个参考帧（I 或 P）之间的差异信息。</p></li><li><p><strong>编码方式</strong>: 它利用了更充分的<strong>时间冗余</strong>。编码器可以同时参考过去和未来的帧来预测当前 B 帧的内容，通常能找到更相似的块，从而更有效地描述差异（运动矢量和残差）。</p></li><li><p><strong>作用</strong>: 提供最高的压缩率，数据量通常是最小的。</p></li><li><p><strong>依赖性</strong>: 解码 B 帧<strong>必须</strong>先解码它所参考的前、后两个参考帧。这意味着解码器需要先解码未来的参考帧，才能回头解码当前的 B 帧，这会引入一定的解码延迟。</p></li><li><p><strong>特点</strong>: 数据量最小，压缩率最高。</p></li></ul><h3 id="图像序列">图像序列</h3><ul><li><strong>GOP (Group of Pictures / 图像组)</strong></li></ul><blockquote><p>这些 I、P、B 帧通常被组织成一个称为 GOP 的序列。一个 GOP 以一个 I 帧开始，后面跟着一系列 P 帧和 B 帧，直到下一个 I 帧。</p></blockquote><ul><li><strong>结构示例</strong>: 一个常见的 GOP 结构可能是 <code>I B B P B B P B B I</code>。这个序列会重复出现。</li><li><strong>GOP 长度</strong>: 指两个连续 I 帧之间的距离（以帧数或时间衡量）。</li><li><strong>长 GOP</strong>: 包含更多的 P 和 B 帧，压缩率更高，但随机访问性能差（定位播放时需要找到更久之前的 I 帧），错误恢复慢。</li><li><strong>短 GOP</strong>: I 帧更频繁，压缩率较低，但随机访问快，错误恢复快。直播或需要频繁编辑的场景通常使用较短的 GOP。</li></ul><blockquote><p>由于 B 帧需要参考后面的帧，所以解码器处理帧的顺序（解码顺序）可能与最终屏幕上播放的顺序（显示顺序）不同。解码器需要先解码 B 帧所依赖的后面的参考帧，然后才能解码 B 帧本身，上述视频帧在解码与显示视频时关系如下图所示：</p></blockquote><p><img src="/2025/04/07/ffmpeg-problem-video/keyframe.png" class="lazyload placeholder" data-srcset="/2025/04/07/ffmpeg-problem-video/keyframe.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="主要功能及构成">主要功能及构成</h2><h3 id="功能">功能</h3><ol><li><strong>格式转换 (Transcoding / Format Conversion):</strong> FFmpeg 最常用的功能之一。它可以轻松地将视频或音频文件从一种格式转换为另一种格式（例如，MP4 转 AVI，WAV 转 MP3）。</li><li><strong>编码与解码 (Encoding / Decoding):</strong> 支持几乎所有已知的音频和视频编解码器（Codecs）。你可以用它来压缩媒体文件（编码）或播放/处理它们（解码）。</li><li><strong>封装与解封装 (Muxing / Demuxing):</strong> 可以将单独的音频流和视频流合并到一个容器文件（如 MP4, MKV）中（封装），或者从一个容器文件中提取出单独的音频、视频或字幕流（解封装）。</li><li><strong>流媒体处理 (Streaming):</strong> FFmpeg 可以捕捉、编码并将音视频流实时推送到流媒体服务器（如 RTMP, HLS），也可以作为客户端接收和处理流。</li><li><strong>编辑与处理 (Editing &amp; Filtering):</strong><ul><li><strong>裁剪 (Cropping):</strong> 截取视频画面的特定区域。</li><li><strong>缩放 (Scaling):</strong> 改变视频分辨率。</li><li><strong>旋转/翻转 (Rotating/Flipping):</strong> 调整视频方向。</li><li><strong>合并/分割 (Concatenating/Splitting):</strong> 连接或切分媒体文件。</li><li><strong>添加水印/字幕 (Watermarking/Subtitles):</strong> 在视频上叠加图片或文字。</li><li><strong>调整速度 (Speed Adjustment):</strong> 快放或慢放。</li><li><strong>应用滤镜 (Applying Filters):</strong> 调整亮度、对比度、饱和度，添加模糊、锐化等各种视觉效果，以及音频效果如音量调整、降噪等。</li></ul></li><li><strong>屏幕录制与设备捕捉 (Screen Recording &amp; Device Capture):</strong> 可以录制桌面屏幕、摄像头输入或麦克风音频。</li><li><strong>媒体信息分析 (Media Information Analysis):</strong> 通过 <code>ffprobe</code> 工具，可以详细分析媒体文件的各种参数，如编码格式、分辨率、比特率、帧率、时长等。</li></ol><h3 id="关键流程解读">关键流程解读</h3><ul><li>FFmpeg 的基本工作流程可以理解为一个处理管线：</li></ul><blockquote><p>解复用 (Demuxing): ffmpeg 读取输入文件 (-i input.mkv)。解复用器 (Demuxer) 负责解析容器格式 (如 MKV, MP4, AVI)，并将其中包含的各个基本流 (Elementary Streams, ES) 分离出来，这些流是编码过的数据包 (Packets)。</p></blockquote><blockquote><p>解码 (Decoding): 对于需要处理或重新编码的流，其数据包会被送入相应的解码器 (Decoder)。解码器将压缩的编码数据还原成原始的、未压缩的帧 (Frames) - 视频帧或音频采样。如果使用了 -c copy (流复制)，则跳过此步骤。</p></blockquote><blockquote><p>滤镜 (Filtering): 解码后的原始帧可以被送入滤镜图 (Filtergraph) (-vf, -af, -filter_complex) 进行处理。滤镜可以修改帧的内容，例如：<br>视频滤镜：缩放、裁剪、旋转、叠加水印、调色、去隔行等。<br>音频滤镜：重采样、改变音量、混音、降噪等。<br>如果未使用滤镜，则跳过此步骤。</p></blockquote><blockquote><p>编码 (Encoding): 经过滤镜处理（或直接来自解码器）的原始帧被送入指定的编码器 (Encoder) (-c:v libx264, -c:a aac 等)。编码器将原始帧压缩成编码后的数据包 (Packets)。如果使用了 -c copy (流复制)，则跳过此步骤。</p></blockquote><blockquote><p>复用 (Muxing): 编码后的数据包（或者从流复制直接过来的数据包）被送入复用器 (Muxer) (-f mp4 等指定格式)。复用器负责将来自不同流的数据包按照目标容器格式 (如 MP4, MKV, FLV) 的规范，交织写入到输出文件中 (output.mp4)。</p></blockquote><h3 id="构成">构成</h3><ul><li><strong><code>ffmpeg</code>:</strong> 核心的命令行工具，用于执行上述大部分的转换、处理任务。</li><li><strong><code>ffplay</code>:</strong> 一个基于 SDL 和 FFmpeg 库的简单媒体播放器。</li><li><strong><code>ffprobe</code>:</strong> 一个命令行工具，用于分析媒体文件并以文本、JSON、XML 等多种格式输出详细信息。</li><li><strong><code>libavcodec</code>:</strong> 包含了所有音频/视频编码器和解码器的库。</li><li><strong><code>libavformat</code>:</strong> 包含了处理各种媒体容器格式（封装/解封装）的库。</li><li><strong><code>libavfilter</code>:</strong> 包含了各种音频和视频滤镜的库。</li><li><strong><code>libswscale</code>:</strong> 用于图像缩放和颜色空间/像素格式转换的库。</li><li><strong><code>libswresample</code>:</strong> 用于音频重采样、格式转换和通道布局管理的库。</li><li><strong><code>libavutil</code>:</strong> 包含各种辅助工具函数的基础库。</li></ul><h2 id="选项指定">选项指定</h2><ul><li><strong><code>-i url</code></strong>: 指定输入文件或来源。可以有多个 <code>-i</code>。</li><li><strong><code>-f fmt</code></strong>: 强制指定输出文件格式 (如 <code>-f mp4</code>, <code>-f flv</code>)。通常 FFmpeg 能根据扩展名自动判断，但有时需要强制指定。</li><li><strong><code>-map [-]input_file_id[:stream_specifier][?]</code></strong>: <strong>极其重要</strong>。用于手动控制哪些输入流被包含到哪个输出文件中。<ul><li><code>0:v</code> 选择第一个输入文件的所有视频流。</li><li><code>0:a:1</code> 选择第一个输入文件的第二个音频流 (索引从0开始)。</li><li><code>1:s?</code> 选择第二个输入文件的第一个字幕流（如果存在）。</li><li><code>-map 0</code> 选择第一个输入文件的所有流。</li><li><code>-map -0:a</code> 从自动选择中排除第一个输入文件的所有音频流。</li></ul></li><li><strong><code>-c[:stream_specifier] codec</code></strong>: <strong>极其重要</strong>。选择编码器。<ul><li><code>-c copy</code>: 进行流复制 (Stream Copy)，不重新编码。</li><li><code>-c:v libx264</code>: 为视频流选择 H.264 (libx264) 编码器。</li><li><code>-c:a aac</code>: 为音频流选择 AAC 编码器。</li><li><code>-c:s mov_text</code>: 为字幕流选择 mov_text 编码器。</li><li><code>-vn</code>, <code>-an</code>, <code>-sn</code>: 分别是 <code>-c:v copy -an -sn</code>、<code>-c:a copy -vn -sn</code>、<code>-c:s copy -vn -an</code> 的简写，但更常用的含义是完全<strong>禁用</strong>视频/音频/字幕的录制/输出 (相当于映射到 /dev/null)。</li></ul></li><li><strong><code>-t duration</code></strong>: 指定输出文件的时长。</li><li><strong><code>-to position</code></strong>: 指定输出文件的结束时间点。</li><li><strong><code>-ss position</code></strong>: 指定输出文件的<strong>开始时间点</strong> (如果放在输出选项位置，通常会进行精确查找，但可能较慢；放在输入选项 <code>-i</code> 之前则查找更快但不精确)。</li><li><strong><code>-vf filtergraph</code></strong>: 设置视频滤镜链 (简单滤镜图)。</li><li><strong><code>-af filtergraph</code></strong>: 设置音频滤镜链 (简单滤镜图)。</li><li><strong><code>-filter_complex filtergraph</code></strong>: 设置复杂滤镜图，用于处理多个输入/输出流或需要复杂连接的滤镜。</li><li><strong>比特率/质量控制</strong>:<ul><li><code>-b:v bitrate</code>: 设置视频目标比特率 (如 <code>-b:v 1M</code> 表示 1 Mbps)。</li><li><code>-b:a bitrate</code>: 设置音频目标比特率 (如 <code>-b:a 128k</code> 表示 128 kbps)。</li><li><code>-crf value</code> (Constant Rate Factor): 恒定质量因子，是 x264/x265 等编码器常用的质量控制模式，数值越低质量越好，文件越大。</li><li><code>-q:v value</code> / <code>-qscale:v value</code>: 控制视频质量（某些编码器）。</li></ul></li><li><strong>视频选项</strong>:<ul><li><code>-r fps</code>: 设置帧率 (如 <code>-r 25</code>)。</li><li><code>-s WxH</code>: 设置视频分辨率 (如 <code>-s 1280x720</code>)。</li><li><code>-aspect ratio</code>: 设置画面宽高比 (如 <code>-aspect 16:9</code>)。</li><li><code>-pix_fmt format</code>: 设置像素格式。</li></ul></li><li><strong>音频选项</strong>:<ul><li><code>-ar freq</code>: 设置音频采样率 (如 <code>-ar 44100</code>)。</li><li><code>-ac channels</code>: 设置音频通道数 (如 <code>-ac 2</code> 表示立体声)。</li><li><code>-vol volume</code>: 调整音量 (如 <code>-vol 512</code> 表示 2 倍音量)。</li></ul></li></ul><p><strong>流指定符 (Stream Specifiers):</strong></p><p>这是一个强大的机制，允许你将选项精确地应用到特定的流上。格式通常是 <code>选项名:流类型[:流索引]</code>。</p><ul><li><code>-c:v libx264</code>: 将编码器 <code>libx264</code> 应用于所有视频流。</li><li><code>-b:a:1 192k</code>: 将比特率 <code>192k</code> 应用于第二个音频流。</li><li><code>-disposition:s:0 default</code>: 将第一个字幕流的 disposition 设置为 default。</li><li><code>-map 0:v -map 0:a:0</code>: 选择第一个输入文件的所有视频流和第一个音频流。</li></ul><h2 id="问题">问题</h2><h3 id="视频切割中存在的问题">视频切割中存在的问题</h3><ul><li>切割视频后存在开始前几秒为黑屏</li></ul><blockquote><p>问题分析</p></blockquote><blockquote><p>常见的原因是剪辑的起始点 (-ss) 没有落在关键帧 (Keyframe / I-frame) 上。</p></blockquote><blockquote><p>流拷贝模式直接复制视频数据包，而不进行解码和重新编码。视频播放器通常需要从一个关键帧开始解码，如果剪辑后的视频片段开头不是关键帧，而是 P 帧或 B 帧（它们依赖于之前的帧进行解码），播放器就无法正确显示画面，导致黑屏或花屏，直到遇到第一个关键帧为止；重新编码可解决此问题。</p></blockquote><ul><li>按照n秒切割，大批量切割时存在：n-1或n+1秒视频存在</li></ul><blockquote><p>问题分析</p></blockquote><ol><li><strong>流拷贝 (<code>-c copy</code>)</strong>: 此模式不解码和重新编码视频。它直接复制原始视频流的数据包。</li><li><strong>关键帧 (Keyframes)</strong>: 视频压缩（如 H.264, H.265）依赖于关键帧。只有关键帧可以独立解码，后续的 P 帧和 B 帧需要依赖关键帧或其他帧才能解码。因此，一个独立的、可播放的视频片段<strong>必须</strong>以关键帧开始。</li><li><strong>分割点</strong>: 当指定按 <code>n</code> 秒分割时，<code>ffmpeg</code>（特别是使用 <code>segment</code> muxer 或类似的切割逻辑配合 <code>-c copy</code> 时）会寻找时间戳接近 <code>n</code>, <code>2n</code>, <code>3n</code>… 的位置。但是，为了确保输出的每个片段都能独立播放，它<strong>不能</strong>在任意帧（如 P 帧或 B 帧）处切割，而必须在分割点<strong>之前或之后最近的关键帧</strong>处进行实际切割。</li><li><strong>时长偏差</strong>:<ul><li>如果 <code>n</code> 秒处恰好是关键帧，那么分割可能比较准确。</li><li>如果 <code>n</code> 秒处不是关键帧，<code>ffmpeg</code> 通常会回溯到<strong>之前</strong>的那个关键帧作为上一个片段的结束点，并从这个关键帧开始新的片段。</li><li>这就导致了实际分割点与理论上的 <code>n</code> 秒点有偏差。这个偏差取决于关键帧之间的距离（GOP size）。如果关键帧间隔很大（比如 10 秒），偏差可能会很明显。如果关键帧间隔小（比如 1 秒），偏差通常较小，但仍可能导致 <code>n-1</code> 或 <code>n+1</code> 秒的情况。</li></ul></li></ol><ul><li>command 如下：</li></ul> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> = [</span><br><span class="line">    <span class="string">&#x27;ffmpeg&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;-i&#x27;</span>, str(input_path),         <span class="comment"># Input file</span></span><br><span class="line">    <span class="string">&#x27;-ss&#x27;</span>, start_timecode_str,     <span class="comment"># Start time</span></span><br><span class="line">    <span class="string">&#x27;-to&#x27;</span>, end_timecode_str,       <span class="comment"># End time</span></span><br><span class="line">    <span class="string">&#x27;-copyts&#x27;</span>,                     <span class="comment"># Copy timestamps</span></span><br><span class="line">    <span class="string">&#x27;-avoid_negative_ts&#x27;</span>, <span class="string">&#x27;make_zero&#x27;</span>, <span class="comment"># Handle timestamp issues</span></span><br><span class="line">    <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>,                  <span class="comment"># Copy codecs (no re-encoding)</span></span><br><span class="line">    <span class="string">&#x27;-y&#x27;</span>,                          <span class="comment"># Overwrite output file if it exists</span></span><br><span class="line">    str(output_path)               <span class="comment"># Output file</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用上述command切割视频后存在黑屏、分段视频时长小于目标时长问题 command采用copy视频流</p></blockquote><ul><li>更换以下command 重新编码视频流</li></ul> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> = [</span><br><span class="line">    ffmpeg_path,</span><br><span class="line">    <span class="string">&#x27;-y&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;-ss&#x27;</span>, str(start_segment_time),</span><br><span class="line">    <span class="string">&#x27;-i&#x27;</span>, video_file,</span><br><span class="line">    <span class="string">&#x27;-t&#x27;</span>, str(end_segment_time - start_segment_time),</span><br><span class="line">    <span class="string">&#x27;-c:v&#x27;</span>, <span class="string">&#x27;h264_nvenc&#x27;</span> <span class="keyword">if</span> gpu_available <span class="keyword">else</span> <span class="string">&#x27;libx264&#x27;</span>, <span class="comment"># 使用NVIDIA GPU加速的编码器, 如果没有GPU，则使用CPU</span></span><br><span class="line">    <span class="string">&#x27;-preset&#x27;</span>, preset,</span><br><span class="line">    <span class="string">&#x27;-crf&#x27;</span>, str(crf),  <span class="comment"># 指定视觉质量</span></span><br><span class="line">    <span class="string">&#x27;-pix_fmt&#x27;</span>, <span class="string">&#x27;yuv420p&#x27;</span>,  <span class="comment"># 指定像素格式</span></span><br><span class="line">    <span class="string">&#x27;-c:a&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;-avoid_negative_ts&#x27;</span>, <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    output_file</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="ffmpeg-转码">ffmpeg 转码</h2><ul><li>转码过程如下</li></ul><blockquote><p>转码是指先解码 (decode) 一个流得到原始数据（如视频帧或音频样本），然后再用指定的编码器重新编码 (encode) 这些数据的过程</p></blockquote><p><img src="/2025/04/07/ffmpeg-problem-video/decode.png" class="lazyload placeholder" data-srcset="/2025/04/07/ffmpeg-problem-video/decode.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>复制数据流（流复制）</li></ul><blockquote><p>流复制是指直接从输入文件中“提取”媒体流（如视频流、音频流）的数据包 (packets)，然后原封不动地将这些数据包“放入”输出文件中，整个过程不经过解码和重新编码。</p></blockquote><blockquote><p>图中用流复制合并视频与音频流 流复制可用于合并、分割、提取数据流</p></blockquote><p><img src="/2025/04/07/ffmpeg-problem-video/encode.png" class="lazyload placeholder" data-srcset="/2025/04/07/ffmpeg-problem-video/encode.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>流复制用于视频分割过程</li></ul><blockquote><p>demuxer 分离出两个流，流 0 被送到 muxer 0 生成 OUTPUT0.mp4，流 1 被送到 muxer 1 生成 OUTPUT1.mp4</p></blockquote><p><img src="/2025/04/07/ffmpeg-problem-video/encode_split.png" class="lazyload placeholder" data-srcset="/2025/04/07/ffmpeg-problem-video/encode_split.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="参考">参考</h2><ul><li>1.<a href="https://www.ffmpeg.org/ffmpeg.html">https://www.ffmpeg.org/ffmpeg.html</a></li><li>2.<a href="https://www.ffmpeg.org/ffprobe.html">https://www.ffmpeg.org/ffprobe.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视频场景切换检测</title>
      <link href="/2025/04/03/video-secene-detect/"/>
      <url>/2025/04/03/video-secene-detect/</url>
      
        <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>一个摄像机连续拍摄的一段视频片段，没有进行中断。一个镜头通常是视频叙事的基本单位。</p><p><strong>2. 镜头识别的意义：</strong></p><ul><li><strong>视频分析和理解：</strong> 镜头识别是视频分析和理解的基础，可以帮助提取视频内容，进行结构化分析，例如场景检测、故事分割等。</li><li><strong>视频检索：</strong> 可以用于基于内容的视频检索，例如查找包含特定对象的镜头。</li><li><strong>视频摘要：</strong> 可以用于生成视频摘要，选取关键镜头来代表视频内容。</li><li><strong>视频编辑：</strong> 方便视频编辑人员对视频进行分割、重组等操作。</li><li><strong>视频监控：</strong> 异常事件检测，行为分析等。</li></ul><p><strong>3. 镜头识别的主要方法：</strong></p><p>镜头识别主要基于分析连续帧之间的变化，通过检测场景边界来识别镜头。常见的方法包括：</p><ul><li><strong>基于阈值的镜头识别：</strong><ul><li><strong>原理：</strong> 通过计算连续帧之间的差异（例如颜色直方图差异、像素差异、边缘差异等），当差异值超过预设的阈值时，则认为发生了镜头切换。</li><li><strong>优点：</strong> 简单快速，易于实现。</li><li><strong>缺点：</strong> 对阈值的选择敏感，容易受到光照变化、运动等因素的影响。</li></ul></li><li><strong>基于统计模型的镜头识别：</strong><ul><li><strong>原理：</strong> 使用统计模型（例如隐马尔可夫模型 HMM）来描述视频帧的特征变化，通过检测模型状态的变化来识别镜头。</li><li><strong>优点：</strong> 对噪声和光照变化具有一定的鲁棒性。</li><li><strong>缺点：</strong> 模型训练需要大量的标注数据，计算复杂度较高。</li></ul></li><li><strong>基于机器学习和深度学习的镜头识别：</strong><ul><li><strong>原理：</strong> 使用机器学习或深度学习模型（例如支持向量机 SVM、卷积神经网络 CNN、循环神经网络 RNN）来学习视频帧的特征，并对镜头边界进行分类。</li><li><strong>优点：</strong> 可以学习复杂的特征表示，具有较高的识别精度。</li><li><strong>缺点：</strong> 需要大量的标注数据进行训练，计算资源需求较高。</li></ul></li></ul><p><strong>4. 具体步骤：</strong></p><ol><li><strong>视频预处理：</strong><ul><li><strong>解码：</strong> 将视频文件解码为帧序列。</li><li><strong>降噪：</strong> 对帧序列进行降噪处理，例如使用高斯滤波或中值滤波。</li><li><strong>调整大小：</strong> 将帧序列调整到统一的大小，以便进行后续处理。</li></ul></li><li><strong>特征提取：</strong>  提取视频帧的特征，用于描述视频内容。常用的特征包括：<ul><li><strong>颜色直方图：</strong>  描述图像的颜色分布。</li><li><strong>灰度共生矩阵 (GLCM)：</strong> 描述图像的纹理特征。</li><li><strong>光流：</strong> 描述图像中物体的运动信息。</li><li><strong>局部二值模式 (LBP)：</strong> 描述图像的局部纹理特征。</li><li><strong>深度学习特征：</strong> 使用预训练的深度学习模型（例如 VGGNet、ResNet）提取图像的特征。</li></ul></li><li><strong>差异计算：</strong>  计算连续帧之间的差异。 常用的差异计算方法包括：<ul><li><strong>欧氏距离：</strong>  计算两个向量之间的距离。</li><li><strong>余弦相似度：</strong> 计算两个向量之间的角度。</li><li><strong>卡方距离：</strong>  计算两个直方图之间的距离。</li></ul></li><li><strong>镜头边界检测：</strong><ul><li><strong>阈值法：</strong>  当差异值超过预设的阈值时，则认为发生了镜头切换。</li><li><strong>机器学习方法：</strong>  使用机器学习模型对镜头边界进行分类。</li></ul></li><li><strong>后处理：</strong><ul><li><strong>合并短镜头：</strong>  将长度小于一定阈值的镜头合并到相邻的镜头中。</li><li><strong>平滑镜头边界：</strong>  对镜头边界进行平滑处理，以提高视频观看体验。</li></ul></li></ol><p><strong>5. 技术细节:</strong></p><ul><li><strong>帧速率（Frame Rate）：</strong> 影响分析的精度和计算成本。高帧速率提供更详细的信息，但也需要更多的计算资源。</li><li><strong>特征选择：</strong> 选择合适的特征对镜头识别的精度至关重要。 例如，对于快速运动的场景，光流特征可能更有效。</li><li><strong>阈值设定：</strong> 阈值的设定需要根据具体的视频内容进行调整。</li><li><strong>深度学习模型的选择：</strong> 选择合适的深度学习模型需要根据具体的应用场景进行考虑。</li></ul><h2 id="实现技术">实现技术</h2><ul><li><strong>OpenCV:</strong>  一个强大的计算机视觉库，提供了图像处理、特征提取、视频分析等功能。</li><li><strong>FFmpeg:</strong>  一个开源的多媒体框架，可以用于视频解码、编码、格式转换等操作。</li><li><strong>Scikit-learn:</strong>  一个流行的机器学习库，提供了各种机器学习算法。</li><li><strong>TensorFlow/PyTorch:</strong>  深度学习框架，可以用于构建和训练深度学习模型。</li><li><strong>PySceneDetect:</strong> 一个专门用于场景分割（即镜头识别）的Python库，它基于OpenCV和NumPy。</li></ul><h2 id="技术选择">技术选择</h2><p><strong>PySceneDetect:</strong></p><ul><li><strong>描述:</strong> PySceneDetect 是一个专门用于场景分割的 Python 库，它构建在 OpenCV 和 NumPy 之上。它提供了多种场景检测算法，包括基于内容的比较（ContentDetector）、阈值检测（ThresholdDetector）等。</li><li><strong>优点:</strong><ul><li>易于使用：提供了简单的 API，方便快速上手。</li><li>多种算法：内置了多种场景检测算法，可以根据视频内容选择合适的算法。</li><li>可定制性：允许自定义场景检测算法。</li><li>文档完善：拥有比较完善的文档。</li></ul></li><li><strong>缺点:</strong><ul><li>性能：对于非常大的视频，可能需要优化性能。</li><li>精度：默认参数可能不适用于所有类型的视频，需要调整参数。</li></ul></li></ul><h2 id="第三方库安装使用">第三方库安装使用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scenedetect opencv-python tqdm</span><br></pre></td></tr></table></figure><h3 id="简易demo">简易demo</h3><ul><li>检测视频中的场景切换帧，输出图片与csv文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scenedetect --input goldeneye.mp4 detect-adaptive list-scenes save-images</span><br></pre></td></tr></table></figure><h3 id="关于场景切换检测阈值的确认">关于场景切换检测阈值的确认</h3><blockquote><p>例如，对于detect-content，如果默认阈值27没有产生正确的结果，我们可以通过首先生成统计文件来确定适当的阈值：</p></blockquote><blockquote><p>scenedetect --input goldeneye.mp4 --stats goldeneye.stats.csv detect-adaptive<br>然后，我们可以绘制content_val列的值</p></blockquote><ul><li>代码如下：</li></ul><blockquote><p>关键代码展示</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_stats_csv</span>(<span class="params">video_path, output_dir, threshold</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Detects scenes and saves frame statistics (Frame Num, content_val) to a CSV.</span></span><br><span class="line"><span class="string">    Returns True on success, False on failure.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    thread_name = threading.current_thread().name</span><br><span class="line">    video_filename_base = os.path.splitext(os.path.basename(video_path))[<span class="number">0</span>]</span><br><span class="line">    output_csv_path = os.path.join(output_dir, <span class="string">f&quot;<span class="subst">&#123;video_filename_base&#125;</span>_stats.csv&quot;</span>)</span><br><span class="line">    temp_stats_path = os.path.join(output_dir, <span class="string">f&quot;<span class="subst">&#123;video_filename_base&#125;</span>_temp_full_stats.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Processing: <span class="subst">&#123;os.path.basename(video_path)&#125;</span>&quot;</span>)</span><br><span class="line">    video_manager = <span class="literal">None</span></span><br><span class="line">    stats_manager = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 1. Initialize</span></span><br><span class="line">        video_manager = VideoStreamCv2(video_path)</span><br><span class="line">        stats_manager = StatsManager()</span><br><span class="line">        scene_manager = SceneManager(stats_manager)</span><br><span class="line">        scene_manager.add_detector(ContentDetector(threshold=threshold))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. Get duration</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            total_frames = video_manager.duration.get_frames()</span><br><span class="line">            <span class="keyword">if</span> total_frames &lt;= <span class="number">0</span>:</span><br><span class="line">                logger.warning(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Video <span class="subst">&#123;os.path.basename(video_path)&#125;</span> reported 0 frames. Skipping.&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> info_err:</span><br><span class="line">             logger.error(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Error getting video duration for <span class="subst">&#123;os.path.basename(video_path)&#125;</span>: <span class="subst">&#123;info_err&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. Run detection</span></span><br><span class="line">        logger.debug(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Running detect_scenes for <span class="subst">&#123;os.path.basename(video_path)&#125;</span>&quot;</span>)</span><br><span class="line">        scene_manager.detect_scenes(frame_source=video_manager)</span><br><span class="line">        logger.debug(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] detect_scenes finished for <span class="subst">&#123;os.path.basename(video_path)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. Save *full* statistics temporarily by passing a FILE HANDLE</span></span><br><span class="line">        logger.debug(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Saving full stats to temporary file: <span class="subst">&#123;temp_stats_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># --- MODIFIED PART ---</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(temp_stats_path, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                 stats_manager.save_to_csv(f) <span class="comment"># Pass the open file handle &#x27;f&#x27; directly</span></span><br><span class="line">            <span class="comment"># ---------------------</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(temp_stats_path):</span><br><span class="line">                 logger.error(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] StatsManager failed to create the temporary stats file: <span class="subst">&#123;temp_stats_path&#125;</span>&quot;</span>)</span><br><span class="line">                 <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> TypeError <span class="keyword">as</span> te:</span><br><span class="line">             <span class="comment"># Catch if even passing a handle is wrong</span></span><br><span class="line">             logger.error(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] TypeError calling save_to_csv for <span class="subst">&#123;os.path.basename(video_path)&#125;</span>. API mismatch. Error: <span class="subst">&#123;te&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> save_err:</span><br><span class="line">             logger.error(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Error saving temporary stats file <span class="subst">&#123;temp_stats_path&#125;</span>: <span class="subst">&#123;save_err&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5. Read the temp stats CSV and extract desired columns</span></span><br><span class="line">        <span class="comment"># (Keep this part the same as the previous version)</span></span><br><span class="line">        logger.debug(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Reading temporary stats file: <span class="subst">&#123;temp_stats_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            stats_df = pd.read_csv(temp_stats_path, skipinitialspace=<span class="literal">True</span>)</span><br><span class="line">            stats_df.columns = stats_df.columns.<span class="built_in">str</span>.strip()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> FRAME_NUM_COL <span class="keyword">not</span> <span class="keyword">in</span> stats_df.columns <span class="keyword">or</span> CONTENT_VAL_COL <span class="keyword">not</span> <span class="keyword">in</span> stats_df.columns:</span><br><span class="line">                logger.error(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Temporary stats file (<span class="subst">&#123;temp_stats_path&#125;</span>) is missing required columns. Found: <span class="subst">&#123;stats_df.columns.tolist()&#125;</span>. Expected: &#x27;<span class="subst">&#123;FRAME_NUM_COL&#125;</span>&#x27;, &#x27;<span class="subst">&#123;CONTENT_VAL_COL&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">                <span class="comment"># Keep the temp file for inspection if columns are missing</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span> <span class="comment"># Return failure</span></span><br><span class="line"></span><br><span class="line">            output_df = stats_df[[FRAME_NUM_COL, CONTENT_VAL_COL]]</span><br><span class="line">            logger.debug(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Saving extracted stats to final file: <span class="subst">&#123;output_csv_path&#125;</span>&quot;</span>)</span><br><span class="line">            output_df.to_csv(output_csv_path, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Successfully generated stats CSV: <span class="subst">&#123;os.path.basename(output_csv_path)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span> <span class="comment"># Return success</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> pd.errors.EmptyDataError:</span><br><span class="line">            logger.warning(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Temporary stats file was empty: <span class="subst">&#123;temp_stats_path&#125;</span>. No scenes likely detected or error during stats generation.&quot;</span>)</span><br><span class="line">            <span class="comment"># Create an empty output file with correct headers</span></span><br><span class="line">            pd.DataFrame(columns=[FRAME_NUM_COL, CONTENT_VAL_COL]).to_csv(output_csv_path, index=<span class="literal">False</span>)</span><br><span class="line">            logger.info(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Created empty stats CSV (as temp was empty): <span class="subst">&#123;os.path.basename(output_csv_path)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span> <span class="comment"># Count as processed successfully (empty result)</span></span><br><span class="line">        <span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">             logger.error(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Column not found in temporary stats file (<span class="subst">&#123;temp_stats_path&#125;</span>): <span class="subst">&#123;e&#125;</span>. Available columns: <span class="subst">&#123;stats_df.columns.tolist()&#125;</span>&quot;</span>)</span><br><span class="line">             <span class="comment"># Keep the temp file for inspection</span></span><br><span class="line">             <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Error processing temporary stats file <span class="subst">&#123;temp_stats_path&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> VideoOpenFailure <span class="keyword">as</span> vf_err:</span><br><span class="line">        logger.error(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Failed to open video <span class="subst">&#123;os.path.basename(video_path)&#125;</span>: <span class="subst">&#123;vf_err&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Error during scene detection/stats generation for <span class="subst">&#123;os.path.basename(video_path)&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> video_manager <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">hasattr</span>(video_manager, <span class="string">&#x27;_cap&#x27;</span>) <span class="keyword">and</span> video_manager._cap <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">hasattr</span>(video_manager._cap, <span class="string">&#x27;release&#x27;</span>):</span><br><span class="line">                    video_manager._cap.release()</span><br><span class="line">                <span class="keyword">del</span> video_manager</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> del_e:</span><br><span class="line">                 logger.warning(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Exception while cleaning up video_manager for <span class="subst">&#123;os.path.basename(video_path)&#125;</span>: <span class="subst">&#123;del_e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Clean up temporary stats file ONLY IF the final CSV was successfully created or was intentionally empty</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;output_df&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>() <span class="keyword">or</span> ( <span class="string">&#x27;stats_df&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>() <span class="keyword">and</span> stats_df.empty ): <span class="comment"># Check if processing reached CSV saving/empty handling stage</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;temp_stats_path&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>() <span class="keyword">and</span> os.path.exists(temp_stats_path):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    os.remove(temp_stats_path)</span><br><span class="line">                    logger.debug(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Removed temporary stats file: <span class="subst">&#123;temp_stats_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">                    logger.error(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Failed to remove temporary stats file <span class="subst">&#123;temp_stats_path&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">             <span class="comment"># If processing failed before reading/writing the final CSV, keep the temp file for debugging</span></span><br><span class="line">              <span class="keyword">if</span> <span class="string">&#x27;temp_stats_path&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>() <span class="keyword">and</span> os.path.exists(temp_stats_path):</span><br><span class="line">                    logger.warning(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Keeping temporary stats file due to processing error: <span class="subst">&#123;temp_stats_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ... (Rest of the code remains the same: process_video, find_video_files, move_video, main, __main__) ...</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">root_dir, dest_dir, num_threads, threshold</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Main function to orchestrate the CSV generation process.&quot;&quot;&quot;</span></span><br><span class="line">    root_dir = os.path.normpath(root_dir)</span><br><span class="line">    dest_dir = os.path.normpath(dest_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Ensure destination directory exists</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.makedirs(dest_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        logger.info(<span class="string">f&quot;Ensured destination directory exists: <span class="subst">&#123;dest_dir&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">        logger.critical(<span class="string">f&quot;Failed to create destination directory &#x27;<span class="subst">&#123;dest_dir&#125;</span>&#x27;: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="comment"># Cannot proceed without output directory</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">         logger.critical(<span class="string">f&quot;Unexpected error creating destination directory &#x27;<span class="subst">&#123;dest_dir&#125;</span>&#x27;: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Find video files, excluding any already in the destination</span></span><br><span class="line">    video_files_all = find_video_files(root_dir)</span><br><span class="line">    abs_dest_dir = os.path.abspath(dest_dir)</span><br><span class="line">    video_files = [f <span class="keyword">for</span> f <span class="keyword">in</span> video_files_all <span class="keyword">if</span> <span class="keyword">not</span> os.path.abspath(f).startswith(abs_dest_dir)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(video_files) &lt; <span class="built_in">len</span>(video_files_all):</span><br><span class="line">         logger.warning(<span class="string">f&quot;Filtered out <span class="subst">&#123;<span class="built_in">len</span>(video_files_all) - <span class="built_in">len</span>(video_files)&#125;</span> files potentially inside the destination directory &#x27;<span class="subst">&#123;dest_dir&#125;</span>&#x27;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> video_files:</span><br><span class="line">        logger.error(<span class="string">f&quot;No valid video files found in &#x27;<span class="subst">&#123;root_dir&#125;</span>&#x27; (excluding destination directory).&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">f&quot;Starting stats CSV generation for <span class="subst">&#123;<span class="built_in">len</span>(video_files)&#125;</span> videos from &#x27;<span class="subst">&#123;root_dir&#125;</span>&#x27; using <span class="subst">&#123;num_threads&#125;</span> threads.&quot;</span>)</span><br><span class="line">    logger.info(<span class="string">f&quot;Output CSV files will be saved in: <span class="subst">&#123;dest_dir&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    start_overall_time = time.time()</span><br><span class="line">    processed_count = <span class="number">0</span></span><br><span class="line">    successful_runs = <span class="number">0</span></span><br><span class="line">    failed_runs = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=num_threads, thread_name_prefix=<span class="string">&#x27;StatsGenWorker&#x27;</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        <span class="comment"># Submit tasks: Pass video path, output dir, and threshold</span></span><br><span class="line">        futures = &#123;executor.submit(generate_stats_csv, video_file, dest_dir, threshold): video_file <span class="keyword">for</span> video_file <span class="keyword">in</span> video_files&#125;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;All tasks submitted. Waiting for completion...&quot;</span>)</span><br><span class="line">        <span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> as_completed</span><br><span class="line">        <span class="comment"># Use tqdm with as_completed for better progress feedback</span></span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> tqdm(as_completed(futures), total=<span class="built_in">len</span>(futures), desc=<span class="string">&quot;Overall Progress&quot;</span>):</span><br><span class="line">            video_file = futures[future] <span class="comment"># Get associated video file</span></span><br><span class="line">            processed_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                success = future.result() <span class="comment"># Get boolean result from generate_stats_csv</span></span><br><span class="line">                <span class="keyword">if</span> success:</span><br><span class="line">                    successful_runs += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    failed_runs += <span class="number">1</span></span><br><span class="line">                    <span class="comment"># Error is already logged within the function</span></span><br><span class="line">                    logger.debug(<span class="string">f&quot;Task for <span class="subst">&#123;os.path.basename(video_file)&#125;</span> completed with failure (logged previously).&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">                <span class="comment"># Catch exceptions that might occur if future.result() itself fails unexpectedly</span></span><br><span class="line">                failed_runs += <span class="number">1</span></span><br><span class="line">                logger.error(<span class="string">f&quot;Unexpected error getting result for <span class="subst">&#123;os.path.basename(video_file)&#125;</span>: <span class="subst">&#123;exc&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    end_overall_time = time.time()</span><br><span class="line">    logger.info(<span class="string">f&quot;Stats CSV generation complete.&quot;</span>)</span><br><span class="line">    logger.info(<span class="string">f&quot;Summary: <span class="subst">&#123;<span class="built_in">len</span>(video_files)&#125;</span> videos submitted. <span class="subst">&#123;successful_runs&#125;</span> processed successfully, <span class="subst">&#123;failed_runs&#125;</span> encountered errors.&quot;</span>)</span><br><span class="line">    logger.info(<span class="string">f&quot;Total execution time: <span class="subst">&#123;end_overall_time - start_overall_time:<span class="number">.2</span>f&#125;</span> seconds.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># --- Initial Checks ---</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_ffmpeg():</span><br><span class="line">        <span class="comment"># Optional: Decide whether to proceed without FFmpeg warning or exit</span></span><br><span class="line">        <span class="comment"># sys.exit(1)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    check_acceleration_support()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- Setup Directories ---</span></span><br><span class="line">    root_directory = <span class="string">r&#x27;/Volumes/shared/标注/影视&#x27;</span></span><br><span class="line">    destination_directory = <span class="string">r&#x27;./data&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use defaults if not using argparse</span></span><br><span class="line">    detection_threshold = DEFAULT_THRESHOLD</span><br><span class="line">    thread_count = DEFAULT_NUM_THREADS</span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- Directory Validation ---</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(root_directory):</span><br><span class="line">        logger.critical(<span class="string">f&quot;Input root directory &#x27;<span class="subst">&#123;root_directory&#125;</span>&#x27; not found or is not a directory.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># Destination directory creation is handled in main()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- Run Main Process ---</span></span><br><span class="line">    main(root_directory, destination_directory, thread_count, detection_threshold)</span><br></pre></td></tr></table></figure><h2 id="测试demo">测试demo</h2><blockquote><p>使用 PySceneDetect 快速分析视频 并输出各种参数到csv</p></blockquote> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查硬件加速支持</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_scenes</span>(<span class="params">video_path, threshold=<span class="number">30.0</span>, downscale_width=<span class="number">640</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Detects scene changes in a video using PySceneDetect with VideoStreamCv2.&quot;&quot;&quot;</span></span><br><span class="line">    video_manager = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 1. 初始化</span></span><br><span class="line">        logging.debug(<span class="string">f&quot;Initializing VideoStreamCv2 for: <span class="subst">&#123;os.path.basename(video_path)&#125;</span>&quot;</span>)</span><br><span class="line">        video_manager = VideoStreamCv2(video_path)</span><br><span class="line">        logging.info(<span class="string">f&quot;Initialized VideoStreamCv2 for <span class="subst">&#123;os.path.basename(video_path)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        stats_manager = StatsManager()</span><br><span class="line">        scene_manager = SceneManager(stats_manager)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 添加场景检测器</span></span><br><span class="line">        scene_manager.add_detector(ContentDetector(threshold=threshold))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 获取视频信息 for Progress Bar</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            total_frames = video_manager.duration.get_frames()</span><br><span class="line">            logging.debug(<span class="string">f&quot;Video Info: Total Frames=<span class="subst">&#123;total_frames&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> info_err:</span><br><span class="line">             logging.error(<span class="string">f&quot;Error getting video info (duration) for <span class="subst">&#123;os.path.basename(video_path)&#125;</span>: <span class="subst">&#123;info_err&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">             <span class="keyword">if</span> video_manager <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: <span class="keyword">del</span> video_manager</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">None</span>, video_path</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> total_frames &lt;= <span class="number">0</span>:</span><br><span class="line">             logging.warning(<span class="string">f&quot;Video <span class="subst">&#123;os.path.basename(video_path)&#125;</span> reported 0 frames. Skipping processing.&quot;</span>)</span><br><span class="line">             <span class="keyword">if</span> video_manager <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: <span class="keyword">del</span> video_manager</span><br><span class="line">             <span class="keyword">return</span> <span class="number">0</span>, video_path</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 设置(简化的)进度条并执行检测</span></span><br><span class="line">        <span class="comment"># The frame-by-frame callback doesn&#x27;t work with this version.</span></span><br><span class="line">        <span class="comment"># The tqdm bar will show progress only after detect_scenes finishes for the file.</span></span><br><span class="line">        <span class="keyword">with</span> tqdm(total=total_frames, desc=<span class="string">f&quot;Processing <span class="subst">&#123;os.path.basename(video_path)&#125;</span>&quot;</span>, unit=<span class="string">&quot;frame&quot;</span>, leave=<span class="literal">False</span>) <span class="keyword">as</span> pbar:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 5. 执行场景检测 - Pass the video_manager as frame_source</span></span><br><span class="line">            scene_manager.detect_scenes(frame_source=video_manager)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Manually update pbar to 100% after completion if needed,</span></span><br><span class="line">            <span class="comment"># though tqdm might do this automatically on exit from &#x27;with&#x27;.</span></span><br><span class="line">            pbar.n = total_frames <span class="comment"># Set progress to max</span></span><br><span class="line">            pbar.refresh()       <span class="comment"># Refresh display</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 6. 获取结果</span></span><br><span class="line">        scene_list = scene_manager.get_scene_list()</span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">f&quot;Detected <span class="subst">&#123;<span class="built_in">len</span>(scene_list)&#125;</span> scenes in <span class="subst">&#123;os.path.basename(video_path)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 7. 资源管理</span></span><br><span class="line">        <span class="comment"># del video_manager</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(scene_list), video_path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> cv2.error <span class="keyword">as</span> cv_err:</span><br><span class="line">         logging.error(<span class="string">f&quot;OpenCV error processing <span class="subst">&#123;os.path.basename(video_path)&#125;</span>: <span class="subst">&#123;cv_err&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">None</span>, video_path</span><br><span class="line">    <span class="keyword">except</span> VideoOpenFailure <span class="keyword">as</span> vf_err:</span><br><span class="line">         logging.error(<span class="string">f&quot;Failed to open video <span class="subst">&#123;os.path.basename(video_path)&#125;</span>: <span class="subst">&#123;vf_err&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">None</span>, video_path</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;Generic error processing <span class="subst">&#123;os.path.basename(video_path)&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, video_path</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">         <span class="keyword">if</span> <span class="string">&#x27;video_manager&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>() <span class="keyword">and</span> video_manager <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">             <span class="keyword">try</span>: <span class="keyword">del</span> video_manager</span><br><span class="line">             <span class="keyword">except</span> Exception: <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ... (Keep process_video, find_video_files, move_video, main, __main__ block the same) ...</span></span><br><span class="line"><span class="comment"># ... [Rest of the code] ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_video</span>(<span class="params">video_path, threshold, dest_dir, downscale_width</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理单个视频，捕获异常, 并移动视频&quot;&quot;&quot;</span></span><br><span class="line">    thread_name = threading.current_thread().name</span><br><span class="line">    logging.info(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Starting processing for: <span class="subst">&#123;os.path.basename(video_path)&#125;</span>&quot;</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    num_scenes = <span class="literal">None</span>  <span class="comment"># Initialize</span></span><br><span class="line">    processed_video_path = video_path  <span class="comment"># Assume original path initially</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num_scenes, processed_video_path = detect_scenes(video_path, threshold, downscale_width)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Check if detect_scenes returned None for path (shouldn&#x27;t happen with current logic, but defensive)</span></span><br><span class="line">        <span class="keyword">if</span> processed_video_path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            logging.error(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Video path became None during processing for <span class="subst">&#123;video_path&#125;</span>. Skipping move.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span>  <span class="comment"># Explicitly return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> num_scenes <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> num_scenes &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># Check if the source file still exists before moving (it might fail during processing)</span></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(processed_video_path):</span><br><span class="line">                move_video(processed_video_path, dest_dir)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.warning(</span><br><span class="line">                    <span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Source file <span class="subst">&#123;processed_video_path&#125;</span> not found after processing. Cannot move.&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> num_scenes <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  <span class="comment"># Includes case where num_scenes is 0 because no frames were processed</span></span><br><span class="line">            logging.info(</span><br><span class="line">                <span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Video <span class="subst">&#123;os.path.basename(processed_video_path)&#125;</span> is single scene or failed processing. No move needed.&quot;</span>)</span><br><span class="line">        <span class="comment"># else case (num_scenes is None) is implicitly handled by the warning below</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> num_scenes <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># This case means detect_scenes failed and returned None for num_scenes</span></span><br><span class="line">            logging.warning(</span><br><span class="line">                <span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Video <span class="subst">&#123;os.path.basename(processed_video_path)&#125;</span> failed processing entirely. No move needed.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># Catch any unexpected error during the move decision or logging</span></span><br><span class="line">        logging.error(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Top-level error in process_video for <span class="subst">&#123;os.path.basename(video_path)&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>,</span><br><span class="line">                      exc_info=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        status = <span class="string">&quot;failed&quot;</span> <span class="keyword">if</span> num_scenes <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">f&quot;<span class="subst">&#123;num_scenes&#125;</span> scenes&quot;</span></span><br><span class="line">        logging.info(</span><br><span class="line">            <span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Finished processing <span class="subst">&#123;os.path.basename(video_path)&#125;</span> (<span class="subst">&#123;status&#125;</span>) in <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> seconds.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="场景切割">场景切割</h2><ul><li>根据视频内场景切换 切割视频</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_scenes</span>(<span class="params">video_path, threshold=<span class="number">30.0</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Detects scene changes in a video using PySceneDetect with VideoStreamCv2.&quot;&quot;&quot;</span></span><br><span class="line">    video_manager = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        logger.debug(<span class="string">f&quot;Initializing VideoStreamCv2 for: <span class="subst">&#123;os.path.basename(video_path)&#125;</span>&quot;</span>)</span><br><span class="line">        video_manager = VideoStreamCv2(video_path)</span><br><span class="line">        logger.info(<span class="string">f&quot;Initialized VideoStreamCv2 for <span class="subst">&#123;os.path.basename(video_path)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        stats_manager = StatsManager()</span><br><span class="line">        scene_manager = SceneManager(stats_manager)</span><br><span class="line">        scene_manager.add_detector(ContentDetector(threshold=threshold))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            total_frames = video_manager.duration.get_frames()</span><br><span class="line">            <span class="comment"># base_timecode = video_manager.base_timecode # No longer needed for get_scene_list</span></span><br><span class="line">            logging.debug(<span class="string">f&quot;Video Info: Total Frames=<span class="subst">&#123;total_frames&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> info_err:</span><br><span class="line">             logger.error(<span class="string">f&quot;Error getting video info (duration) for <span class="subst">&#123;os.path.basename(video_path)&#125;</span>: <span class="subst">&#123;info_err&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">None</span>, video_path, <span class="literal">None</span> <span class="comment"># Return None for scene list</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> total_frames &lt;= <span class="number">0</span>:</span><br><span class="line">             logger.warning(<span class="string">f&quot;Video <span class="subst">&#123;os.path.basename(video_path)&#125;</span> reported 0 frames. Skipping processing.&quot;</span>)</span><br><span class="line">             <span class="keyword">return</span> <span class="number">0</span>, video_path, [] <span class="comment"># Return 0 scenes, empty list</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Execute scene detection (no progress bar here as callback wasn&#x27;t reliable)</span></span><br><span class="line">        logger.debug(<span class="string">f&quot;Starting scene detection for <span class="subst">&#123;os.path.basename(video_path)&#125;</span>&quot;</span>)</span><br><span class="line">        scene_manager.detect_scenes(frame_source=video_manager)</span><br><span class="line">        logger.debug(<span class="string">f&quot;Finished scene detection for <span class="subst">&#123;os.path.basename(video_path)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Get scene list (without base_timecode)</span></span><br><span class="line">        scene_list = scene_manager.get_scene_list()</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">f&quot;Detected <span class="subst">&#123;<span class="built_in">len</span>(scene_list)&#125;</span> scenes in <span class="subst">&#123;os.path.basename(video_path)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Return scene count, path, and the actual scene list for splitting</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(scene_list), video_path, scene_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> cv2.error <span class="keyword">as</span> cv_err:</span><br><span class="line">         logger.error(<span class="string">f&quot;OpenCV error processing <span class="subst">&#123;os.path.basename(video_path)&#125;</span>: <span class="subst">&#123;cv_err&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">None</span>, video_path, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> VideoOpenFailure <span class="keyword">as</span> vf_err:</span><br><span class="line">         logger.error(<span class="string">f&quot;Failed to open video <span class="subst">&#123;os.path.basename(video_path)&#125;</span>: <span class="subst">&#123;vf_err&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">None</span>, video_path, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;Generic error during scene detection for <span class="subst">&#123;os.path.basename(video_path)&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, video_path, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">         <span class="comment"># Ensure the video file is closed/released by deleting the reference</span></span><br><span class="line">         <span class="keyword">if</span> <span class="string">&#x27;video_manager&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>() <span class="keyword">and</span> video_manager <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">             <span class="keyword">try</span>:</span><br><span class="line">                 <span class="comment"># Explicitly call internal capture release if possible</span></span><br><span class="line">                 <span class="keyword">if</span> <span class="built_in">hasattr</span>(video_manager, <span class="string">&#x27;_cap&#x27;</span>) <span class="keyword">and</span> video_manager._cap <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">hasattr</span>(video_manager._cap, <span class="string">&#x27;release&#x27;</span>):</span><br><span class="line">                     video_manager._cap.release()</span><br><span class="line">                 <span class="keyword">del</span> video_manager</span><br><span class="line">             <span class="keyword">except</span> Exception <span class="keyword">as</span> del_e:</span><br><span class="line">                 logger.warning(<span class="string">f&quot;Exception while cleaning up video_manager for <span class="subst">&#123;os.path.basename(video_path)&#125;</span>: <span class="subst">&#123;del_e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_video_scene</span>(<span class="params">input_path, output_path, start_timecode_str, end_timecode_str</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Splits a video segment using FFmpeg without re-encoding.&quot;&quot;&quot;</span></span><br><span class="line">    thread_name = threading.current_thread().name</span><br><span class="line">    logger.info(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Splitting scene: <span class="subst">&#123;os.path.basename(output_path)&#125;</span> (<span class="subst">&#123;start_timecode_str&#125;</span> -&gt; <span class="subst">&#123;end_timecode_str&#125;</span>)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Ensure output directory exists</span></span><br><span class="line">    os.makedirs(os.path.dirname(output_path), exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Construct FFmpeg command</span></span><br><span class="line">    <span class="comment"># Using -ss after -i and -copyts is generally more frame-accurate for splitting with -c copy</span></span><br><span class="line">    command = [</span><br><span class="line">        <span class="string">&#x27;ffmpeg&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;-i&#x27;</span>, <span class="built_in">str</span>(input_path),         <span class="comment"># Input file</span></span><br><span class="line">        <span class="string">&#x27;-ss&#x27;</span>, start_timecode_str,     <span class="comment"># Start time</span></span><br><span class="line">        <span class="string">&#x27;-to&#x27;</span>, end_timecode_str,       <span class="comment"># End time</span></span><br><span class="line">        <span class="string">&#x27;-copyts&#x27;</span>,                     <span class="comment"># Copy timestamps</span></span><br><span class="line">        <span class="string">&#x27;-avoid_negative_ts&#x27;</span>, <span class="string">&#x27;make_zero&#x27;</span>, <span class="comment"># Handle timestamp issues</span></span><br><span class="line">        <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>,                  <span class="comment"># Copy codecs (no re-encoding)</span></span><br><span class="line">        <span class="string">&#x27;-y&#x27;</span>,                          <span class="comment"># Overwrite output file if it exists</span></span><br><span class="line">        <span class="built_in">str</span>(output_path)               <span class="comment"># Output file</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Run FFmpeg command</span></span><br><span class="line">        <span class="comment"># creationflags prevents console window popup on Windows</span></span><br><span class="line">        process = subprocess.run(</span><br><span class="line">            command,</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.PIPE,</span><br><span class="line">            check=<span class="literal">True</span>, <span class="comment"># Raise CalledProcessError if ffmpeg returns non-zero exit code</span></span><br><span class="line">            creationflags=subprocess.CREATE_NO_WINDOW <span class="keyword">if</span> platform.system() == <span class="string">&quot;Windows&quot;</span> <span class="keyword">else</span> <span class="number">0</span>,</span><br><span class="line">            encoding=<span class="string">&#x27;utf-8&#x27;</span>, <span class="comment"># Capture output as text</span></span><br><span class="line">            errors=<span class="string">&#x27;replace&#x27;</span> <span class="comment"># Handle potential decoding errors in ffmpeg output</span></span><br><span class="line">        )</span><br><span class="line">        logger.info(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Successfully split: <span class="subst">&#123;os.path.basename(output_path)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># logger.debug(f&quot;FFmpeg stdout:\n&#123;process.stdout&#125;&quot;) # Usually empty for -c copy</span></span><br><span class="line">        <span class="comment"># logger.debug(f&quot;FFmpeg stderr:\n&#123;process.stderr&#125;&quot;) # Contains progress/info</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] FFmpeg failed for <span class="subst">&#123;os.path.basename(output_path)&#125;</span>.&quot;</span>)</span><br><span class="line">        logger.error(<span class="string">f&quot;  Command: <span class="subst">&#123;<span class="string">&#x27; &#x27;</span>.join(command)&#125;</span>&quot;</span>) <span class="comment"># Log the command for easier debugging</span></span><br><span class="line">        logger.error(<span class="string">f&quot;  Return Code: <span class="subst">&#123;e.returncode&#125;</span>&quot;</span>)</span><br><span class="line">        logger.error(<span class="string">f&quot;  Stderr:\n<span class="subst">&#123;e.stderr&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># Optionally log stdout too: logger.error(f&quot;  Stdout:\n&#123;e.stdout&#125;&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        logger.critical(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] FFmpeg command not found during split. Ensure FFmpeg is installed and in PATH.&quot;</span>)</span><br><span class="line">        <span class="comment"># No point continuing if ffmpeg isn&#x27;t found for any split</span></span><br><span class="line">        <span class="keyword">raise</span> <span class="comment"># Re-raise to potentially stop the whole process</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Unexpected error splitting <span class="subst">&#123;os.path.basename(output_path)&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_video</span>(<span class="params">video_path, threshold, base_dest_dir, originals_dir, downscale_width</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Detects scenes, splits video if multiple scenes are found, and moves original.&quot;&quot;&quot;</span></span><br><span class="line">    thread_name = threading.current_thread().name</span><br><span class="line">    base_name = os.path.splitext(os.path.basename(video_path))[<span class="number">0</span>]</span><br><span class="line">    file_ext = os.path.splitext(video_path)[<span class="number">1</span>]</span><br><span class="line">    logger.info(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Starting processing for: <span class="subst">&#123;base_name&#125;</span><span class="subst">&#123;file_ext&#125;</span>&quot;</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    split_success_count = <span class="number">0</span></span><br><span class="line">    split_fail_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num_scenes, _, scene_list = detect_scenes(video_path, threshold) <span class="comment"># Get scene_list now</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> num_scenes <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            logger.warning(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Video <span class="subst">&#123;base_name&#125;</span><span class="subst">&#123;file_ext&#125;</span> failed scene detection. Skipping.&quot;</span>)</span><br><span class="line">            <span class="comment"># Optionally move failed files to a specific error directory</span></span><br><span class="line">            <span class="keyword">return</span> <span class="comment"># Stop processing this file</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> num_scenes &lt;= <span class="number">1</span>:</span><br><span class="line">            logger.info(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Video <span class="subst">&#123;base_name&#125;</span><span class="subst">&#123;file_ext&#125;</span> has <span class="subst">&#123;num_scenes&#125;</span> scene(s). No splitting needed.&quot;</span>)</span><br><span class="line">            <span class="comment"># Decide if you want to move single-scene videos somewhere else or leave them</span></span><br><span class="line">            <span class="comment"># Example: move_video(video_path, os.path.join(base_dest_dir, &quot;single_scene&quot;))</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.info(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Video <span class="subst">&#123;base_name&#125;</span><span class="subst">&#123;file_ext&#125;</span> has <span class="subst">&#123;num_scenes&#125;</span> scenes. Starting split...&quot;</span>)</span><br><span class="line">            <span class="comment"># Create a subdirectory for this video&#x27;s scenes</span></span><br><span class="line">            video_scene_dir = os.path.join(base_dest_dir, base_name)</span><br><span class="line">            os.makedirs(video_scene_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i, (start_tc, end_tc) <span class="keyword">in</span> <span class="built_in">enumerate</span>(scene_list):</span><br><span class="line">                scene_num = i + <span class="number">1</span></span><br><span class="line">                output_filename = <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span>_scene_<span class="subst">&#123;scene_num:03d&#125;</span><span class="subst">&#123;file_ext&#125;</span>&quot;</span></span><br><span class="line">                output_filepath = os.path.join(video_scene_dir, output_filename)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Use get_timecode() for FFmpeg compatible strings</span></span><br><span class="line">                start_str = start_tc.get_timecode()</span><br><span class="line">                end_str = end_tc.get_timecode()</span><br><span class="line"></span><br><span class="line">                success = split_video_scene(video_path, output_filepath, start_str, end_str)</span><br><span class="line">                <span class="keyword">if</span> success:</span><br><span class="line">                    split_success_count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    split_fail_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># After attempting all splits, move the original file</span></span><br><span class="line">            <span class="keyword">if</span> split_fail_count == <span class="number">0</span> <span class="keyword">and</span> split_success_count &gt; <span class="number">0</span>: <span class="comment"># Only move original if all splits succeeded</span></span><br><span class="line">                logger.info(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] All <span class="subst">&#123;split_success_count&#125;</span> scenes split successfully for <span class="subst">&#123;base_name&#125;</span><span class="subst">&#123;file_ext&#125;</span>. Moving original.&quot;</span>)</span><br><span class="line">                move_video(video_path, originals_dir)</span><br><span class="line">            <span class="keyword">elif</span> split_success_count &gt; <span class="number">0</span>: <span class="comment"># Some splits succeeded, some failed</span></span><br><span class="line">                logger.warning(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Completed splitting for <span class="subst">&#123;base_name&#125;</span><span class="subst">&#123;file_ext&#125;</span> with <span class="subst">&#123;split_fail_count&#125;</span> failures out of <span class="subst">&#123;num_scenes&#125;</span>. Original NOT moved.&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>: <span class="comment"># All splits failed</span></span><br><span class="line">                logger.error(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] All <span class="subst">&#123;num_scenes&#125;</span> split attempts failed for <span class="subst">&#123;base_name&#125;</span><span class="subst">&#123;file_ext&#125;</span>. Original NOT moved.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Top-level error processing <span class="subst">&#123;base_name&#125;</span><span class="subst">&#123;file_ext&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        result_summary = <span class="string">f&quot;<span class="subst">&#123;num_scenes&#125;</span> scenes detected&quot;</span> <span class="keyword">if</span> num_scenes <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&quot;failed detection&quot;</span></span><br><span class="line">        <span class="keyword">if</span> num_scenes <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> num_scenes &gt; <span class="number">1</span>:</span><br><span class="line">             result_summary += <span class="string">f&quot; (<span class="subst">&#123;split_success_count&#125;</span> split OK, <span class="subst">&#123;split_fail_count&#125;</span> split failed)&quot;</span></span><br><span class="line">        logger.info(<span class="string">f&quot;[<span class="subst">&#123;thread_name&#125;</span>] Finished processing <span class="subst">&#123;base_name&#125;</span><span class="subst">&#123;file_ext&#125;</span> (<span class="subst">&#123;result_summary&#125;</span>) in <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> seconds.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">root_dir, dest_dir, num_threads=<span class="number">4</span>, threshold=<span class="number">30.0</span>, downscale_width=<span class="number">640</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Main function to process multiple videos in parallel.&quot;&quot;&quot;</span></span><br><span class="line">    root_dir = os.path.normpath(root_dir)</span><br><span class="line">    dest_dir = os.path.normpath(dest_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define directory for processed original files</span></span><br><span class="line">    originals_processed_dir = os.path.join(dest_dir, <span class="string">&quot;originals_processed&quot;</span>)</span><br><span class="line">    os.makedirs(originals_processed_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Filter out files already in the destination or originals directory</span></span><br><span class="line">    video_files_all = find_video_files(root_dir)</span><br><span class="line">    abs_dest_dir = os.path.abspath(dest_dir) <span class="comment"># Includes originals_processed_dir</span></span><br><span class="line">    video_files = [f <span class="keyword">for</span> f <span class="keyword">in</span> video_files_all <span class="keyword">if</span> <span class="keyword">not</span> os.path.abspath(f).startswith(abs_dest_dir)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(video_files) &lt; <span class="built_in">len</span>(video_files_all):</span><br><span class="line">         logger.warning(<span class="string">f&quot;Filtered out <span class="subst">&#123;<span class="built_in">len</span>(video_files_all) - <span class="built_in">len</span>(video_files)&#125;</span> files potentially inside destination subdirectories.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> video_files:</span><br><span class="line">        logger.error(<span class="string">f&quot;No valid video files found in <span class="subst">&#123;root_dir&#125;</span> (excluding destination).&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">f&quot;Starting scene splitting on <span class="subst">&#123;<span class="built_in">len</span>(video_files)&#125;</span> videos from <span class="subst">&#123;root_dir&#125;</span> using <span class="subst">&#123;num_threads&#125;</span> threads.&quot;</span>)</span><br><span class="line">    logging.info(<span class="string">f&quot;Output segments will be in subfolders under: <span class="subst">&#123;dest_dir&#125;</span>&quot;</span>)</span><br><span class="line">    logging.info(<span class="string">f&quot;Originals (if successfully split) will be moved to: <span class="subst">&#123;originals_processed_dir&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    start_overall_time = time.time()</span><br><span class="line">    processed_count = <span class="number">0</span></span><br><span class="line">    successful_runs = <span class="number">0</span></span><br><span class="line">    failed_runs = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=num_threads, thread_name_prefix=<span class="string">&#x27;SceneSplitWorker&#x27;</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        futures = &#123;executor.submit(process_video, video_file, threshold, dest_dir, originals_processed_dir, downscale_width): video_file <span class="keyword">for</span> video_file <span class="keyword">in</span> video_files&#125;</span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">&quot;All tasks submitted. Waiting for completion...&quot;</span>)</span><br><span class="line">        <span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> as_completed</span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> tqdm(as_completed(futures), total=<span class="built_in">len</span>(futures), desc=<span class="string">&quot;Overall Progress&quot;</span>):</span><br><span class="line">            video_file = futures[future]</span><br><span class="line">            processed_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                future.result() <span class="comment"># Check for exceptions from the thread</span></span><br><span class="line">                successful_runs += <span class="number">1</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">                <span class="comment"># Exception already logged in thread or called functions</span></span><br><span class="line">                failed_runs += <span class="number">1</span></span><br><span class="line">                logging.debug(<span class="string">f&quot;Worker thread for <span class="subst">&#123;os.path.basename(video_file)&#125;</span> failed top-level (already logged).&quot;</span>)</span><br><span class="line"></span><br><span class="line">    end_overall_time = time.time()</span><br><span class="line">    logging.info(<span class="string">f&quot;Scene splitting complete.&quot;</span>)</span><br><span class="line">    logging.info(<span class="string">f&quot;Summary: <span class="subst">&#123;<span class="built_in">len</span>(video_files)&#125;</span> videos submitted. <span class="subst">&#123;successful_runs&#125;</span> processed without top-level errors, <span class="subst">&#123;failed_runs&#125;</span> encountered errors.&quot;</span>)</span><br><span class="line">    logging.info(<span class="string">f&quot;Total execution time: <span class="subst">&#123;end_overall_time - start_overall_time:<span class="number">.2</span>f&#125;</span> seconds.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># --- CHECK FFMPEG FIRST ---</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_ffmpeg():</span><br><span class="line">        sys.exit(<span class="number">1</span>) <span class="comment"># Exit if FFmpeg is not found</span></span><br><span class="line"></span><br><span class="line">    root_dir = <span class="string">r&quot;/Volumes/shared/标注/影视&quot;</span></span><br><span class="line">    dest_dir = <span class="string">r&quot;/Volumes/shared/0328-1-detect-scene-ret&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Standard directory checks</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root_dir) <span class="keyword">or</span> <span class="keyword">not</span> os.path.isdir(root_dir):</span><br><span class="line">        logging.critical(<span class="string">f&quot;Root directory &#x27;<span class="subst">&#123;root_dir&#125;</span>&#x27; not found or is not a directory.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.makedirs(dest_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        logging.info(<span class="string">f&quot;Ensured base destination directory exists: <span class="subst">&#123;dest_dir&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">        logging.critical(<span class="string">f&quot;Failed to create base destination directory &#x27;<span class="subst">&#123;dest_dir&#125;</span>&#x27;: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">         logging.critical(<span class="string">f&quot;Unexpected error creating destination directory &#x27;<span class="subst">&#123;dest_dir&#125;</span>&#x27;: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">         sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    check_acceleration_support()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Run main process</span></span><br><span class="line">    <span class="comment"># Adjust num_threads, threshold, downscale_width as needed</span></span><br><span class="line">    main(root_dir, dest_dir, num_threads=<span class="number">4</span>, threshold=<span class="number">27.0</span>, downscale_width=<span class="number">640</span>)</span><br></pre></td></tr></table></figure><h2 id="测试结果展示">测试结果展示</h2><blockquote><p>值中的峰值对应于输入视频中的场景中断。在某些情况下，可能需要相应地提高或降低阈值。</p></blockquote><p><img src="/2025/04/03/video-secene-detect/example.png" class="lazyload placeholder" data-srcset="/2025/04/03/video-secene-detect/example.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="see">see</h2><ul><li>1.<a href="https://www.scenedetect.com/cli/#quickstart">https://www.scenedetect.com/cli/#quickstart</a></li><li>2.<a href="https://github.com/Breakthrough/PySceneDetect">https://github.com/Breakthrough/PySceneDetect</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu使用Postfix搭建邮件服务器</title>
      <link href="/2025/03/26/mail-server-Postfix/"/>
      <url>/2025/03/26/mail-server-Postfix/</url>
      
        <content type="html"><![CDATA[<h1>在ubuntu使用Postfix搭建邮件服务器</h1><blockquote><p>在 Ubuntu 服务器上搭建邮件服务器的教程。 Postfix 作为邮件传输代理 (MTA)，Dovecot 作为邮件投递代理 (MDA)</p></blockquote><p><strong>目标：</strong></p><ul><li>在 Ubuntu 服务器上搭建一个功能完善的邮件服务器。</li><li>支持发送和接收邮件。</li><li>实现基本的安全措施，防止垃圾邮件和未经授权的访问。</li></ul><p><strong>准备工作：</strong></p><ol><li><strong>一台运行 Ubuntu Server 的服务器。</strong> 推荐使用 Ubuntu 20.04 或更高版本。</li><li><strong>具有 <code>sudo</code> 权限的非 root 用户。</strong></li><li><strong>一个域名。</strong> 你需要一个注册的域名，以便设置邮件服务器的 DNS 记录。</li><li><strong>一个静态 IP 地址。</strong> 你的服务器需要一个静态 IP 地址，以便 DNS 记录可以正确解析到你的服务器。</li><li><strong>确保服务器主机名设置正确。</strong> 使用 <code>hostnamectl</code> 命令设置主机名。主机名应该与你的域名或子域名相关。例如，<code>mail.example.com</code>。</li></ol><p><strong>步骤 1：安装 Postfix</strong></p><p>Postfix 是一个流行的、安全的、易于配置的邮件传输代理 (MTA)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install postfix</span><br></pre></td></tr></table></figure><p>在安装过程中，会弹出一个配置窗口。选择 “Internet Site” 并输入你的域名（例如，<code>example.com</code>）。</p><p><strong>步骤 2：配置 Postfix</strong></p><p>编辑 Postfix 的主配置文件 <code>main.cf</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/postfix/main.cf</span><br></pre></td></tr></table></figure><p>进行以下修改：</p><ul><li><p><strong><code>myhostname</code>：</strong> 设置服务器的主机名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myhostname = mail.example.com</span><br></pre></td></tr></table></figure></li><li><p><strong><code>myorigin</code>：</strong> 设置发送邮件时使用的域名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myorigin = example.com</span><br></pre></td></tr></table></figure></li><li><p><strong><code>mydestination</code>：</strong> 设置服务器接收邮件的域名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mydestination = mail.example.com, example.com, localhost.localdomain, localhost</span><br></pre></td></tr></table></figure></li><li><p><strong><code>mynetworks</code>：</strong> 设置允许通过此服务器发送邮件的网络。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128</span><br></pre></td></tr></table></figure></li><li><p><strong><code>relayhost</code>：</strong> 如果你需要通过另一个邮件服务器发送邮件，请设置此选项。 否则，注释掉或留空。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#relayhost =</span><br></pre></td></tr></table></figure></li><li><p><strong><code>inet_interfaces</code>：</strong> 设置 Postfix 监听的网络接口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inet_interfaces = all</span><br></pre></td></tr></table></figure></li><li><p><strong><code>inet_protocols</code>：</strong> 设置 Postfix 使用的网络协议。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inet_protocols = all</span><br></pre></td></tr></table></figure></li></ul><p>保存并关闭文件。</p><p><strong>步骤 3：安装 Dovecot</strong></p><p>Dovecot 是一个流行的、安全的邮件投递代理 (MDA)。 它负责将邮件投递到用户的邮箱。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install dovecot-core dovecot-imapd dovecot-pop3d</span><br></pre></td></tr></table></figure><p><strong>步骤 4：配置 Dovecot</strong></p><p>配置 Dovecot 以使用 Postfix 进行邮件投递。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/dovecot/dovecot.conf</span><br></pre></td></tr></table></figure><p>取消注释以下行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!include conf.d/10-mail.conf</span><br><span class="line">!include conf.d/10-auth.conf</span><br><span class="line">!include conf.d/10-master.conf</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><p>编辑 <code>10-mail.conf</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/dovecot/conf.d/10-mail.conf</span><br></pre></td></tr></table></figure><p>设置 <code>mail_location</code> 选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mail_location = mbox:~/mail:INBOX=/var/mail/%u</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><p>编辑 <code>10-auth.conf</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/dovecot/conf.d/10-auth.conf</span><br></pre></td></tr></table></figure><p>取消注释 <code>disable_plaintext_auth</code> 选项并将其设置为 <code>no</code>。<strong>（注意：在生产环境中，强烈建议启用 TLS/SSL 加密，并保持 <code>disable_plaintext_auth = yes</code> 以提高安全性。）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disable_plaintext_auth = no</span><br></pre></td></tr></table></figure><p>找到 <code>auth_mechanisms</code> 行，并确保它包含 <code>plain</code> 和 <code>login</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth_mechanisms = plain login</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><p>编辑 <code>10-master.conf</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/dovecot/conf.d/10-master.conf</span><br></pre></td></tr></table></figure><p>找到 <code>service auth</code> 部分，并确保 <code>unix_listener /var/spool/postfix/private/auth</code> 行存在且未注释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">service auth &#123;</span><br><span class="line">  unix_listener /var/spool/postfix/private/auth &#123;</span><br><span class="line">    mode = 0660</span><br><span class="line">    user = postfix</span><br><span class="line">    group = postfix</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到 <code>service imap-login</code> 和 <code>service pop3-login</code> 部分，确保 <code>inet_listener</code> 选项存在且未注释。</p><p>保存并关闭文件。</p><p><strong>步骤 5：配置 Postfix 以使用 Dovecot 进行身份验证</strong></p><p>编辑 Postfix 的 <code>main.cf</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/postfix/main.cf</span><br></pre></td></tr></table></figure><p>添加以下行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">smtpd_sasl_type = dovecot</span><br><span class="line">smtpd_sasl_path = private/auth</span><br><span class="line">smtpd_sasl_auth_enable = yes</span><br><span class="line">smtpd_relay_restrictions = permit_mynetworks,permit_sasl_authenticated,defer_unauth_destination</span><br><span class="line">broken_sasl_auth_clients = yes</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><p><strong>步骤 6：设置 DNS 记录</strong></p><p>你需要设置以下 DNS 记录，以便邮件服务器可以正常工作：</p><ul><li><p><strong>A 记录：</strong> 将你的域名或子域名（例如，<code>mail.example.com</code>）指向你的服务器的静态 IP 地址。</p></li><li><p><strong>MX 记录：</strong> 指示邮件服务器的域名。 将 MX 记录指向你的域名或子域名（例如，<code>mail.example.com</code>）。</p></li><li><p><strong>TXT 记录 (SPF)：</strong> SPF 记录用于防止垃圾邮件。 添加一个 TXT 记录，指定允许从你的域名发送邮件的服务器。 例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v=spf1 mx a ip4:你的服务器IP地址 -all</span><br></pre></td></tr></table></figure></li><li><p><strong>TXT 记录 (DMARC)：</strong> DMARC 记录用于进一步提高邮件安全性。 添加一个 DMARC 记录，指示如何处理未通过 SPF 和 DKIM 检查的邮件。 例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v=DMARC1; p=none; rua=mailto:postmaster@example.com;</span><br></pre></td></tr></table></figure><p><em>注意：<code>rua=mailto:postmaster@example.com;</code> 这部分是可选的，用于指定接收 DMARC 报告的邮箱。</em></p><p>具体的 DNS 记录设置方法取决于你的域名注册商。</p></li></ul><p><strong>步骤 7：重新启动服务</strong></p><p>重新启动 Postfix 和 Dovecot 服务以应用更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart postfix</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart dovecot</span><br></pre></td></tr></table></figure><p><strong>步骤 8：测试邮件服务器</strong></p><ol><li><strong>创建用户:</strong> 创建一个系统用户用于邮件测试</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> adduser testuser</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>发送邮件:</strong> 使用 <code>mail</code> 命令发送邮件。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a test email.&quot;</span> | mail -s <span class="string">&quot;Test Email&quot;</span> testuser@example.com</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>接收邮件:</strong> 使用 <code>dovecot</code> 提供的工具或者 <code>mutt</code> 命令来接收邮件。 首先安装 <code>mutt</code>:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install mutt</span><br></pre></td></tr></table></figure><p>然后运行 <code>mutt</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mutt -f /var/mail/testuser</span><br></pre></td></tr></table></figure><p>你应该能看到你发送的测试邮件。</p><p><strong>步骤 9：安全加固 (重要!)</strong></p><ul><li><p><strong>启用 TLS/SSL 加密：</strong> 使用 Let’s Encrypt 获取免费的 TLS/SSL 证书，并配置 Postfix 和 Dovecot 以使用加密连接。 这可以保护你的邮件在传输过程中不被窃听。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install certbot python3-certbot-nginx</span><br><span class="line"><span class="built_in">sudo</span> certbot --nginx -d mail.example.com</span><br></pre></td></tr></table></figure><p>然后，编辑 <code>main.cf</code> 和 <code>10-ssl.conf</code> 文件以配置 TLS/SSL 加密。</p></li><li><p><strong>配置防火墙：</strong> 使用 <code>ufw</code> 防火墙，只允许必要的端口（例如，25, 143, 993, 587）通过。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ufw allow 25</span><br><span class="line"><span class="built_in">sudo</span> ufw allow 143</span><br><span class="line"><span class="built_in">sudo</span> ufw allow 993</span><br><span class="line"><span class="built_in">sudo</span> ufw allow 587</span><br><span class="line"><span class="built_in">sudo</span> ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure></li><li><p><strong>安装和配置 Fail2ban：</strong> Fail2ban 可以自动阻止尝试暴力破解你的服务器的 IP 地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install fail2ban</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/fail2ban/jail.conf /etc/fail2ban/jail.local</span><br><span class="line"><span class="built_in">sudo</span> nano /etc/fail2ban/jail.local</span><br></pre></td></tr></table></figure><p>编辑 <code>jail.local</code> 文件，启用对 Postfix 和 Dovecot 的保护。</p></li><li><p><strong>定期更新系统：</strong> 保持你的 Ubuntu 服务器更新到最新版本，以修补安全漏洞。</p></li></ul><p><strong>步骤 10：防止垃圾邮件</strong></p><ul><li><strong>设置反向 DNS (PTR) 记录：</strong> 确保你的服务器 IP 地址具有正确的反向 DNS 记录。 这可以帮助验证你的服务器是否是一个合法的邮件服务器。 联系你的服务器提供商设置 PTR 记录。</li><li><strong>使用 DKIM：</strong> DKIM（DomainKeys Identified Mail）是一种电子邮件身份验证方法，允许你的邮件服务器对发出的邮件进行数字签名。</li><li><strong>使用 DMARC：</strong> DMARC（Domain-based Message Authentication, Reporting &amp; Conformance）是一种电子邮件身份验证策略，允许你指定如何处理未通过 SPF 和 DKIM 检查的邮件。</li></ul><p><strong>注意事项：</strong></p><ul><li><strong>安全性：</strong> 设置邮件服务器需要非常重视安全性。 请务必采取所有必要的安全措施，以防止垃圾邮件、网络钓鱼和其他恶意活动。</li><li><strong>可送达性：</strong> 确保你的邮件服务器符合电子邮件发送的最佳实践，以提高邮件的可送达性。 这包括设置正确的 DNS 记录、使用 DKIM 和 DMARC，以及避免发送垃圾邮件。</li><li><strong>监控：</strong> 持续监控你的邮件服务器的性能和安全状况。 检查日志文件，以便及时发现和解决任何问题。</li><li>**IP信誉：**保持IP信誉良好对于邮件的成功发送至关重要，务必遵守发送规则和避免发送垃圾邮件，否则你的邮件可能被标记为垃圾邮件。</li></ul><h2 id="客户端使用">客户端使用</h2><p>在本地测试邮件服务器的可用性，是指在你的邮件服务器搭建好后，在不涉及到外部网络的情况下，验证它是否能够正确地发送和接收邮件。 这通常在你服务器搭建的初期阶段进行，用于排查基本配置问题。</p><p>以下是几种在本地测试邮件服务器可用性的方法：</p><p><strong>方法 1：使用 <code>mail</code> 命令（简单快速）</strong></p><p><code>mail</code> 命令是一个简单的命令行邮件客户端，适用于快速测试。</p><ol><li><p><strong>确保 <code>mail</code> 命令已安装：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install mailutils</span><br></pre></td></tr></table></figure></li><li><p><strong>发送邮件到本地用户：</strong><br>假设你的系统上有一个用户名为 <code>testuser</code>，并且邮件服务器配置了域名 <code>example.com</code>，你可以尝试向 <code>testuser@example.com</code> 发送邮件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is a test email.&quot;</span> | mail -s <span class="string">&quot;Test Email&quot;</span> testuser@example.com</span><br></pre></td></tr></table></figure></li><li><p><strong>检查本地用户的邮箱：</strong></p><p>本地用户的邮箱通常位于 <code>/var/mail/&lt;用户名&gt;</code>。 使用 <code>mutt</code> 或者直接查看文件内容：</p><ul><li><p><strong>使用 <code>mutt</code>：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install mutt  <span class="comment"># 如果没有安装</span></span><br><span class="line">mutt -f /var/mail/testuser</span><br></pre></td></tr></table></figure></li><li><p><strong>直接查看文件：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cat</span> /var/mail/testuser</span><br></pre></td></tr></table></figure></li></ul><p>如果邮件服务器配置正确，你应该能在 <code>testuser</code> 的邮箱中看到你发送的测试邮件。</p></li></ol><p><strong>方法 2：使用 <code>swaks</code> 命令（更详细的测试）</strong></p><p><code>swaks</code> (Swiss Army Knife for SMTP) 是一个更强大的命令行 SMTP 测试工具。 它可以让你更详细地控制邮件发送过程，并检查服务器的响应。</p><ol><li><p><strong>安装 <code>swaks</code>：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install swaks</span><br></pre></td></tr></table></figure></li><li><p><strong>发送邮件并检查响应：</strong></p><p>使用 <code>swaks</code> 命令发送邮件，并检查服务器的响应：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swaks --to testuser@example.com --from youruser@example.com --server localhost --header <span class="string">&quot;Subject: Test Email from Swaks&quot;</span> --body <span class="string">&quot;This is a test email from swaks.&quot;</span> --verbose</span><br></pre></td></tr></table></figure><ul><li><code>--to</code>：收件人地址。</li><li><code>--from</code>：发件人地址（必须是邮件服务器允许发送的地址）。</li><li><code>--server</code>：邮件服务器地址 (localhost 表示本地服务器)。</li><li><code>--header</code>：邮件头部信息 (例如，主题)。</li><li><code>--body</code>：邮件正文。</li><li><code>--verbose</code>：显示详细的发送过程和服务器响应。</li></ul><p>检查 <code>swaks</code> 的输出，确保服务器返回了 “250 OK” 或类似的成功代码。 如果出现错误，可以根据错误信息排查问题。</p></li></ol><p><strong>方法 3：使用本地邮件客户端（例如 Thunderbird）</strong></p><p>如果你的系统上安装了图形界面的邮件客户端 (例如 Thunderbird)，你可以配置它来连接到本地邮件服务器，并发送和接收邮件。</p><ol><li><p><strong>配置邮件客户端：</strong></p><ul><li><strong>账户类型：</strong> 手动配置账户。</li><li><strong>收件服务器 (IMAP/POP3)：</strong><ul><li>服务器地址：<code>localhost</code> 或 <code>127.0.0.1</code></li><li>端口：143 (IMAP) 或 110 (POP3) - 如果启用了 SSL/TLS，则使用 993 (IMAPS) 或 995 (POP3S)</li><li>安全连接：根据你的服务器配置选择 “STARTTLS” 或 “SSL/TLS”。 如果你没有启用 TLS/SSL，则选择 “无加密”。</li><li>身份验证方法：选择 “普通密码” 或 “加密密码”。</li></ul></li><li><strong>发件服务器 (SMTP)：</strong><ul><li>服务器地址：<code>localhost</code> 或 <code>127.0.0.1</code></li><li>端口：25 或 587 (如果使用 STARTTLS) - 如果启用了 SSL/TLS，则使用 465 (SMTPS)</li><li>安全连接：根据你的服务器配置选择 “STARTTLS” 或 “SSL/TLS”。 如果你没有启用 TLS/SSL，则选择 “无加密”。</li><li>身份验证方法：选择 “普通密码” 或 “加密密码”。</li><li>用户名：必须设置为可用的用户，设置需要发送账号和用户密码</li></ul></li></ul></li><li><p><strong>发送和接收邮件：</strong><br>使用邮件客户端发送邮件到本地用户（例如，<code>testuser@example.com</code>），并检查是否能够成功接收。</p></li></ol><p><strong>方法 4：检查邮件日志</strong></p><p>无论使用哪种方法测试，都应该检查邮件服务器的日志文件，以了解邮件的发送和接收情况。</p><ul><li><strong>Postfix 日志：</strong> <code>/var/log/mail.log</code> 或 <code>/var/log/maillog</code></li><li><strong>Dovecot 日志：</strong> <code>/var/log/dovecot.log</code></li></ul><h2 id="可视化注册与使用方案">可视化注册与使用方案</h2><p>在 Ubuntu 服务器上搭建邮件服务器后，并不能直接“图形化注册邮箱”。 上述教程搭建的是邮件服务器的底层基础，需要手动创建 Linux 系统用户，这些用户才能通过 IMAP/POP3 等协议访问邮件。 如果你想要提供一种“图形化注册邮箱”的体验，你需要额外的软件来管理邮箱账户，并提供一个 Web 界面供用户注册和管理他们的邮箱。</p><p>以下是一些可行的方案，它们都需要安装额外的软件，并进行配置。</p><p><strong>方案 1：使用 iRedMail (推荐)</strong></p><p>iRedMail 是一个非常流行的、开源的邮件服务器解决方案，它提供了一个 Web 界面，用于管理邮箱、用户和域名。 iRedMail 可以自动化配置 Postfix、Dovecot、Roundcube Webmail 等组件，并提供了一个易于使用的管理界面。</p><ol><li><p><strong>下载 iRedMail 安装脚本：</strong><br>访问 <a href="https://www.iredmail.org/">https://www.iredmail.org/</a> 下载最新的 iRedMail 安装脚本。</p></li><li><p><strong>运行安装脚本：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar xzf iRedMail-x.y.z.tar.gz  <span class="comment"># 解压下载的压缩包</span></span><br><span class="line"><span class="built_in">cd</span> iRedMail-x.y.z</span><br><span class="line"><span class="built_in">sudo</span> bash iRedMail.sh</span><br></pre></td></tr></table></figure><p>按照安装脚本的提示进行操作。 你需要设置管理员密码、选择数据库类型、设置域名等。</p></li><li><p><strong>访问 iRedMail Web 管理界面：</strong><br>安装完成后，访问 iRedMail Web 管理界面。 界面地址通常是 <code>https://你的服务器IP地址/iredadmin/</code> 或 <code>https://你的域名/iredadmin/</code>。</p></li><li><p><strong>使用 Web 界面创建邮箱账户：</strong><br>使用管理员账户登录 iRedMail Web 管理界面，然后你可以创建新的邮箱账户，设置密码等。</p></li><li><p><strong>让用户访问Web邮箱</strong></p><p>iRedMail 集成了 Roundcube Webmail。 用户可以使用浏览器访问他们的邮箱，地址通常是<code>https://你的服务器IP地址/mail/</code> 或 <code>https://你的域名/mail/</code>。</p></li></ol><p><strong>方案 2：使用 Mail-in-a-Box</strong></p><p>Mail-in-a-Box 是另一个易于使用的邮件服务器解决方案，旨在简化邮件服务器的设置和管理。 它也提供了一个 Web 界面，用于管理邮箱、用户和域名。</p><ol><li><p><strong>下载 Mail-in-a-Box 安装脚本：</strong><br>访问 <a href="https://mailinabox.email/">https://mailinabox.email/</a> 获取最新的安装说明。</p></li><li><p><strong>运行安装脚本：</strong><br>按照 Mail-in-a-Box 的安装说明进行操作。 安装过程相对简单，会自动配置所需的组件。</p></li><li><p><strong>访问 Mail-in-a-Box Web 管理界面：</strong><br>安装完成后，访问 Mail-in-a-Box Web 管理界面。</p></li><li><p><strong>使用 Web 界面创建邮箱账户：</strong><br>使用管理员账户登录 Mail-in-a-Box Web 管理界面，然后你可以创建新的邮箱账户。</p></li></ol><p><strong>方案 3：手动配置 Roundcube Webmail 或 Rainloop (更复杂)</strong></p><p>如果你不想使用完整的邮件服务器解决方案，你可以手动安装和配置 Roundcube Webmail 或 Rainloop Webmail，并将其与你的 Postfix 和 Dovecot 邮件服务器集成。</p><ol><li><p><strong>安装 Web 服务器：</strong><br>首先，你需要安装一个 Web 服务器（例如，Apache 或 Nginx）。</p></li><li><p><strong>安装 PHP：</strong><br>你需要安装 PHP 和一些必要的 PHP 扩展。</p></li><li><p><strong>下载和安装 Roundcube Webmail 或 Rainloop：</strong><br>从官方网站下载 Roundcube Webmail 或 Rainloop 的最新版本，并将其解压到你的 Web 服务器的文档根目录中。</p></li><li><p><strong>配置 Roundcube Webmail 或 Rainloop：</strong><br>按照 Roundcube Webmail 或 Rainloop 的安装说明进行配置。 你需要设置数据库连接信息、IMAP 和 SMTP 服务器地址、身份验证方法等。</p></li><li><p><strong>创建 Web 界面用于注册用户：</strong><br>开发自己的Web界面，用于添加用户到数据库中。</p></li></ol><p><strong>方案对比</strong></p><table><thead><tr><th>特性</th><th>iRedMail</th><th>Mail-in-a-Box</th><th>手动配置 Webmail</th></tr></thead><tbody><tr><td>易用性</td><td>简单</td><td>简单</td><td>复杂</td></tr><tr><td>Web 管理界面</td><td>有</td><td>有</td><td>需要手动添加</td></tr><tr><td>自动配置</td><td>是</td><td>是</td><td>否</td></tr><tr><td>灵活性</td><td>较低</td><td>较低</td><td>高</td></tr><tr><td>社区支持</td><td>活跃</td><td>活跃</td><td>取决于选择的 Webmail</td></tr><tr><td>适用场景</td><td>快速搭建邮件服务器</td><td>快速搭建邮件服务器</td><td>自定义程度高的场景</td></tr></tbody></table><p><strong>选择哪个方案？</strong></p><ul><li><p><strong>iRedMail 或 Mail-in-a-Box：</strong> 如果你希望快速搭建一个功能完善的邮件服务器，并且不需要太多的自定义，那么 iRedMail 或 Mail-in-a-Box 是不错的选择。</p></li><li><p><strong>手动配置Webmail:</strong> 如果你需要高度自定义， 那么选择这个方式。</p></li></ul><p><strong>总结：</strong></p><p>要实现“图形化注册邮箱”的功能，你需要安装额外的软件，并提供一个 Web 界面供用户注册和管理他们的邮箱。 iRedMail 和 Mail-in-a-Box 是两种流行的选择，它们提供了易于使用的 Web 管理界面，可以简化邮件服务器的管理。 你也可以选择手动安装和配置 Roundcube Webmail 或 Rainloop Webmail，但这种方法更复杂。 请务必仔细阅读所选方案的文档，并按照说明进行操作。</p><h2 id="日志诊断">日志诊断</h2><ul><li>nginx</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> less /var/log/nginx/error.log</span><br><span class="line"><span class="built_in">sudo</span> less /var/log/nginx/access.log</span><br></pre></td></tr></table></figure><ul><li>mail</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">tail</span> -n 50 /var/log/mail.err</span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建 Git 或 SVN 服务器并通过 Samba 共享</title>
      <link href="/2025/03/18/smb-git-svn/"/>
      <url>/2025/03/18/smb-git-svn/</url>
      
        <content type="html"><![CDATA[<p><strong>一、搭建 Git 服务器并通过 Samba 共享</strong></p><p>这种方式下，Git 服务器本身处理版本控制逻辑，Samba 只负责共享 Git 仓库所在的目录。</p><p><strong>1. 安装 Git 和 Samba</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install git samba</span><br></pre></td></tr></table></figure><p><strong>2. 创建 Git 仓库</strong></p><ul><li><p><strong>创建一个用于存放 Git 仓库的目录（例如 <code>/srv/git</code>）：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /srv/git</span><br></pre></td></tr></table></figure></li><li><p><strong>进入该目录并初始化一个裸仓库（bare repository）：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /srv/git</span><br><span class="line"><span class="built_in">sudo</span> git init --bare myproject.git  <span class="comment"># &quot;myproject&quot; 是你的项目名称</span></span><br></pre></td></tr></table></figure><p>裸仓库只包含版本控制信息，没有工作目录。</p></li><li><p><strong>设置权限</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R www-data:www-data /srv/git/myproject.git <span class="comment">#假设你的samba用户是www-data</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> -R 775 /srv/git/myproject.git</span><br></pre></td></tr></table></figure></li></ul><p><strong>3. 配置 Samba 共享</strong></p><ul><li><p><strong>编辑 Samba 配置文件：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure></li><li><p><strong>在文件末尾添加以下内容（根据你的实际情况修改）：</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[git-repos]</span></span><br><span class="line">    <span class="attr">comment</span> = Git Repositories</span><br><span class="line">    <span class="attr">path</span> = /srv/git</span><br><span class="line">    <span class="attr">browseable</span> = <span class="literal">yes</span></span><br><span class="line">    read <span class="attr">only</span> = <span class="literal">no</span></span><br><span class="line">    guest <span class="attr">ok</span> = <span class="literal">no</span>  <span class="comment"># 如果需要匿名访问，设置为 yes</span></span><br><span class="line">    valid <span class="attr">users</span> = @gitusers  <span class="comment"># 允许访问的用户组 (见下一步)</span></span><br><span class="line">    create <span class="attr">mask</span> = <span class="number">0664</span></span><br><span class="line">    directory <span class="attr">mask</span> = <span class="number">0775</span></span><br><span class="line">    force <span class="attr">group</span> = gitusers <span class="comment">#强制组</span></span><br></pre></td></tr></table></figure><ul><li><code>[git-repos]</code>: 共享名称，客户端访问时使用。</li><li><code>path</code>: Git 仓库所在的目录。</li><li><code>valid users</code>: 允许访问的用户或用户组（需要先创建用户/组）。</li><li><code>guest ok</code>: 是否允许匿名访问（不推荐）。</li></ul></li><li><p><strong>创建一个 Samba 用户组（例如 <code>gitusers</code>）并将用户添加到该组：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> groupadd gitusers</span><br><span class="line"><span class="built_in">sudo</span> usermod -aG gitusers nas  </span><br><span class="line"><span class="built_in">sudo</span> smbpasswd -a nas   </span><br></pre></td></tr></table></figure><p>重复<code>usermod</code>和<code>smbpasswd</code>命令，添加多个用户。</p></li><li><p><strong>重启 Samba 服务：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart smbd</span><br></pre></td></tr></table></figure></li></ul><p><strong>4. 客户端访问</strong></p><ul><li><p><strong>在 Windows 上：</strong></p><ul><li>打开文件资源管理器，在地址栏输入 <code>\\your_server_ip\git-repos</code> （将 <code>your_server_ip</code> 替换为你的服务器 IP 地址或主机名）。</li><li>输入你的 Samba 用户名和密码。</li><li>你应该能看到 <code>myproject.git</code> 目录。</li></ul></li><li><p><strong>在 Linux/macOS 上：</strong></p><ul><li>可以使用命令行或图形界面的 SMB/CIFS 客户端访问。</li><li>挂载 Samba 共享：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mount -t cifs //your_server_ip/git-repos /mnt/git -o username=yourusername,password=yourpassword</span><br></pre></td></tr></table></figure>(将 <code>/mnt/git</code> 替换为你想要挂载到的本地目录)。</li></ul></li><li><p><strong>使用 Git 客户端克隆仓库：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> smb://your_server_ip/git-repos/myproject.git</span><br><span class="line"><span class="comment"># 或者, 如果已经挂载:</span></span><br><span class="line">git <span class="built_in">clone</span> /mnt/git/myproject.git  </span><br></pre></td></tr></table></figure><p>之后就可以像使用普通的 Git 仓库一样进行 <code>add</code>、<code>commit</code>、<code>push</code>、<code>pull</code> 等操作。</p></li></ul><p><strong>二、搭建 SVN 服务器并通过 Samba 共享</strong></p><p>与 Git 类似，SVN 服务器处理版本控制，Samba 共享 SVN 仓库目录。</p><p><strong>1. 安装 SVN 和 Samba</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install subversion samba libapache2-mod-svn</span><br></pre></td></tr></table></figure><p><code>libapache2-mod-svn</code> 提供了通过 Apache 进行 SVN 访问的功能 (可选, 但更安全, 推荐)</p><p><strong>2. 创建 SVN 仓库</strong></p><ul><li><p><strong>创建一个用于存放 SVN 仓库的目录（例如 <code>/srv/svn</code>）：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /srv/svn</span><br></pre></td></tr></table></figure></li><li><p><strong>进入该目录并创建一个 SVN 仓库：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /srv/svn</span><br><span class="line"><span class="built_in">sudo</span> svnadmin create myproject  <span class="comment"># &quot;myproject&quot; 是你的项目名称</span></span><br></pre></td></tr></table></figure></li><li><p><strong>设置权限</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R www-data:www-data /srv/svn/myproject</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> -R 775 /srv/svn/myproject</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.  (可选, 推荐) 配置 Apache + SVN (更安全)</strong></p><ul><li><p><strong>创建 SVN 的密码文件：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> htpasswd -c /etc/apache2/dav_svn.passwd yourusername  <span class="comment"># 创建第一个用户</span></span><br><span class="line"><span class="built_in">sudo</span> htpasswd /etc/apache2/dav_svn.passwd anotheruser     <span class="comment"># 添加更多用户</span></span><br></pre></td></tr></table></figure></li><li><p><strong>创建一个 Apache 配置文件：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/apache2/mods-available/dav_svn.conf</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;Location /svn&gt;</span></span><br><span class="line">   <span class="attribute">DAV</span> svn</span><br><span class="line">   <span class="attribute">SVNParentPath</span> /srv/svn</span><br><span class="line">   <span class="attribute">AuthType</span> Basic</span><br><span class="line">   <span class="attribute">AuthName</span> <span class="string">&quot;Subversion Repository&quot;</span></span><br><span class="line">   <span class="attribute">AuthUserFile</span> /etc/apache2/dav_svn.passwd</span><br><span class="line">   <span class="attribute">Require</span> valid-user</span><br><span class="line"><span class="section">&lt;/Location&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>启用必要的 Apache 模块并重启 Apache：</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> a2enmod dav</span><br><span class="line"><span class="built_in">sudo</span> a2enmod dav_svn</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart apache2</span><br></pre></td></tr></table></figure><ul><li>现在, 可以通过 <code>http://your_server_ip/svn/myproject</code> 来访问 SVN 仓库 (需要用户名和密码).</li></ul></li></ul><p><strong>4. 配置 Samba 共享 (如果不用 Apache, 可以通过 Samba 共享)</strong></p><ul><li><p><strong>编辑 Samba 配置文件：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/samba/smb.conf</span><br></pre></td></tr></table></figure></li><li><p><strong>在文件末尾添加以下内容：</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[svn-repos]</span></span><br><span class="line">    <span class="attr">comment</span> = SVN Repositories</span><br><span class="line">    <span class="attr">path</span> = /srv/svn</span><br><span class="line">    <span class="attr">browseable</span> = <span class="literal">yes</span></span><br><span class="line">    read <span class="attr">only</span> = <span class="literal">no</span></span><br><span class="line">    guest <span class="attr">ok</span> = <span class="literal">no</span>  <span class="comment"># 如果需要匿名访问，设置为 yes</span></span><br><span class="line">    valid <span class="attr">users</span> = @svnusers <span class="comment">#同上，需要创建svnusers组和用户</span></span><br><span class="line">    create <span class="attr">mask</span> = <span class="number">0664</span></span><br><span class="line">    directory <span class="attr">mask</span> = <span class="number">0775</span></span><br><span class="line">    force <span class="attr">group</span> = svnusers</span><br></pre></td></tr></table></figure></li><li><p><strong>创建 Samba 用户组和用户 (参考 Git 部分的步骤)。</strong></p></li><li><p><strong>重启 Samba 服务：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart smbd</span><br></pre></td></tr></table></figure></li></ul><p><strong>5. 客户端访问</strong></p><ul><li>如果使用 Apache + SVN, 使用 SVN 客户端通过 <code>http://your_server_ip/svn/myproject</code> 访问.</li><li>如果使用 Samba 共享：<ul><li><strong>Windows:</strong>  <code>\\your_server_ip\svn-repos</code></li><li><strong>Linux/macOS:</strong>  <code>smb://your_server_ip/svn-repos</code> (或挂载)</li><li>使用 SVN 客户端（如 TortoiseSVN、<code>svn</code> 命令行工具）进行 <code>checkout</code>、<code>commit</code>、<code>update</code> 等操作。</li></ul></li></ul><h2 id="smb-启用回收站">smb 启用回收站</h2><p>Samba 的 <code>vfs_recycle</code> 模块提供了一个简单但实用的回收站功能，可以防止用户意外删除共享文件。当用户通过 Samba 删除文件时，文件不会被立即从服务器上永久删除，而是会被移动到一个特殊的回收站目录中。管理员可以配置回收站的保留策略，例如文件保留时间、回收站最大容量等。</p><p>下面是关于 <code>vfs_recycle</code> 模块的详细说明和配置方法：</p><p><strong>1. 工作原理</strong></p><ul><li>当用户通过 Samba 客户端删除文件时，<code>vfs_recycle</code> 模块会拦截删除操作。</li><li>文件不会被真正删除，而是被移动到预先配置好的回收站目录中。</li><li>移动到回收站的文件会保留一段时间（可配置），超过保留时间后才会被自动删除。</li><li>管理员可以手动清理回收站，或者恢复回收站中的文件。</li></ul><p><strong>2. 配置方法</strong></p><p><code>vfs_recycle</code> 模块的配置主要在 Samba 的配置文件 (<code>/etc/samba/smb.conf</code>) 中完成。你可以在全局配置部分 (<code>[global]</code>) 中设置默认的回收站参数，也可以在单个共享配置部分中为特定的共享设置不同的回收站参数。</p><p>以下是一个配置示例，添加到你的 <code>smb.conf</code> 文件中：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line">    <span class="comment"># ... 其他全局配置 ...</span></span><br><span class="line"></span><br><span class="line">    vfs <span class="attr">objects</span> = recycle  <span class="comment"># 在全局配置中启用 recycle 模块</span></span><br><span class="line"></span><br><span class="line">    recycle:<span class="attr">repository</span> = .recycle/%U  <span class="comment"># 回收站目录，%U 代表用户名</span></span><br><span class="line">    recycle:<span class="attr">keeptree</span> = <span class="literal">Yes</span>            <span class="comment"># 保留原始目录结构</span></span><br><span class="line">    recycle:<span class="attr">versions</span> = <span class="literal">Yes</span>            <span class="comment"># 启用版本控制 (如果文件名相同)</span></span><br><span class="line">    recycle:<span class="attr">touch</span> = <span class="literal">Yes</span>               <span class="comment"># 更新文件的访问时间</span></span><br><span class="line">    recycle:<span class="attr">maxsize</span> = <span class="number">0</span>               <span class="comment"># 回收站最大容量 (0 表示无限制)</span></span><br><span class="line">    recycle:<span class="attr">exclude</span> = *.tmp, *.temp    <span class="comment"># 排除的文件类型</span></span><br><span class="line">    recycle:<span class="attr">exclude_dir</span> = /tmp, /cache <span class="comment"># 排除的目录</span></span><br><span class="line">    recycle:<span class="attr">noversions</span> = *.doc        <span class="comment"># 不保留版本的文件类型</span></span><br><span class="line">    <span class="comment"># recycle:minsize = 1024            # 最小文件大小 (单位: 字节)</span></span><br><span class="line">    <span class="comment"># recycle:days_kept = 30           # 文件保留天数</span></span><br><span class="line"></span><br><span class="line"><span class="section">[myshare]</span></span><br><span class="line">    <span class="attr">comment</span> = My Shared Folder</span><br><span class="line">    <span class="attr">path</span> = /path/to/myshare</span><br><span class="line">    <span class="comment"># ... 其他共享配置 ...</span></span><br><span class="line"></span><br><span class="line">    vfs <span class="attr">objects</span> = recycle  <span class="comment"># 也可以在单个共享中启用 recycle 模块</span></span><br><span class="line">    recycle:<span class="attr">repository</span> = .recycle/%U <span class="comment">#可选，如果需要和全局不一样的配置</span></span><br></pre></td></tr></table></figure><p><strong>参数说明:</strong></p><ul><li><strong><code>vfs objects = recycle</code></strong>: 启用 <code>vfs_recycle</code> 模块。可以放在 <code>[global]</code> 部分（对所有共享生效）或单个共享配置部分（只对该共享生效）。</li><li><strong><code>recycle:repository = .recycle/%U</code></strong>:<ul><li>指定回收站目录的位置。</li><li><code>.recycle</code> 是回收站目录的名称（可以自定义）。</li><li><code>%U</code> 是一个变量，代表删除文件的用户名，这样可以为每个用户创建单独的回收站。</li><li>也可以使用绝对路径，例如 <code>/path/to/recycle/%U</code>。</li><li>如果使用相对路径（如 <code>.recycle</code>），回收站目录会创建在共享目录的根目录下。</li></ul></li><li><strong><code>recycle:keeptree = Yes</code></strong>:  在回收站中保留文件被删除前的原始目录结构。如果设置为 <code>No</code>，所有文件都会被直接放在回收站根目录下。</li><li><strong><code>recycle:versions = Yes</code></strong>:<ul><li>如果回收站中已经存在同名文件，是否创建新版本。</li><li>设置为 <code>Yes</code> 时，新版本的文件名会附加一个版本号（例如 <code>file.txt.1</code>、<code>file.txt.2</code>）。</li><li>设置为 <code>No</code> 时，新文件会覆盖旧文件。</li></ul></li><li><strong><code>recycle:touch = Yes</code></strong>:  当文件被移动到回收站时，更新文件的访问时间（atime）。</li><li><strong><code>recycle:maxsize = 0</code></strong>:<ul><li>设置回收站的最大容量（以字节为单位）。</li><li><code>0</code> 表示无限制。</li><li>当回收站达到最大容量时，最早的文件会被自动删除。</li></ul></li><li><strong><code>recycle:exclude = *.tmp, *.temp</code></strong>:  指定不放入回收站的文件类型（使用通配符）。</li><li><strong><code>recycle:exclude_dir = /tmp, /cache</code></strong>:  指定不放入回收站的目录（绝对路径）。</li><li><strong><code>recycle:noversions = *.doc</code></strong>:  指定不保留版本的文件类型（即使 <code>recycle:versions = Yes</code>）。</li><li><strong><code>recycle:minsize = 1024</code></strong>:  指定只有大于此大小（字节）的文件才会被放入回收站。</li><li><strong><code>recycle:days_kept = 30</code></strong>:  指定文件在回收站中保留的天数。超过此天数的文件会被自动删除。</li></ul><p><strong>3. 注意事项</strong></p><ul><li><strong>权限:</strong> 确保 Samba 用户对回收站目录有读写权限。</li><li><strong>性能:</strong> 如果回收站中文件过多，可能会影响 Samba 的性能。建议定期清理回收站。</li><li><strong>删除</strong>: 回收站中的文件，是真正被删除。</li><li><strong>与版本控制的区别:</strong> <code>vfs_recycle</code> 模块只是一个简单的回收站功能，它不能像 Git、SVN 那样进行细粒度的版本控制（记录每次修改、回滚到特定版本等）。它只能恢复被删除的文件，而不能恢复文件的历史版本（除非启用了 <code>recycle:versions</code> 并且文件名相同）。</li><li><strong>客户端兼容性</strong>: 通过smb删除的文件才会进入回收站，直接在服务器上通过<code>rm</code>等命令删除，不会进入回收站。</li></ul><p><strong>4. 使用方法</strong></p><p>配置完成后，用户通过 Samba 客户端删除文件时，文件会自动进入回收站。管理员可以通过以下方式管理回收站：</p><ul><li><strong>直接访问回收站目录:</strong> 回收站目录通常位于共享目录的根目录下（如果使用相对路径）或指定的绝对路径下。管理员可以直接访问该目录来查看、恢复或删除回收站中的文件。</li><li><strong>使用命令行工具:</strong> 可以编写脚本，定期清理回收站中超过保留时间的文件。</li></ul><p>通过合理配置 <code>vfs_recycle</code> 模块，你可以为 Samba 共享提供一个简单有效的回收站功能，防止用户误删除文件，提高数据安全性。</p><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业级VPN搭建方案对比与指导</title>
      <link href="/2025/03/17/vpn-ee-build/"/>
      <url>/2025/03/17/vpn-ee-build/</url>
      
        <content type="html"><![CDATA[<h2 id="技术选型">技术选型</h2><ul><li><p><strong>SoftEther VPN:</strong></p><ul><li><strong>服务端:</strong> SoftEther VPN Server</li><li><strong>客户端:</strong> SoftEther VPN Client (官方提供，跨平台), 或者其他兼容的 VPN 客户端 (如 OpenVPN 客户端, 系统内置的 L2TP/IPsec 客户端等)</li></ul></li><li><p><strong>OpenVPN Access Server:</strong></p><ul><li><strong>服务端:</strong> OpenVPN Access Server</li><li><strong>客户端:</strong> OpenVPN Connect (官方提供，跨平台), 或者其他兼容的 OpenVPN 客户端</li></ul></li><li><p><strong>WireGuard (通过 Algo 或 wg-easy):</strong></p><ul><li><strong>服务端:</strong> Algo 或 wg-easy 部署的 WireGuard 服务</li><li><strong>客户端:</strong> WireGuard 官方客户端 (跨平台)</li></ul></li><li><p><strong>Pritunl:</strong></p><ul><li><strong>服务端:</strong> Pritunl Server</li><li><strong>客户端:</strong> Pritunl Client (官方提供，跨平台), 或者其他兼容的 OpenVPN 客户端.</li></ul></li></ul><h2 id="方案选择">方案选择</h2><p>选择 wg-easy + WireGuard？**</p><ul><li><strong>简单性:</strong> WireGuard 的配置非常简洁，而 wg-easy 进一步简化了部署和管理过程，提供了图形化界面。</li><li><strong>速度:</strong> WireGuard 以其卓越的性能而闻名，比 OpenVPN 和 IPsec 更快。</li><li><strong>安全性:</strong> WireGuard 使用最先进的加密技术，并且代码库非常小，易于审计。</li><li><strong>未来趋势:</strong> WireGuard 正在迅速成为 VPN 协议的新标准，许多大型公司和项目都在采用它。</li><li><strong>Docker部署:</strong> 方便部署、更新和迁移。</li></ul><p><strong>详细搭建步骤：</strong></p><p><strong>1. 准备工作</strong></p><ul><li><strong>服务器：</strong><ul><li>一台具有公网 IP 地址的服务器（VPS 或 独立服务器）。</li><li>操作系统：推荐使用 Linux 发行版（如 Ubuntu Server、Debian、CentOS）。</li><li>服务器需要开放 UDP 51820 端口 (WireGuard 默认端口) 和 TCP 51821 端口 (wg-easy Web UI 端口).  如果你使用云服务商, 需要在安全组/防火墙规则中放行这两个端口.</li></ul></li><li><strong>域名 (可选，强烈推荐)：</strong><ul><li>一个域名，例如 <code>vpn.yourcompany.com</code>。</li><li>将域名解析到您的服务器公网 IP 地址。</li></ul></li><li><strong>本地环境：</strong><ul><li>安装了 Docker 和 Docker Compose 的电脑（用于管理服务器上的 wg-easy 容器）。</li></ul></li></ul><p><strong>2. 服务器端部署 (使用 wg-easy)</strong></p><ul><li><p><strong>SSH 连接到您的服务器。</strong></p></li><li><p><strong>安装 Docker 和 Docker Compose：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install docker.io docker-compose -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y yum-utils</span><br><span class="line"><span class="built_in">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="built_in">sudo</span> yum install docker-ce docker-ce-cli containerd.io -y</span><br><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br><span class="line"><span class="built_in">sudo</span> curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose  <span class="comment">#注意, 这个版本号可能会过时, 请去 https://github.com/docker/compose/releases/ 确认最新版本.</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p><strong>创建 <code>docker-compose.yml</code> 文件：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano docker-compose.yml</span><br></pre></td></tr></table></figure><p>将以下内容复制到文件中，并根据您的实际情况修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">wg-easy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">weejewel/wg-easy</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">wg-easy</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYS_MODULE</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WG_HOST=your_server_public_ip_or_domain</span>  <span class="comment"># 替换为你的服务器公网 IP 或域名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PASSWORD=your_web_ui_password</span>  <span class="comment"># 替换为 Web UI 的密码，务必设置强密码！</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WG_DEFAULT_ADDRESS=10.8.0.x</span>  <span class="comment"># VPN 客户端的 IP 地址段，不要与内网 IP 冲突</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WG_DEFAULT_DNS=1.1.1.1</span>  <span class="comment"># 默认 DNS 服务器，可以改为内网 DNS 或其他公共 DNS</span></span><br><span class="line">      <span class="comment"># 其他可选环境变量（可选）：</span></span><br><span class="line">      <span class="comment"># - WG_PORT=51820  # WireGuard 监听端口，默认为 51820</span></span><br><span class="line">      <span class="comment"># - WG_ALLOWED_IPS=0.0.0.0/0  # 允许连接的客户端 IP 范围，默认为所有 IP</span></span><br><span class="line">      <span class="comment"># - WG_MTU=1420  # MTU 值，通常不需要修改</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./wg-data:/etc/wireguard</span>  <span class="comment"># 将 WireGuard 配置持久化到宿主机的 ./wg-data 目录</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;51820:51820/udp&quot;</span>  <span class="comment"># WireGuard 端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;51821:51821/tcp&quot;</span>  <span class="comment"># wg-easy Web UI 端口</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">sysctls:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net.ipv4.ip_forward=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net.ipv4.conf.all.src_valid_mark=1</span></span><br></pre></td></tr></table></figure></li><li><p><strong>启动 wg-easy 容器：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li><li><p><strong>确认容器正在运行：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>应该能看到名为 <code>wg-easy</code> 的容器正在运行。</p></li></ul><p><strong>3. 配置 wg-easy Web UI</strong></p><ul><li><strong>在浏览器中访问 <code>http://your_server_ip:51821</code> 或 <code>http://your_domain:51821</code>。</strong></li><li><strong>使用您在 <code>docker-compose.yml</code> 文件中设置的密码登录。</strong></li><li><strong>在 Web UI 中创建客户端配置：</strong><ul><li>点击 “New” 按钮。</li><li>输入客户端名称（例如 “user1”）。</li><li>点击 “Create” 按钮。</li><li>点击新创建的客户端旁边的下载按钮，下载 <code>.conf</code> 配置文件。  或者点击二维码图标, 用手机客户端扫描二维码.</li></ul></li></ul><p><strong>4. 客户端配置</strong></p><ul><li><p><strong>下载并安装 WireGuard 客户端：</strong></p><ul><li><strong>Windows、macOS、Android、iOS：</strong> 从 WireGuard 官网下载并安装相应的客户端：<a href="https://www.wireguard.com/install/">https://www.wireguard.com/install/</a></li><li><strong>Linux:</strong> 使用包管理器安装：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line"><span class="built_in">sudo</span> apt install wireguard</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line"><span class="built_in">sudo</span> yum install epel-release</span><br><span class="line"><span class="built_in">sudo</span> yum install wireguard-tools</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>导入客户端配置文件：</strong></p><ul><li><strong>Windows、macOS、Android、iOS：</strong> 打开 WireGuard 客户端，点击 “Import tunnel(s) from file”，选择您从 wg-easy Web UI 下载的 <code>.conf</code> 文件。</li><li><strong>Linux:</strong> 将 <code>.conf</code> 文件复制到 <code>/etc/wireguard/</code> 目录，并重命名为 <code>wg0.conf</code> (或其他您喜欢的名称, 例如<code>client1.conf</code>)：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> user1.conf /etc/wireguard/wg0.conf</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>连接 VPN：</strong></p><ul><li><strong>Windows、macOS、Android、iOS：</strong> 在 WireGuard 客户端中，点击您导入的配置文件的 “Activate” 或 “Connect” 按钮。</li><li><strong>Linux:</strong> 使用 <code>wg-quick</code> 命令启动 VPN 连接：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> wg-quick up wg0  <span class="comment"># wg0 是您的配置文件名（不带 .conf）</span></span><br><span class="line"><span class="comment"># 断开连接：</span></span><br><span class="line"><span class="built_in">sudo</span> wg-quick down wg0</span><br><span class="line"> <span class="comment">#设置开机自启</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> wg-quick@wg0</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>5. 测试连接</strong></p><ul><li>连接 VPN 后，访问一个可以显示您 IP 地址的网站（例如 <a href="https://www.whatismyip.com/">https://www.whatismyip.com/</a>），确认您的 IP 地址已变为服务器的公网 IP 地址。</li><li>尝试访问您内网的资源，确认可以正常访问。</li></ul><p><strong>后续维护：</strong></p><ul><li><strong>添加新用户：</strong> 在 wg-easy Web UI 中创建新的客户端配置即可。</li><li><strong>撤销用户：</strong> 在 wg-easy Web UI 中删除相应的客户端配置。</li><li><strong>更新 wg-easy：</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose pull</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li><li><strong>查看 WireGuard 状态:</strong> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> wg show</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用rsync同步备份NAS中的文件到其他NSA服务器</title>
      <link href="/2025/03/11/rsync-nas-backup/"/>
      <url>/2025/03/11/rsync-nas-backup/</url>
      
        <content type="html"><![CDATA[<h1>使用rsync同步备份NAS中的文件到其他NSA服务器</h1><h2 id="rsync简介">rsync简介</h2><p><code>rsync</code> 是一个快速、通用且极其强大的文件复制工具，主要用于 Unix-like 系统（包括 Linux、macOS）。它也可以在 Windows 上通过 Cygwin、WSL 或本地移植版本使用。 <code>rsync</code> 不仅可以进行本地复制，还可以通过网络（通常使用 SSH）进行远程复制。</p><p><strong>rsync 的主要优点：</strong></p><ul><li><strong>增量传输（Delta Transfer）：</strong> <code>rsync</code> 最显著的特点是它的增量传输算法。它只复制源文件和目标文件之间不同的部分，而不是复制整个文件。这使得 <code>rsync</code> 在同步大型文件或目录时非常高效，尤其是在网络带宽有限的情况下。</li><li><strong>速度快：</strong> 由于只传输差异部分，<code>rsync</code> 通常比其他复制工具（如 <code>scp</code>）快得多，尤其是在进行重复同步时。</li><li><strong>灵活：</strong> <code>rsync</code> 提供了大量的选项，可以对复制过程进行精细控制。例如，你可以：<ul><li>保留文件权限、所有者、组、时间戳等属性。</li><li>排除/包含特定文件或目录。</li><li>限制带宽使用。</li><li>删除目标目录中存在但源目录中不存在的文件（同步删除）。</li><li>创建备份（保留已删除或修改文件的旧版本）。</li><li>使用 SSH 进行加密传输。</li></ul></li><li><strong>可靠：</strong> <code>rsync</code> 经过了广泛的测试，非常稳定。它还支持断点续传，可以在传输中断后继续。</li><li><strong>用途广泛：</strong> <code>rsync</code> 不仅可以用于备份，还可以用于：<ul><li>网站镜像。</li><li>文件同步。</li><li>软件部署。</li><li>系统迁移。</li></ul></li></ul><p><strong>rsync 的基本语法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync [options] <span class="built_in">source</span> destination</span><br></pre></td></tr></table></figure><ul><li><strong><code>options</code>：</strong>  <code>rsync</code> 的选项（例如 <code>-a</code>、<code>-v</code>、<code>-z</code>、<code>--delete</code> 等）。</li><li><strong><code>source</code>：</strong>  源文件或目录。</li><li><strong><code>destination</code>：</strong> 目标文件或目录。</li></ul><p><strong>常用选项：</strong></p><ul><li><code>-a</code>：归档模式，等效于 <code>-rlptgoD</code>，保留文件的各种属性。</li><li><code>-v</code>：详细模式，显示传输的文件名。</li><li><code>-z</code>：压缩传输的数据。</li><li><code>-h</code>：以人类可读的格式显示数字（例如，1K、234M、2G）。</li><li><code>--progress</code>：显示传输进度。</li><li><code>--delete</code>：删除目标目录中存在但源目录中不存在的文件（谨慎使用！）。</li><li><code>-e ssh</code>：使用 SSH 进行加密传输。</li><li><code>--exclude=PATTERN</code>：排除匹配 <code>PATTERN</code> 的文件或目录。</li><li><code>--include=PATTERN</code>：包含匹配 <code>PATTERN</code> 的文件或目录（通常与 <code>--exclude='*'</code> 一起使用）。</li><li><code>--bwlimit=RATE</code>：限制带宽使用（速率单位为 KB/s）。</li><li><code>--partial</code> : 保留部分传输文件, 用于断点续传。</li><li><code>--dry-run</code> 或 <code>-n</code>：模拟运行，不实际传输文件。</li></ul><p><strong>本地复制示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avzh --progress /path/to/source/ /path/to/destination/</span><br></pre></td></tr></table></figure><p><strong>远程复制示例 (使用 SSH)：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --progress -e ssh user@remote_host:/path/to/source/ /path/to/destination/</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">rsync -avz --progress -e ssh /path/to/source/ user@remote_host:/path/to/destination/</span><br></pre></td></tr></table></figure><h3 id="2-使用-rsync-备份数据到另一-NAS-服务器实现步骤">2. 使用 rsync 备份数据到另一 NAS 服务器实现步骤</h3><p><strong>假设：</strong></p><ul><li>源 NAS 的 IP 地址是 <code>192.168.1.10</code>，用户名是 <code>admin</code>。</li><li>目标 NAS 的 IP 地址是 <code>192.168.1.20</code>，用户名是 <code>backupuser</code>。</li><li>要备份的源目录是 <code>/volume1/data</code>。</li><li>目标目录是 <code>/volume1/backups/data_backup</code>。</li><li>你已经在源 NAS 或目标 NAS 上（或任何可以访问这两个 NAS 的机器上）安装了 <code>rsync</code>。</li><li>你已经配置好了 SSH 免密登录.</li></ul><p><strong>步骤：</strong></p><ol><li><p><strong>（强烈建议）设置 SSH 免密码登录：</strong></p><p>为了避免每次运行 <code>rsync</code> 都需要输入密码，建议设置 SSH 密钥认证。这样可以实现自动化备份，而无需人工干预。</p><ul><li><strong>在要运行 <code>rsync</code> 命令的机器上（例如，你的源 NAS）生成 SSH 密钥对：</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096  <span class="comment"># 生成 4096 位 RSA 密钥对</span></span><br><span class="line"><span class="comment"># 一路回车，使用默认设置即可。</span></span><br></pre></td></tr></table></figure></li><li><strong>将公钥复制到目标 NAS：</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id backupuser@192.168.1.20</span><br><span class="line"><span class="comment"># 输入目标 NAS 上 backupuser 的密码</span></span><br></pre></td></tr></table></figure>如果<code>ssh-copy-id</code>命令不存在, 可以手动复制</li></ul>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub | ssh backupuser@192.168.1.20 <span class="string">&#x27;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><strong>测试免密码登录：</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh backupuser@192.168.1.20</span><br></pre></td></tr></table></figure>如果能直接登录到目标 NAS，而无需输入密码，则说明配置成功。</li></ul></li><li><p><strong>测试 <code>rsync</code> 命令 (使用 <code>--dry-run</code>):</strong></p><p>在实际运行 <code>rsync</code> 之前，强烈建议使用 <code>--dry-run</code>（或 <code>-n</code>）选项进行测试，以确保命令按预期工作，并且不会意外删除文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rsync -avzhn --progress -e ssh \</span><br><span class="line">    admin@192.168.1.10:/volume1/data/ \</span><br><span class="line">    backupuser@192.168.1.20:/volume1/backups/data_backup/</span><br></pre></td></tr></table></figure><p>仔细检查输出，看看哪些文件将被传输（或删除，如果你使用了 <code>--delete</code>）。</p></li><li><p><strong>运行 <code>rsync</code> 命令 (进行实际备份):</strong></p><p>一旦你确信 <code>--dry-run</code> 的输出是正确的，就可以去掉 <code>-n</code> 选项，进行实际的备份：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --progress -e ssh \</span><br><span class="line">    admin@192.168.1.10:/volume1/data/ \</span><br><span class="line">    backupuser@192.168.1.20:/volume1/backups/data_backup/</span><br></pre></td></tr></table></figure></li></ol><p>或者, 保留删除的文件 (推荐)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --progress --delete -e ssh \</span><br><span class="line">  admin@192.168.1.10:/volume1/data/ \</span><br><span class="line">  backupuser@192.168.1.20:/volume1/backups/data_backup/</span><br></pre></td></tr></table></figure></p><ol start="4"><li><strong>检查备份</strong><br>在目标NAS检查备份文件是否存在, 数据是否完整</li></ol><h3 id="3-编写备份脚本">3. 编写备份脚本</h3><p>为了方便起见，可以将 <code>rsync</code> 命令放入一个脚本中，并使用 <code>cron</code> 定时运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- Configuration ---</span></span><br><span class="line"><span class="built_in">timeout</span>=60</span><br><span class="line">source_user=<span class="string">&quot;nas&quot;</span></span><br><span class="line">source_ip=<span class="string">&quot;192.168.10.96&quot;</span></span><br><span class="line">source_dir=<span class="string">&quot;/volume1/shared/&quot;</span></span><br><span class="line">dest_user=<span class="string">&quot;nas&quot;</span></span><br><span class="line">dest_ip=<span class="string">&quot;192.168.10.97&quot;</span></span><br><span class="line">dest_dir=<span class="string">&quot;/volume1/shared/backup/&quot;</span></span><br><span class="line"><span class="comment"># ---  DO NOT STORE PASSWORDS LIKE THIS! ---</span></span><br><span class="line">source_password=<span class="string">&quot;111&quot;</span>  <span class="comment"># TERRIBLE!  DO NOT DO THIS!</span></span><br><span class="line">dest_password=<span class="string">&quot;111&quot;</span>    <span class="comment"># TERRIBLE!  DO NOT DO THIS!</span></span><br><span class="line"><span class="comment"># ---  ----------------------------------------</span></span><br><span class="line">log_file=<span class="string">&quot;/var/log/rsync_backup.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- Functions ---</span></span><br><span class="line"><span class="function"><span class="title">log_message</span></span>() &#123;</span><br><span class="line">    now=$(<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$now</span> - <span class="variable">$1</span>&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- The rsync command ---</span></span><br><span class="line">rsync_cmd=<span class="string">&quot;rsync -avz --progress --delete -e ssh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- Main Script ---</span></span><br><span class="line">log_message <span class="string">&quot;Backup started.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run rsync with sshpass, using passwords on the command line.  VERY INSECURE!</span></span><br><span class="line"><span class="keyword">if</span> ! sshpass -p <span class="string">&quot;<span class="variable">$source_password</span>&quot;</span> sh -c <span class="string">&#x27;sshpass -p &quot;&#x27;</span><span class="string">&quot;<span class="variable">$dest_password</span>&quot;</span><span class="string">&#x27;&quot; &#x27;</span><span class="string">&quot;<span class="variable">$rsync_cmd</span>&quot;</span><span class="string">&#x27; &#x27;</span><span class="string">&quot;<span class="variable">$source_user</span>@<span class="variable">$source_ip</span>:<span class="variable">$source_dir</span>&quot;</span><span class="string">&#x27; &#x27;</span><span class="string">&quot;<span class="variable">$dest_user</span>@<span class="variable">$dest_ip</span>:<span class="variable">$dest_dir</span>&quot;</span> 2&gt;&amp;1 | <span class="built_in">tee</span> -a <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span> ; <span class="keyword">then</span></span><br><span class="line">    log_message <span class="string">&quot;Backup failed (ssh or rsync error)!&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">log_message <span class="string">&quot;Backup successful.&quot;</span>  <span class="comment"># Only reached if the previous command succeeds</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p><strong>使用脚本：</strong></p><ol><li><strong>保存脚本:</strong>  将上述脚本保存为一个文件，例如 <code>backup.sh</code>。</li><li><strong>赋予执行权限:</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x backup.sh</span><br></pre></td></tr></table></figure></li><li><strong>测试脚本:</strong>  手动运行脚本，确保它能正常工作：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./backup.sh</span><br></pre></td></tr></table></figure></li><li><strong>设置定时任务 (使用 <code>cron</code>):</strong><ul><li>运行 <code>crontab -e</code> 命令来编辑 <code>crontab</code> 文件。</li><li>添加一行来指定何时运行你的脚本。 例如，每天凌晨 2 点运行：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 2 * * * /path/to/your/backup.sh</span><br></pre></td></tr></table></figure></li><li>保存并关闭 <code>crontab</code> 文件。</li></ul></li></ol><h2 id="安装第三方库">安装第三方库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install expect</span><br></pre></td></tr></table></figure><h2 id="其他">其他</h2><ul><li>rdiff-backup：</li><li>Bacula：</li><li>Amanda：</li><li>Duplicity：</li><li>BorgBackup (Borg)：</li><li>Restic:</li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> rsync </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Samba (Linux) + Syslog + Logstash + Elasticsearch 转发smb日志</title>
      <link href="/2025/03/10/smb-elk-log/"/>
      <url>/2025/03/10/smb-elk-log/</url>
      
        <content type="html"><![CDATA[<h2 id="方案简介">方案简介</h2><blockquote><p>Elasticsearch 集群部署: 为了高可用性和可扩展性，可以将 Elasticsearch 部署为集群。</p></blockquote><blockquote><p>Logstash 管道优化: 根据日志量和复杂度，调整 Logstash 的 worker 数量、批处理大小等参数。</p></blockquote><blockquote><p>索引生命周期管理 (ILM): 使用 ILM 策略自动管理 Elasticsearch 索引（例如，定期滚动、删除旧索引）。</p></blockquote><blockquote><p>安全性: 启用 Elasticsearch 和 Kibana 的安全认证（用户名/密码、TLS/SSL）。<br>监控: 监控 ELK Stack 的性能和健康状态. 可以使用 Elastic Stack Monitoring 功能, 或者 Prometheus + Grafana.</p></blockquote><h2 id="安装使用">安装使用</h2><ul><li><p><strong>安装 Docker 和 Docker Compose:</strong></p><ul><li><p><strong>Ubuntu:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | <span class="built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure></li><li><p><strong>CentOS/RHEL:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y yum-utils</span><br><span class="line"><span class="built_in">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="built_in">sudo</span> yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure></li><li><p><strong>验证安装:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br><span class="line">docker compose version</span><br></pre></td></tr></table></figure></li></ul></li><li><p>** 增加 Docker 用户到 <code>docker</code> 组:**  避免每次都使用 <code>sudo</code>.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">newgrp docker <span class="comment"># 或者注销并重新登录</span></span><br></pre></td></tr></table></figure></li><li><p><strong>创建工作目录:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> elk-smb</span><br><span class="line"><span class="built_in">cd</span> elk-smb</span><br></pre></td></tr></table></figure></li></ul><p><strong>2. 创建 Docker Compose 文件 (docker-compose.yml):</strong></p><p>在 <code>elk-smb</code> 目录下创建 <code>docker-compose.yml</code> 文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:8.10.4</span>  <span class="comment"># 使用指定版本</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span>  <span class="comment"># 单节点模式</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ES_JAVA_OPTS=-Xms1g</span> <span class="string">-Xmx1g</span>  <span class="comment"># 设置 JVM 内存 (根据需要调整)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">xpack.security.enabled=false</span> <span class="comment">#禁用xpack</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esdata:/usr/share/elasticsearch/data</span>  <span class="comment"># 数据持久化</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9300:9300&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elk</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/logstash/logstash:8.10.4</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">logstash</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logstash/pipeline/:/usr/share/logstash/pipeline/</span>  <span class="comment"># 挂载 Logstash 管道配置</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5044:5044&quot;</span>  <span class="comment"># Beats input</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;514:514/udp&quot;</span>  <span class="comment"># Syslog input (UDP)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;514:514/tcp&quot;</span> <span class="comment"># Syslog input (TCP)</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">LS_JAVA_OPTS:</span> <span class="string">&quot;-Xmx256m -Xms256m&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elk</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/kibana/kibana:8.10.4</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ELASTICSEARCH_URL:</span> <span class="string">&quot;http://elasticsearch:9200&quot;</span> <span class="comment"># 通过服务名访问 Elasticsearch</span></span><br><span class="line">      <span class="comment">#ELASTICSEARCH_HOSTS: &quot;http://elasticsearch:9200&quot; #8.x 之后使用 ELASTICSEARCH_URL</span></span><br><span class="line">      <span class="comment"># 如果启用了 Elasticsearch 安全特性，需要配置用户名和密码</span></span><br><span class="line">      <span class="comment">#ELASTICSEARCH_USERNAME: &quot;elastic&quot;</span></span><br><span class="line">      <span class="comment">#ELASTICSEARCH_PASSWORD: &quot;changeme&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elk</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">esdata:</span>  <span class="comment"># 定义 Elasticsearch 数据卷</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">elk:</span>  <span class="comment"># 定义网络</span></span><br></pre></td></tr></table></figure><p><strong>3. 创建 Logstash 管道配置:</strong></p><p>在 <code>elk-smb</code> 目录下创建 <code>logstash/pipeline</code> 目录，并在其中创建 Logstash 管道配置文件 <code>smb-pipeline.conf</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"># logstash/pipeline/smb-pipeline.conf</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  # 从 Beats 接收数据 (例如 Winlogbeat)</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">    type =&gt; &quot;windows-eventlog&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # 从 Syslog 接收数据 (例如 Samba)</span><br><span class="line">  syslog &#123;</span><br><span class="line">    port =&gt; 514</span><br><span class="line">    type =&gt; &quot;samba-syslog&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  # Windows 事件日志处理 (示例)</span><br><span class="line">  if [type] == &quot;windows-eventlog&quot; &#123;</span><br><span class="line">        if [event][code] == 5140 &#123;</span><br><span class="line">             xml &#123;</span><br><span class="line">                source =&gt; &quot;[event][provider_data][data]&quot;</span><br><span class="line">                target =&gt; &quot;event_data&quot;</span><br><span class="line">                xpath =&gt; [</span><br><span class="line">                    &quot;/Event/EventData/Data[@Name=&#x27;SubjectUserSid&#x27;]/text()&quot;, &quot;SubjectUserSid&quot;,</span><br><span class="line">                    &quot;/Event/EventData/Data[@Name=&#x27;SubjectUserName&#x27;]/text()&quot;, &quot;SubjectUserName&quot;,</span><br><span class="line">                    &quot;/Event/EventData/Data[@Name=&#x27;SubjectDomainName&#x27;]/text()&quot;, &quot;SubjectDomainName&quot;,</span><br><span class="line">                    &quot;/Event/EventData/Data[@Name=&#x27;SubjectLogonId&#x27;]/text()&quot;, &quot;SubjectLogonId&quot;,</span><br><span class="line">                     &quot;/Event/EventData/Data[@Name=&#x27;ShareName&#x27;]/text()&quot;, &quot;ShareName&quot;,</span><br><span class="line">                    &quot;/Event/EventData/Data[@Name=&#x27;ShareLocalPath&#x27;]/text()&quot;, &quot;ShareLocalPath&quot;,</span><br><span class="line">                    &quot;/Event/EventData/Data[@Name=&#x27;ClientAddress&#x27;]/text()&quot;, &quot;[client][ip]&quot;,  # 客户端 IP</span><br><span class="line">                    &quot;/Event/EventData/Data[@Name=&#x27;ClientName&#x27;]/text()&quot;,&quot;ClientName&quot;</span><br><span class="line">                   ]</span><br><span class="line">                remove_field =&gt; [&quot;[event][provider_data][data]&quot;]</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              # 提取客户端 IP</span><br><span class="line">                mutate &#123;</span><br><span class="line">                  rename =&gt; &#123; &quot;[event_data][ClientAddress]&quot; =&gt; &quot;[client][ip]&quot; &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    # ... 其他 Windows 事件日志处理 ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # Samba 日志处理 (示例)</span><br><span class="line">  if [type] == &quot;samba-syslog&quot; &#123;</span><br><span class="line">        grok &#123;</span><br><span class="line">        match =&gt; &#123; &quot;message&quot; =&gt; [</span><br><span class="line">          # 匹配常见的 Samba 日志格式 (根据实际情况调整)</span><br><span class="line">          &quot;%&#123;SYSLOGTIMESTAMP:syslog_timestamp&#125; %&#123;SYSLOGHOST:syslog_hostname&#125; smbd\[%&#123;POSINT:pid&#125;\]: \[%&#123;YEAR:year&#125;/%&#123;MONTHNUM:month&#125;/%&#123;MONTHDAY:day&#125; %&#123;TIME:time&#125;\] %&#123;WORD:smb_client&#125; \(%&#123;IPORHOST:client_ip&#125;\) %&#123;WORD:smb_action&#125; %&#123;GREEDYDATA:smb_path&#125;&quot;,</span><br><span class="line">          # 另一种常见的格式</span><br><span class="line">          &quot;%&#123;SYSLOGTIMESTAMP:syslog_timestamp&#125; %&#123;SYSLOGHOST:syslog_hostname&#125; smbd_audit: %&#123;USER:username&#125;\|%&#123;IP:client_ip&#125;\|%&#123;HOSTNAME:client_hostname&#125;\|%&#123;GREEDYDATA:share_name&#125;\|%&#123;WORD:operation&#125;\|%&#123;GREEDYDATA:file_path&#125;&quot;,</span><br><span class="line">          # 更多匹配规则...</span><br><span class="line">          &quot;%&#123;GREEDYDATA:message&#125;&quot; # 最后的匹配规则捕获所有内容</span><br><span class="line">         ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">       mutate &#123;</span><br><span class="line">         add_field =&gt; &#123; &quot;[client][ip]&quot; =&gt; &quot;%&#123;client_ip&#125;&quot; &#125;</span><br><span class="line">         remove_field =&gt; [ &quot;client_ip&quot; ]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      date &#123;</span><br><span class="line">        match =&gt; [ &quot;syslog_timestamp&quot;, &quot;MMM  d HH:mm:ss&quot;, &quot;MMM dd HH:mm:ss&quot;, &quot;ISO8601&quot; ]</span><br><span class="line">        target =&gt; &quot;@timestamp&quot;</span><br><span class="line">        remove_field =&gt; [&quot;syslog_timestamp&quot;]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;http://elasticsearch:9200&quot;] # 使用服务名访问 Elasticsearch</span><br><span class="line">    index =&gt; &quot;smb-audit-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">     #user =&gt; &quot;elastic&quot;  # 如果启用了安全认证</span><br><span class="line">     #password =&gt; &quot;changeme&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125; # 用于调试</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>这个配置文件同时处理来自 Beats (Windows Event Log) 和 Syslog (Samba) 的输入.</li><li>Windows 部分, 使用 <code>xml</code> 插件解析事件日志的 XML 数据.</li><li>Samba 部分, 使用 <code>grok</code> 插件解析日志.  你需要根据实际的 Samba 日志格式调整 <code>grok</code> 表达式.</li><li><code>mutate</code> 用于重命名字段, 添加字段等.</li><li><code>date</code> 用于解析时间戳.</li></ul><ul><li>代理服务器查询</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl show --property=Environment docker</span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br><span class="line"><span class="comment"># docker config 文件目录</span></span><br><span class="line">/etc/systemd/system/docker.service.d/</span><br><span class="line">/etc/default/docker</span><br><span class="line">/etc/sysconfig/docker</span><br></pre></td></tr></table></figure><p><strong>4. 启动 ELK Stack:</strong></p><p>在 <code>elk-smb</code> 目录下，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker compose up -d</span></span><br><span class="line"><span class="built_in">sudo</span> docker-compose up -d </span><br></pre></td></tr></table></figure><p>这将启动 Elasticsearch、Logstash 和 Kibana 容器。<code>-d</code> 选项表示在后台运行。</p><p><strong>5. 验证安装:</strong></p><ul><li><p><strong>Elasticsearch:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9200</span><br></pre></td></tr></table></figure></li></ul><ul><li>返回结果</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;800c9626c439&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;docker-cluster&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;2MXalfBNSGGwktsjV8R-eQ&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;number&quot;</span> : <span class="string">&quot;8.10.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_flavor&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_type&quot;</span> : <span class="string">&quot;docker&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_hash&quot;</span> : <span class="string">&quot;b4a62ac808e886ff032700c391f45f1408b2538c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_date&quot;</span> : <span class="string">&quot;2023-10-11T22:04:35.506990650Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_snapshot&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;lucene_version&quot;</span> : <span class="string">&quot;9.7.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="string">&quot;7.17.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_index_compatibility_version&quot;</span> : <span class="string">&quot;7.0.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;tagline&quot;</span> : <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>应该会看到 JSON 响应，表明 Elasticsearch 正在运行。</code></pre><ul><li><p><strong>Kibana:</strong></p><p>在浏览器中访问 <code>http://localhost:5601</code>，应该能看到 Kibana 的界面。</p></li><li><p><strong>Logstash:</strong><br>Logstash 启动后会监听 5044 (Beats) 和 514 (Syslog) 端口. 可以通过查看 Logstash 的日志来确认:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs logstash</span><br></pre></td></tr></table></figure></li></ul><p><strong>6. 配置数据源 (Samba 和 Windows):</strong></p><ul><li><p><strong>Samba (Linux):</strong></p><ol><li>配置 Samba (<code>/etc/samba/smb.conf</code>) 以将日志发送到 Syslog（如前所述）：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line">   log <span class="attr">level</span> = <span class="number">3</span></span><br><span class="line">   syslog <span class="attr">only</span> = <span class="literal">yes</span></span><br><span class="line">   <span class="attr">syslog</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure></li><li>配置 rsyslog 或 syslog-ng 将 Samba 的日志转发到 Logstash 容器的 IP 地址和端口 514。 (如果 Logstash 和 Samba 在同一台机器, 可以用 <code>127.0.0.1</code>, 否则用 Logstash 所在机器的 IP).  rsyslog 配置示例 (<code>/etc/rsyslog.conf</code> 或 <code>/etc/rsyslog.d/50-default.conf</code>):<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local7.* @&lt;Logstash 容器 IP&gt;:514  # UDP</span><br></pre></td></tr></table></figure></li><li>重启 Samba 和 rsyslog：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart smbd</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart rsyslog</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>Windows Server:</strong></p><ol><li>配置 Windows 审核策略（如前所述）。</li><li>安装和配置 Winlogbeat（如前所述），将 <code>output.logstash.hosts</code> 设置为 Logstash 容器的 IP 地址和端口 5044。  Winlogbeat 配置示例 (<code>winlogbeat.yml</code>):</li></ol>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output.logstash:</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;&lt;Logstash 容器 IP&gt;:5044&quot;</span>]</span><br></pre></td></tr></table></figure><ul><li>获取 Logstash 容器的 IP: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f &#x27;&#123;&#123;range.NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; logstash</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>启动 Winlogbeat 服务。</li></ol></li></ul><p><strong>7. 在 Kibana 中查看日志:</strong></p><ol><li><p>在 Kibana 中创建 Index Pattern (索引模式)：</p><ul><li>首次访问 Kibana 时，它会提示您创建 Index Pattern。</li><li>在 Management -&gt; Stack Management -&gt; Index Patterns 中创建。</li><li>Index Pattern 名称：<code>smb-audit-*</code> (与 Logstash 配置中的 <code>index</code> 匹配)。</li><li>时间筛选字段：<code>@timestamp</code></li></ul></li><li><p>在 Discover 中查看日志：</p><ul><li>选择 <code>smb-audit-*</code> 索引模式。</li><li>设置时间范围。</li><li>您应该能看到来自 Samba 和 Windows 的 SMB 访问日志。</li></ul></li></ol><p><strong>8. 停止和删除容器:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose down</span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python_spider_introduce</title>
      <link href="/2025/03/04/python-spider-introduce/"/>
      <url>/2025/03/04/python-spider-introduce/</url>
      
        <content type="html"><![CDATA[<h1>Python 数据采集技术及应用场景</h1><p><strong>概要：</strong></p><p>常用 Python 数据采集技术及应用场景的总结。</p><p><strong>常用爬虫编程语言和技术框架：</strong></p><ul><li><strong>Python:</strong> Scrapy, Beautiful Soup, Requests, Selenium</li><li><strong>Java:</strong> Jsoup, HttpClient, WebMagic</li><li><strong>Node.js:</strong> Cheerio, Puppeteer, Axios</li></ul><p><strong>常用技术：</strong></p><ul><li><strong>网络请求:</strong> requests, urllib</li><li><strong>HTML/XML 解析:</strong> Beautiful Soup, lxml, Scrapy</li><li><strong>动态网页爬取:</strong> Selenium, Playwright</li><li><strong>API 接口调用:</strong> requests, 各类 API 客户端库</li><li><strong>数据库操作:</strong> sqlite3, pymysql, psycopg2, mongoengine 等</li><li><strong>多媒体处理:</strong> PIL/Pillow (图片), Librosa (音频), OpenCV (图片/视频), moviepy (视频)</li></ul><h2 id="1-文字数据采集">1. 文字数据采集</h2><p><strong>网页爬虫:</strong></p><ul><li><strong>requests + Beautiful Soup / lxml:</strong> 经典组合，适用于静态网页抓取。</li><li><strong>Scrapy:</strong> 高级爬虫框架，适用于大规模、结构化的网页数据采集。</li><li><strong>Selenium / Playwright:</strong> 模拟浏览器行为，处理 JavaScript 动态加载内容。</li></ul><p><strong>API 接口调用:</strong></p><ul><li><strong>requests:</strong> 发送 HTTP 请求，获取 JSON 或 XML 格式的文本数据。</li></ul><p><strong>文件读取:</strong></p><ul><li>Python 内置文件操作函数 (open(), read(), readlines(), csv, json 模块等)。</li><li><strong>pandas 库:</strong> 高效处理 CSV, Excel 等表格数据。</li></ul><p><strong>数据库操作:</strong></p><ul><li><strong>sqlite3:</strong> (SQLite 数据库)。</li><li><strong>pymysql, psycopg2:</strong> (MySQL, PostgreSQL 数据库)。</li><li><strong>mongoengine, pymongo:</strong> (MongoDB 数据库)。</li></ul><p><strong>OCR:</strong></p><ul><li><strong>pytesseract:</strong> (封装 Tesseract OCR 引擎)。</li><li><strong>云端 OCR API:</strong> (如百度 OCR, 腾讯云 OCR 等)。</li></ul><h2 id="2-图片数据采集">2. 图片数据采集</h2><p><strong>技术:</strong></p><ul><li><strong>requests + Beautiful Soup:</strong> 适用于静态网页的图片链接抓取。<code>requests</code> 用于发起 HTTP 请求，<code>Beautiful Soup</code> 用于解析 HTML，提取图片 URL。</li><li><strong>Scrapy:</strong> 更强大的爬虫框架，适用于大规模图片采集，支持异步处理、自定义中间件等。</li><li><strong>Selenium:</strong> 模拟浏览器行为，适用于动态加载的网页（如 JavaScript 渲染的图片）。</li></ul><p><strong>API 接口:</strong></p><ul><li>许多网站和平台提供 API 接口，可以直接获取图片数据，如 Google Images API, Flickr API, Instagram API 等。使用 <code>requests</code> 库或其他 HTTP 客户端库调用 API。</li></ul><p><strong>图像处理库:</strong></p><ul><li><strong>PIL (Pillow):</strong> 用于打开、操作和保存各种图像文件格式。可以用于图片预处理、格式转换等。</li><li><strong>OpenCV:</strong> 更强大的计算机视觉库，用于图像分析、特征提取、目标检测等。</li></ul><p><strong>OCR（光学字符识别）:</strong></p><ul><li><strong>Tesseract:</strong> 开源 OCR 引擎，可以将图片中的文字转换为文本。</li><li><strong>pytesseract:</strong> Python 封装的 Tesseract 库，方便使用。</li></ul><p><strong>应用场景:</strong></p><ul><li><strong>电商网站商品图片采集:</strong> 抓取商品图片，用于建立商品图库、比价、数据分析等。</li><li><strong>社交媒体图片采集:</strong> 抓取用户头像、照片墙等，用于用户行为分析、内容推荐等。</li><li><strong>新闻网站图片采集:</strong> 抓取新闻配图，用于新闻聚合、内容分析等。</li><li><strong>搜索引擎图片索引:</strong> 抓取网页图片，建立图片索引，提供图片搜索服务。</li><li><strong>医学影像分析:</strong> 采集医学影像数据（如 X 光片、CT 扫描等），用于疾病诊断、辅助治疗等。</li><li><strong>遥感图像分析:</strong> 采集卫星遥感图像，用于土地利用分析、环境监测、灾害评估等。</li><li><strong>艺术品图像采集:</strong> 采集艺术品图片，用于建立数字博物馆、艺术品鉴定等。</li><li><strong>文档数字化:</strong> 将纸质文档扫描或拍照，通过 OCR 技术转换为电子文本。</li><li><strong>验证码识别:</strong> 采集网站验证码图片，使用 OCR 或深度学习模型进行识别。</li></ul><h2 id="3-音频数据采集">3. 音频数据采集</h2><p><strong>技术:</strong></p><p><strong>麦克风录音:</strong></p><ul><li><strong>PyAudio:</strong> Python 库，用于从麦克风或其他音频输入设备录制音频。</li><li><strong>sounddevice:</strong> 跨平台音频 I/O 库，支持录音和播放。</li></ul><p><strong>网络音频流:</strong></p><ul><li><strong>requests:</strong> 可以用于下载在线音频文件（如 MP3、WAV 等）。</li><li><strong>youtube-dl:</strong> 命令行工具，可以下载 YouTube 等视频网站的音频。</li><li><strong>流媒体协议库:</strong> 如 <code>rtsp-lib</code>，用于处理实时流媒体协议（如 RTSP）的音频流。</li></ul><p><strong>API 接口:</strong></p><ul><li>一些音频平台（如 Spotify、SoundCloud）提供 API，可以获取音频数据。</li></ul><p><strong>音频处理库:</strong></p><ul><li><strong>Librosa:</strong> 用于音频和音乐分析的 Python 库，提供特征提取、节奏分析等功能。</li><li><strong>pydub:</strong> 用于音频处理，如剪辑、合并、格式转换等。</li></ul><p><strong>应用场景:</strong></p><ul><li><strong>语音识别:</strong> 采集语音数据，用于语音识别系统训练、语音助手开发等。</li><li><strong>音乐信息检索:</strong> 采集音乐数据，用于音乐识别、音乐推荐、音乐分类等。</li><li><strong>环境声音监测:</strong> 采集环境声音数据，用于噪声污染监测、安全监控等。</li></ul><h2 id="4-视频数据采集">4. 视频数据采集</h2><p><strong>技术:</strong></p><p><strong>网络视频下载:</strong></p><ul><li><strong>requests:</strong> 可以用于下载静态视频文件。</li><li><strong>youtube-dl:</strong> 可以下载 YouTube 等视频网站的视频。</li><li><strong>you-get:</strong> 另一个流行的视频下载工具，支持多个视频网站。</li><li><strong>流媒体协议库:</strong> 如 <code>rtsp-lib</code>，用于处理实时流媒体协议（如 RTSP）的视频流。</li></ul><p><strong>API 接口:</strong></p><ul><li>一些视频平台（如 YouTube、Vimeo）提供 API，可以获取视频数据。</li></ul><p><strong>视频处理库:</strong></p><ul><li><strong>OpenCV:</strong> 用于视频分析、处理、目标跟踪、行为识别等。</li><li><strong>MoviePy:</strong> 用于视频编辑、剪辑、合成等。</li></ul><h2 id="参考：">参考：</h2><ol><li><a href="https://github.com/Pierian-Data/Beautiful-Soup-and-Requests">https://github.com/Pierian-Data/Beautiful-Soup-and-Requests</a></li><li><a href="https://github.com/aditya-sengupta/Web-Scraping-with-Python">https://github.com/aditya-sengupta/Web-Scraping-with-Python</a></li><li><a href="https://github.com/Jack-Cherish/Python-Crawler-Tutorial">https://github.com/Jack-Cherish/Python-Crawler-Tutorial</a></li></ol><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python批量写入图片到excel中</title>
      <link href="/2025/02/28/py-gen-excel/"/>
      <url>/2025/02/28/py-gen-excel/</url>
      
        <content type="html"><![CDATA[<h1>python批量写入图片到excel中</h1><h2 id="技术">技术</h2><p><strong>1. pandas</strong></p><ul><li><p><strong>用途：</strong></p><ul><li>数据分析和处理的核心库，特别是处理表格型数据。</li><li>提供高效、灵活的数据结构，例如 <code>Series</code> (一维数据) 和 <code>DataFrame</code> (二维表格数据)。</li><li>支持数据的读取、写入、清洗、转换、聚合、合并等操作。</li><li>广泛应用于数据科学、金融分析、统计分析、机器学习等领域。</li></ul></li><li><p><strong>特点：</strong></p><ul><li><strong>DataFrame:</strong>  类似电子表格的结构，可以存储各种数据类型 (数值、字符串、日期等)。</li><li><strong>Series:</strong>  带有标签 (索引) 的一维数组，可以看作 DataFrame 的一列。</li><li><strong>数据对齐:</strong>  pandas 自动根据索引进行数据对齐，处理缺失值。</li><li><strong>灵活的索引和选择:</strong>  方便根据标签或位置选择数据。</li><li><strong>分组和聚合:</strong>  可以轻松地对数据进行分组 (groupby) 并进行聚合计算 (sum, mean, count 等)。</li><li><strong>合并和连接:</strong>  支持各种数据合并 (merge) 和连接 (join) 操作。</li><li><strong>时间序列处理:</strong>  专门用于处理时间序列数据的功能。</li><li><strong>文件 I/O:</strong>  可以读取和写入多种格式的文件，例如 CSV, Excel, SQL 数据库等。</li><li><strong>性能优化:</strong>  基于 NumPy 构建，性能较高。</li></ul><p><strong>2. Pillow</strong></p></li><li><p><strong>用途:</strong></p><ul><li>图像处理库，是 Python Imaging Library (PIL) 的一个分支。</li><li>提供图像的打开、保存、修改、创建等功能。</li><li>支持多种图像格式，例如 JPEG, PNG, GIF, TIFF, BMP 等。</li><li>广泛应用于图像编辑、图像分析、计算机视觉等领域。</li></ul></li><li><p><strong>特点:</strong></p><ul><li><strong>图像格式支持:</strong>  支持多种图像格式的读取和写入。</li><li><strong>图像处理操作:</strong>  提供丰富的图像处理操作，例如调整大小、裁剪、旋转、颜色转换、滤波等。</li><li><strong>绘图功能:</strong>  可以在图像上绘制线条、形状、文本等。</li><li><strong>图像序列处理:</strong>  可以处理动画 GIF 和多页 TIFF 文件。</li><li><strong>易于使用:</strong>  API 设计简洁易懂。</li></ul><p><strong>3. openpyxl</strong></p></li><li><p><strong>用途:</strong></p><ul><li>用于读写 Excel (<code>.xlsx</code>) 文件的库。</li><li>可以创建、修改、读取 Excel 文件中的工作簿、工作表、单元格、样式等。</li><li>广泛应用于数据报表生成、数据导出、自动化 Excel 处理等领域。</li></ul></li><li><p><strong>特点:</strong></p><ul><li><strong>支持 Excel 文件格式:</strong>  完全支持 Excel 2010 及更高版本的 <code>.xlsx</code> 文件格式。</li><li><strong>单元格操作:</strong>  可以读写单元格的值、格式、公式等。</li><li><strong>工作表操作:</strong>  可以创建、删除、重命名工作表，设置工作表的属性。</li><li><strong>样式设置:</strong>  可以设置单元格的字体、颜色、对齐方式、边框等样式。</li><li><strong>图表支持:</strong>  可以创建各种图表，例如柱状图、折线图、饼图等。</li><li><strong>易于使用:</strong>  API 设计友好，易于学习和使用。</li></ul></li></ul><h2 id="应用">应用</h2><h3 id="表格图片插入">表格图片插入</h3><ul><li>code</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_image_with_resize</span>(<span class="params">image_path: <span class="built_in">str</span>, cell_width=<span class="number">80.79</span>, cell_height=<span class="number">259.8</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Insert and resize image, handling errors and returning PIL Image.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">        width, height = img.size</span><br><span class="line">        width_ratio = (cell_width * <span class="number">7</span>) / width</span><br><span class="line">        height_ratio = cell_height / height</span><br><span class="line">        ratio = <span class="built_in">min</span>(width_ratio, height_ratio)</span><br><span class="line">        new_width = <span class="built_in">int</span>(width * ratio)  <span class="comment"># Calculate new_width</span></span><br><span class="line">        new_height = <span class="built_in">int</span>(height * ratio)  <span class="comment"># Calculate new_height</span></span><br><span class="line">        img = img.resize((new_width, new_height), Image.LANCZOS)</span><br><span class="line"></span><br><span class="line">        base, ext = os.path.splitext(os.path.basename(image_path))</span><br><span class="line">        temp_img_path = os.path.join(TEMP_DIR, <span class="string">f&quot;temp_<span class="subst">&#123;base&#125;</span>_<span class="subst">&#123;<span class="built_in">hash</span>(image_path)&#125;</span><span class="subst">&#123;ext&#125;</span>&quot;</span>)</span><br><span class="line">        img.save(temp_img_path, optimize=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> img, temp_img_path</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        logger.error(<span class="string">f&quot;Image file not found: <span class="subst">&#123;image_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> (UnidentifiedImageError, OSError) <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;Image format error or corrupted file: <span class="subst">&#123;image_path&#125;</span> - <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.exception(<span class="string">f&quot;Error processing image <span class="subst">&#123;image_path&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="图片数据插入前处理">图片数据插入前处理</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MAX_IMAGE_PIXELS = <span class="number">178956970</span>  <span class="comment"># Define the maximum pixel limit</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rgba_to_rgb_numpy</span>(<span class="params">image, background_color=(<span class="params"><span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span></span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用 NumPy 将 RGBA/LA 图像转换为 RGB 图像，可以指定背景颜色。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> image.mode == <span class="string">&#x27;L&#x27;</span>:  <span class="comment"># 灰度图像</span></span><br><span class="line">            logger.debug(<span class="string">f&quot;Converting grayscale image to RGB.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> image.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> image.mode == <span class="string">&#x27;LA&#x27;</span>:</span><br><span class="line">            logger.debug(<span class="string">f&quot;Converting LA image to RGB (grayscale with alpha).&quot;</span>)</span><br><span class="line">            img_array = np.array(image)</span><br><span class="line">            l_channel = img_array[:, :, <span class="number">0</span>]  <span class="comment"># Luminance channel</span></span><br><span class="line">            alpha_channel = img_array[:, :, <span class="number">1</span>] <span class="comment">#Alpha channel</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Create an RGB image where R=G=B=L</span></span><br><span class="line">            rgb = np.stack([l_channel, l_channel, l_channel], axis=<span class="number">2</span>)  <span class="comment"># Replicate L to R, G, B</span></span><br><span class="line"></span><br><span class="line">            background = np.array(background_color, dtype=np.uint8)</span><br><span class="line">            new_rgb = (rgb * (alpha_channel / <span class="number">255.0</span>)[:, :, <span class="literal">None</span>] + background * (<span class="number">1</span> - (alpha_channel / <span class="number">255.0</span>)[:, :, <span class="literal">None</span>])).astype(np.uint8)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Image.fromarray(new_rgb)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> image.mode == <span class="string">&#x27;RGBA&#x27;</span>:</span><br><span class="line">            logger.debug(<span class="string">f&quot;Converting RGBA image to RGB.&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 强制加载图像数据</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                image.load()  <span class="comment"># 确保图像数据已加载</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logger.error(<span class="string">f&quot;Failed to load image data: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> image  <span class="comment"># 无法加载，直接返回原始图像</span></span><br><span class="line"></span><br><span class="line">            img_array = np.array(image)</span><br><span class="line">            logger.debug(<span class="string">f&quot;Image array shape: <span class="subst">&#123;img_array.shape&#125;</span>, mode: <span class="subst">&#123;image.mode&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(img_array.shape) &lt; <span class="number">3</span>:</span><br><span class="line">                logger.error(<span class="string">f&quot;Image has insufficient dimensions (shape: <span class="subst">&#123;img_array.shape&#125;</span>), skipping conversion.&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> img_array.shape[<span class="number">2</span>] &lt; <span class="number">4</span>:  <span class="comment"># 检查是否有足够的通道</span></span><br><span class="line">                logger.warning(<span class="string">f&quot;Image has only <span class="subst">&#123;img_array.shape[<span class="number">2</span>]&#125;</span> channels, assuming no alpha and skipping conversion.&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> image.convert(<span class="string">&quot;RGB&quot;</span>)  <span class="comment"># 直接转换为RGB，不做alpha混合</span></span><br><span class="line"></span><br><span class="line">            alpha = img_array[:, :, <span class="number">3</span>]  <span class="comment"># Alpha channel</span></span><br><span class="line">            rgb = img_array[:, :, :<span class="number">3</span>]  <span class="comment"># RGB channels</span></span><br><span class="line"></span><br><span class="line">            background = np.array(background_color, dtype=np.uint8)</span><br><span class="line">            new_rgb = (rgb * (alpha / <span class="number">255.0</span>)[:, :, <span class="literal">None</span>] + background * (<span class="number">1</span> - (alpha / <span class="number">255.0</span>)[:, :, <span class="literal">None</span>])).astype(</span><br><span class="line">                np.uint8)</span><br><span class="line">            <span class="keyword">return</span> Image.fromarray(new_rgb)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.debug(<span class="string">f&quot;Converting non-RGBA/LA image to RGB.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> image.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.exception(<span class="string">f&quot;Error during RGBA to RGB conversion: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_image</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check if a file is a valid image (and resizes if needed) and its mode is RGB (or can be converted to RGB).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        True if the file is a valid image,</span></span><br><span class="line"><span class="string">        False if the file is not found or is not a valid image, or exceeds the limit.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> MAX_IMAGE_PIXELS</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file_path:</span><br><span class="line">        logger.error(<span class="string">f&quot;Error: Path empty -<span class="subst">&#123;file_path&#125;</span>&quot;</span>)  <span class="comment"># check all path first</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</span><br><span class="line">            logger.error(</span><br><span class="line">                <span class="string">f&quot;Error: The file was Not found at the location - <span class="subst">&#123;file_path&#125;</span>&quot;</span></span><br><span class="line">            )  <span class="comment"># check if all locations have files.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            img = Image.<span class="built_in">open</span>(file_path)</span><br><span class="line">            width, height = img.size</span><br><span class="line">            total_pixels = width * height</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> total_pixels &gt; MAX_IMAGE_PIXELS:</span><br><span class="line">                logger.warning(<span class="string">f&quot;Image <span class="subst">&#123;file_path&#125;</span> exceeds pixel limit. Resizing.&quot;</span>)</span><br><span class="line">                <span class="comment"># Calculate new dimensions while preserving aspect ratio</span></span><br><span class="line">                ratio = (MAX_IMAGE_PIXELS / total_pixels) ** <span class="number">0.5</span></span><br><span class="line">                new_width = <span class="built_in">int</span>(width * ratio)</span><br><span class="line">                new_height = <span class="built_in">int</span>(height * ratio)</span><br><span class="line">                img = img.resize((new_width, new_height), Image.LANCZOS)  <span class="comment"># Or another resampling filter</span></span><br><span class="line">                logger.info(<span class="string">f&quot;Resized image to <span class="subst">&#123;new_width&#125;</span>x<span class="subst">&#123;new_height&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            img.load()  <span class="comment"># Force load to find problems</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> (FileNotFoundError, UnidentifiedImageError, OSError) <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(<span class="string">f&quot;Error opening image file <span class="subst">&#123;file_path&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(</span><br><span class="line">                <span class="string">f&quot;Different from other error: it is an Unexpected error opening image: <span class="subst">&#123;file_path&#125;</span>  <span class="subst">&#123;e&#125;</span>&quot;</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># It may have just not passed the test and is just a bad file path that is expected.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># Verify the file and get the image format</span></span><br><span class="line">            <span class="comment"># Verify a copy instead</span></span><br><span class="line">            img_copy = img.copy()</span><br><span class="line">            img_copy.verify()</span><br><span class="line">            img_copy.close()  <span class="comment"># Release resources</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(</span><br><span class="line">                <span class="string">f&quot;Error: Image verification failed - <span class="subst">&#123;file_path&#125;</span>  <span class="subst">&#123;e&#125;</span>&quot;</span></span><br><span class="line">            )  <span class="comment"># This can be all bad names, or some other error with image.</span></span><br><span class="line">            img.close()  <span class="comment"># Release resources</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># If RBGA was never called it was a fail</span></span><br><span class="line">        <span class="keyword">if</span> img.mode == <span class="string">&quot;RGBA&quot;</span>:</span><br><span class="line">            <span class="comment"># Check the image.</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                img = rgba_to_rgb_numpy(</span><br><span class="line">                    img</span><br><span class="line">                )  <span class="comment"># try and convert if RGBA is needed and all cases works</span></span><br><span class="line">                logger.warning(<span class="string">f&quot;img: <span class="subst">&#123;file_path&#125;</span> , img: <span class="subst">&#123;img&#125;</span>, rgba to rgb...&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logger.error(<span class="string">f&quot;convert error, detail: <span class="subst">&#123;e&#125;</span>, file path : <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                img.close()  <span class="comment"># Release Resources before returning</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># If the image cannot load and convert, test that this is correct image</span></span><br><span class="line"></span><br><span class="line">        img.close()  <span class="comment"># Close when done if conversion was not needed.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># It was tested if all file loads.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(</span><br><span class="line">            <span class="string">f&quot;Different from other error: it is an Unexpected error opening image: or image does not pass checks and there may not be image or corrupted with  other issues - <span class="subst">&#123;file_path&#125;</span>  <span class="subst">&#123;e&#125;</span>&quot;</span></span><br><span class="line">        )  <span class="comment"># This case is just a bad path</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># It may have just not passed the test and is just a bad file path that is expected.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据批量写入excel表格">数据批量写入excel表格</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_image_group</span>(<span class="params">identifiers, images_map_dir1, images_map_dir2, instruction_txt_path, start_index</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Processes a group of images.&quot;&quot;&quot;</span></span><br><span class="line">    sheet_data = []</span><br><span class="line">    temp_files = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, identifier <span class="keyword">in</span> <span class="built_in">enumerate</span>(identifiers, start=start_index + <span class="number">1</span>):</span><br><span class="line">        image1_path = images_map_dir1.get(identifier)</span><br><span class="line">        image2_path = images_map_dir2.get(identifier)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> image1_path <span class="keyword">and</span> image2_path:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                original_filename = os.path.basename(image1_path)</span><br><span class="line">                processed_filename = os.path.basename(image2_path)</span><br><span class="line">                instruction_text = generate_modification_instruction(processed_filename)</span><br><span class="line"></span><br><span class="line">                logger.info(<span class="string">f&quot;source image: <span class="subst">&#123;image1_path&#125;</span> instruction txt: <span class="subst">&#123;instruction_text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Extract filename without instruction using a helper function</span></span><br><span class="line">                processed_filename_without_instruction = extract_filename_without_instruction(processed_filename,</span><br><span class="line">                                                                                              instruction_text)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor() <span class="keyword">as</span> executor:</span><br><span class="line">                    future1 = executor.submit(insert_image_with_resize, image1_path)</span><br><span class="line">                    future2 = executor.submit(insert_image_with_resize, image2_path)</span><br><span class="line">                    img1, temp_img1_path = future1.result()</span><br><span class="line">                    img2, temp_img2_path = future2.result()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> temp_img1_path:</span><br><span class="line">                    temp_files.append(temp_img1_path)</span><br><span class="line">                <span class="keyword">if</span> temp_img2_path:</span><br><span class="line">                    temp_files.append(temp_img2_path)</span><br><span class="line"></span><br><span class="line">                original_numbers = extract_numbers_from_filename(original_filename)</span><br><span class="line">                processed_numbers = extract_numbers_from_filename(processed_filename)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># logger.info(f&quot;get source number image: &#123;original_numbers&#125;, processed numbers: &#123;processed_numbers&#125;!!!&quot;)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 构建文件名</span></span><br><span class="line">                base_name, ext = os.path.splitext(processed_filename)  <span class="comment"># 获取原始扩展名</span></span><br><span class="line">                <span class="comment"># process_path = os.path.split(image2_path)</span></span><br><span class="line">                new_image1_filename, ext = extract_directory_and_extension(image2_path)</span><br><span class="line">                new_image1_filename = os.path.join(new_image1_filename, <span class="built_in">str</span>(processed_numbers[<span class="number">0</span>]) + <span class="built_in">str</span>(ext))</span><br><span class="line"></span><br><span class="line">                parent_dir_name = get_parent_directory_name(image2_path)</span><br><span class="line">                parent_dir_name = os.path.join(parent_dir_name, <span class="string">&#x27;copy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                copied_image2_path = copy_and_rename(image2_path, parent_dir_name, new_image1_filename)</span><br><span class="line">                <span class="comment"># copied_image2_path = copy_and_rename(image2_path, &quot;./copy&quot;, new_image2_filename)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment"># logger.info(f&quot;already copy image2: &#123;image2_path&#125; to new dir: &#123;copied_image2_path&#125;!!! name: &#123;new_image1_filename&#125;.&quot;)</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> img1 <span class="keyword">and</span> img2:</span><br><span class="line">                    sheet_data.append(&#123;</span><br><span class="line">                        <span class="string">&#x27;index&#x27;</span>: index,</span><br><span class="line">                        <span class="string">&#x27;original_filename&#x27;</span>: original_numbers[<span class="number">0</span>],</span><br><span class="line">                        <span class="string">&#x27;img1&#x27;</span>: img1,</span><br><span class="line">                        <span class="string">&#x27;temp_img1_path&#x27;</span>: temp_img1_path,</span><br><span class="line">                        <span class="string">&#x27;processed_filename&#x27;</span>: processed_numbers[<span class="number">0</span>],</span><br><span class="line">                        <span class="string">&#x27;processed_filename_without_instruction&#x27;</span>: processed_filename_without_instruction,  <span class="comment"># Added field</span></span><br><span class="line">                        <span class="string">&#x27;img2&#x27;</span>: img2,</span><br><span class="line">                        <span class="string">&#x27;temp_img2_path&#x27;</span>: temp_img2_path,</span><br><span class="line">                        <span class="string">&#x27;instruction_text&#x27;</span>: instruction_text</span><br><span class="line">                    &#125;)</span><br><span class="line">                    logger.info(<span class="string">f&quot;writing image: <span class="subst">&#123;original_filename&#125;</span> and <span class="subst">&#123;processed_filename&#125;</span> to excel file!!!&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    logger.error(<span class="string">f&quot;Skipping row: <span class="subst">&#123;original_filename&#125;</span>, <span class="subst">&#123;processed_filename&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logger.error(<span class="string">f&quot;Error processing: <span class="subst">&#123;image1_path&#125;</span> or <span class="subst">&#123;image2_path&#125;</span> - <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.warning(<span class="string">f&quot;Error processing: <span class="subst">&#123;image1_path&#125;</span> or <span class="subst">&#123;image2_path&#125;</span> not get part.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sheet_data, temp_files</span><br></pre></td></tr></table></figure><h3 id="数据汇总输出Excel">数据汇总输出Excel</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_images_to_excel</span>(<span class="params">dir1, dir2, output_excel, progress_var, progress_bar, progress_label, ps_root,</span></span><br><span class="line"><span class="params">                          instruction_txt_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Write images and filenames to Excel.&quot;&quot;&quot;</span></span><br><span class="line">    files_dir1 = get_all_files(dir1)</span><br><span class="line">    files_dir2 = get_all_files(dir2)</span><br><span class="line"></span><br><span class="line">    images_map_dir1 = &#123;&#125;</span><br><span class="line">    images_map_dir2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files_dir1:</span><br><span class="line">        <span class="keyword">if</span> is_image(file):</span><br><span class="line">            identifier = extract_identifier_de(os.path.basename(file)) <span class="keyword">or</span> os.path.basename(file)</span><br><span class="line">            images_map_dir1[identifier] = file</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.warning(<span class="string">f&quot;file path not image!!! <span class="subst">&#123;file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files_dir2:</span><br><span class="line">        <span class="keyword">if</span> is_image(file):</span><br><span class="line">            identifier = extract_identifier_de(os.path.basename(file)) <span class="keyword">or</span> os.path.basename(file)</span><br><span class="line">            images_map_dir2[identifier] = file</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.warning(<span class="string">f&quot;file path not image!!! <span class="subst">&#123;file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> images_map_dir1 <span class="keyword">and</span> <span class="keyword">not</span> images_map_dir2:</span><br><span class="line">        logger.warning(<span class="string">&quot;No image files found.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    common_identifiers = <span class="built_in">list</span>(<span class="built_in">set</span>(images_map_dir1.keys()) &amp; <span class="built_in">set</span>(images_map_dir2.keys()))</span><br><span class="line">    total_images = <span class="built_in">len</span>(common_identifiers)</span><br><span class="line">    logger.info(<span class="string">f&quot;total image: <span class="subst">&#123;total_images&#125;</span>!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># logger.info(&quot;start output all image content:!!!&quot;)</span></span><br><span class="line">    <span class="keyword">if</span> dev_tools_mode:</span><br><span class="line">        logger.info(<span class="string">&quot;dev tools mode enable!!!&quot;</span>)</span><br><span class="line">        compare_and_info_dicts(images_map_dir1, images_map_dir2)</span><br><span class="line">    <span class="comment"># logger.info(&quot;end output all image content:!!!&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> common_identifiers:</span><br><span class="line">        logger.warning(<span class="string">&quot;No common identifiers found.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    common_identifiers.sort(</span><br><span class="line">        key=<span class="keyword">lambda</span> x: (<span class="built_in">int</span>(extract_identifier(x)) <span class="keyword">if</span> extract_identifier(x).isdigit() <span class="keyword">else</span> <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>), x))</span><br><span class="line"></span><br><span class="line">    output_dir = os.path.dirname(output_excel)</span><br><span class="line">    base_name, ext = os.path.splitext(os.path.basename(output_excel))</span><br><span class="line">    os.makedirs(output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tqdm(total=total_images, desc=<span class="string">&quot;Processing Images&quot;</span>, unit=<span class="string">&quot;pair&quot;</span>, dynamic_ncols=<span class="literal">True</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">        <span class="keyword">for</span> start_index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, total_images, <span class="number">500</span>):</span><br><span class="line">            end_index = <span class="built_in">min</span>(start_index + <span class="number">500</span>, total_images)</span><br><span class="line">            current_identifiers = common_identifiers[start_index:end_index]</span><br><span class="line"></span><br><span class="line">            sheet_data, temp_files = process_image_group(current_identifiers, images_map_dir1, images_map_dir2,</span><br><span class="line">                                                         instruction_txt_path, start_index)</span><br><span class="line"></span><br><span class="line">            workbook = openpyxl.Workbook()</span><br><span class="line">            sheet = workbook.active</span><br><span class="line">            sheet.title = <span class="string">&quot;Image Comparison&quot;</span></span><br><span class="line"></span><br><span class="line">            headers = [<span class="string">&quot;序号&quot;</span>, <span class="string">&quot;原图文件名&quot;</span>, <span class="string">&quot;原图&quot;</span>, <span class="string">&quot;修改图文件名&quot;</span>, <span class="string">&quot;修改图&quot;</span>, <span class="string">&quot;修改内容&quot;</span>]</span><br><span class="line">            <span class="keyword">for</span> col_num, header <span class="keyword">in</span> <span class="built_in">enumerate</span>(headers, <span class="number">1</span>):</span><br><span class="line">                cell = sheet.cell(row=<span class="number">1</span>, column=col_num, value=header)</span><br><span class="line">                cell.alignment = Alignment(horizontal=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            row = <span class="number">2</span></span><br><span class="line">            original_filenames = []</span><br><span class="line">            processed_filenames = []</span><br><span class="line">            modification_instructions = []</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> sheet_data:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    sheet.cell(row=row, column=<span class="number">1</span>, value=item[<span class="string">&#x27;index&#x27;</span>]).alignment = Alignment(horizontal=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">                    original_filenames.append(item[<span class="string">&#x27;original_filename&#x27;</span>])</span><br><span class="line">                    sheet.cell(row=row, column=<span class="number">2</span>, value=item[<span class="string">&#x27;original_filename&#x27;</span>])</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> item[<span class="string">&#x27;img1&#x27;</span>]:</span><br><span class="line">                        excel_img1 = ExcelImage(item[<span class="string">&#x27;temp_img1_path&#x27;</span>])</span><br><span class="line">                        sheet.add_image(excel_img1, <span class="string">f&#x27;C<span class="subst">&#123;row&#125;</span>&#x27;</span>)</span><br><span class="line">                        sheet.row_dimensions[row].height = <span class="number">259.8</span></span><br><span class="line"></span><br><span class="line">                    processed_filenames.append(item[<span class="string">&#x27;processed_filename&#x27;</span>])</span><br><span class="line">                    sheet.cell(row=row, column=<span class="number">4</span>, value=item[<span class="string">&#x27;processed_filename&#x27;</span>])</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> item[<span class="string">&#x27;img2&#x27;</span>]:</span><br><span class="line">                        excel_img2 = ExcelImage(item[<span class="string">&#x27;temp_img2_path&#x27;</span>])</span><br><span class="line">                        sheet.add_image(excel_img2, <span class="string">f&#x27;E<span class="subst">&#123;row&#125;</span>&#x27;</span>)</span><br><span class="line">                        sheet.row_dimensions[row].height = <span class="number">259.8</span></span><br><span class="line"></span><br><span class="line">                    modification_instructions.append(item[<span class="string">&#x27;instruction_text&#x27;</span>])</span><br><span class="line">                    sheet.cell(row=row, column=<span class="number">6</span>, value=item[<span class="string">&#x27;instruction_text&#x27;</span>]).alignment = Alignment(vertical=<span class="string">&#x27;top&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                    row += <span class="number">1</span></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    logger.exception(<span class="string">f&quot;Error adding row: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            adjust_column_width(sheet, <span class="string">&#x27;B&#x27;</span>, original_filenames)</span><br><span class="line">            adjust_column_width(sheet, <span class="string">&#x27;D&#x27;</span>, processed_filenames)</span><br><span class="line">            adjust_column_width(sheet, <span class="string">&#x27;F&#x27;</span>, modification_instructions)</span><br><span class="line">            adjust_column_width(sheet, <span class="string">&#x27;A&#x27;</span>, <span class="built_in">range</span>(start_index + <span class="number">1</span>, start_index + <span class="built_in">len</span>(current_identifiers) + <span class="number">1</span>))</span><br><span class="line">            sheet.column_dimensions[<span class="string">&#x27;C&#x27;</span>].width = <span class="number">80.79</span></span><br><span class="line">            sheet.column_dimensions[<span class="string">&#x27;E&#x27;</span>].width = <span class="number">80.79</span></span><br><span class="line"></span><br><span class="line">            file_counter = start_index // <span class="number">500</span> + <span class="number">1</span></span><br><span class="line">            new_output_excel = os.path.join(output_dir, <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span>_<span class="subst">&#123;file_counter&#125;</span><span class="subst">&#123;ext&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                workbook.save(new_output_excel)</span><br><span class="line">                logger.info(<span class="string">f&quot;Saved batch: <span class="subst">&#123;new_output_excel&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logger.error(<span class="string">f&quot;Failed to save <span class="subst">&#123;new_output_excel&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="keyword">for</span> temp_file <span class="keyword">in</span> temp_files:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        os.remove(temp_file)</span><br><span class="line">                    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        logger.error(<span class="string">f&quot;Error deleting <span class="subst">&#123;temp_file&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            pbar.update(<span class="built_in">len</span>(current_identifiers))</span><br><span class="line">            progress_percentage = <span class="built_in">int</span>((pbar.n / total_images) * <span class="number">100</span>)</span><br><span class="line">            progress_var.<span class="built_in">set</span>(progress_percentage)</span><br><span class="line">            progress_label.config(text=<span class="string">f&quot;<span class="subst">&#123;progress_percentage&#125;</span>%&quot;</span>)</span><br><span class="line">            ps_root.update_idletasks()</span><br><span class="line"></span><br><span class="line">    progress_var.<span class="built_in">set</span>(<span class="number">100</span>)</span><br><span class="line">    progress_label.config(text=<span class="string">&quot;100%&quot;</span>)</span><br><span class="line">    ps_root.update_idletasks()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在macOS使用ntfs格式硬盘方法</title>
      <link href="/2025/02/25/ntfs-macos-mounty/"/>
      <url>/2025/02/25/ntfs-macos-mounty/</url>
      
        <content type="html"><![CDATA[<h1>在macOS使用ntfs格式硬盘方法</h1><p><strong>1. FAT32 (File Allocation Table 32-bit)</strong></p><ul><li><strong>历史：</strong> FAT32 是 FAT 文件系统家族的一员，是 FAT16 的后继者。它在 Windows 95 OSR2 中首次引入，旨在克服 FAT16 的一些限制。</li><li><strong>结构：</strong> FAT32 文件系统使用文件分配表 (FAT) 来跟踪磁盘上的文件和目录。FAT 表实际上是一个索引表，记录了磁盘上每个簇（cluster，磁盘上最小的存储单元）的使用情况。</li><li><strong>特点：</strong><ul><li><strong>兼容性好：</strong> FAT32 得到了广泛的支持，几乎所有的操作系统和设备（包括 Windows、macOS、Linux、嵌入式系统、游戏机等）都可以读取和写入 FAT32 格式的磁盘。</li><li><strong>简单易用：</strong> FAT32 的结构比较简单，实现起来也相对容易。</li></ul></li><li><strong>缺点：</strong><ul><li><strong>最大文件尺寸限制：</strong> FAT32 文件系统对单个文件的大小有限制，最大不能超过 4GB。 这使得它无法存储高清视频、大型数据库文件等。</li><li><strong>最大分区尺寸限制：</strong> 虽然理论上 FAT32 可以支持最大 8TB 的分区，但实际上由于一些操作系统（特别是 Windows）的限制，FAT32 分区通常限制在 32GB。</li><li><strong>安全性较差：</strong> FAT32 不支持文件权限、加密等安全特性。</li><li><strong>可靠性较低：</strong> FAT32 的元数据（FAT 表）通常只有一个副本，一旦损坏，可能会导致数据丢失。</li></ul></li><li><strong>适用场景：</strong><ul><li><strong>移动存储设备：</strong> 比如 U 盘、SD 卡等，如果不需要存储超过 4GB 的单个文件，并且需要在多个操作系统或设备上使用，FAT32 是一个不错的选择。</li><li><strong>嵌入式系统：</strong> 一些嵌入式设备仍然使用 FAT32，因为它的实现简单且资源占用较少。</li><li><strong>老旧操作系统：</strong> 对于一些老旧的操作系统，可能只能支持 FAT32 格式。</li></ul></li></ul><p><strong>2. NTFS (New Technology File System)</strong></p><ul><li><strong>历史：</strong> NTFS 是微软为 Windows NT 系列操作系统设计的现代文件系统，旨在取代 FAT 文件系统。它首次出现在 Windows NT 3.1 中，并在后续的 Windows 版本中得到了广泛应用。</li><li><strong>结构：</strong> NTFS 使用主文件表 (MFT, Master File Table) 来管理磁盘上的文件和目录。MFT 类似于一个数据库，记录了每个文件和目录的元数据（大小、创建时间、权限等）以及数据存储位置。</li><li><strong>特点：</strong><ul><li><strong>支持大文件和分区：</strong> NTFS 没有 4GB 的文件尺寸限制，可以存储大型文件。 NTFS 可以支持非常大的分区（理论上可达 256TB），但实际受操作系统限制。</li><li><strong>安全性高：</strong> NTFS 支持文件权限管理，可以控制用户对文件和目录的访问权限。 它还支持加密文件系统 (EFS)，可以对文件进行加密存储。</li><li><strong>可靠性高：</strong> NTFS 具有日志功能，可以记录文件系统的操作，并在系统崩溃后进行恢复，从而保证数据的完整性。 NTFS 的元数据（MFT）通常有多个副本，可以提高容错能力。</li><li><strong>高级特性：</strong> NTFS 支持磁盘配额、压缩、稀疏文件、符号链接等高级特性。</li></ul></li><li><strong>缺点：</strong><ul><li><strong>兼容性稍差：</strong> 虽然 Windows 操作系统对 NTFS 的支持非常好，但 macOS 和 Linux 对 NTFS 的支持可能存在一些问题。 在 macOS 上，默认只能读取 NTFS 格式的磁盘，无法写入。 在 Linux 上，虽然可以通过安装驱动程序来支持 NTFS 的读写，但性能可能不如在 Windows 上。</li><li><strong>实现复杂：</strong> NTFS 的结构比 FAT32 复杂得多，实现起来也比较困难。</li></ul></li><li><strong>适用场景：</strong><ul><li><strong>Windows 操作系统：</strong> NTFS 是 Windows 操作系统的默认文件系统，用于系统盘和数据盘。</li><li><strong>需要存储大文件的场合：</strong> 比如高清视频编辑、大型数据库服务器等。</li><li><strong>对数据安全性有较高要求的场合：</strong> 比如企业服务器、存储敏感数据的磁盘等。</li><li><strong>需要使用 NTFS 高级特性的场合：</strong> 比如磁盘配额、压缩等。</li></ul></li></ul><h2 id="brew">brew</h2><h3 id="install">install</h3><ul><li>script example</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置脚本遇到错误时退出</span></span><br><span class="line">set -e</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义颜色</span></span><br><span class="line">RED=&#x27;\033[0;31m&#x27;</span><br><span class="line">GREEN=&#x27;\033[0;32m&#x27;</span><br><span class="line">YELLOW=&#x27;\033[0;33m&#x27;</span><br><span class="line">NC=&#x27;\033[0m&#x27; # No Color</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否为 macOS</span></span><br><span class="line">if [[ &quot;$(uname)&quot; != &quot;Darwin&quot; ]]; then</span><br><span class="line">    echo -e &quot;$&#123;RED&#125;This script is intended for macOS only.$&#123;NC&#125;&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否已安装 Homebrew</span></span><br><span class="line">if ! command -v brew &amp;&gt; /dev/null; then</span><br><span class="line">    echo -e &quot;$&#123;YELLOW&#125;Homebrew is not installed. Installing...$&#123;NC&#125;&quot;</span><br><span class="line">    /bin/bash -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br><span class="line">    if [ $? -ne 0 ]; then</span><br><span class="line">        echo -e &quot;$&#123;RED&#125;Failed to install Homebrew. Please install it manually and then rerun this script.$&#123;NC&#125;&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">    echo -e &quot;$&#123;GREEN&#125;Homebrew installed successfully!$&#123;NC&#125;&quot;</span><br><span class="line">else</span><br><span class="line">    # 更新 Homebrew</span><br><span class="line">    echo -e &quot;$&#123;YELLOW&#125;Updating Homebrew...$&#123;NC&#125;&quot;</span><br><span class="line">    brew update</span><br><span class="line">    if [ $? -ne 0 ]; then</span><br><span class="line">      echo -e &quot;$&#123;RED&#125;Warning: Failed to update Homebrew.  Continuing anyway...$&#123;NC&#125;&quot;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 FFmpeg</span></span><br><span class="line">if ! brew list --versions ffmpeg &amp;&gt; /dev/null; then</span><br><span class="line">  echo -e &quot;$&#123;YELLOW&#125;Installing FFmpeg...$&#123;NC&#125;&quot;</span><br><span class="line">  brew install ffmpeg</span><br><span class="line">  if [ $? -ne 0 ]; then</span><br><span class="line">      echo -e &quot;$&#123;RED&#125;Failed to install FFmpeg.$&#123;NC&#125;&quot;</span><br><span class="line">      exit 1</span><br><span class="line">  fi</span><br><span class="line">  echo -e &quot;$&#123;GREEN&#125;FFmpeg installed successfully!$&#123;NC&#125;&quot;</span><br><span class="line">else</span><br><span class="line">  echo -e &quot;$&#123;YELLOW&#125;FFmpeg is already installed. Skipping...$&#123;NC&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 macFUSE, ntfs-3g-mac 和 Mounty (用于 NTFS 写入支持)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">see https://mounty.app/#installation</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">macFUSE (Cask)</span></span><br><span class="line">if ! brew list --cask --versions macfuse &amp;&gt; /dev/null; then</span><br><span class="line">  echo -e &quot;$&#123;YELLOW&#125;Installing macFUSE...$&#123;NC&#125;&quot;</span><br><span class="line">  brew install --cask macfuse</span><br><span class="line">  if [ $? -ne 0 ]; then</span><br><span class="line">      echo -e &quot;$&#123;RED&#125;Failed to install macFUSE.  You may need to install it manually from https://osxfuse.github.io/. Continuing...$&#123;NC&#125;&quot;</span><br><span class="line">  fi</span><br><span class="line">else</span><br><span class="line">  echo -e &quot;$&#123;YELLOW&#125;macFUSE is already installed. Skipping...$&#123;NC&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ntfs-3g-mac (Formula)</span></span><br><span class="line">if ! brew list --versions ntfs-3g-mac &amp;&gt; /dev/null; then</span><br><span class="line">  echo -e &quot;$&#123;YELLOW&#125;Installing ntfs-3g-mac...$&#123;NC&#125;&quot;</span><br><span class="line">  brew install gromgit/fuse/ntfs-3g-mac</span><br><span class="line">  if [ $? -ne 0 ]; then</span><br><span class="line">    echo -e &quot;$&#123;RED&#125;Failed to install ntfs-3g-mac. This may cause issues with writing to NTFS drives. Continuing...$&#123;NC&#125;&quot;</span><br><span class="line">  fi</span><br><span class="line">else</span><br><span class="line">  echo -e &quot;$&#123;YELLOW&#125;ntfs-3g-mac is already installed. Skipping...$&#123;NC&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Mounty (Cask)</span></span><br><span class="line">if ! brew list --cask --versions mounty &amp;&gt; /dev/null; then</span><br><span class="line">  echo -e &quot;$&#123;YELLOW&#125;Installing Mounty...$&#123;NC&#125;&quot;</span><br><span class="line">  brew install --cask mounty</span><br><span class="line">  if [ $? -ne 0 ]; then</span><br><span class="line">      echo -e &quot;$&#123;RED&#125;Failed to install Mounty.  You may need to manually mount NTFS drives. Continuing...$&#123;NC&#125;&quot;</span><br><span class="line">  fi</span><br><span class="line">else</span><br><span class="line">  echo -e &quot;$&#123;YELLOW&#125;Mounty is already installed. Skipping...$&#123;NC&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;GREEN&#125;Installation complete!$&#123;NC&#125;&quot;</span><br><span class="line">echo -e &quot;$&#123;YELLOW&#125;Please reboot your computer for the changes (especially macFUSE) to take effect.$&#123;NC&#125;&quot;</span><br><span class="line">echo -e &quot;$&#123;YELLOW&#125;After rebooting, you may need to manually enable &#x27;System Extensions&#x27; for macFUSE in System Preferences &gt; Security &amp; Privacy &gt; General.$&#123;NC&#125;&quot;</span><br><span class="line">echo -e &quot;$&#123;GREEN&#125;If you encounter any issues, run &#x27;brew doctor&#x27; to diagnose potential problems.$&#123;NC&#125;&quot;</span><br></pre></td></tr></table></figure><ul><li>use</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 ./sh.sh</span><br><span class="line">./sh.sh</span><br></pre></td></tr></table></figure><h2 id="mounty">mounty</h2><h3 id="地址：">地址：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mounty.app</span><br></pre></td></tr></table></figure><h3 id="install-and-use">install and use</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">macbook:~ uwe$ brew install --cask macfuse</span><br><span class="line">macbook:~ uwe$ brew install gromgit/fuse/ntfs-3g-mac</span><br><span class="line">macbook:~ uwe$ brew install --cask mounty</span><br></pre></td></tr></table></figure><h2 id="use">use</h2><ul><li><p>安装完成后，重启软件 进入设置-&gt;隐私与安全性-&gt;启用未知来源安装</p></li><li><p>系统自动重启后，长按电源键进入恢复模式，点击菜单栏查看启动安全实用工具，点击选择中等安全性，然后重启</p></li><li><p>尝试重新挂载硬盘，如果mounty图标由黄变蓝则代表挂载成功，即可在目标磁盘创建文件</p></li></ul><h2 id="ffmpeg安装">ffmpeg安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure><h1>see</h1><ul><li><a href="https://mounty.app/#aBitOfBackground">https://mounty.app/#aBitOfBackground</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 可视化打包工具集锦</title>
      <link href="/2025/02/08/python-publish/"/>
      <url>/2025/02/08/python-publish/</url>
      
        <content type="html"><![CDATA[<h1>python 可视化打包工具集锦</h1><h2 id="打包">打包</h2><blockquote><p>Python 打包工具用于将代码、依赖和资源文件整理成可分发的格式（如库、可执行文件等）</p></blockquote><h2 id="常用打包工具">常用打包工具</h2><h3 id="pyinstaller">pyinstaller</h3><ul><li>使用方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller --onefile main.py</span><br></pre></td></tr></table></figure><ul><li>通过spec文件打包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># -*- mode: python ; coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">block_cipher = None</span><br><span class="line"></span><br><span class="line">a = Analysis(</span><br><span class="line">    [&#x27;main.py&#x27;],</span><br><span class="line">    pathex=[&#x27;/path/to/my_dash_app&#x27;],</span><br><span class="line">    binaries=[],</span><br><span class="line">    datas=[(&#x27;assets/*&#x27;, &#x27;assets&#x27;)],  # 打包 assets 文件夹</span><br><span class="line">    hiddenimports=[],</span><br><span class="line">    hookspath=[],</span><br><span class="line">    runtime_hooks=[],</span><br><span class="line">    excludes=[],</span><br><span class="line">    win_no_prefer_redirects=False,</span><br><span class="line">    win_private_assemblies=False,</span><br><span class="line">    cipher=block_cipher,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)</span><br><span class="line"></span><br><span class="line">exe = EXE(</span><br><span class="line">    pyz,</span><br><span class="line">    a.scripts,</span><br><span class="line">    [],</span><br><span class="line">    exclude_binaries=True,</span><br><span class="line">    name=&#x27;my_dash_app&#x27;,</span><br><span class="line">    debug=False,</span><br><span class="line">    bootloader_ignore_signals=False,</span><br><span class="line">    strip=False,</span><br><span class="line">    upx=True,</span><br><span class="line">    console=False,  # 隐藏控制台窗口</span><br><span class="line">    icon=&#x27;icon.ico&#x27;,  # 设置图标</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">coll = COLLECT(</span><br><span class="line">    exe,</span><br><span class="line">    a.binaries,</span><br><span class="line">    a.zipfiles,</span><br><span class="line">    a.datas,</span><br><span class="line">    strip=False,</span><br><span class="line">    upx=True,</span><br><span class="line">    upx_exclude=[],</span><br><span class="line">    name=&#x27;my_dash_app&#x27;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>详细参考如下：<a href="https://caozhaoqi.github.io/2024/04/09/pyinstaller-publish-python/">https://caozhaoqi.github.io/2024/04/09/pyinstaller-publish-python/</a></p></blockquote><h3 id="nuitka">nuitka</h3><blockquote><p>将 Python 代码编译为 C 代码，再生成可执行文件, 性能优于普通打包工具</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuitka --standalone --onefile your_script.py</span><br></pre></td></tr></table></figure><blockquote><p>详细参考如下：<a href="https://caozhaoqi.github.io/2024/04/10/setup-tools-python/">https://caozhaoqi.github.io/2024/04/10/setup-tools-python/</a></p></blockquote><h3 id="cx-Freeze">cx_Freeze</h3><ul><li>publish</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cxfreeze your_script.py --target-dir dist</span><br></pre></td></tr></table></figure><h3 id="Briefcase">Briefcase</h3><blockquote><p>打包为桌面应用</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install briefcase</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建项目模板</span></span><br><span class="line">briefcase new</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入项目目录</span></span><br><span class="line">cd myapp</span><br></pre></td></tr></table></figure><ul><li>打包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成各平台安装包</span></span><br><span class="line">briefcase create          # 创建基础结构</span><br><span class="line">briefcase build           # 构建应用</span><br><span class="line">briefcase run             # 本地运行测试</span><br><span class="line">briefcase package         # 生成安装包（如 .dmg、.msi）</span><br></pre></td></tr></table></figure><h3 id="PyOxidizer">PyOxidizer</h3><blockquote><p>将 Python 应用编译为独立可执行文件，启动速度快。<br>支持跨平台。<br>生成的文件体积较小。</p></blockquote><ul><li>打包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">pip install pyoxidizer</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建配置文件</span></span><br><span class="line">pyoxidizer init-config-file</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑生成的 `pyoxidizer.bzl` 文件，指定入口脚本和依赖</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成可执行文件</span></span><br><span class="line">pyoxidizer build</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出路径：`build/` 目录</span></span><br></pre></td></tr></table></figure><h3 id="Briefcase-2">Briefcase</h3><blockquote><p>跨平台GUI工具 可生成跨平台安装包</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install briefcase</span><br><span class="line">fbs startproject</span><br></pre></td></tr></table></figure><h3 id="fbs">fbs</h3><blockquote><p>用于 pyside pyqt5 打包 局限性较大</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fbs</span><br></pre></td></tr></table></figure><ul><li>打包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fbs freeze       # 生成可执行文件</span><br><span class="line">fbs installer    # 创建安装包（如 .exe、.dmg）</span><br></pre></td></tr></table></figure><blockquote><p>修改 src/build/settings/base.json 设置应用名称、版本等。</p></blockquote><h2 id="打包后文件转换">打包后文件转换</h2><h3 id="NSIS">NSIS</h3><blockquote><p>打包后文件转换为安装工具 可根据安装工具安装程序</p></blockquote><h3 id="Inno-Setup">Inno Setup</h3><blockquote><p>创建自定义的安装向导</p></blockquote><ul><li>参考链接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://caozhaoqi.github.io/2024/04/09/nuitka-publish-python/</span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁力链接与ed2k的自动化检测处理</title>
      <link href="/2025/01/23/ed2k-bit/"/>
      <url>/2025/01/23/ed2k-bit/</url>
      
        <content type="html"><![CDATA[<h1>磁力链接与ed2k的自动化检测处理</h1><blockquote><p>磁力链接与ed2k对比</p></blockquote><p><strong>磁力链接下载速度的影响因素 (BitTorrent 协议):</strong></p><ol><li><strong>种子数量（Seeders）：</strong><ul><li><strong>定义：</strong> 指的是完整拥有你想要下载的文件的用户数量。</li><li><strong>影响：</strong> 种子越多，你下载的速度通常就越快，因为你可以从多个来源同时下载数据。</li><li><strong>重要性：</strong> 种子数量是影响下载速度的最关键因素之一。如果种子数为零或很少，下载速度会非常慢甚至无法下载。</li></ul></li><li><strong>节点数量（Peers）：</strong><ul><li><strong>定义：</strong> 指的是正在下载或部分拥有该文件的用户数量。</li><li><strong>影响：</strong> 节点数量越多，你获得数据的机会就越多，但节点不一定拥有完整文件，所以下载速度不一定总是更快。</li><li><strong>区别于种子：</strong> 节点可能只拥有部分文件，而种子拥有完整文件。</li></ul></li><li><strong>种子质量 (带宽和连接数):</strong><ul><li><strong>定义：</strong> 种子的上传带宽和连接数限制。</li><li><strong>影响：</strong> 如果种子用户的上传带宽很低或者连接数有限制，你下载速度会受到限制。高质量的种子上传速度快且允许更多人连接。</li><li><strong>实际情况：</strong> 很多用户上传带宽不高，这也是影响下载速度的因素。</li></ul></li><li><strong>你的网络带宽：</strong><ul><li><strong>定义：</strong> 你的网络服务提供商 (ISP) 提供的最大下载速度。</li><li><strong>影响：</strong> 如果你的网络带宽很低，下载速度会受到物理限制。即使种子很多，下载速度也不会超过你的带宽上限。</li><li><strong>限制：</strong> 很多运营商对上传和下载速度有限制，比如上行带宽通常低于下行带宽。</li></ul></li><li><strong>你的网络环境：</strong><ul><li><strong>定义：</strong> 你的网络连接质量和稳定性。</li><li><strong>影响：</strong> 如果你的网络丢包严重或者延迟很高，下载速度会受到影响。网络环境不佳会导致下载不稳定，频繁中断。</li><li><strong>NAT 类型：</strong> 网络地址转换 (NAT) 类型也会影响 P2P 连接，比如严格的 NAT 会限制连接数。</li></ul></li><li><strong>下载客户端：</strong><ul><li><strong>定义：</strong> 你使用的 BitTorrent 客户端软件的设置和性能。</li><li><strong>影响：</strong> 不同的客户端在性能、连接数、优化算法等方面有所不同，会影响下载速度。</li><li><strong>优化：</strong> 好的客户端会自动寻找最优的连接，智能分配带宽。</li></ul></li><li><strong>文件热门程度：</strong><ul><li><strong>定义：</strong> 文件在 P2P 网络中的受欢迎程度。</li><li><strong>影响：</strong> 热门文件通常种子较多，下载速度更快，冷门文件可能缺少种子或种子质量不高。</li></ul></li><li><strong>DHT 网络和 Tracker：</strong><ul><li><strong>定义：</strong> DHT 网络和 Tracker 服务器帮助客户端找到其他节点。</li><li><strong>影响：</strong> 如果 DHT 网络连接不好或者 Tracker 服务器不稳定，会影响节点发现和下载速度。</li><li><strong>重要性：</strong> DHT 网络和 Tracker 服务器是保证 P2P 网络正常运行的关键组件。</li></ul></li></ol><p><strong>eD2k 链接下载速度的影响因素 (eDonkey2000 协议):</strong></p><ol><li><strong>源数量 (Sources):</strong><ul><li><strong>定义：</strong> 指的是拥有你想要下载的文件（或部分）的用户数量。</li><li><strong>影响：</strong> 源越多，你下载速度通常就越快，因为你可以从多个来源同时下载数据。</li><li><strong>关键性：</strong> 源数量是影响 eD2k 下载速度的最重要因素。</li></ul></li><li><strong>用户队列（Queue）:</strong><ul><li><strong>定义：</strong> 你在每个源用户处的下载队列中的位置。</li><li><strong>影响：</strong> 如果你位于队列中比较靠后的位置，你需要等待前面的用户下载完毕，才能轮到你。</li><li><strong>等待时间：</strong> 队列长度会直接影响下载的等待时间。</li></ul></li><li><strong>用户共享设置 (Credits):</strong><ul><li><strong>定义：</strong> eDonkey 网络中鼓励用户共享的机制。上传更多数据会获得更高的信用，从而在下载队列中优先。</li><li><strong>影响：</strong> 如果你没有上传足够的量，下载速度会受到限制。</li><li><strong>重要性：</strong> eDonkey 网络强调共享精神，积极上传有助于提升下载速度。</li></ul></li><li><strong>你的网络带宽：</strong><ul><li><strong>定义：</strong> 你的网络服务提供商 (ISP) 提供的最大下载速度。</li><li><strong>影响：</strong> 如果你的网络带宽很低，下载速度会受到物理限制。</li></ul></li><li><strong>你的网络环境：</strong><ul><li><strong>定义：</strong> 你的网络连接质量和稳定性。</li><li><strong>影响：</strong> 如果你的网络丢包严重或者延迟很高，下载速度会受到影响。</li><li><strong>NAT 类型：</strong> NAT 类型也会影响 P2P 连接，特别是低 ID 用户（Low ID）会影响连接其他用户。</li></ul></li><li><strong>下载客户端:</strong><ul><li><strong>定义：</strong> 你使用的 eDonkey 客户端软件的设置和性能。</li><li><strong>影响：</strong> 不同的客户端在性能、连接数、优化算法等方面有所不同，会影响下载速度。</li><li><strong>高ID：</strong>  客户端获取高ID有助于提升连接效率。</li></ul></li><li><strong>eD2k 服务器:</strong><ul><li><strong>定义：</strong> eD2k 服务器帮助客户端找到其他节点。</li><li><strong>影响：</strong> 如果服务器不稳定或连接较慢，会影响连接效率。</li><li><strong>重要性：</strong> 服务器是 eD2k 网络的关键组件。</li></ul></li></ol><h2 id="工具安装">工具安装</h2><ul><li>qbittorrent</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install qbittorrent-api</span><br><span class="line">https://www.fosshub.com/qBittorrent.html#</span><br></pre></td></tr></table></figure><ul><li>emule</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://sourceforge.net/projects/emule/files/latest/download</span><br></pre></td></tr></table></figure><h2 id="检测可用性等指标">检测可用性等指标</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> RotatingFileHandler</span><br><span class="line"></span><br><span class="line">log_dir = <span class="string">&quot;./logs&quot;</span></span><br><span class="line">log_file = os.path.join(log_dir, <span class="string">&quot;man_detect.log&quot;</span>)</span><br><span class="line">max_log_size = <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>  <span class="comment"># 10MB</span></span><br><span class="line">backup_count = <span class="number">5</span>  <span class="comment"># 最多保留5个日志文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建logs目录，如果不存在</span></span><br><span class="line">os.makedirs(log_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 创建 RotatingFileHandler 实例</span></span><br><span class="line">log_handler = RotatingFileHandler(log_file, maxBytes=max_log_size, backupCount=backup_count, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置日志格式</span></span><br><span class="line">log_format = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">log_handler.setFormatter(log_format)</span><br><span class="line"><span class="comment"># 获取 logger 实例</span></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"><span class="comment"># 添加 handler</span></span><br><span class="line">logger.addHandler(log_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加控制台输出</span></span><br><span class="line">stream_handler = logging.StreamHandler()</span><br><span class="line">stream_handler.setFormatter(log_format)</span><br><span class="line">logger.addHandler(stream_handler)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">check_tracker</span>(<span class="params">tracker_url, timeout=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;异步检查单个 Tracker 是否可用&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parsed_url = urllib.parse.urlparse(tracker_url)</span><br><span class="line">        <span class="keyword">if</span> parsed_url.scheme <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;udp&#x27;</span>, <span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>):</span><br><span class="line">            logging.warning(<span class="string">f&quot;跳过不支持的协议: <span class="subst">&#123;parsed_url.scheme&#125;</span> in <span class="subst">&#123;tracker_url&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> parsed_url.scheme <span class="keyword">in</span> (<span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 对于 http和 https 协议不做测试直接返回成功。</span></span><br><span class="line"></span><br><span class="line">        host = parsed_url.hostname</span><br><span class="line">        port = parsed_url.port <span class="keyword">or</span> <span class="number">80</span>  <span class="comment"># udp默认53， http默认80</span></span><br><span class="line"></span><br><span class="line">        loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">f&quot;尝试连接 tracker: <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>  协议: <span class="subst">&#123;parsed_url.scheme&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        future = loop.create_connection(</span><br><span class="line">            <span class="keyword">lambda</span>: asyncio.Protocol(),</span><br><span class="line">            host,</span><br><span class="line">            port</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用asyncio.wait_for设置超时</span></span><br><span class="line">        connection_tuple = <span class="keyword">await</span> asyncio.wait_for(future, timeout)</span><br><span class="line">        transport, protocol = connection_tuple</span><br><span class="line">        transport.close()</span><br><span class="line">        logging.info(<span class="string">f&quot;Tracker <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span> 连接成功&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> asyncio.TimeoutError:</span><br><span class="line">        logging.warning(<span class="string">f&quot;Tracker <span class="subst">&#123;tracker_url&#125;</span> 连接超时&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">        logging.warning(<span class="string">f&quot;Tracker <span class="subst">&#123;tracker_url&#125;</span> 连接错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理 Tracker <span class="subst">&#123;tracker_url&#125;</span> 异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">check_magnet_link</span>(<span class="params">magnet_link, timeout=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查磁力链接是否可用&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parsed_magnet = urllib.parse.urlparse(magnet_link)</span><br><span class="line">        query_params = urllib.parse.parse_qs(parsed_magnet.query)</span><br><span class="line"></span><br><span class="line">        trackers = query_params.get(<span class="string">&#x27;tr&#x27;</span>, [])  <span class="comment"># 获取所有 trackers</span></span><br><span class="line">        info_hash = query_params.get(<span class="string">&#x27;xt&#x27;</span>, [])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> trackers <span class="keyword">or</span> <span class="keyword">not</span> info_hash:</span><br><span class="line">            logging.warning(<span class="string">f&quot;磁力链不完整: <span class="subst">&#123;magnet_link&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        info_hash = info_hash[<span class="number">0</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">2</span>] <span class="keyword">if</span> info_hash[<span class="number">0</span>].startswith(<span class="string">&quot;urn:btih:&quot;</span>) <span class="keyword">else</span> info_hash[<span class="number">0</span>]</span><br><span class="line">        logging.info(<span class="string">f&quot;开始检查磁力链: <span class="subst">&#123;magnet_link&#125;</span> ,info_hash: <span class="subst">&#123;info_hash&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        tracker_tasks = [check_tracker(tracker, timeout) <span class="keyword">for</span> tracker <span class="keyword">in</span> trackers]</span><br><span class="line"></span><br><span class="line">        results = <span class="keyword">await</span> asyncio.gather(*tracker_tasks)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(results):</span><br><span class="line">            logging.info(<span class="string">f&quot;磁力链 <span class="subst">&#123;magnet_link&#125;</span> 有效&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.info(<span class="string">f&quot;磁力链 <span class="subst">&#123;magnet_link&#125;</span> 无效&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理磁力链 <span class="subst">&#123;magnet_link&#125;</span> 异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_check_ed2k_emule</span>(<span class="params">ed2k_link, emule_path, timeout=<span class="number">20</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 同步的 eMule 命令行检测函数，不应直接在asyncio线程调用 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 1. 添加 ed2k 链接</span></span><br><span class="line">        add_cmd = [emule_path, <span class="string">&quot;-add&quot;</span>, ed2k_link]</span><br><span class="line">        add_process = subprocess.run(add_cmd, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, check=<span class="literal">False</span>, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> add_process.returncode != <span class="number">0</span>:</span><br><span class="line">            logging.warning(<span class="string">f&quot;添加 ed2k 链接失败：<span class="subst">&#123;add_process.stderr.strip()&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 2. 获取下载状态</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="keyword">while</span> time.time() - start_time &lt; timeout:</span><br><span class="line">            status_cmd = [emule_path, <span class="string">&quot;-show&quot;</span>, <span class="string">&quot;-complete&quot;</span>]  <span class="comment"># show all downloading files</span></span><br><span class="line">            status_process = subprocess.run(status_cmd, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, check=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> status_process.returncode == <span class="number">0</span>:</span><br><span class="line">                output = status_process.stdout</span><br><span class="line">                <span class="comment"># 正则匹配 ed2k 链接 或文件名</span></span><br><span class="line">                pattern = re.<span class="built_in">compile</span>(re.escape(os.path.basename(ed2k_link)) <span class="keyword">or</span> re.escape(ed2k_link), re.IGNORECASE)</span><br><span class="line">                <span class="keyword">if</span> pattern.search(output):</span><br><span class="line">                    <span class="comment"># 状态匹配，如果状态存在则可能可用</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;Downloading&quot;</span> <span class="keyword">in</span> output <span class="keyword">or</span> <span class="string">&quot;Connecting&quot;</span> <span class="keyword">in</span> output <span class="keyword">or</span> <span class="string">&quot;Queued&quot;</span> <span class="keyword">in</span> output <span class="keyword">or</span> <span class="string">&quot;Waiting&quot;</span> <span class="keyword">in</span> output:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        logging.warning(<span class="string">f&quot;eMule 链接状态不在预期状态：<span class="subst">&#123;output&#125;</span>&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    logging.warning(<span class="string">f&quot;eMule 未找到指定链接：<span class="subst">&#123;output&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.warning(<span class="string">f&quot;获取 eMule 状态失败：<span class="subst">&#123;status_process.stderr.strip()&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;检查 ed2k 链接时发生异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">check_ed2k_emule</span>(<span class="params">ed2k_link, emule_path, timeout=<span class="number">20</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;异步的 eMule 命令行检测函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="keyword">await</span> asyncio.to_thread(_check_ed2k_emule, ed2k_link, emule_path, timeout)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;调用异步 eMule 检测函数发生异常:<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_get_column_index</span>(<span class="params">header, column_names</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 查找第一个匹配的列名，返回索引，否则返回-1 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> header:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> column_names:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> header.index(name)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">process_csv_file</span>(<span class="params">file_path, magnet_column_names, ed2k_column_names=<span class="literal">None</span>, emule_path=<span class="literal">None</span>, use_ed2k=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">                           timeout=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理单个 CSV 文件，并验证其中的磁力链接和ed2k链接, 返回可用的磁力链接列表, 保留原始数据&quot;&quot;&quot;</span></span><br><span class="line">    logging.info(<span class="string">f&quot;开始处理 CSV 文件: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">    available_rows = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">            reader = csv.reader(csvfile)</span><br><span class="line">            header = <span class="built_in">next</span>(reader, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> header:</span><br><span class="line">                logging.warning(<span class="string">f&quot;CSV文件为空: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> available_rows</span><br><span class="line"></span><br><span class="line">            magnet_column_index = _get_column_index(header, magnet_column_names)</span><br><span class="line">            <span class="keyword">if</span> magnet_column_index == -<span class="number">1</span>:</span><br><span class="line">                logging.error(<span class="string">f&quot;磁力链列名列表 &#x27;<span class="subst">&#123;magnet_column_names&#125;</span>&#x27; 在 CSV 文件中未找到: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> available_rows</span><br><span class="line">            ed2k_column_index = -<span class="number">1</span>  <span class="comment"># 默认值</span></span><br><span class="line">            <span class="keyword">if</span> use_ed2k <span class="keyword">and</span> ed2k_column_names:</span><br><span class="line">                ed2k_column_index = _get_column_index(header, ed2k_column_names)</span><br><span class="line">                <span class="keyword">if</span> ed2k_column_index == -<span class="number">1</span>:</span><br><span class="line">                    logging.error(<span class="string">f&quot;ed2k列名列表 &#x27;<span class="subst">&#123;ed2k_column_names&#125;</span>&#x27; 在 CSV 文件中未找到: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                    use_ed2k = <span class="literal">False</span>  <span class="comment"># 关闭ed2k</span></span><br><span class="line"></span><br><span class="line">            link_tasks = []</span><br><span class="line">            rows = []</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(row) &gt; magnet_column_index <span class="keyword">and</span> row[magnet_column_index]:</span><br><span class="line">                        magnet_link = row[magnet_column_index]</span><br><span class="line">                        link_tasks.append(check_magnet_link(magnet_link, timeout))</span><br><span class="line">                        rows.append(row)  <span class="comment"># 存储行数据</span></span><br><span class="line">                    <span class="keyword">elif</span> use_ed2k <span class="keyword">and</span> <span class="built_in">len</span>(row) &gt; ed2k_column_index <span class="keyword">and</span> row[ed2k_column_index]:</span><br><span class="line">                        ed2k_link = row[ed2k_column_index]</span><br><span class="line">                        link_tasks.append(check_ed2k_emule(ed2k_link, emule_path))</span><br><span class="line">                        rows.append(row)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        logging.warning(<span class="string">f&quot;跳过无效行，链接索引超出范围或为空, 文件:<span class="subst">&#123;file_path&#125;</span>, 行数据: <span class="subst">&#123;row&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    logging.error(<span class="string">f&quot;跳过无效行，处理行数据异常， 文件:<span class="subst">&#123;file_path&#125;</span>, 行数据: <span class="subst">&#123;row&#125;</span>, 异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            results = <span class="keyword">await</span> asyncio.gather(*link_tasks)</span><br><span class="line"></span><br><span class="line">            available_rows = [row <span class="keyword">for</span> row, is_valid <span class="keyword">in</span> <span class="built_in">zip</span>(rows, results) <span class="keyword">if</span> is_valid]</span><br><span class="line">            logging.info(<span class="string">f&quot;CSV 文件处理完毕: <span class="subst">&#123;file_path&#125;</span>， 找到了 <span class="subst">&#123;<span class="built_in">len</span>(available_rows)&#125;</span> 个可用的链接&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> header <span class="keyword">and</span> available_rows:  <span class="comment"># 将header 插入</span></span><br><span class="line">                available_rows.insert(<span class="number">0</span>, header)</span><br><span class="line">            <span class="keyword">return</span> available_rows</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理CSV文件异常：<span class="subst">&#123;file_path&#125;</span>, 异常：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">directory, magnet_column_names, output_directory, ed2k_column_names=<span class="literal">None</span>, emule_path=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">               use_ed2k=<span class="literal">False</span>, timeout=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主函数，遍历目录中的 CSV 文件，验证磁力链接，并将结果按文件名输出到新的 CSV 文件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(directory):</span><br><span class="line">        logging.error(<span class="string">f&quot;指定的目录不存在: <span class="subst">&#123;directory&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_directory):</span><br><span class="line">        os.makedirs(output_directory)</span><br><span class="line"></span><br><span class="line">    csv_tasks = []</span><br><span class="line">    <span class="keyword">for</span> dirpath, _, filenames <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            <span class="keyword">if</span> filename.lower().endswith(<span class="string">&#x27;.csv&#x27;</span>):</span><br><span class="line">                file_path = os.path.join(dirpath, filename)</span><br><span class="line">                csv_tasks.append(</span><br><span class="line">                    process_csv_file(file_path, magnet_column_names, ed2k_column_names, emule_path, use_ed2k, timeout))</span><br><span class="line"></span><br><span class="line">    results = <span class="keyword">await</span> asyncio.gather(*csv_tasks)</span><br><span class="line"></span><br><span class="line">    csv_files = []</span><br><span class="line">    <span class="keyword">for</span> dirpath, _, filenames <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            <span class="keyword">if</span> filename.lower().endswith(<span class="string">&#x27;.csv&#x27;</span>):</span><br><span class="line">                csv_files.append(os.path.join(dirpath, filename))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> filename, available_rows <span class="keyword">in</span> <span class="built_in">zip</span>(</span><br><span class="line">            csv_files, results):</span><br><span class="line"></span><br><span class="line">        output_file_path = os.path.join(output_directory, os.path.relpath(filename, directory))  <span class="comment"># 创建相对路径，保留目录结构</span></span><br><span class="line">        os.makedirs(os.path.dirname(output_file_path), exist_ok=<span class="literal">True</span>)  <span class="comment"># 创建输出目录</span></span><br><span class="line">        logging.info(</span><br><span class="line">            <span class="string">f&quot;开始写入 <span class="subst">&#123;<span class="built_in">len</span>(available_rows) - <span class="number">1</span> <span class="keyword">if</span> available_rows <span class="keyword">else</span> <span class="number">0</span>&#125;</span> 条可用链接到文件：<span class="subst">&#123;output_file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> available_rows:</span><br><span class="line">            logging.info(<span class="string">f&quot;CSV文件 <span class="subst">&#123;filename&#125;</span> 中没有可用的链接&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 如果当前文件没有有效链接，则跳过</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(output_file_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                writer = csv.writer(f)</span><br><span class="line">                writer.writerows(available_rows)  <span class="comment"># 写入所有行</span></span><br><span class="line">            logging.info(<span class="string">f&quot;成功写入可用链接到文件: <span class="subst">&#123;output_file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">f&quot;写入文件 <span class="subst">&#123;output_file_path&#125;</span> 失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    target_directory = <span class="string">r&quot;D:\pythonProject\audio_record_server\src\utils\data\man_link&quot;</span>  <span class="comment"># 指定 CSV 文件所在的目录</span></span><br><span class="line">    magnet_column_names = [<span class="string">&quot;磁力链&quot;</span>, <span class="string">&quot;磁力链接&quot;</span>]  <span class="comment"># 指定磁力链所在的列名列表</span></span><br><span class="line">    ed2k_column_names = [<span class="string">&quot;磁力链&quot;</span>, <span class="string">&quot;磁力链接&quot;</span>]  <span class="comment"># 指定ed2k 所在的列名列表</span></span><br><span class="line">    output_dir = <span class="string">r&quot;D:\pythonProject\audio_record_server\src\utils\data&quot;</span>  <span class="comment"># 指定输出目录</span></span><br><span class="line">    link_timeout = <span class="number">5</span>  <span class="comment"># 设置连接超时时间，秒</span></span><br><span class="line">    emule_path = <span class="string">r&quot;C:\Program Files (x86)\eMule\emule.exe&quot;</span>  <span class="comment"># 配置 eMule 可执行文件路径 (根据你的安装路径修改)</span></span><br><span class="line">    use_ed2k = <span class="literal">True</span>  <span class="comment"># 是否启用ed2k检测</span></span><br><span class="line"></span><br><span class="line">    asyncio.run(</span><br><span class="line">        main(target_directory, magnet_column_names, output_dir, ed2k_column_names, emule_path, use_ed2k, link_timeout))</span><br></pre></td></tr></table></figure><h2 id="检测速率等指标实现">检测速率等指标实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2025/1/22 11:02</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(czq)</span></span><br><span class="line"><span class="string">Version:  V 0.1</span></span><br><span class="line"><span class="string">File:     link_benck_mark.py</span></span><br><span class="line"><span class="string">Describe: Write during the python at zgxmt, Github link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">link: https://www.fosshub.com/qBittorrent.html#</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> qbittorrentapi <span class="keyword">import</span> Client, LoginFailed</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">check_tracker</span>(<span class="params">tracker_url, timeout=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;异步检查单个 Tracker 是否可用&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parsed_url = urllib.parse.urlparse(tracker_url)</span><br><span class="line">        <span class="keyword">if</span> parsed_url.scheme <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;udp&#x27;</span>, <span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>):</span><br><span class="line">            logging.warning(<span class="string">f&quot;跳过不支持的协议: <span class="subst">&#123;parsed_url.scheme&#125;</span> in <span class="subst">&#123;tracker_url&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> parsed_url.scheme <span class="keyword">in</span> (<span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 对于 http和 https 协议不做测试直接返回成功。</span></span><br><span class="line"></span><br><span class="line">        host = parsed_url.hostname</span><br><span class="line">        port = parsed_url.port <span class="keyword">or</span> <span class="number">80</span>  <span class="comment"># udp默认53， http默认80</span></span><br><span class="line"></span><br><span class="line">        loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">f&quot;尝试连接 tracker: <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>  协议: <span class="subst">&#123;parsed_url.scheme&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        future = loop.create_connection(</span><br><span class="line">            <span class="keyword">lambda</span>: asyncio.Protocol(),</span><br><span class="line">            host,</span><br><span class="line">            port</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用asyncio.wait_for设置超时</span></span><br><span class="line">        connection_tuple = <span class="keyword">await</span> asyncio.wait_for(future, timeout)</span><br><span class="line">        transport, protocol = connection_tuple</span><br><span class="line">        transport.close()</span><br><span class="line">        logging.info(<span class="string">f&quot;Tracker <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span> 连接成功&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> asyncio.TimeoutError:</span><br><span class="line">        logging.warning(<span class="string">f&quot;Tracker <span class="subst">&#123;tracker_url&#125;</span> 连接超时&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">        logging.warning(<span class="string">f&quot;Tracker <span class="subst">&#123;tracker_url&#125;</span> 连接错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理 Tracker <span class="subst">&#123;tracker_url&#125;</span> 异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">check_magnet_link</span>(<span class="params">magnet_link, timeout=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查磁力链接是否可用&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parsed_magnet = urllib.parse.urlparse(magnet_link)</span><br><span class="line">        query_params = urllib.parse.parse_qs(parsed_magnet.query)</span><br><span class="line"></span><br><span class="line">        trackers = query_params.get(<span class="string">&#x27;tr&#x27;</span>, [])  <span class="comment"># 获取所有 trackers</span></span><br><span class="line">        info_hash = query_params.get(<span class="string">&#x27;xt&#x27;</span>, [])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> trackers <span class="keyword">or</span> <span class="keyword">not</span> info_hash:</span><br><span class="line">            logging.warning(<span class="string">f&quot;磁力链不完整: <span class="subst">&#123;magnet_link&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        info_hash = info_hash[<span class="number">0</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">2</span>] <span class="keyword">if</span> info_hash[<span class="number">0</span>].startswith(<span class="string">&quot;urn:btih:&quot;</span>) <span class="keyword">else</span> info_hash[<span class="number">0</span>]</span><br><span class="line">        logging.info(<span class="string">f&quot;开始检查磁力链: <span class="subst">&#123;magnet_link&#125;</span> ,info_hash: <span class="subst">&#123;info_hash&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        tracker_tasks = [check_tracker(tracker, timeout) <span class="keyword">for</span> tracker <span class="keyword">in</span> trackers]</span><br><span class="line"></span><br><span class="line">        results = <span class="keyword">await</span> asyncio.gather(*tracker_tasks)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(results):</span><br><span class="line">            logging.info(<span class="string">f&quot;磁力链 <span class="subst">&#123;magnet_link&#125;</span> 有效&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.info(<span class="string">f&quot;磁力链 <span class="subst">&#123;magnet_link&#125;</span> 无效&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理磁力链 <span class="subst">&#123;magnet_link&#125;</span> 异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_check_ed2k_emule</span>(<span class="params">ed2k_link, emule_path, timeout=<span class="number">20</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 同步的 eMule 命令行检测函数，不应直接在asyncio线程调用 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 1. 添加 ed2k 链接</span></span><br><span class="line">        add_cmd = [emule_path, <span class="string">&quot;-add&quot;</span>, ed2k_link]</span><br><span class="line">        add_process = subprocess.run(add_cmd, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, check=<span class="literal">False</span>, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> add_process.returncode != <span class="number">0</span>:</span><br><span class="line">            logging.warning(<span class="string">f&quot;添加 ed2k 链接失败：<span class="subst">&#123;add_process.stderr.strip()&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 2. 获取下载状态</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="keyword">while</span> time.time() - start_time &lt; timeout:</span><br><span class="line">            status_cmd = [emule_path, <span class="string">&quot;-show&quot;</span>, <span class="string">&quot;-complete&quot;</span>]  <span class="comment"># show all downloading files</span></span><br><span class="line">            status_process = subprocess.run(status_cmd, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, check=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> status_process.returncode == <span class="number">0</span>:</span><br><span class="line">                output = status_process.stdout</span><br><span class="line">                <span class="comment"># 正则匹配 ed2k 链接 或文件名</span></span><br><span class="line">                pattern = re.<span class="built_in">compile</span>(re.escape(os.path.basename(ed2k_link)) <span class="keyword">or</span> re.escape(ed2k_link), re.IGNORECASE)</span><br><span class="line">                <span class="keyword">if</span> pattern.search(output):</span><br><span class="line">                    <span class="comment"># 状态匹配，如果状态存在则可能可用</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;Downloading&quot;</span> <span class="keyword">in</span> output <span class="keyword">or</span> <span class="string">&quot;Connecting&quot;</span> <span class="keyword">in</span> output <span class="keyword">or</span> <span class="string">&quot;Queued&quot;</span> <span class="keyword">in</span> output <span class="keyword">or</span> <span class="string">&quot;Waiting&quot;</span> <span class="keyword">in</span> output:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        logging.warning(<span class="string">f&quot;eMule 链接状态不在预期状态：<span class="subst">&#123;output&#125;</span>&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    logging.warning(<span class="string">f&quot;eMule 未找到指定链接：<span class="subst">&#123;output&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.warning(<span class="string">f&quot;获取 eMule 状态失败：<span class="subst">&#123;status_process.stderr.strip()&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;检查 ed2k 链接时发生异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">check_ed2k_emule</span>(<span class="params">ed2k_link, emule_path, timeout=<span class="number">20</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;异步的 eMule 命令行检测函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="keyword">await</span> asyncio.to_thread(_check_ed2k_emule, ed2k_link, emule_path, timeout)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;调用异步 eMule 检测函数发生异常:<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_bittorrent_info</span>(<span class="params">magnet_link, qbt_host=<span class="string">&#x27;127.0.0.1&#x27;</span>, qbt_port=<span class="number">8080</span>, qbt_user=<span class="string">&#x27;admin&#x27;</span>,</span></span><br><span class="line"><span class="params">                              qbt_pass=<span class="string">&#x27;adminadmin&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用 qBittorrent API 获取磁力链接信息 (示例)。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        client = Client(host=qbt_host, port=qbt_port, username=qbt_user, password=qbt_pass)</span><br><span class="line">        client.auth_log_in()  <span class="comment"># 登录客户端</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加磁力链接</span></span><br><span class="line">        torrent = client.torrents_add(magnet_link)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> torrent:</span><br><span class="line">            logging.info(<span class="string">f&quot;成功添加磁力链到 qBittorrent: <span class="subst">&#123;magnet_link&#125;</span>&quot;</span>)</span><br><span class="line">            start_time = time.time()</span><br><span class="line">            <span class="keyword">while</span> time.time() - start_time &lt; <span class="number">30</span>:  <span class="comment"># 最长等待30秒</span></span><br><span class="line">                <span class="comment"># 等待种子添加完成</span></span><br><span class="line">                torrent = client.torrents_info(torrent_hashes=torrent.<span class="built_in">hash</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> torrent.state <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&quot;stalledDL&quot;</span>, <span class="string">&quot;queuedDL&quot;</span>, <span class="string">&quot;checkingDL&quot;</span>):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 防止CPU过高</span></span><br><span class="line">            <span class="keyword">if</span> torrent.state <span class="keyword">in</span> (<span class="string">&quot;stalledDL&quot;</span>, <span class="string">&quot;queuedDL&quot;</span>, <span class="string">&quot;checkingDL&quot;</span>):</span><br><span class="line">                logging.warning(<span class="string">f&quot;qBittorrent 添加磁力链后超时: <span class="subst">&#123;magnet_link&#125;</span> ,状态:<span class="subst">&#123;torrent.state&#125;</span>&quot;</span>)</span><br><span class="line">                client.torrents_delete(delete_files=<span class="literal">True</span>, torrent_hashes=torrent.<span class="built_in">hash</span>)</span><br><span class="line">                <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">            seeders = torrent.num_seeds</span><br><span class="line">            peers = torrent.num_peers</span><br><span class="line">            progress = torrent.progress</span><br><span class="line">            down_speed = torrent.dlspeed</span><br><span class="line">            up_speed = torrent.upspeed</span><br><span class="line">            <span class="comment"># 删除torrent</span></span><br><span class="line">            client.torrents_delete(delete_files=<span class="literal">True</span>, torrent_hashes=torrent.<span class="built_in">hash</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">&quot;seeders&quot;</span>: seeders,</span><br><span class="line">                <span class="string">&quot;peers&quot;</span>: peers,</span><br><span class="line">                <span class="string">&quot;progress&quot;</span>: progress,</span><br><span class="line">                <span class="string">&quot;down_speed&quot;</span>: down_speed,</span><br><span class="line">                <span class="string">&quot;up_speed&quot;</span>: up_speed,</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.warning(<span class="string">f&quot;qBittorrent 添加磁力链失败: <span class="subst">&#123;magnet_link&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">except</span> LoginFailed:</span><br><span class="line">        logging.error(<span class="string">f&quot;qBittorrent登录失败，请检查地址，用户名和密码：&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;获取 BitTorrent 信息时发生异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_ed2k_info</span>(<span class="params">ed2k_link, timeout=<span class="number">20</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    尝试解析 ed2k 链接，提取文件名，大小。</span></span><br><span class="line"><span class="string">    注意：这仅仅是解析链接信息，无法获取实时下载状态。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ed2k_link:</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">        file_name = <span class="literal">None</span></span><br><span class="line">        file_size = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&#x27;ed2k:\/\/\|file\|(.+?)\|(\d+)\|.+&#x27;</span>, ed2k_link)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            file_name = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">            file_size = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;file_name&quot;</span>: file_name,</span><br><span class="line">            <span class="string">&quot;file_size&quot;</span>: file_size</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;解析 ed2k 链接失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_get_column_index</span>(<span class="params">header, column_names</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 查找第一个匹配的列名，返回索引，否则返回-1 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> header:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> column_names:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> header.index(name)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">process_csv_file</span>(<span class="params">file_path, magnet_column_names, ed2k_column_names=<span class="literal">None</span>, emule_path=<span class="literal">None</span>, use_ed2k=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">                           qbt_host=<span class="string">&#x27;127.0.0.1&#x27;</span>, qbt_port=<span class="number">8080</span>, qbt_user=<span class="string">&#x27;admin&#x27;</span>,</span></span><br><span class="line"><span class="params">                           qbt_pass=<span class="string">&#x27;adminadmin&#x27;</span>, timeout=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理单个 CSV 文件，并验证其中的磁力链接和ed2k链接, 返回可用的磁力链接列表, 保留原始数据&quot;&quot;&quot;</span></span><br><span class="line">    logging.info(<span class="string">f&quot;开始处理 CSV 文件: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">    available_rows = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">            reader = csv.reader(csvfile)</span><br><span class="line">            header = <span class="built_in">next</span>(reader, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> header:</span><br><span class="line">                logging.warning(<span class="string">f&quot;CSV文件为空: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> available_rows</span><br><span class="line"></span><br><span class="line">            magnet_column_index = _get_column_index(header, magnet_column_names)</span><br><span class="line">            <span class="keyword">if</span> magnet_column_index == -<span class="number">1</span>:</span><br><span class="line">                logging.error(<span class="string">f&quot;磁力链列名列表 &#x27;<span class="subst">&#123;magnet_column_names&#125;</span>&#x27; 在 CSV 文件中未找到: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> available_rows</span><br><span class="line">            ed2k_column_index = -<span class="number">1</span>  <span class="comment"># 默认值</span></span><br><span class="line">            <span class="keyword">if</span> use_ed2k <span class="keyword">and</span> ed2k_column_names:</span><br><span class="line">                ed2k_column_index = _get_column_index(header, ed2k_column_names)</span><br><span class="line">                <span class="keyword">if</span> ed2k_column_index == -<span class="number">1</span>:</span><br><span class="line">                    logging.error(<span class="string">f&quot;ed2k列名列表 &#x27;<span class="subst">&#123;ed2k_column_names&#125;</span>&#x27; 在 CSV 文件中未找到: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                    use_ed2k = <span class="literal">False</span>  <span class="comment"># 关闭ed2k</span></span><br><span class="line"></span><br><span class="line">            link_tasks = []</span><br><span class="line">            rows = []</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(row) &gt; magnet_column_index <span class="keyword">and</span> row[magnet_column_index]:</span><br><span class="line">                        magnet_link = row[magnet_column_index]</span><br><span class="line">                        link_tasks.append(check_magnet_link(magnet_link, timeout))</span><br><span class="line">                        rows.append(row)  <span class="comment"># 存储行数据</span></span><br><span class="line">                    <span class="keyword">elif</span> use_ed2k <span class="keyword">and</span> <span class="built_in">len</span>(row) &gt; ed2k_column_index <span class="keyword">and</span> row[ed2k_column_index]:</span><br><span class="line">                        ed2k_link = row[ed2k_column_index]</span><br><span class="line">                        link_tasks.append(check_ed2k_emule(ed2k_link, emule_path))</span><br><span class="line">                        rows.append(row)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        logging.warning(<span class="string">f&quot;跳过无效行，链接索引超出范围或为空, 文件:<span class="subst">&#123;file_path&#125;</span>, 行数据: <span class="subst">&#123;row&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    logging.error(<span class="string">f&quot;跳过无效行，处理行数据异常， 文件:<span class="subst">&#123;file_path&#125;</span>, 行数据: <span class="subst">&#123;row&#125;</span>, 异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            results = <span class="keyword">await</span> asyncio.gather(*link_tasks)</span><br><span class="line"></span><br><span class="line">            available_rows = [row <span class="keyword">for</span> row, is_valid <span class="keyword">in</span> <span class="built_in">zip</span>(rows, results) <span class="keyword">if</span> is_valid]</span><br><span class="line">            logging.info(<span class="string">f&quot;CSV 文件处理完毕: <span class="subst">&#123;file_path&#125;</span>， 找到了 <span class="subst">&#123;<span class="built_in">len</span>(available_rows)&#125;</span> 个可用的链接&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 添加额外信息</span></span><br><span class="line">            available_rows_with_info = []</span><br><span class="line">            <span class="keyword">if</span> header <span class="keyword">and</span> available_rows:</span><br><span class="line">                available_rows_with_info.append(</span><br><span class="line">                    header + [<span class="string">&quot;磁力链种子数&quot;</span>, <span class="string">&quot;磁力链节点数&quot;</span>, <span class="string">&quot;磁力链下载进度&quot;</span>, <span class="string">&quot;磁力链下载速度&quot;</span>, <span class="string">&quot;磁力链上传速度&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;ed2k文件名&quot;</span>, <span class="string">&quot;ed2k文件大小&quot;</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> row, is_valid <span class="keyword">in</span> <span class="built_in">zip</span>(rows, results):</span><br><span class="line">                <span class="keyword">if</span> is_valid:</span><br><span class="line">                    extra_info = [<span class="string">&quot;N/A&quot;</span>, <span class="string">&quot;N/A&quot;</span>, <span class="string">&quot;N/A&quot;</span>, <span class="string">&quot;N/A&quot;</span>, <span class="string">&quot;N/A&quot;</span>, <span class="string">&quot;N/A&quot;</span>, <span class="string">&quot;N/A&quot;</span>]</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(row) &gt; magnet_column_index <span class="keyword">and</span> row[magnet_column_index]:</span><br><span class="line">                        magnet_link = row[magnet_column_index]</span><br><span class="line">                        torrent_info = <span class="keyword">await</span> get_bittorrent_info(magnet_link, qbt_host, qbt_port, qbt_user, qbt_pass)</span><br><span class="line">                        <span class="keyword">if</span> torrent_info:</span><br><span class="line">                            extra_info[<span class="number">0</span>] = torrent_info.get(<span class="string">&#x27;seeders&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>)</span><br><span class="line">                            extra_info[<span class="number">1</span>] = torrent_info.get(<span class="string">&#x27;peers&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>)</span><br><span class="line">                            extra_info[<span class="number">2</span>] = <span class="string">f&quot;<span class="subst">&#123;torrent_info.get(<span class="string">&#x27;progress&#x27;</span>, <span class="number">0</span>) * <span class="number">100</span>:<span class="number">.2</span>f&#125;</span>%&quot;</span></span><br><span class="line">                            extra_info[<span class="number">3</span>] = <span class="string">f&quot;<span class="subst">&#123;torrent_info.get(<span class="string">&#x27;down_speed&#x27;</span>, <span class="number">0</span>) / <span class="number">1024</span>:<span class="number">.2</span>f&#125;</span> KB/s&quot;</span></span><br><span class="line">                            extra_info[<span class="number">4</span>] = <span class="string">f&quot;<span class="subst">&#123;torrent_info.get(<span class="string">&#x27;up_speed&#x27;</span>, <span class="number">0</span>) / <span class="number">1024</span>:<span class="number">.2</span>f&#125;</span> KB/s&quot;</span></span><br><span class="line">                    <span class="keyword">if</span> use_ed2k <span class="keyword">and</span> <span class="built_in">len</span>(row) &gt; ed2k_column_index <span class="keyword">and</span> row[ed2k_column_index]:</span><br><span class="line">                        ed2k_link = row[ed2k_column_index]</span><br><span class="line">                        ed2k_info = <span class="keyword">await</span> get_ed2k_info(ed2k_link)</span><br><span class="line">                        extra_info[<span class="number">5</span>] = ed2k_info.get(<span class="string">&quot;file_name&quot;</span>, <span class="string">&#x27;N/A&#x27;</span>)</span><br><span class="line">                        extra_info[<span class="number">6</span>] = ed2k_info.get(<span class="string">&quot;file_size&quot;</span>, <span class="string">&#x27;N/A&#x27;</span>)</span><br><span class="line">                    available_rows_with_info.append(row + extra_info)</span><br><span class="line">            <span class="keyword">return</span> available_rows_with_info</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理CSV文件异常：<span class="subst">&#123;file_path&#125;</span>, 异常：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">directory, magnet_column_names, output_directory, ed2k_column_names=<span class="literal">None</span>, emule_path=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">               use_ed2k=<span class="literal">False</span>, qbt_host=<span class="string">&#x27;127.0.0.1&#x27;</span>, qbt_port=<span class="number">8080</span>, qbt_user=<span class="string">&#x27;admin&#x27;</span>,</span></span><br><span class="line"><span class="params">               qbt_pass=<span class="string">&#x27;adminadmin&#x27;</span>, timeout=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主函数，遍历目录中的 CSV 文件，验证磁力链接，并将结果按文件名输出到新的 CSV 文件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(directory):</span><br><span class="line">        logging.error(<span class="string">f&quot;指定的目录不存在: <span class="subst">&#123;directory&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_directory):</span><br><span class="line">        os.makedirs(output_directory)</span><br><span class="line"></span><br><span class="line">    csv_tasks = []</span><br><span class="line">    <span class="keyword">for</span> dirpath, _, filenames <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            <span class="keyword">if</span> filename.lower().endswith(<span class="string">&#x27;.csv&#x27;</span>):</span><br><span class="line">                file_path = os.path.join(dirpath, filename)</span><br><span class="line">                csv_tasks.append(</span><br><span class="line">                    process_csv_file(file_path, magnet_column_names, ed2k_column_names, emule_path, use_ed2k, qbt_host,</span><br><span class="line">                                     qbt_port, qbt_user, qbt_pass, timeout))</span><br><span class="line"></span><br><span class="line">    results = <span class="keyword">await</span> asyncio.gather(*csv_tasks)</span><br><span class="line"></span><br><span class="line">    csv_files = []</span><br><span class="line">    <span class="keyword">for</span> dirpath, _, filenames <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            <span class="keyword">if</span> filename.lower().endswith(<span class="string">&#x27;.csv&#x27;</span>):</span><br><span class="line">                csv_files.append(os.path.join(dirpath, filename))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> filename, available_rows <span class="keyword">in</span> <span class="built_in">zip</span>(</span><br><span class="line">            csv_files, results):</span><br><span class="line"></span><br><span class="line">        output_file_path = os.path.join(output_directory, os.path.relpath(filename, directory))  <span class="comment"># 创建相对路径，保留目录结构</span></span><br><span class="line">        os.makedirs(os.path.dirname(output_file_path), exist_ok=<span class="literal">True</span>)  <span class="comment"># 创建输出目录</span></span><br><span class="line">        logging.info(</span><br><span class="line">            <span class="string">f&quot;开始写入 <span class="subst">&#123;<span class="built_in">len</span>(available_rows) - <span class="number">1</span> <span class="keyword">if</span> available_rows <span class="keyword">else</span> <span class="number">0</span>&#125;</span> 条可用链接到文件：<span class="subst">&#123;output_file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> available_rows:</span><br><span class="line">            logging.info(<span class="string">f&quot;CSV文件 <span class="subst">&#123;filename&#125;</span> 中没有可用的链接&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 如果当前文件没有有效链接，则跳过</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(output_file_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                writer = csv.writer(f)</span><br><span class="line">                writer.writerows(available_rows)  <span class="comment"># 写入所有行</span></span><br><span class="line">            logging.info(<span class="string">f&quot;成功写入可用链接到文件: <span class="subst">&#123;output_file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">f&quot;写入文件 <span class="subst">&#123;output_file_path&#125;</span> 失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    target_directory = <span class="string">r&quot;D:\pythonProject\audio_record_server\src\utils\data\man_link&quot;</span>  <span class="comment"># 指定 CSV 文件所在的目录</span></span><br><span class="line">    magnet_column_names = [<span class="string">&quot;磁力链&quot;</span>, <span class="string">&quot;磁力链接&quot;</span>]  <span class="comment"># 指定磁力链所在的列名列表</span></span><br><span class="line">    ed2k_column_names = [<span class="string">&quot;磁力链&quot;</span>, <span class="string">&quot;磁力链接&quot;</span>]  <span class="comment"># 指定ed2k 所在的列名列表</span></span><br><span class="line">    output_dir = <span class="string">r&quot;D:\pythonProject\audio_record_server\src\utils\data&quot;</span>  <span class="comment"># 指定输出目录</span></span><br><span class="line">    link_timeout = <span class="number">5</span>  <span class="comment"># 设置连接超时时间，秒</span></span><br><span class="line">    emule_path = <span class="string">r&quot;C:\Program Files (x86)\eMule\emule.exe&quot;</span>  <span class="comment"># 配置 eMule 可执行文件路径 (根据你的安装路径修改)</span></span><br><span class="line">    use_ed2k = <span class="literal">True</span>  <span class="comment"># 是否启用ed2k检测</span></span><br><span class="line">    qbt_host = <span class="string">&#x27;127.0.0.1&#x27;</span>  <span class="comment"># qBittorrent WebUI 地址</span></span><br><span class="line">    qbt_port = <span class="number">8080</span>  <span class="comment"># qBittorrent WebUI 端口</span></span><br><span class="line">    qbt_user = <span class="string">&#x27;admin&#x27;</span>  <span class="comment"># qBittorrent WebUI 用户名</span></span><br><span class="line">    qbt_pass = <span class="string">&#x27;adminadmin&#x27;</span>  <span class="comment"># qBittorrent WebUI 密码</span></span><br><span class="line"></span><br><span class="line">    asyncio.run(</span><br><span class="line">        main(target_directory, magnet_column_names, output_dir, ed2k_column_names, emule_path, use_ed2k, qbt_host,</span><br><span class="line">             qbt_port, qbt_user, qbt_pass, link_timeout))</span><br></pre></td></tr></table></figure><h2 id="接入迅雷-自动化下载">接入迅雷 自动化下载</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">download_with_thunder</span>(<span class="params">thunder_path, link, output_path=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用迅雷下载链接&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> thunder_path:</span><br><span class="line">        logging.warning(<span class="string">&quot;迅雷路径未找到，无法下载&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cmd = [thunder_path, link]  <span class="comment"># 最基础的下载命令</span></span><br><span class="line">        <span class="keyword">if</span> output_path:</span><br><span class="line">            cmd.insert(<span class="number">1</span>, <span class="string">f&quot;--output=<span class="subst">&#123;shlex.quote(output_path)&#125;</span>&quot;</span>)</span><br><span class="line">        subprocess.Popen(cmd, creationflags=subprocess.CREATE_NO_WINDOW)</span><br><span class="line">        logging.info(<span class="string">f&quot;已添加迅雷下载任务: <span class="subst">&#123;link&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;迅雷下载失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="磁力链中关键信息提取">磁力链中关键信息提取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2025/1/22 14:11</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(czq)</span></span><br><span class="line"><span class="string">Version:  V 0.1</span></span><br><span class="line"><span class="string">File:     bit_link_msg_split.py</span></span><br><span class="line"><span class="string">Describe: Write during the python at zgxmt, Github link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> qbittorrentapi <span class="keyword">import</span> Client, LoginFailed</span><br><span class="line"><span class="keyword">from</span> qbittorrentapi.torrents <span class="keyword">import</span> TorrentDictionary</span><br><span class="line"><span class="keyword">import</span> time  <span class="comment"># 导入time模块</span></span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">open_magnet_link</span>(<span class="params">magnet_link, qbt_host=<span class="string">&#x27;127.0.0.1&#x27;</span>, qbt_port=<span class="number">8080</span>, qbt_user=<span class="string">&#x27;admin&#x27;</span>, qbt_pass=<span class="string">&#x27;adminadmin&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用指定的程序打开磁力链接并提取信息。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">        client = Client(host=qbt_host, port=qbt_port, username=qbt_user, password=qbt_pass)</span><br><span class="line">        client.auth_log_in()</span><br><span class="line"></span><br><span class="line">        torrent = client.torrents_add(magnet_link)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(torrent, TorrentDictionary):</span><br><span class="line">            torrent_hash = torrent.<span class="built_in">hash</span></span><br><span class="line">            logging.info(<span class="string">f&quot;成功添加磁力链到 qBittorrent: <span class="subst">&#123;magnet_link&#125;</span>, torrent hash:<span class="subst">&#123;torrent_hash&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(torrent, <span class="built_in">str</span>):</span><br><span class="line">            torrent_hash = torrent</span><br><span class="line">            logging.warning(<span class="string">f&quot;添加磁力链返回了字符串，尝试使用hash:<span class="subst">&#123;magnet_link&#125;</span>, torrent hash:<span class="subst">&#123;torrent_hash&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> torrent <span class="keyword">in</span> (<span class="string">&quot;Fails&quot;</span>, <span class="string">&quot;Ok&quot;</span>):</span><br><span class="line">                logging.error(<span class="string">f&quot;添加磁力链失败，返回了Fails或者Ok字符串：<span class="subst">&#123;magnet_link&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.error(<span class="string">f&quot;添加磁力链返回未知对象：<span class="subst">&#123;<span class="built_in">type</span>(torrent)&#125;</span>，<span class="subst">&#123;torrent&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> torrent_hash:</span><br><span class="line"></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            <span class="keyword">while</span> time.time() - start_time &lt; <span class="number">30</span>:  <span class="comment"># 最长等待30秒</span></span><br><span class="line">                <span class="comment"># 等待种子添加完成</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    torrent = client.torrents_info(torrent_hashes=torrent_hash)[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">if</span> torrent.state <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&quot;stalledDL&quot;</span>, <span class="string">&quot;queuedDL&quot;</span>, <span class="string">&quot;checkingDL&quot;</span>):</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    logging.error(<span class="string">f&quot;获取 torrent 信息失败，<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                    client.torrents_delete(delete_files=<span class="literal">True</span>, torrent_hashes=torrent_hash)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 防止CPU过高</span></span><br><span class="line">            <span class="keyword">if</span> torrent.state <span class="keyword">in</span> (<span class="string">&quot;stalledDL&quot;</span>, <span class="string">&quot;queuedDL&quot;</span>, <span class="string">&quot;checkingDL&quot;</span>):</span><br><span class="line">                logging.warning(<span class="string">f&quot;qBittorrent 添加磁力链后超时: <span class="subst">&#123;magnet_link&#125;</span> ,状态:<span class="subst">&#123;torrent.state&#125;</span>&quot;</span>)</span><br><span class="line">                client.torrents_delete(delete_files=<span class="literal">True</span>, torrent_hashes=torrent_hash)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            name = torrent.name</span><br><span class="line">            size = torrent.size</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 解析名称</span></span><br><span class="line">            pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;^(.*?)\.S(\d+)(?:E(\d+))?.*?(?:(\d&#123;3,4&#125;p))?.*$&quot;</span>)</span><br><span class="line">            <span class="keyword">match</span> = pattern.<span class="keyword">match</span>(name)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                title = <span class="keyword">match</span>.group(<span class="number">1</span>).replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot; &quot;</span>)  <span class="comment"># 替换点号为空格</span></span><br><span class="line">                season = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">2</span>)) <span class="keyword">if</span> <span class="keyword">match</span>.group(<span class="number">2</span>) <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">                episode = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">3</span>)) <span class="keyword">if</span> <span class="keyword">match</span>.group(<span class="number">3</span>) <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">                resolution = <span class="keyword">match</span>.group(<span class="number">4</span>) <span class="keyword">if</span> <span class="keyword">match</span>.group(<span class="number">4</span>) <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                title = name</span><br><span class="line">                season = <span class="literal">None</span></span><br><span class="line">                episode = <span class="literal">None</span></span><br><span class="line">                resolution = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># 删除torrent</span></span><br><span class="line">            client.torrents_delete(delete_files=<span class="literal">True</span>, torrent_hashes=torrent_hash)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">&quot;title&quot;</span>: title.strip(),</span><br><span class="line">                <span class="string">&quot;season&quot;</span>: season,</span><br><span class="line">                <span class="string">&quot;episode&quot;</span>: episode,</span><br><span class="line">                <span class="string">&quot;resolution&quot;</span>: resolution,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">                <span class="string">&quot;size&quot;</span>: size</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.warning(<span class="string">f&quot;qBittorrent 添加磁力链失败，返回hash为空 : <span class="subst">&#123;magnet_link&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> LoginFailed:</span><br><span class="line">        logging.error(<span class="string">f&quot;qBittorrent登录失败，请检查地址，用户名和密码：&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;使用 qBittorrent 打开磁力链失败，<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_magnet_info_from_string</span>(<span class="params">magnet_link</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从磁力链接本身解析信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parsed_magnet = urllib.parse.urlparse(magnet_link)</span><br><span class="line">        query_params = urllib.parse.parse_qs(parsed_magnet.query)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;dn&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> query_params:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        file_name = query_params[<span class="string">&#x27;dn&#x27;</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 正则表达式</span></span><br><span class="line">        pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;^(.*?)\.S(\d+)(?:E(\d+))?.*?(?:(\d&#123;3,4&#125;p))?.*$&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">match</span> = pattern.<span class="keyword">match</span>(file_name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            title = <span class="keyword">match</span>.group(<span class="number">1</span>).replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot; &quot;</span>)  <span class="comment"># 替换点号为空格</span></span><br><span class="line">            season = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">2</span>)) <span class="keyword">if</span> <span class="keyword">match</span>.group(<span class="number">2</span>) <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            episode = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">3</span>)) <span class="keyword">if</span> <span class="keyword">match</span>.group(<span class="number">3</span>) <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            resolution = <span class="keyword">match</span>.group(<span class="number">4</span>) <span class="keyword">if</span> <span class="keyword">match</span>.group(<span class="number">4</span>) <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">&quot;title&quot;</span>: title.strip(),</span><br><span class="line">                <span class="string">&quot;season&quot;</span>: season,</span><br><span class="line">                <span class="string">&quot;episode&quot;</span>: episode,</span><br><span class="line">                <span class="string">&quot;resolution&quot;</span>: resolution,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: file_name,</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;解析磁力链接异常：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    magnet_link = <span class="string">&quot;magnet:?xt=urn:btih:362f3486e3ac1df5844305e90fd5cdae01f5ac0c&amp;tr=http://tr.cili001.com:8070/announce&amp;tr=udp://p4p.arenabg.com:1337&amp;tr=udp://tracker.opentrackr.org:1337/announce&amp;tr=udp://open.demonii.com:1337&quot;</span></span><br><span class="line">    qbt_host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">    qbt_port = <span class="number">8080</span></span><br><span class="line">    qbt_user = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">    qbt_pass = <span class="string">&#x27;adminadmin&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用 qBittorrent</span></span><br><span class="line">        info_from_qbt = <span class="keyword">await</span> open_magnet_link(magnet_link, qbt_host, qbt_port, qbt_user, qbt_pass)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> info_from_qbt:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;通过 qBittorrent 获取信息:&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  标题: <span class="subst">&#123;info_from_qbt.get(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> info_from_qbt.get(<span class="string">&#x27;season&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  季数: 第 <span class="subst">&#123;info_from_qbt[<span class="string">&#x27;season&#x27;</span>]&#125;</span> 季&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> info_from_qbt.get(<span class="string">&#x27;episode&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  集数: 第 <span class="subst">&#123;info_from_qbt[<span class="string">&#x27;episode&#x27;</span>]&#125;</span> 集&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  清晰度: <span class="subst">&#123;info_from_qbt.get(<span class="string">&#x27;resolution&#x27;</span>, <span class="string">&#x27;未知&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  文件名: <span class="subst">&#123;info_from_qbt.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;未知&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  文件大小: <span class="subst">&#123;info_from_qbt.get(<span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;未知&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            info_from_magnet = extract_magnet_info_from_string(magnet_link)</span><br><span class="line">            <span class="keyword">if</span> info_from_magnet:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;通过解析磁力链接获取信息:&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  标题: <span class="subst">&#123;info_from_magnet.get(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> info_from_magnet.get(<span class="string">&#x27;season&#x27;</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  季数: 第 <span class="subst">&#123;info_from_magnet.get(<span class="string">&#x27;season&#x27;</span>)&#125;</span> 季&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> info_from_magnet.get(<span class="string">&#x27;episode&#x27;</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  集数: 第 <span class="subst">&#123;info_from_magnet.get(<span class="string">&#x27;episode&#x27;</span>)&#125;</span> 集&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  清晰度: <span class="subst">&#123;info_from_magnet.get(<span class="string">&#x27;resolution&#x27;</span>, <span class="string">&#x27;未知&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  文件名: <span class="subst">&#123;info_from_magnet.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;未知&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;无法提取磁力链信息&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu服务器搭建 NAS</title>
      <link href="/2025/01/23/ubuntu-nas/"/>
      <url>/2025/01/23/ubuntu-nas/</url>
      
        <content type="html"><![CDATA[<h1>在ubuntu服务器搭建 NAS</h1><h2 id="SMB协议搭建NAS">SMB协议搭建NAS</h2><blockquote><p>通过webmini使用samba可视化搭建nas</p></blockquote><h3 id="磁盘挂载">磁盘挂载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br><span class="line">sudo pvdisplay  # 查看物理卷信息</span><br><span class="line">sudo vgdisplay  # 查看卷组信息</span><br><span class="line">sudo lvdisplay  # 查看逻辑卷信息</span><br><span class="line">sudo lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv</span><br><span class="line">sudo resize2fs /dev/ubuntu-vg/ubuntu-l</span><br><span class="line">df -h /dev/ubuntu-vg/ubuntu-lv</span><br><span class="line">sudo lvdisplay /dev/ubuntu-vg/ubuntu-lv</span><br></pre></td></tr></table></figure><h3 id="webmin">webmin</h3><blockquote><p>Webmin 是一个功能强大的 Web 系统管理工具，提供了丰富的图形化界面，可以配置 Linux 服务器的各个方面</p></blockquote><h4 id="install">install</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.webmin.com/jcameron-key.asc</span><br><span class="line">sudo apt-key add jcameron-key.asc</span><br><span class="line">sudo echo &quot;deb http://download.webmin.com/download/repository sarge contrib&quot; | sudo tee /etc/apt/sources.list.d/webmin.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install webmin</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="proxy">proxy</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">sudo</span> vim ~/.bashrc</span></span><br><span class="line"></span><br><span class="line">export http_proxy=http://192.168.10.65:7890</span><br><span class="line">export https_proxy=https://192.168.10.65:7890</span><br><span class="line">export no_proxy=&quot;localhost,127.0.0.1,*.local&quot;</span><br><span class="line">export all_proxy=socks5://192.168.10.65:7890 # 如果是 socks 代理</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="samba">samba</h3><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install samba</span><br></pre></td></tr></table></figure><ul><li>config</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">workgroup = WORKGROUP        # 设置工作组名称，通常为 WORKGROUP</span><br><span class="line">server string = %h server    # 设置服务器描述</span><br><span class="line">netbios name = nas-server    # 设置服务器 NetBIOS 名称</span><br><span class="line">security = user              # 设置安全模式为用户认证</span><br><span class="line">map to guest = bad user      # 拒绝匿名用户访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[shared]                       # 设置共享名称</span><br><span class="line">path = /mnt/nas                # 设置共享目录路径</span><br><span class="line">valid users = user1,user2       # 设置允许访问的用户列表</span><br><span class="line">read only = no                 # 允许读写访问</span><br><span class="line">browseable = yes               # 允许在网络中浏览</span><br><span class="line">guest ok = no                 # 禁止匿名访问</span><br><span class="line">force user = root              # 用 root 身份操作</span><br><span class="line">create mask = 0777             # 创建文件的权限</span><br><span class="line">directory mask = 0777           # 创建目录的权限</span><br></pre></td></tr></table></figure><ul><li>服务重启</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart smbd</span><br></pre></td></tr></table></figure><h3 id="samba完整配置文件">samba完整配置文件</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#======================= Global Settings =======================</span></span><br><span class="line"></span><br><span class="line"><span class="section">[global]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Browsing/Identification ###</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Change this to the workgroup/NT-domain name your Samba server will part of</span></span><br><span class="line"><span class="attr">workgroup</span> = zgxmt</span><br><span class="line"></span><br><span class="line"><span class="comment"># server string is the equivalent of the NT Description field</span></span><br><span class="line">server <span class="attr">string</span> = %h server (Samba, Ubuntu)</span><br><span class="line"></span><br><span class="line">netbios <span class="attr">name</span> = nas</span><br><span class="line"></span><br><span class="line"><span class="attr">security</span> = user</span><br><span class="line"></span><br><span class="line">map to <span class="attr">guest</span> = bad user</span><br><span class="line"></span><br><span class="line">log <span class="attr">file</span> = /var/log/samba/log.%m</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cap the size of the individual log files (in KiB).</span></span><br><span class="line">max log <span class="attr">size</span> = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We want Samba to only log to /var/log/samba/log.&#123;smbd,nmbd&#125;.</span></span><br><span class="line"><span class="comment"># Append syslog@1 if you want important messages to be sent to syslog too.</span></span><br><span class="line"><span class="attr">logging</span> = file</span><br><span class="line"></span><br><span class="line"><span class="comment"># Do something sensible when Samba crashes: mail the admin a backtrace</span></span><br><span class="line">panic <span class="attr">action</span> = /usr/share/samba/panic-action %d</span><br><span class="line"></span><br><span class="line">server <span class="attr">role</span> = standalone server</span><br><span class="line"></span><br><span class="line">obey pam <span class="attr">restrictions</span> = <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This boolean parameter controls whether Samba attempts to sync the Unix</span></span><br><span class="line"><span class="comment"># password with the SMB password when the encrypted SMB password in the</span></span><br><span class="line"><span class="comment"># passdb is changed.</span></span><br><span class="line">unix password <span class="attr">sync</span> = <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For Unix password sync to work on a Debian GNU/Linux system, the following</span></span><br><span class="line"><span class="comment"># parameters must be set (thanks to Ian Kahan &lt;&lt;kahan@informatik.tu-muenchen.de&gt; for</span></span><br><span class="line"><span class="comment"># sending the correct chat script for the passwd program in Debian Sarge).</span></span><br><span class="line">passwd <span class="attr">program</span> = /usr/bin/passwd %u</span><br><span class="line">passwd <span class="attr">chat</span> = *Enter\snew\s*\spassword:* %n\n *Retype\snew\s*\spassword:* %n\n *password\supdated\ssuccessfully* .</span><br><span class="line"></span><br><span class="line"><span class="comment"># This boolean controls whether PAM will be used for password changes</span></span><br><span class="line"><span class="comment"># when requested by an SMB client instead of the program listed in</span></span><br><span class="line"><span class="comment"># &#x27;passwd program&#x27;. The default is &#x27;no&#x27;.</span></span><br><span class="line">pam password <span class="attr">change</span> = <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This option controls how unsuccessful authentication attempts are mapped</span></span><br><span class="line"><span class="comment"># to anonymous connections</span></span><br><span class="line">map to <span class="attr">guest</span> = bad user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">[printers]</span></span><br><span class="line"><span class="attr">comment</span> = All Printers</span><br><span class="line"><span class="attr">browseable</span> = <span class="literal">no</span></span><br><span class="line"><span class="attr">path</span> = /var/tmp</span><br><span class="line"><span class="attr">printable</span> = <span class="literal">yes</span></span><br><span class="line">guest <span class="attr">ok</span> = <span class="literal">no</span></span><br><span class="line">read <span class="attr">only</span> = <span class="literal">no</span></span><br><span class="line">create <span class="attr">mask</span> = <span class="number">0700</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows clients look for this share name as a source of downloadable</span></span><br><span class="line"><span class="comment"># printer drivers</span></span><br><span class="line"><span class="section">[print$]</span></span><br><span class="line"><span class="attr">comment</span> = Printer Drivers</span><br><span class="line"><span class="attr">path</span> = /var/lib/samba/printers</span><br><span class="line"><span class="attr">browseable</span> = <span class="literal">yes</span></span><br><span class="line">read <span class="attr">only</span> = <span class="literal">no</span></span><br><span class="line">guest <span class="attr">ok</span> = <span class="literal">no</span></span><br><span class="line"><span class="comment"># Uncomment to allow remote administration of Windows print drivers.</span></span><br><span class="line"><span class="comment"># You may need to replace &#x27;lpadmin&#x27; with the name of the group your</span></span><br><span class="line"><span class="comment"># admin users are members of.</span></span><br><span class="line"><span class="comment"># Please note that you also need to set appropriate Unix permissions</span></span><br><span class="line"><span class="comment"># to the drivers directory for these users to have write rights in it</span></span><br><span class="line"><span class="comment">;   write list = root, @lpadmin</span></span><br><span class="line"></span><br><span class="line"><span class="section">[shared]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">path</span> = /home/nas</span><br><span class="line"></span><br><span class="line">valid <span class="attr">users</span> = nas,root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置允许访问的用户列表</span></span><br><span class="line">read <span class="attr">only</span> = <span class="literal">no</span></span><br><span class="line"><span class="comment"># 允许读写访问</span></span><br><span class="line"><span class="attr">browseable</span> = <span class="literal">yes</span></span><br><span class="line">           <span class="comment"># 允许在网络中浏览</span></span><br><span class="line">           guest <span class="attr">ok</span> = <span class="literal">no</span></span><br><span class="line">           <span class="comment"># 禁止匿名访问</span></span><br><span class="line">           force <span class="attr">user</span> = root</span><br><span class="line">           <span class="comment"># 用 root 身份操作</span></span><br><span class="line">           create <span class="attr">mask</span> = <span class="number">0777</span></span><br><span class="line"><span class="comment"># 创建文件的权限</span></span><br><span class="line">directory <span class="attr">mask</span> = <span class="number">0777</span></span><br><span class="line"><span class="comment"># 创建目录的权限</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="samba-用户创建">samba 用户创建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -m -s /bin/bash nas</span><br><span class="line">sudo passwd nas</span><br><span class="line">sudo smbpasswd -a nas</span><br><span class="line">sudo pdbedit -L # 验证用户</span><br></pre></td></tr></table></figure><h3 id="解除win组策略限制">解除win组策略限制</h3><blockquote><p>在windows 无法登录时解除组策略限制</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-SmbClientConfiguration -RequireSecuritySignature $false</span><br></pre></td></tr></table></figure><h3 id="通过脚本批量挂载磁盘">通过脚本批量挂载磁盘</h3><ul><li>第三方库安装与配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Debian/Ubuntu</span></span><br><span class="line">sudo apt install mergerfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">RHEL/CentOS</span></span><br><span class="line">sudo yum install epel-release</span><br><span class="line">sudo yum install mergerfs</span><br></pre></td></tr></table></figure><ul><li>磁盘分区初始化</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for dev in /dev/sd&#123;a..v&#125;; do</span><br><span class="line">  echo &quot;正在处理 $dev&quot;</span><br><span class="line">  sudo parted -s $dev mklabel gpt</span><br><span class="line">  sudo parted -s $dev mkpart primary 0% 100%</span><br><span class="line">  sudo mkfs.ext4 -L &quot;$&#123;dev##*/&#125;&quot; &quot;$&#123;dev&#125;1&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>磁盘挂载</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件名：storage_pool_final.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">功能：自动化初始化磁盘、创建分区、格式化挂载、配置mergerfs存储池</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置参数（按需修改）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">MOUNT_ROOT=&quot;/mnt/all_disks&quot;         # 存储池根目录</span><br><span class="line">MOUNT_DIR=&quot;$MOUNT_ROOT/mounts&quot;      # 单个磁盘挂载目录</span><br><span class="line">SHARED_DIR=&quot;$MOUNT_ROOT/shared&quot;     # 合并存储目录</span><br><span class="line">MIN_FREE_SPACE=&quot;20G&quot;                # 最小保留空间</span><br><span class="line">LOG_FILE=&quot;/var/log/storage_pool.log&quot; # 日志文件路径</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化日志系统</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">exec 3&gt;&amp;1 4&gt;&amp;2</span><br><span class="line">trap &#x27;exec 2&gt;&amp;4 1&gt;&amp;3&#x27; EXIT</span><br><span class="line">exec &gt; &gt;(tee -a &quot;$LOG_FILE&quot;) 2&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预检模块</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">check_prerequisites() &#123;</span><br><span class="line">    # 检查root权限</span><br><span class="line">    [[ $EUID -ne 0 ]] &amp;&amp; echo &quot;错误：必须使用sudo运行脚本&quot; &amp;&amp; exit 1</span><br><span class="line"></span><br><span class="line">    # 检查必要工具</span><br><span class="line">    declare -A REQUIRED_TOOLS=(</span><br><span class="line">        [&quot;parted&quot;]=&quot;分区工具&quot;</span><br><span class="line">        [&quot;mkfs.ext4&quot;]=&quot;格式化工具&quot;</span><br><span class="line">        [&quot;mergerfs&quot;]=&quot;存储合并工具&quot;</span><br><span class="line">    )</span><br><span class="line">    for tool in &quot;$&#123;!REQUIRED_TOOLS[@]&#125;&quot;; do</span><br><span class="line">        if ! command -v $tool &amp;&gt; /dev/null; then</span><br><span class="line">            echo &quot;错误：缺少依赖 $&#123;REQUIRED_TOOLS[$tool]&#125; ($tool)&quot;</span><br><span class="line">            exit 1</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    # 创建目录结构</span><br><span class="line">    mkdir -p &quot;$MOUNT_DIR&quot; &quot;$SHARED_DIR&quot;</span><br><span class="line">    chmod 1777 &quot;$SHARED_DIR&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安全设备过滤</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">get_data_disks() &#123;</span><br><span class="line">    lsblk -lp -o NAME,SIZE,TYPE,MOUNTPOINT | awk &#x27;</span><br><span class="line">        BEGIN &#123;IGNORECASE=1&#125;</span><br><span class="line">        $3 == &quot;disk&quot; &amp;&amp;</span><br><span class="line">        $4 == &quot;&quot; &amp;&amp;</span><br><span class="line">        $2 ~ /3\.6T/ &amp;&amp;</span><br><span class="line">        $1 !~ /sdaw/ &#123;  # 排除系统盘sdaw</span><br><span class="line">            print $1</span><br><span class="line">        &#125;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">磁盘初始化</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">init_disk() &#123;</span><br><span class="line">    local dev=$1</span><br><span class="line">    echo &quot;===== 初始化磁盘 $dev =====&quot;</span><br><span class="line"></span><br><span class="line">    # 创建GPT分区表</span><br><span class="line">    if ! parted -s &quot;$dev&quot; mklabel gpt; then</span><br><span class="line">        echo &quot;错误：无法创建GPT分区表&quot;</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 创建主分区</span><br><span class="line">    if ! parted -s &quot;$dev&quot; mkpart primary 0% 100%; then</span><br><span class="line">        echo &quot;错误：无法创建分区&quot;</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 格式化分区为ext4</span><br><span class="line">    local partition=&quot;$&#123;dev&#125;1&quot;</span><br><span class="line">    if ! mkfs.ext4 -q -L &quot;DATA_$&#123;dev##*/&#125;&quot; &quot;$partition&quot;; then</span><br><span class="line">        echo &quot;错误：格式化失败&quot;</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    echo &quot;√ 初始化完成：$dev → $partition&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载管理</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">mount_partition() &#123;</span><br><span class="line">    local partition=$1</span><br><span class="line">    # 获取UUID</span><br><span class="line">    local uuid=$(blkid -s UUID -o value &quot;$partition&quot;)</span><br><span class="line">    [[ -z &quot;$uuid&quot; ]] &amp;&amp; return 1</span><br><span class="line"></span><br><span class="line">    # 创建挂载点</span><br><span class="line">    local mount_point=&quot;$MOUNT_DIR/$uuid&quot;</span><br><span class="line">    mkdir -p &quot;$mount_point&quot;</span><br><span class="line"></span><br><span class="line">    # 写入fstab（幂等操作）</span><br><span class="line">    if ! grep -q &quot;UUID=$uuid&quot; /etc/fstab; then</span><br><span class="line">        echo &quot;UUID=$uuid $mount_point ext4 defaults,nofail,noatime 0 0&quot; &gt;&gt; /etc/fstab</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 执行挂载</span><br><span class="line">    if mount -v &quot;$mount_point&quot;; then</span><br><span class="line">        echo &quot;√ 挂载成功：$partition → $mount_point&quot;</span><br><span class="line">    else</span><br><span class="line">        sed -i &quot;\|UUID=$uuid|d&quot; /etc/fstab</span><br><span class="line">        rmdir &quot;$mount_point&quot;</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mergerfs配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">configure_mergerfs() &#123;</span><br><span class="line">    # 生成挂载点列表</span><br><span class="line">    local mount_points=($(ls -d &quot;$MOUNT_DIR&quot;/* 2&gt;/dev/null))</span><br><span class="line">    if [[ $&#123;#mount_points[@]&#125; -eq 0 ]]; then</span><br><span class="line">        echo &quot;错误：没有可用的挂载点！&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 生成fstab条目</span><br><span class="line">    local mergerfs_entry=&quot;$&#123;mount_points[@]/%/\\:&#125; $SHARED_DIR fuse.mergerfs defaults,allow_other,category.create=epmfs,minfreespace=$MIN_FREE_SPACE,fsname=StoragePool 0 0&quot;</span><br><span class="line"></span><br><span class="line">    # 清理旧配置</span><br><span class="line">    sed -i &#x27;\|fuse.mergerfs|d&#x27; /etc/fstab</span><br><span class="line"></span><br><span class="line">    # 写入新配置</span><br><span class="line">    echo &quot;$mergerfs_entry&quot; &gt;&gt; /etc/fstab</span><br><span class="line"></span><br><span class="line">    # 应用挂载</span><br><span class="line">    if mount -av; then</span><br><span class="line">        echo &quot;√ mergerfs配置成功&quot;</span><br><span class="line">        df -hT &quot;$SHARED_DIR&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;× mergerfs挂载失败&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主程序流程</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">main() &#123;</span><br><span class="line">    check_prerequisites</span><br><span class="line"></span><br><span class="line">    # 处理所有数据磁盘</span><br><span class="line">    while read -r dev; do</span><br><span class="line">        # 初始化磁盘</span><br><span class="line">        if ! init_disk &quot;$dev&quot;; then</span><br><span class="line">            echo &quot;× 磁盘初始化失败：$dev&quot;</span><br><span class="line">            continue</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        # 挂载分区</span><br><span class="line">        partition=&quot;$&#123;dev&#125;1&quot;</span><br><span class="line">        if ! mount_partition &quot;$partition&quot;; then</span><br><span class="line">            echo &quot;× 分区挂载失败：$partition&quot;</span><br><span class="line">            continue</span><br><span class="line">        fi</span><br><span class="line">    done &lt; &lt;(get_data_disks)</span><br><span class="line"></span><br><span class="line">    # 配置mergerfs</span><br><span class="line">    configure_mergerfs</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行入口</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line">main &quot;$@&quot;</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plaintext"><figcaption><span>./mount.sh``` 运行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 磁盘大小查看</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">lsblk -b -o SIZE | grep -v &quot;loop&quot; | grep -v &quot;rom&quot;  | grep -v &quot;SIZE&quot; | awk &#x27;&#123;sum+=$1&#125; END &#123;print sum&#125;&#x27; | numfmt --to=iec-i --suffix=B --padding=7```</span><br></pre></td></tr></table></figure></blockquote><h3 id="验证">验证</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -hT /mnt/all_disks/shared</span><br></pre></td></tr></table></figure><h3 id="卸载磁盘重新加载">卸载磁盘重新加载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo umount -a</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><h3 id="最终验证">最终验证</h3><h4 id="步骤-1：验证-mergerfs-配置">步骤 1：验证 mergerfs 配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 /etc/fstab 中是否有 mergerfs 条目</span></span><br><span class="line"><span class="built_in">cat</span> /etc/fstab | grep <span class="string">&quot;fuse.mergerfs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预期应输出类似：</span></span><br><span class="line"><span class="comment"># /mnt/all_disks/mounts/* /mnt/all_disks/shared fuse.mergerfs defaults,allow_other,... 0 0</span></span><br></pre></td></tr></table></figure><h4 id="步骤-2：手动触发挂载">步骤 2：手动触发挂载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载错误挂载</span></span><br><span class="line"><span class="built_in">sudo</span> umount -l /mnt/all_disks/shared</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新挂载所有设备</span></span><br><span class="line"><span class="built_in">sudo</span> mount -av</span><br></pre></td></tr></table></figure><h4 id="步骤-3：检查-mergerfs-挂载状态">步骤 3：检查 mergerfs 挂载状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 mergerfs 是否生效</span></span><br><span class="line">mount | grep <span class="string">&quot;mergerfs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预期输出应包含：</span></span><br><span class="line"><span class="comment"># StoragePool on /mnt/all_disks/shared type fuse.mergerfs (...)</span></span><br></pre></td></tr></table></figure><h4 id="步骤-4：修复配置问题">步骤 4：修复配置问题</h4><blockquote><p>若上述步骤无效，执行以下操作：</p></blockquote><ul><li>清理旧配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 删除无效的 mergerfs 条目</span></span><br><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;\|fuse.mergerfs|d&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保所有磁盘已正确挂载到 mounts/ 子目录</span></span><br><span class="line"><span class="built_in">ls</span> -l /mnt/all_disks/mounts</span><br></pre></td></tr></table></figure><ul><li>重新生成 mergerfs 配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 获取所有挂载点路径</span></span><br><span class="line">MOUNT_PATHS=$(<span class="built_in">ls</span> -d /mnt/all_disks/mounts/* | <span class="built_in">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入新的 mergerfs 配置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;MOUNT_PATHS%:&#125;</span> /mnt/all_disks/shared fuse.mergerfs defaults,allow_other,category.create=epmfs,minfreespace=20G,fsname=StoragePool 0 0&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> -a /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用配置</span></span><br><span class="line"><span class="built_in">sudo</span> mount -av</span><br></pre></td></tr></table></figure><h4 id="步骤-5：验证最终状态">步骤 5：验证最终状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查存储池容量</span></span><br><span class="line"><span class="built_in">df</span> -hT /mnt/all_disks/shared</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预期输出示例：</span></span><br><span class="line"><span class="comment">#Filesystem      Type           Size  Used Avail Use% Mounted on</span></span><br><span class="line"><span class="comment">#StoragePool     fuse.mergerfs  7.2T  3.6T  3.6T  50% /mnt/all_disks/shared</span></span><br></pre></td></tr></table></figure><h3 id="NAS异常重启错误排除">NAS异常重启错误排除</h3><blockquote><p>脚本如下</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件名：check_reboot_logs.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">功能：自动收集和分析系统重启相关日志</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查 root 权限</span></span><br><span class="line">if [ &quot;$EUID&quot; -ne 0 ]; then</span><br><span class="line">  echo &quot;请使用 sudo 或 root 权限运行此脚本&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义日志保存目录</span></span><br><span class="line">LOG_DIR=&quot;/var/log/reboot_investigation_$(date +%Y%m%d%H%M%S)&quot;</span><br><span class="line">mkdir -p &quot;$LOG_DIR&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">收集基础系统信息</span></span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;======= 系统基本信息 =======&quot;</span><br><span class="line">  lsb_release -a</span><br><span class="line">  uname -a</span><br><span class="line">  uptime</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">&#125; &gt; &quot;$LOG_DIR/system_info.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">收集最近重启记录</span></span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;======= 最近 5 次重启记录 =======&quot;</span><br><span class="line">  last reboot | head -n 5</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">&#125; &gt; &quot;$LOG_DIR/reboot_history.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">收集内核日志中的异常信息</span></span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;======= 内核日志关键事件 =======&quot;</span><br><span class="line">  journalctl -k --since &quot;1 week ago&quot; | grep -Ei \</span><br><span class="line">  -e &quot;oom&quot; \</span><br><span class="line">  -e &quot;panic&quot; \</span><br><span class="line">  -e &quot;segfault&quot; \</span><br><span class="line">  -e &quot;hard reset&quot; \</span><br><span class="line">  -e &quot;kernel bug&quot; \</span><br><span class="line">  -e &quot;rcu stall&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">&#125; &gt; &quot;$LOG_DIR/kernel_events.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">收集系统日志中的崩溃记录</span></span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;======= 系统服务崩溃记录 =======&quot;</span><br><span class="line">  journalctl -b -1 --since &quot;1 week ago&quot; | grep -Ei \</span><br><span class="line">  -e &quot;crash&quot; \</span><br><span class="line">  -e &quot;failed&quot; \</span><br><span class="line">  -e &quot;segmentation fault&quot; \</span><br><span class="line">  -e &quot;core dumped&quot; \</span><br><span class="line">  -e &quot;out of memory&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">&#125; &gt; &quot;$LOG_DIR/service_crashes.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">收集硬件相关日志</span></span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;======= 硬件错误/警告 =======&quot;</span><br><span class="line">  dmesg -T | grep -Ei \</span><br><span class="line">  -e &quot;error&quot; \</span><br><span class="line">  -e &quot;warning&quot; \</span><br><span class="line">  -e &quot;temperature&quot; \</span><br><span class="line">  -e &quot;overheat&quot; \</span><br><span class="line">  -e &quot;corrected error&quot; \</span><br><span class="line">  -e &quot;mce&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">&#125; &gt; &quot;$LOG_DIR/hardware_issues.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">收集自动更新记录</span></span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;======= 自动更新记录 =======&quot;</span><br><span class="line">  grep -h -E &quot;apt|unattended&quot; /var/log/apt/* /var/log/unattended-upgrades/* 2&gt;/dev/null</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">&#125; &gt; &quot;$LOG_DIR/auto_updates.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">收集内存使用历史</span></span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;======= 内存使用统计 =======&quot;</span><br><span class="line">  sar -r -s &quot;$(date -d &#x27;1 week ago&#x27; +%H:%M:%S)&quot; | tail -n +3</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">&#125; &gt; &quot;$LOG_DIR/memory_usage.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成分析报告</span></span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;=== 自动分析报告 ===&quot;</span><br><span class="line">  echo &quot;[1] 最近重启次数: $(grep -c &quot;reboot&quot; &quot;$LOG_DIR/reboot_history.txt&quot;)&quot;</span><br><span class="line">  echo &quot;[2] 硬件错误计数: $(grep -ciE &quot;error|warning&quot; &quot;$LOG_DIR/hardware_issues.txt&quot;)&quot;</span><br><span class="line">  echo &quot;[3] OOM 事件计数: $(grep -ci &quot;oom&quot; &quot;$LOG_DIR/kernel_events.txt&quot;)&quot;</span><br><span class="line">  echo &quot;[4] 服务崩溃计数: $(grep -ciE &quot;crash|failed&quot; &quot;$LOG_DIR/service_crashes.txt&quot;)&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;=== 建议排查方向 ===&quot;</span><br><span class="line">  echo &quot;1. 如果存在硬件错误: 检查硬盘(SMART)、内存(memtest86+)、CPU温度(sensors)&quot;</span><br><span class="line">  echo &quot;2. 如果存在 OOM 事件: 分析内存使用模式，检查是否有内存泄漏&quot;</span><br><span class="line">  echo &quot;3. 如果服务频繁崩溃: 检查对应服务的日志(/var/log/[service])&quot;</span><br><span class="line">  echo &quot;4. 如果与更新相关: 检查 /var/log/apt/history.log&quot;</span><br><span class="line">&#125; &gt; &quot;$LOG_DIR/analysis_report.txt&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;日志收集完成，结果保存在: $LOG_DIR&quot;</span><br><span class="line">echo &quot;请查看以下关键文件:&quot;</span><br><span class="line">echo &quot;1. analysis_report.txt    - 快速分析报告&quot;</span><br><span class="line">echo &quot;2. hardware_issues.txt    - 硬件相关问题&quot;</span><br><span class="line">echo &quot;3. kernel_events.txt      - 内核级错误&quot;</span><br><span class="line">echo &quot;4. service_crashes.txt    - 服务崩溃记录&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="HTTP-协议NAS搭建">HTTP 协议NAS搭建</h2><blockquote><p>Nginx: 作为反向代理，处理 HTTPS 和路由。</p></blockquote><blockquote><p>FileBrowser: 轻量级文件管理容器（替代传统 NAS 界面）。</p></blockquote><blockquote><p>Docker Compose: 编排容器依赖关系。</p></blockquote><h3 id="docker-install-on-ubuntu">docker install on ubuntu</h3><blockquote><p>nginx 安装配置</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update -y</span><br><span class="line">sudo apt install docker.io</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl enable docker</span><br><span class="line">docker --version</span><br><span class="line">sudo apt install docker-compose</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line">sudo docker pull nginx</span><br><span class="line">sudo docker images</span><br><span class="line">sudo mkdir -p /data/nginx/conf</span><br><span class="line">sudo mkdir -p /data/nginx/conf.d</span><br><span class="line">sudo mkdir -p /data/nginx/html</span><br><span class="line">sudo mkdir -p /data/nginx/logs</span><br><span class="line"></span><br><span class="line">docker run --name nginx -d  -p 80:80   -v ~/nginx/nginx.conf:/etc/nginx/nginx.conf   -v ~/nginx/html:/usr/share/nginx/html   nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="docker-代理设置">docker 代理设置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line">sudo vim /etc/systemd/system/docker.service.d/proxy.conf</span><br></pre></td></tr></table></figure><ul><li>写入如下文件</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;HTTP_PROXY=http://192.168.10.65:7890&quot;</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;HTTPS_PROXY=http://192.168.10.65.7890&quot;</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;NO_PROXY=localhost,127.0.0.1&quot;</span></span><br></pre></td></tr></table></figure><ul><li>sudo vim /etc/docker/daemon.json</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https://dockerhub.icu&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="apache-服务安装">apache 服务安装</h4><blockquote><p>基础准备</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/nas-docker/&#123;data,config,nginx,ssl&#125;</span><br><span class="line">cd ~/nas-docker</span><br></pre></td></tr></table></figure><blockquote><p>yml 编辑</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment"># FileBrowser 文件管理服务</span></span><br><span class="line">  <span class="attr">filebrowser:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">filebrowser/filebrowser:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">filebrowser</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/srv</span>      <span class="comment"># 挂载共享数据目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/filebrowser:/etc/filebrowser</span>  <span class="comment"># 配置文件</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FB_BASEURL=/files</span>  <span class="comment"># 服务路径</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nas-network</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Nginx 反向代理</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx-proxy</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:443&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./ssl:/etc/nginx/ssl</span>  <span class="comment"># SSL 证书目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/usr/share/nginx/html</span>  <span class="comment"># 静态文件托管（可选）</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">filebrowser</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nas-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">nas-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><blockquote><p>nginx.conf</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name localhost;  # 替换为你的域名</span><br><span class="line">        return 301 https://$host$request_uri;  # HTTP 重定向到 HTTPS</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name nas.yourdomain.com;</span><br><span class="line"></span><br><span class="line">        # SSL 证书路径（需提前申请或自签名）</span><br><span class="line">        ssl_certificate /etc/nginx/ssl/fullchain.pem;</span><br><span class="line">        ssl_certificate_key /etc/nginx/ssl/privkey.pem;</span><br><span class="line"></span><br><span class="line">        # 静态文件服务（可选）</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /usr/share/nginx/html;</span><br><span class="line">            autoindex on;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 代理 FileBrowser</span><br><span class="line">        location /files &#123;</span><br><span class="line">            proxy_pass http://filebrowser:80;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>自签证书</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 certbot</span></span><br><span class="line">sudo apt install certbot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">申请证书（需确保域名已解析到服务器IP）</span></span><br><span class="line">sudo certbot certonly --standalone -d nas.yourdomain.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制证书到 Docker 挂载目录</span></span><br><span class="line">sudo cp /etc/letsencrypt/live/nas.yourdomain.com/fullchain.pem ~/nas-docker/ssl/</span><br><span class="line">sudo cp /etc/letsencrypt/live/nas.yourdomain.com/privkey.pem ~/nas-docker/ssl/</span><br></pre></td></tr></table></figure><h4 id="服务启动">服务启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="see">see</h2><ul><li><a href="https://webmin.com/">https://webmin.com/</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于边缘检测算法检测视频中文字</title>
      <link href="/2025/01/10/easyocr-gpuocr/"/>
      <url>/2025/01/10/easyocr-gpuocr/</url>
      
        <content type="html"><![CDATA[<h1>基于Easyocr的文字识别</h1><blockquote><p>EasyOCR 是一个开源的 OCR (光学字符识别) 工具，能够快速并高效地从图像中提取文本。与其他OCR工具如 Tesseract 相比，EasyOCR 具有更强的多语言支持，包括对中文、日语、阿拉伯语等复杂文字的支持，并且它的安装和使用非常简便。</p></blockquote><h2 id="主要功能">主要功能</h2><blockquote><p>EasyOCR 是一个 Python 包，用于执行光学字符识别 (OCR)。它旨在易于使用，并支持多种语言的文本识别。其主要特点包括：</p></blockquote><ul><li><p>简单易用</p></li><li><p>多语言支持</p></li><li><p>GPU 加速支持</p></li><li><p>开源</p></li></ul><h2 id="图像处理算法详解">图像处理算法详解</h2><h2 id="1-图像缩放-Image-Resizing">1. 图像缩放 (Image Resizing)</h2><h3 id="原理">原理</h3><p>图像缩放是指改变图像的尺寸，包括放大（upscaling）和缩小（downscaling）两种操作。其基本原理是通过像素插值算法，在新的尺寸下估计图像像素的值。</p><h3 id="技术">技术</h3><p>常用的图像缩放技术包括：</p><ul><li><strong>最近邻插值 (Nearest Neighbor Interpolation):</strong><ul><li><strong>原理:</strong> 将目标图像的像素值设置为源图像中距离最近的像素值。</li><li><strong>特点:</strong> 简单快速，但可能导致图像边缘出现锯齿状。</li></ul></li><li><strong>双线性插值 (Bilinear Interpolation):</strong><ul><li><strong>原理:</strong>  使用目标图像像素周围的 2x2 邻域像素值进行双线性插值计算。</li><li><strong>特点:</strong> 图像效果比最近邻插值平滑，计算量适中。</li></ul></li><li><strong>双三次插值 (Bicubic Interpolation):</strong><ul><li><strong>原理:</strong>  使用目标图像像素周围的 4x4 邻域像素值进行双三次插值计算。</li><li><strong>特点:</strong> 图像效果较好，细节保留较多，但计算量较大。</li></ul></li><li><strong>基于深度学习的超分辨率 (Super-Resolution):</strong><ul><li><strong>原理:</strong> 使用深度学习模型 (例如, SRCNN, EDSR, ESRGAN) 从低分辨率图像重建高分辨率图像.</li><li><strong>特点:</strong> 可以生成高质量的图像，但是计算量大，需要大量的训练数据。</li></ul></li></ul><h3 id="用途">用途</h3><ul><li><strong>调整图像大小：</strong>  适应不同的显示设备或应用场景。</li><li><strong>预处理步骤：</strong>  作为其他图像处理算法 (如目标检测, OCR) 的预处理步骤.</li><li><strong>生成不同分辨率的图像：</strong>  用于创建图像金字塔或进行多尺度分析。</li></ul><h2 id="2-图像裁剪-Image-Cropping">2. 图像裁剪 (Image Cropping)</h2><h3 id="原理-2">原理</h3><p>图像裁剪是指从图像中选择一个矩形区域，然后将其提取出来。其基本原理是根据指定的起始坐标和宽高，截取图像对应的像素数据。</p><h3 id="技术-2">技术</h3><ul><li><strong>矩形裁剪:</strong>  指定矩形左上角坐标(x, y) 和矩形的宽度 (w) 和高度 (h)，然后提取这个矩形区域的像素。</li><li><strong>任意形状裁剪:</strong>  使用掩码 (mask) 来指定需要裁剪的区域，mask 可以是任意形状。</li></ul><h3 id="用途-2">用途</h3><ul><li><strong>去除图像中不必要的区域：</strong> 突出感兴趣的目标对象或区域。</li><li><strong>调整图像构图：</strong>  重新构图，使图像更符合需求。</li><li><strong>数据增强：</strong> 作为图像数据增强的一种方法，可以生成不同的图像样本。</li></ul><h2 id="3-图像拼接-Image-Stitching">3. 图像拼接 (Image Stitching)</h2><h3 id="原理-3">原理</h3><p>图像拼接是指将多张具有重叠区域的图像拼接成一张完整的全景图像。其基本原理包括图像配准和图像融合两个步骤。</p><h3 id="技术-3">技术</h3><ul><li><strong>特征检测和匹配 (Feature Detection and Matching):</strong><ul><li><strong>目的:</strong>  提取图像中的特征点 (如 SIFT, SURF, ORB 等) 并进行匹配，找到图像之间的对应关系。</li></ul></li><li><strong>图像配准 (Image Registration):</strong><ul><li><strong>目的:</strong>  根据匹配到的特征点，计算图像之间的变换关系，将图像对齐。</li><li><strong>技术:</strong> 使用如 RANSAC 等算法估计图像的变换矩阵。</li></ul></li><li><strong>图像融合 (Image Blending):</strong><ul><li><strong>目的:</strong> 将对齐的图像拼接成一张完整的图像。</li><li><strong>技术:</strong>  使用如多频带融合或加权平均等方法处理图像重叠区域，避免明显的接缝。</li></ul></li><li><strong>柱面投影:</strong><ul><li>**目的:**将图像映射到柱面坐标系，以便更好地拼接水平方向上视角变化很大的图像。</li></ul></li></ul><h2 id="流程">流程</h2><pre><code>                             +-----------------------+                             | 开始 process_video_threaded |                             +-----------------------+                                        |                                        V                  +------------------------------------------------+                  |  调用 process_video 处理单个视频文件         |                  |  获取 CPU, 内存，GPU 使用率信息             |                  |  输出视频处理信息和性能信息                      |                  +------------------------------------------------+                                        |                                        V       +------------------------------------------------------------+       | 根据 move_file, has_subtitle, 移动文件到 output_dir_with_subtitle  |       | 或 output_dir_without_subtitle 下的子目录，并记录日志         |       | (如未移动，则记录未移动日志)                                  |       +------------------------------------------------------------+                                        |                                        V                  +--------------------------------------------+                  |      结束 process_video_threaded             |                  +--------------------------------------------+                                          |                                         V                             +-----------------------+                             | 开始 process_video   |                             +-----------------------+                                        |                                        V                    +------------------------------------------------+                    |  使用 cv2.VideoCapture 打开视频文件              |                    |  如果打开失败，记录日志并返回                       |                    |  初始化 frame_count, subtitle_frame_count       |                    |  设置跳帧参数 frame_skip                         |                    +------------------------------------------------+                                         |                                         V                            +------------------------+                            |  while 循环读取视频帧        |                            |    如果读取失败，退出循环 |                            +------------------------+                                        |                                        V              +----------------------------------------------+              | 如果是抽帧，则执行字幕区域检测 detect_subtitle_area|              |  如果检测失败 返回                               |              +----------------------------------------------+                                        |                                        V                         +---------------------------+                         | for subtitle_area in subtitle_areas |                         |    调用 ocr_check           |                         +---------------------------+                                         |                                         V                 +------------------------------------------------------+                 |    根据ocr检测结果更新 subtitle_frame_count            |                 +------------------------------------------------------+                                        |                                        V            +----------------------------------------------------------+            |  根据 subtitle_frame_count 和 min_subtitle_frames       |            |  确定视频是否有字幕，并生成 output_file 路径            |            |   记录视频处理信息                                      |            +----------------------------------------------------------+                                       |                                       V                   +--------------------------+                   |  释放视频资源和GPU缓存   |                   |     手动内存回收          |                   +--------------------------+                                        |                                        V                    +---------------------+                    |  结束 process_video   |                    +---------------------+                                        |                                         V                           +------------------------+                           | 开始 ocr_check      |                           +------------------------+                                      |                                      V                           +-----------------------------------+                           | 使用 reader.readtext(roi,detail=0)     |                           |  如果检测到文字返回 True，否则返回 False |                           +-----------------------------------+                                      |                                      V                      +--------------------------+                      | 结束 ocr_check       |                      +--------------------------+</code></pre><h2 id="实现">实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2025/1/3 10:37</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(czq)</span></span><br><span class="line"><span class="string">Version:  V 0.1</span></span><br><span class="line"><span class="string">File:     lan_detect_cal_new.py</span></span><br><span class="line"><span class="string">Describe: Write during the python at zgxmt, Github link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> easyocr</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用GPU 加速</span></span><br><span class="line">reader = easyocr.Reader([<span class="string">&#x27;ch_sim&#x27;</span>,<span class="string">&#x27;en&#x27;</span>], gpu=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_subtitle_area</span>(<span class="params">frame, min_area=<span class="number">100</span>, max_area = <span class="number">1000</span>,threshold1 = <span class="number">100</span>, threshold2 = <span class="number">200</span></span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot;检测字幕区域&quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line">      blurred = cv2.GaussianBlur(gray, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">      edges = cv2.Canny(blurred, threshold1, threshold2)</span><br><span class="line">      contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line">      subtitle_areas = []</span><br><span class="line">      <span class="keyword">for</span> contour <span class="keyword">in</span> contours:</span><br><span class="line">        area = cv2.contourArea(contour)</span><br><span class="line">        x, y, w, h = cv2.boundingRect(contour)</span><br><span class="line">        <span class="keyword">if</span> min_area &lt; area &lt; max_area:</span><br><span class="line">           subtitle_areas.append((x, y, w, h))</span><br><span class="line">      <span class="keyword">return</span> subtitle_areas</span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    logging.error(<span class="string">f&quot;检测字幕区域失败 <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ocr_check</span>(<span class="params">frame, subtitle_area</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;ocr检测是否有字幕&quot;&quot;&quot;</span></span><br><span class="line">    x,y,w,h = subtitle_area</span><br><span class="line">    roi = frame[y:y+h, x:x+w]</span><br><span class="line">    result = reader.readtext(roi)</span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_video</span>(<span class="params">video_path, output_dir, min_area=<span class="number">100</span>, max_area=<span class="number">1000</span>, threshold1=<span class="number">100</span>, threshold2=<span class="number">200</span>, move_file=<span class="literal">False</span>, max_retries = <span class="number">3</span>, retry_delay = <span class="number">5</span>, min_subtitle_frames = <span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理单个视频&quot;&quot;&quot;</span></span><br><span class="line">    logging.info(<span class="string">f&quot;开始处理视频：<span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">    temp_video_path = <span class="literal">None</span> <span class="comment"># 用于临时文件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      <span class="keyword">if</span> move_file:</span><br><span class="line">          temp_dir = tempfile.mkdtemp()</span><br><span class="line">          temp_video_path = os.path.join(temp_dir, os.path.basename(video_path))</span><br><span class="line">          shutil.copy2(video_path, temp_video_path)  <span class="comment"># 使用copy2 保存元数据，避免移动文件</span></span><br><span class="line">          video_path = temp_video_path</span><br><span class="line">      cap = cv2.VideoCapture(video_path)</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">            logging.error(<span class="string">f&quot;无法打开视频文件：<span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">          os.makedirs(output_dir)</span><br><span class="line">      frame_count = <span class="number">0</span></span><br><span class="line">      subtitle_frame_count = <span class="number">0</span></span><br><span class="line">      <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">          ret, frame = cap.read()</span><br><span class="line">          <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line">          subtitle_areas = detect_subtitle_area(frame, min_area, max_area, threshold1, threshold2)</span><br><span class="line">          <span class="keyword">for</span> subtitle_area <span class="keyword">in</span> subtitle_areas:</span><br><span class="line">            <span class="keyword">if</span> ocr_check(frame, subtitle_area):</span><br><span class="line">                subtitle_frame_count += <span class="number">1</span></span><br><span class="line">          frame_count += <span class="number">1</span></span><br><span class="line">          logging.info(<span class="string">f&quot;正在处理第<span class="subst">&#123;frame_count&#125;</span>帧&quot;</span>)</span><br><span class="line">      logging.info(<span class="string">f&quot;共检测到<span class="subst">&#123;subtitle_frame_count&#125;</span>张字幕图片&quot;</span>)</span><br><span class="line">      cap.release()</span><br><span class="line">      has_subtitle = subtitle_frame_count &gt; min_subtitle_frames <span class="comment"># 至少需要min_subtitle_frames帧包含字幕</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> has_subtitle <span class="keyword">and</span> move_file:</span><br><span class="line">         output_file = os.path.join(output_dir, os.path.basename(video_path))</span><br><span class="line">         <span class="keyword">for</span> attempt <span class="keyword">in</span> <span class="built_in">range</span>(max_retries):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                 shutil.move(video_path, output_file)</span><br><span class="line">                 logging.info(<span class="string">f&quot;移动文件到： <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br><span class="line">                 <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logging.error(<span class="string">f&quot;移动文件 <span class="subst">&#123;video_path&#125;</span> 失败：<span class="subst">&#123;e&#125;</span>，尝试重新移动 <span class="subst">&#123;attempt+<span class="number">1</span>&#125;</span> 次&quot;</span>)</span><br><span class="line">                time.sleep(retry_delay)</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">               logging.error(<span class="string">f&quot;尝试多次移动文件 <span class="subst">&#123;video_path&#125;</span> 失败，请检查是否有进程正在使用该文件&quot;</span>)</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">elif</span> has_subtitle:</span><br><span class="line">            logging.info(<span class="string">f&quot;当前视频有字幕: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">           logging.info(<span class="string">f&quot;当前视频没有字幕: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">       logging.error(<span class="string">f&quot;处理视频过程失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> temp_video_path <span class="keyword">and</span> os.path.exists(temp_video_path):</span><br><span class="line">            shutil.rmtree(os.path.dirname(temp_video_path), ignore_errors = <span class="literal">True</span>)</span><br><span class="line">            logging.info(<span class="string">f&quot;清理临时文件 <span class="subst">&#123;temp_video_path&#125;</span> 完成&quot;</span>)</span><br><span class="line">        logging.info(<span class="string">f&quot;视频处理完成：<span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_video_threaded</span>(<span class="params">video_path, output_dir, min_area=<span class="number">100</span>, max_area=<span class="number">1000</span>, threshold1=<span class="number">100</span>, threshold2=<span class="number">200</span>, move_file = <span class="literal">False</span>, max_retries = <span class="number">3</span>, retry_delay = <span class="number">5</span>, min_subtitle_frames = <span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;多线程处理视频&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       start_time = time.time()</span><br><span class="line">       result = process_video(video_path, output_dir, min_area, max_area, threshold1, threshold2, move_file, max_retries, retry_delay, min_subtitle_frames)</span><br><span class="line">       end_time = time.time()</span><br><span class="line">       cpu_percent = psutil.cpu_percent() <span class="comment"># 获取cpu使用率</span></span><br><span class="line">       logging.info(<span class="string">f&quot;视频：<span class="subst">&#123;video_path&#125;</span>, 耗时：<span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒,  CPU 利用率：<span class="subst">&#123;cpu_percent:<span class="number">.2</span>f&#125;</span>%&quot;</span>)</span><br><span class="line">       <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">      logging.error(<span class="string">f&quot;处理视频 <span class="subst">&#123;video_path&#125;</span> 失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_directory_multithreaded</span>(<span class="params">input_dir, output_dir, min_area=<span class="number">100</span>, max_area=<span class="number">1000</span>, threshold1=<span class="number">100</span>, threshold2=<span class="number">200</span>, allowed_extensions=(<span class="params"><span class="string">&#x27;.mp4&#x27;</span>, <span class="string">&#x27;.avi&#x27;</span>, <span class="string">&#x27;.mov&#x27;</span>, <span class="string">&#x27;.mkv&#x27;</span></span>), num_threads = <span class="number">4</span>, move_file = <span class="literal">False</span>, max_retries = <span class="number">3</span>, retry_delay = <span class="number">5</span>, min_subtitle_frames = <span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;多线程处理指定目录下所有视频&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(input_dir):</span><br><span class="line">      logging.error(<span class="string">f&quot;错误：输入的不是目录: <span class="subst">&#123;input_dir&#125;</span>&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    video_files = []</span><br><span class="line">    <span class="keyword">for</span> root, _, files <span class="keyword">in</span> os.walk(input_dir):</span><br><span class="line">      <span class="keyword">for</span> filename <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> filename.lower().endswith(allowed_extensions):</span><br><span class="line">          video_files.append(os.path.join(root, filename))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tqdm(total=<span class="built_in">len</span>(video_files), desc=<span class="string">&quot;处理视频&quot;</span>, unit=<span class="string">&quot;video&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">        threads = []</span><br><span class="line">        <span class="keyword">for</span> video_path <span class="keyword">in</span> video_files:</span><br><span class="line">          relative_path = os.path.relpath(video_path, input_dir)</span><br><span class="line">          output_subdir = os.path.join(output_dir, os.path.splitext(relative_path)[<span class="number">0</span>])</span><br><span class="line">          thread = threading.Thread(target=process_video_threaded, args=(video_path, output_subdir, min_area, max_area, threshold1, threshold2, move_file, max_retries, retry_delay, min_subtitle_frames))</span><br><span class="line">          threads.append(thread)</span><br><span class="line">          thread.start()</span><br><span class="line">          <span class="keyword">if</span> <span class="built_in">len</span>(threads) &gt;= num_threads:  <span class="comment"># 控制线程数量</span></span><br><span class="line">            <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">               thread.join()</span><br><span class="line">            threads = []</span><br><span class="line">          pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">          thread.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    input_dir = <span class="string">r&#x27;E:\测试&#x27;</span>  <span class="comment"># 替换为你的视频文件根目录路径</span></span><br><span class="line">    output_dir = <span class="string">r&quot;E:\测试\subtitle_videos&quot;</span>  <span class="comment"># 替换为你的字幕视频输出路径</span></span><br><span class="line">    min_area = <span class="number">100</span>  <span class="comment"># 可选参数，最小连通域面积</span></span><br><span class="line">    max_area = <span class="number">1000</span>  <span class="comment"># 可选参数，最大连通域面积</span></span><br><span class="line">    threshold1 = <span class="number">100</span>  <span class="comment"># 可选参数， canny边缘检测的阈值</span></span><br><span class="line">    threshold2 = <span class="number">200</span>  <span class="comment"># 可选参数， canny边缘检测的阈值</span></span><br><span class="line">    num_threads = <span class="number">4</span>  <span class="comment"># 可选参数， 线程数</span></span><br><span class="line">    move_file = <span class="literal">True</span> <span class="comment"># 是否移动文件</span></span><br><span class="line">    max_retries = <span class="number">3</span>  <span class="comment"># 最大重试次数</span></span><br><span class="line">    retry_delay = <span class="number">5</span> <span class="comment"># 重试间隔时间</span></span><br><span class="line">    min_subtitle_frames = <span class="number">5</span> <span class="comment"># 最小字幕帧数</span></span><br><span class="line"></span><br><span class="line">    process_directory_multithreaded(input_dir, output_dir, min_area, max_area, threshold1, threshold2, num_threads= num_threads, move_file=move_file, max_retries=max_retries, retry_delay=retry_delay, min_subtitle_frames=min_subtitle_frames)</span><br></pre></td></tr></table></figure><h2 id="tips">tips</h2><p><strong>参数解释与建议值:</strong></p><ol><li><p><strong><code>min_area = 100</code> (可选参数，最小连通域面积)</strong></p><ul><li><strong>含义：</strong> 这个参数表示在检测字幕区域时，被认为是有效字幕区域的最小连通域面积。连通域是指图像中像素值相近且相互连接的区域。</li><li><strong>单位：</strong> 像素 (pixels)。</li><li><strong>作用：</strong> 用于过滤掉过小的噪声或干扰区域，这些区域通常不是真实的字幕。</li><li><strong>建议值：</strong><ul><li><strong>默认值：</strong> <code>100</code> 是一个比较常用的起始值，适用于字幕字体大小适中的情况。</li><li><strong>调整方向：</strong><ul><li><strong>如果检测到太多噪声：</strong> 可以适当增大 <code>min_area</code> 的值，例如 <code>150</code> 或 <code>200</code>。</li><li><strong>如果漏检了小字幕：</strong> 可以适当减小 <code>min_area</code> 的值，例如 <code>50</code> 或 <code>80</code>。</li></ul></li><li><strong>具体调整：</strong><ul><li>你需要根据视频的分辨率和字幕字体大小进行调整， 如果你的视频是高清的，字幕字体比较大，则可以设置更大，反之则减小。</li><li>可以先尝试不修改，运行代码查看日志或者输出的图片，再根据结果进行调整。</li></ul></li></ul></li><li><strong>注意事项：</strong><ul><li><code>min_area</code> 的值不应设置得太小，否则会把一些小的噪点错误识别为字幕。</li></ul></li></ul></li><li><p><strong><code>max_area = 1000</code> (可选参数，最大连通域面积)</strong></p><ul><li><strong>含义：</strong> 这个参数表示在检测字幕区域时，被认为是有效字幕区域的最大连通域面积。</li><li><strong>单位：</strong> 像素 (pixels)。</li><li><strong>作用：</strong> 用于过滤掉过大的区域，例如背景或其他的文本区域。</li><li><strong>建议值：</strong><ul><li><strong>默认值：</strong> <code>1000</code> 是一个比较常用的起始值，适用于字幕字体大小适中的情况。</li><li><strong>调整方向：</strong><ul><li><strong>如果检测到过大的区域：</strong> 可以适当减小 <code>max_area</code> 的值，例如 <code>800</code> 或 <code>900</code>。</li><li><strong>如果漏检了字幕：</strong> 如果你的字幕字体非常大，或者包含多个连通区域， 可以尝试增加 <code>max_area</code> 例如 <code>1500</code>。</li></ul></li><li><strong>具体调整：</strong><ul><li>你需要根据视频的分辨率和字幕字体大小进行调整， 如果你的视频是高清的，字幕字体比较大，则可以设置更大，反之则减小。</li><li>可以先尝试不修改，运行代码查看日志或者输出的图片，再根据结果进行调整。</li></ul></li></ul></li><li><strong>注意事项：</strong><ul><li><code>max_area</code> 的值不应设置的太高，否则会将一些背景中的文字误认为是字幕。</li></ul></li></ul></li><li><p><strong><code>threshold1 = 100</code> (可选参数，Canny 边缘检测的阈值 1)</strong></p><ul><li><strong>含义：</strong>  Canny 边缘检测算法有两个阈值，<code>threshold1</code> 是较低的阈值。</li><li><strong>单位：</strong>  无单位，表示像素值变化的大小。</li><li><strong>作用：</strong> 用于检测图像中的边缘。较低的阈值将检测出更多的边缘，可能包括一些噪声。</li><li><strong>建议值：</strong><ul><li><strong>默认值：</strong> <code>100</code> 是一个比较常用的起始值。</li><li><strong>调整方向：</strong><ul><li><strong>如果检测到太多不必要的边缘：</strong> 可以适当增大 <code>threshold1</code> 的值，例如 <code>120</code> 或 <code>150</code>。</li><li><strong>如果漏检了字幕的边缘：</strong> 可以适当减小 <code>threshold1</code> 的值，例如 <code>80</code> 或 <code>90</code>。</li></ul></li><li><strong>具体调整：</strong><ul><li>需要根据视频的图像质量进行调整，如果视频比较模糊，则可以适当降低<code>threshold1</code>的值，提高检测的敏感性，反之则可以增加<code>threshold1</code>。</li><li>可以先尝试不修改，运行代码查看日志或者输出的图片，再根据结果进行调整。</li></ul></li></ul></li></ul></li><li><p><strong><code>threshold2 = 200</code> (可选参数，Canny 边缘检测的阈值 2)</strong></p><ul><li><strong>含义：</strong> <code>threshold2</code> 是 Canny 边缘检测算法中较高的阈值。</li><li><strong>单位：</strong> 无单位，表示像素值变化的大小。</li><li><strong>作用：</strong> 较高阈值用于过滤掉弱边缘，确保只留下较强的边缘。</li><li><strong>建议值：</strong><ul><li><strong>默认值:</strong> <code>200</code> 是一个比较常用的起始值。</li><li><strong>调整方向:</strong><ul><li><strong>如果检测到太多不必要的边缘:</strong> 可以适当增大 <code>threshold2</code> 的值，例如 <code>220</code> 或 <code>250</code>。</li><li><strong>如果漏检了字幕的边缘:</strong> 可以适当减小 <code>threshold2</code> 的值，例如 <code>180</code> 或 <code>190</code>。</li></ul></li><li><strong>具体调整:</strong><ul><li><code>threshold2</code>的值需要高于<code>threshold1</code>的值， 你可以根据视频的图像质量进行调整，如果视频比较模糊，则可以适当降低<code>threshold2</code>的值，提高检测的敏感性，反之则可以增加<code>threshold2</code>。</li><li>可以先尝试不修改，运行代码查看日志或者输出的图片，再根据结果进行调整。</li></ul></li></ul></li><li><strong>注意事项:</strong><ul><li><code>threshold2</code> 的值不应与 <code>threshold1</code> 相差过大，否则边缘检测可能会失败。</li></ul></li></ul></li><li><p><strong><code>num_threads = 4</code> (可选参数，线程数)</strong></p><ul><li><strong>含义：</strong>  用于指定多线程处理视频时使用的线程数量。</li><li><strong>单位：</strong> 线程数。</li><li><strong>作用：</strong>  多线程可以提高视频处理速度，充分利用 CPU 资源。</li><li><strong>建议值：</strong><ul><li><strong>默认值:</strong> <code>4</code> 是一个比较常用的起始值，适用于大多数 4 核或 8 核 CPU。</li><li><strong>调整方向:</strong><ul><li><strong>如果你的 CPU 核心数较少：</strong> 可以适当减小 <code>num_threads</code> 的值，例如 <code>2</code>。</li><li><strong>如果你的 CPU 核心数较多，且资源充足:</strong> 可以适当增加 <code>num_threads</code> 的值，例如 <code>8</code> 或 <code>16</code>。</li></ul></li><li><strong>具体调整：</strong><ul><li>你需要根据你的CPU的性能进行调整，如果CPU性能比较强，可以适当提高，否则则可以降低。</li><li>如果多线程处理导致内存占用过多，可以考虑降低线程数量。</li></ul></li></ul></li><li><strong>注意事项：</strong><ul><li><code>num_threads</code> 不应超过你 CPU 的核心数，过多的线程可能会导致性能下降，资源占用过多。</li></ul></li></ul></li><li><p><strong><code>move_file = True</code> (可选参数，是否移动文件)</strong></p><ul><li><strong>含义：</strong>  一个布尔值，决定是否将检测到字幕的视频文件移动到输出文件夹。</li><li><strong>取值：</strong>  <code>True</code> (移动文件) 或 <code>False</code> (不移动文件)。</li><li><strong>作用：</strong><ul><li><code>True</code>: 将检测到字幕的视频文件移动到输出文件夹。</li><li><code>False</code>: 只检测视频中是否有字幕，不移动视频文件。</li></ul></li><li><strong>建议值：</strong><ul><li><strong>根据你的需求选择:</strong> 如果你需要整理有字幕的视频文件，设置为 <code>True</code>；如果只需要检测字幕，则设置为 <code>False</code>。</li></ul></li></ul></li><li><p><strong><code>max_retries = 3</code> (可选参数，最大重试次数)</strong></p><ul><li><strong>含义：</strong>  当移动视频文件失败时，代码会尝试重新移动的最大次数。</li><li><strong>单位：</strong>  次数。</li><li><strong>作用：</strong>  避免由于临时文件占用导致的移动失败，保证代码的鲁棒性。</li><li><strong>建议值：</strong><ul><li><strong>默认值：</strong> <code>3</code> 是一个比较常用的起始值。</li><li><strong>调整方向：</strong><ul><li>如果你的运行环境经常出现文件被占用的问题，可以考虑增加次数，比如<code>5</code></li><li>如果对速度要求比较高，可以考虑减小次数，比如 <code>2</code></li></ul></li></ul></li><li><strong>注意事项：</strong><ul><li><code>max_retries</code> 不宜设置过高，避免一直等待占用资源。</li></ul></li></ul></li><li><p><strong><code>retry_delay = 5</code> (可选参数，重试间隔时间)</strong></p><ul><li><strong>含义：</strong>  当移动视频文件失败时，代码等待多长时间再次尝试移动，单位为秒。</li><li><strong>单位：</strong> 秒 (seconds)。</li><li><strong>作用：</strong>  避免频繁地重试占用文件导致系统资源紧张。</li><li><strong>建议值：</strong><ul><li><strong>默认值：</strong> <code>5</code> 秒是一个比较常用的起始值。</li><li><strong>调整方向：</strong><ul><li>如果你认为5秒的等待时间太长，可以缩短为<code>3</code> 或者更小。</li><li>如果你认为5秒的等待时间太短，可以加长到<code>10</code> 或者更多。</li></ul></li></ul></li><li><strong>注意事项：</strong><ul><li><code>retry_delay</code> 的时间不应过短，否则可能仍然因为资源未释放而移动失败。</li></ul></li></ul></li></ol><h2 id="图像处理算法详解-2">图像处理算法详解</h2><h2 id="1-图像缩放-Image-Resizing-2">1. 图像缩放 (Image Resizing)</h2><h3 id="原理-4">原理</h3><p>图像缩放是指改变图像的尺寸，包括放大（upscaling）和缩小（downscaling）两种操作。其基本原理是通过像素插值算法，在新的尺寸下估计图像像素的值。</p><h3 id="技术-4">技术</h3><p>常用的图像缩放技术包括：</p><ul><li><strong>最近邻插值 (Nearest Neighbor Interpolation):</strong><ul><li><strong>原理:</strong> 将目标图像的像素值设置为源图像中距离最近的像素值。</li><li><strong>特点:</strong> 简单快速，但可能导致图像边缘出现锯齿状。</li></ul></li><li><strong>双线性插值 (Bilinear Interpolation):</strong><ul><li><strong>原理:</strong>  使用目标图像像素周围的 2x2 邻域像素值进行双线性插值计算。</li><li><strong>特点:</strong> 图像效果比最近邻插值平滑，计算量适中。</li></ul></li><li><strong>双三次插值 (Bicubic Interpolation):</strong><ul><li><strong>原理:</strong>  使用目标图像像素周围的 4x4 邻域像素值进行双三次插值计算。</li><li><strong>特点:</strong> 图像效果较好，细节保留较多，但计算量较大。</li></ul></li><li><strong>基于深度学习的超分辨率 (Super-Resolution):</strong><ul><li><strong>原理:</strong> 使用深度学习模型 (例如, SRCNN, EDSR, ESRGAN) 从低分辨率图像重建高分辨率图像.</li><li><strong>特点:</strong> 可以生成高质量的图像，但是计算量大，需要大量的训练数据。</li></ul></li></ul><h3 id="用途-3">用途</h3><ul><li><strong>调整图像大小：</strong>  适应不同的显示设备或应用场景。</li><li><strong>预处理步骤：</strong>  作为其他图像处理算法 (如目标检测, OCR) 的预处理步骤.</li><li><strong>生成不同分辨率的图像：</strong>  用于创建图像金字塔或进行多尺度分析。</li></ul><h2 id="2-图像裁剪-Image-Cropping-2">2. 图像裁剪 (Image Cropping)</h2><h3 id="原理-5">原理</h3><p>图像裁剪是指从图像中选择一个矩形区域，然后将其提取出来。其基本原理是根据指定的起始坐标和宽高，截取图像对应的像素数据。</p><h3 id="技术-5">技术</h3><ul><li><strong>矩形裁剪:</strong>  指定矩形左上角坐标(x, y) 和矩形的宽度 (w) 和高度 (h)，然后提取这个矩形区域的像素。</li><li><strong>任意形状裁剪:</strong>  使用掩码 (mask) 来指定需要裁剪的区域，mask 可以是任意形状。</li></ul><h3 id="用途-4">用途</h3><ul><li><strong>去除图像中不必要的区域：</strong> 突出感兴趣的目标对象或区域。</li><li><strong>调整图像构图：</strong>  重新构图，使图像更符合需求。</li><li><strong>数据增强：</strong> 作为图像数据增强的一种方法，可以生成不同的图像样本。</li></ul><h2 id="3-图像拼接-Image-Stitching-2">3. 图像拼接 (Image Stitching)</h2><h3 id="原理-6">原理</h3><p>图像拼接是指将多张具有重叠区域的图像拼接成一张完整的全景图像。其基本原理包括图像配准和图像融合两个步骤。</p><h3 id="技术-6">技术</h3><ul><li><strong>特征检测和匹配 (Feature Detection and Matching):</strong><ul><li><strong>目的:</strong>  提取图像中的特征点 (如 SIFT, SURF, ORB 等) 并进行匹配，找到图像之间的对应关系。</li></ul></li><li><strong>图像配准 (Image Registration):</strong><ul><li><strong>目的:</strong>  根据匹配到的特征点，计算图像之间的变换关系，将图像对齐。</li><li><strong>技术:</strong> 使用如 RANSAC 等算法估计图像的变换矩阵。</li></ul></li><li><strong>图像融合 (Image Blending):</strong><ul><li><strong>目的:</strong> 将对齐的图像拼接成一张完整的图像。</li><li><strong>技术:</strong>  使用如多频带融合或加权平均等方法处理图像重叠区域，避免明显的接缝。</li></ul></li><li><strong>柱面投影:</strong><ul><li>**目的:**将图像映射到柱面坐标系，以便更好地拼接水平方向上视角变化很大的图像。</li></ul></li></ul><h3 id="用途-5">用途</h3><ul><li><strong>生成全景图：</strong>  将多张图片拼接成一张宽视野的全景图像。</li><li><strong>创建高分辨率图像：</strong>  将多张低分辨率图像拼接成一张高分辨率图像。</li><li><strong>创建 3D 模型：</strong>  通过多张图片可以重建 3D 模型。</li></ul><h2 id="4-图像去噪-Image-Denoising">4. 图像去噪 (Image Denoising)</h2><h3 id="原理-7">原理</h3><p>图像去噪是指减少图像中噪声的技术。噪声是指图像中不希望出现的随机干扰信号。其基本原理是区分图像中的有用信号和噪声信号，然后对噪声信号进行抑制或去除。</p><h3 id="技术-7">技术</h3><ul><li><strong>空域滤波 (Spatial Filtering):</strong><ul><li><strong>原理:</strong> 使用滤波器对图像像素进行加权平均，以平滑图像，降低噪声。</li><li><strong>技术:</strong><ul><li><strong>均值滤波 (Mean Filtering):</strong> 使用邻域像素的平均值替换中心像素值。</li><li><strong>高斯滤波 (Gaussian Filtering):</strong> 使用高斯核对邻域像素进行加权平均。</li><li><strong>中值滤波 (Median Filtering):</strong> 使用邻域像素的中值替换中心像素值，可以去除脉冲噪声。</li><li><strong>双边滤波 (Bilateral Filtering):</strong> 结合像素的空间距离和值域相似度，在去除噪声的同时保持边缘。</li></ul></li></ul></li><li><strong>频域滤波 (Frequency Filtering):</strong><ul><li><strong>原理:</strong> 将图像转换到频域，对噪声频率进行抑制。</li><li><strong>技术:</strong>  使用如低通滤波器 (Low-Pass Filter) 减少高频噪声。</li></ul></li><li><strong>基于深度学习的方法:</strong><ul><li><strong>原理:</strong> 使用深度学习模型 (例如，DnCNN, FFDNet, RIDNet) 从噪声图像重建清晰的图像.</li><li><strong>特点:</strong> 可以取得较好的去噪效果，但是模型训练需要大量的带噪声和无噪声的图像对。</li></ul></li></ul><h3 id="用途-6">用途</h3><ul><li><strong>提高图像质量：</strong>  去除图像中的噪声，使图像更加清晰。</li><li><strong>预处理步骤：</strong> 作为其他图像处理算法的预处理步骤，例如，用于提高目标检测或 OCR 的准确率。</li><li><strong>增强图像可读性：</strong> 降低噪声对图像的干扰，使人眼更容易识别图像内容。</li></ul><h2 id="5-图像修复-Image-Inpainting">5. 图像修复 (Image Inpainting)</h2><h3 id="原理-8">原理</h3><p>图像修复是指根据图像中已知区域的信息，恢复图像中缺失或损坏区域的技术。其基本原理是分析图像的结构和纹理信息，然后使用插值、纹理合成等方法，填充缺失区域。</p><h3 id="技术-8">技术</h3><ul><li><strong>基于扩散 (Diffusion) 的方法:</strong><ul><li><strong>原理:</strong>  根据周围的像素值逐步填充缺失区域，模拟热扩散过程。</li><li><strong>技术:</strong>  可以使用如 Navier-Stokes 方程进行建模。</li></ul></li><li><strong>基于纹理合成 (Texture Synthesis) 的方法:</strong><ul><li><strong>原理:</strong>  使用周围区域的纹理来填充缺失区域。</li><li><strong>技术:</strong>  可以使用基于样本的方法或基于马尔可夫随机场的方法。</li></ul></li><li><strong>基于深度学习的方法:</strong><ul><li><strong>原理:</strong>  使用深度学习模型 (例如，Context Encoder, GAN) 从已知的区域推断缺失区域的内容。</li><li><strong>特点:</strong>  可以实现较为真实的图像修复，特别是对于复杂结构和纹理的修复。</li></ul></li></ul><h3 id="用途-7">用途</h3><ul><li><strong>修复损坏的图像：</strong>  例如，修复老照片或损坏的文物图片。</li><li><strong>移除图像中的遮挡物：</strong>  例如，移除图像中的文字、水印、或不想要的对象。</li><li><strong>图像编辑：</strong>  实现高级的图像编辑功能，如移除人像上的斑点或修复背景中的瑕疵。</li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu系统使用docker安装 CVAT</title>
      <link href="/2025/01/10/docker-install-cvat/"/>
      <url>/2025/01/10/docker-install-cvat/</url>
      
        <content type="html"><![CDATA[<h1>在ubuntu系统使用docker安装 CVAT</h1><blockquote><p>CVAT 是一个<strong>免费、开源</strong>的 Web 应用程序，用于标注计算机视觉任务的数据集。它由 Intel 开发并维护，旨在为各种计算机视觉应用提供一个高效、强大且协作式的标注平台。</p></blockquote><h2 id="功能">功能</h2><ol><li><p><strong>多模态数据标注：</strong></p><ul><li><strong>图像标注：</strong> 支持各种图像标注类型，包括：<ul><li><strong>边界框 (Bounding Boxes):</strong> 用于检测和定位物体。</li><li><strong>多边形 (Polygons):</strong> 用于精确勾勒复杂形状的物体。</li><li><strong>关键点 (Keypoints):</strong> 用于标注物体的关键部位，如人脸关键点。</li><li><strong>线条 (Lines) 和 点 (Points):</strong> 用于简单形状或目标的标注。</li><li><strong>分割掩码 (Segmentation Masks):</strong> 用于像素级别的对象分割（需要与其他工具结合，如半自动标注工具）。</li></ul></li><li><strong>视频标注：</strong><ul><li>支持对视频中的对象进行跟踪和标注，并可以对每帧进行修改，方便动作识别和视频分析。</li></ul></li><li><strong>3D 数据标注：</strong><ul><li>可以标注3D 点云数据，支持点云的 bounding box 和 segmentation。</li></ul></li></ul></li><li><p><strong>强大的用户界面：</strong></p><ul><li><strong>直观易用：</strong> 提供简洁的用户界面，方便用户快速上手。</li><li><strong>自定义快捷键：</strong> 可自定义快捷键，提高标注效率。</li><li><strong>分屏显示：</strong> 可以同时显示多个图像/视频片段，方便对比标注。</li><li><strong>可定制的标注标签：</strong> 允许用户创建自己的标注标签，满足不同任务的需求。</li><li><strong>标注历史记录:</strong> 可以查看和回溯标注操作。</li></ul></li><li><p><strong>协作式标注：</strong></p><ul><li><strong>多用户支持：</strong> 支持多个用户同时协作标注同一个项目，提高标注效率。</li><li><strong>角色权限管理：</strong> 可以为不同的用户设置不同的角色和权限。</li><li><strong>标注任务分配：</strong> 可以将标注任务分配给不同的用户。</li><li><strong>标注审核：</strong> 管理员可以对标注结果进行审核，确保标注质量。</li></ul></li><li><p><strong>自动化和半自动化标注：</strong></p><ul><li><strong>预标注支持：</strong> 支持导入使用其他工具预先标注的结果，作为标注的起点。</li><li><strong>半自动标注工具:</strong> 可以使用一些半自动标注工具，例如智能多边形生成、模型辅助标注等，提高标注速度。</li><li><strong>模型集成：</strong> 可以集成深度学习模型，用于辅助标注。</li></ul></li><li><p><strong>数据管理：</strong></p><ul><li><strong>项目管理：</strong> 可以创建不同的标注项目，组织和管理标注数据。</li><li><strong>数据集导入和导出：</strong> 支持导入各种格式的数据集，并导出为多种标注格式，例如 COCO、PASCAL VOC、YOLO 等。</li><li><strong>数据版本控制：</strong> 可以追踪数据和标注的变更，方便进行版本控制。</li><li><strong>数据统计：</strong> 可以查看标注数据的统计信息，如标注数量、标注类型等。</li><li><strong>可定制化的工作流程：</strong> 支持自定义标注的工作流程，例如预标注，标注，审核等。</li></ul></li><li><p><strong>扩展性和可定制性：</strong></p><ul><li><strong>开放的 API：</strong> 提供 RESTful API，方便与其他系统集成。</li><li><strong>插件支持：</strong> 可以开发自己的插件，扩展 CVAT 的功能。</li><li><strong>Docker 支持：</strong> 可以使用 Docker 快速部署 CVAT。</li></ul></li></ol><p><strong>Ubuntu 系统:</strong> 建议使用 Ubuntu 20.04 或更高版本。</p><ul><li><strong>Docker 和 Docker Compose:</strong> 你需要在你的 Ubuntu 系统上安装 Docker 和 Docker Compose。</li></ul><p><strong>步骤：</strong></p><ol><li><p><strong>更新系统包列表：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure></li><li><p><strong>安装 Docker：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install docker.io</span><br></pre></td></tr></table></figure><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br><span class="line">docker --version</span><br></pre></td></tr></table></figure><p>如果命令输出了Docker版本信息，则说明安装成功。</p></li><li><p><strong>安装 Docker Compose：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install docker-compose</span><br></pre></td></tr></table></figure><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>如果命令输出了Docker Compose版本信息，则说明安装成功。</p></li><li><p><strong>下载 CVAT 配置文件：</strong></p><ul><li><p>CVAT 的官方 GitHub 仓库提供了 <code>docker-compose.yml</code> 文件，直接下载使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/opencv/cvat/develop/docker-compose.yml</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>修改 docker-compose.yml 文件：</strong></p><ul><li>找到  <code>services/cvat/volumes:</code> 模块，将其修改为：</li></ul> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cvat_data:/home/django/data</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">./data:/home/django/media</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">./logs:/home/django/logs</span></span><br></pre></td></tr></table></figure><p>这样可以方便地将你的数据放到当前目录的data和logs文件夹下，并且避免了默认数据目录在Docker容器内，数据丢失的问题。</p><ul><li>在 <code>version</code> 的下面加上  <code>networks:</code></li></ul> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">default:</span></span><br></pre></td></tr></table></figure><p>确保其他容器能够访问到CVAT服务</p></li><li><p><strong>创建数据目录:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> data</span><br><span class="line"><span class="built_in">mkdir</span> logs</span><br></pre></td></tr></table></figure></li><li><p><strong>启动 CVAT：</strong></p><ul><li><p>在 <code>docker-compose.yml</code> 文件所在的目录下，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><ul><li><code>-d</code> 参数表示在后台运行 (detached mode)。</li><li>首次运行会下载所需的 Docker 镜像，这可能需要一些时间。</li></ul></li></ul></li><li><p><strong>等待 CVAT 启动：</strong></p><ul><li><p>可以使用以下命令查看容器是否正常运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure></li><li><p>如果所有容器的状态都是 <code>Up</code>，则表示 CVAT 已经启动成功。</p></li><li><p>也可以使用 <code>docker logs -f &lt;cvat_container_id&gt; </code> 来查看cvat 容器的日志。<code>&lt;cvat_container_id&gt;</code> 你可以使用<code>docker ps</code> 命令查看。</p></li></ul></li><li><p><strong>访问 CVAT：</strong></p><ul><li>在你的 Web 浏览器中，打开以下地址：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure></li><li>默认的管理员用户名是 <code>admin</code>，密码是 <code>admin</code>。<ul><li><strong>首次登录后请立即修改管理员密码！</strong></li></ul></li></ul></li><li><p><strong>可选：创建新的管理员用户</strong></p><ul><li>你可以在用户管理页面创建新的管理员用户</li></ul></li></ol><p><strong>常用命令：</strong></p><ul><li><p><strong>停止 CVAT：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure></li><li><p><strong>重启 CVAT：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure></li><li><p><strong>查看容器日志：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose logs -f</span><br></pre></td></tr></table></figure></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>借助深度学习模型实现分离人声与背景声</title>
      <link href="/2025/01/01/split-voice/"/>
      <url>/2025/01/01/split-voice/</url>
      
        <content type="html"><![CDATA[<h1>借助深度学习模型实现分离人声与背景声</h1><h2 id="spleeter">spleeter</h2><blockquote><p>Spleeter 是一个由 Deezer 开发的音频源分离工具，支持将音频分离为伴奏和人声。</p></blockquote><h2 id="技术库">技术库</h2><ul><li>spleeter</li><li>ffmpeg</li><li>open-unmix</li><li>demuicx</li></ul><h2 id="安装使用">安装使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install spleeter</span><br></pre></td></tr></table></figure><h2 id="简单demo">简单demo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spleeter separate -i audio.wav -p spleeter:2stems -o output/</span><br></pre></td></tr></table></figure><h2 id="实现人声与背景音分离">实现人声与背景音分离</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> spleeter.separator <span class="keyword">import</span> Separator</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输入和输出路径</span></span><br><span class="line">video_file = <span class="string">&#x27;input_video.mp4&#x27;</span>  <span class="comment"># 输入视频文件</span></span><br><span class="line">audio_file = <span class="string">&#x27;extracted_audio.wav&#x27;</span>  <span class="comment"># 提取的音频文件</span></span><br><span class="line">output_dir = <span class="string">&#x27;output&#x27;</span>  <span class="comment"># 输出文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤 1: 使用 ffmpeg 提取音频</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_audio_from_video</span>(<span class="params">video_file, audio_file</span>):</span><br><span class="line">    command = [</span><br><span class="line">        <span class="string">&#x27;ffmpeg&#x27;</span>, <span class="string">&#x27;-i&#x27;</span>, video_file, <span class="string">&#x27;-vn&#x27;</span>, <span class="string">&#x27;-acodec&#x27;</span>, <span class="string">&#x27;pcm_s16le&#x27;</span>, <span class="string">&#x27;-ar&#x27;</span>, <span class="string">&#x27;44100&#x27;</span>, <span class="string">&#x27;-ac&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, audio_file</span><br><span class="line">    ]</span><br><span class="line">    subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Audio extracted to <span class="subst">&#123;audio_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤 2: 使用 Spleeter 分离音频中的人声和伴奏</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">separate_audio</span>(<span class="params">audio_file, output_dir</span>):</span><br><span class="line">    separator = Separator(<span class="string">&#x27;spleeter:2stems&#x27;</span>)  <span class="comment"># 选择分离人声和伴奏</span></span><br><span class="line">    separator.separate_to_file(audio_file, output_dir)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Audio separation complete. Files saved in <span class="subst">&#123;output_dir&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤 3: 合并去除人声的伴奏与原视频</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_audio_with_video</span>(<span class="params">video_file, audio_file, output_video_file</span>):</span><br><span class="line">    command = [</span><br><span class="line">        <span class="string">&#x27;ffmpeg&#x27;</span>, <span class="string">&#x27;-i&#x27;</span>, video_file, <span class="string">&#x27;-i&#x27;</span>, audio_file, <span class="string">&#x27;-c:v&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, <span class="string">&#x27;-c:a&#x27;</span>, <span class="string">&#x27;aac&#x27;</span>, <span class="string">&#x27;-strict&#x27;</span>, <span class="string">&#x27;experimental&#x27;</span>, output_video_file</span><br><span class="line">    ]</span><br><span class="line">    subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Video saved as <span class="subst">&#123;output_video_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_video</span>(<span class="params">video_file</span>):</span><br><span class="line">    <span class="comment"># 提取音频</span></span><br><span class="line">    extract_audio_from_video(video_file, audio_file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分离音频</span></span><br><span class="line">    separate_audio(audio_file, output_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取分离后的伴奏音频路径</span></span><br><span class="line">    accompaniment_audio = os.path.join(output_dir, os.path.basename(audio_file).replace(<span class="string">&#x27;.wav&#x27;</span>, <span class="string">&#x27;/accompaniment.wav&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(accompaniment_audio):</span><br><span class="line">        <span class="comment"># 合并伴奏和视频</span></span><br><span class="line">        output_video_file = <span class="string">&#x27;output_video.mp4&#x27;</span></span><br><span class="line">        merge_audio_with_video(video_file, accompaniment_audio, output_video_file)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Process complete, output video created.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error: Accompaniment audio file not found.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">process_video(video_file)</span><br></pre></td></tr></table></figure><blockquote><p>ffmpeg 提取音频时，默认将视频中的音频轨道提取为 .wav 格式。如果你的音频有不同的格式（如 .mp3），你可以根据需要修改提取音频的格式。</p></blockquote><blockquote><p>Spleeter 使用的是深度学习模型，因此分离质量取决于模型的效果，尽管它能较好地分离人声和伴奏，但结果可能不是完美的。</p></blockquote><h2 id="输出文件说明">输出文件说明</h2><ul><li><p>accompaniment.wav：分离出的伴奏音轨，去除了人声。</p></li><li><p>vocals.wav：分离出的人声音轨。</p></li><li><p>output_video.mp4：生成的去人声视频。</p></li></ul><h2 id="GUI-实现">GUI 实现</h2><ul><li>分割视频出音频数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> VideoFileClip</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_audio_from_video</span>(<span class="params">video_path, output_audio_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从视频中提取音频并保存为 WAV 格式。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param video_path: 输入视频文件路径</span></span><br><span class="line"><span class="string">    :param output_audio_path: 输出音频文件路径 (例如: &#x27;output_audio.wav&#x27;)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 读取视频文件</span></span><br><span class="line">        video = VideoFileClip(video_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取音频</span></span><br><span class="line">        audio = video.audio</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 写入音频文件，保存为 WAV 格式</span></span><br><span class="line">        audio.write_audiofile(output_audio_path, codec=<span class="string">&#x27;pcm_s16le&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 释放资源</span></span><br><span class="line">        audio.close()</span><br><span class="line">        video.close()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;音频已成功提取并保存为: <span class="subst">&#123;output_audio_path&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理视频时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例使用</span></span><br><span class="line">video_path = <span class="string">&quot;input_video.mp4&quot;</span>  <span class="comment"># 输入的视频文件路径</span></span><br><span class="line">output_audio_path = <span class="string">&quot;output_audio.wav&quot;</span>  <span class="comment"># 输出的音频文件路径</span></span><br><span class="line"></span><br><span class="line">extract_audio_from_video(video_path, output_audio_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在如下路径下载(需要科学上网)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://makenweb.com/SpleeterGUI</span><br></pre></td></tr></table></figure><blockquote><p>下载成功后，导入上述步骤输出音频输出开始转换</p></blockquote><h2 id="demucs-分离">demucs 分离</h2><blockquote><p>Demucs 是 Facebook AI Research (FAIR) 发布的一个强大的深度学习音频分离模型，它能够将音乐分离成多个成分（如人声、鼓声、贝斯、其他）。Demucs 采用了时域卷积网络（Temporal Convolutional Networks，TCNs），在音频分离中表现得非常优秀，特别是在复杂音频和多种音频成分混合的情况下</p></blockquote><h3 id="安装使用-2">安装使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install demucs</span><br><span class="line">demucs output.wav</span><br></pre></td></tr></table></figure><h2 id="openunmix-分离">openunmix 分离</h2><blockquote><p>Open-Unmix 是一个专为音频分离设计的开源深度学习模型，特别适用于分离音乐中的人声与伴奏。它是基于 PyTorch 实现的，能够将音频分离成多个来源（通常为人声、鼓、贝斯和其他伴奏）。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install openunmix</span><br><span class="line">umx input_audio.wav</span><br></pre></td></tr></table></figure><h2 id="脚本实现">脚本实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># openumix</span></span><br><span class="line"><span class="keyword">import</span> openunmix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分离音频</span></span><br><span class="line">input_file = <span class="string">&quot;input_audio.wav&quot;</span></span><br><span class="line">output_dir = <span class="string">&quot;output_directory&quot;</span></span><br><span class="line">umx = openunmix.Umx()</span><br><span class="line">umx.separate(input_file, output_dir)</span><br><span class="line"><span class="comment"># demucs</span></span><br><span class="line"><span class="keyword">import</span> demucs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分离音频</span></span><br><span class="line">input_file = <span class="string">&quot;input_audio.wav&quot;</span></span><br><span class="line">output_dir = <span class="string">&quot;output_directory&quot;</span></span><br><span class="line">demucs.separate(input_file, output_dir)</span><br></pre></td></tr></table></figure><ul><li>无音频数据视频与无人声数据合并</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_video_audio</span>(<span class="params">video_file, audio_file, output_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 FFmpeg 合并视频和音频。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param video_file: 输入的视频文件路径</span></span><br><span class="line"><span class="string">    :param audio_file: 输入的音频文件路径</span></span><br><span class="line"><span class="string">    :param output_file: 合并后的输出视频路径</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    command = [</span><br><span class="line">        <span class="string">r&#x27;D:\ffmpeg-7.0.2-essentials_build\bin\ffmpeg.exe&#x27;</span>,  <span class="comment"># FFmpeg 可执行文件的路径</span></span><br><span class="line">        <span class="string">&#x27;-i&#x27;</span>, video_file,  <span class="comment"># 输入视频文件</span></span><br><span class="line">        <span class="string">&#x27;-i&#x27;</span>, audio_file,  <span class="comment"># 输入音频文件</span></span><br><span class="line">        <span class="string">&#x27;-c:v&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>,  <span class="comment"># 保持视频编解码格式不变</span></span><br><span class="line">        <span class="string">&#x27;-c:a&#x27;</span>, <span class="string">&#x27;aac&#x27;</span>,  <span class="comment"># 设置音频编码格式为 AAC</span></span><br><span class="line">        <span class="string">&#x27;-strict&#x27;</span>, <span class="string">&#x27;experimental&#x27;</span>,  <span class="comment"># 允许使用实验性的音频编解码器</span></span><br><span class="line">        <span class="string">&#x27;-map&#x27;</span>, <span class="string">&#x27;0:v:0&#x27;</span>,  <span class="comment"># 映射视频流</span></span><br><span class="line">        <span class="string">&#x27;-map&#x27;</span>, <span class="string">&#x27;1:a:0&#x27;</span>,  <span class="comment"># 映射音频流</span></span><br><span class="line">        <span class="string">&#x27;-y&#x27;</span>,  <span class="comment"># 覆盖输出文件（如果存在）</span></span><br><span class="line">        output_file  <span class="comment"># 输出合并后的文件</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        subprocess.run(command, check=<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;视频和音频已成功合并并保存为: <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;合并过程中出现错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan_and_merge</span>(<span class="params">video_dir, audio_dir, output_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    扫描视频和音频文件夹中的所有文件，并合并一一对应的文件。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param video_dir: 存放视频文件的目录</span></span><br><span class="line"><span class="string">    :param audio_dir: 存放音频文件的目录</span></span><br><span class="line"><span class="string">    :param output_dir: 输出合并后文件的目录</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 递归获取视频文件夹中的所有 .mp4 文件</span></span><br><span class="line">    video_files = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(video_dir):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.mp4&#x27;</span>):</span><br><span class="line">                video_files.append(os.path.join(root, file))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归获取音频文件夹中的所有 .wav 文件</span></span><br><span class="line">    audio_files = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(audio_dir):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.wav&#x27;</span>):</span><br><span class="line">                audio_files.append(os.path.join(root, file))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确保输出文件夹存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">        os.makedirs(output_dir)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> video_file <span class="keyword">in</span> video_files:</span><br><span class="line">        <span class="comment"># 获取不带路径的文件名（不包括扩展名）</span></span><br><span class="line">        video_name = os.path.splitext(os.path.basename(video_file))[<span class="number">0</span>].replace(<span class="string">&quot;_no_audio&quot;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查找对应的音频文件（从音频文件所在的父目录名称进行匹配）</span></span><br><span class="line">        matching_audio_file = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> audio_file <span class="keyword">in</span> audio_files:</span><br><span class="line">            <span class="comment"># 获取音频文件的父目录名称</span></span><br><span class="line">            audio_file_parent_dir = os.path.basename(os.path.dirname(audio_file))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 使用音频文件父目录名称进行匹配</span></span><br><span class="line">            <span class="keyword">if</span> video_name <span class="keyword">in</span> audio_file_parent_dir:</span><br><span class="line">                matching_audio_file = audio_file</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> matching_audio_file:</span><br><span class="line">            <span class="comment"># 构造输出文件路径</span></span><br><span class="line">            output_path = os.path.join(output_dir, <span class="string">f&quot;<span class="subst">&#123;video_name&#125;</span>_merged.mp4&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 合并视频和音频</span></span><br><span class="line">            merge_video_audio(video_file, matching_audio_file, output_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;找不到与 <span class="subst">&#123;video_file&#125;</span> 对应的音频文件.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例使用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    video_dir = <span class="string">r&#x27;D:\pythonProject\audio_record_server\src\utils\output_video_dir&#x27;</span>  <span class="comment"># 视频文件夹路径</span></span><br><span class="line">    audio_dir = <span class="string">r&#x27;D:\pythonProject\audio_record_server\src\utils\output_audio_umxl&#x27;</span>  <span class="comment"># 音频文件夹路径</span></span><br><span class="line">    output_dir = <span class="string">r&#x27;D:\pythonProject\audio_record_server\src\utils\output_result&#x27;</span>  <span class="comment"># 输出文件夹路径</span></span><br><span class="line"></span><br><span class="line">    scan_and_merge(video_dir, audio_dir, output_dir)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="效果对比">效果对比</h2><table><thead><tr><th>库</th><th>spleeter</th><th>demuics</th><th>open-unmix</th></tr></thead><tbody><tr><td>人声分离效果</td><td>差</td><td>较好</td><td>较好</td></tr><tr><td>有无GUI</td><td>有</td><td></td><td></td></tr><tr><td>速度</td><td>10s</td><td>5s</td><td>2s</td></tr><tr><td>备注</td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>上述对比为同时处理32s时长 wav格式采样率为44100khz，比特率：1411kps，立体声的音频结果对比</p></blockquote><h2 id="效果测试">效果测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2024/12/26 16:57</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(czq)</span></span><br><span class="line"><span class="string">Version:  V 0.1</span></span><br><span class="line"><span class="string">File:     video_split_audio.py</span></span><br><span class="line"><span class="string">Describe: Write during the python at zgxmt, Github link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> openunmix</span><br><span class="line"><span class="keyword">import</span> demucs</span><br><span class="line"><span class="keyword">from</span> moviepy <span class="keyword">import</span> VideoFileClip, AudioFileClip, CompositeVideoClip</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> soundfile <span class="keyword">as</span> sf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> utils.meger_video_audio <span class="keyword">import</span> scan_and_merge</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局变量</span></span><br><span class="line">OUTPUT_AUDIO_UMXL = <span class="string">&quot;./output_audio_umxl&quot;</span></span><br><span class="line">OUTPUT_AUDIO_DEMUCS = <span class="string">&quot;./output_audio_demucs&quot;</span></span><br><span class="line">PROCESSED_FILES = <span class="built_in">set</span>()  <span class="comment"># 用于记录已处理的文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_audio_from_video</span>(<span class="params">video_path, output_audio_dir, output_video_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从视频中提取音频并保存为 WAV 格式。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param video_path: 输入视频文件路径</span></span><br><span class="line"><span class="string">    :param output_audio_dir: 输出音频文件目录</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取视频文件名（不含扩展名）</span></span><br><span class="line">        video_name = os.path.basename(video_path).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出音频文件路径</span></span><br><span class="line">        output_audio_path = os.path.join(output_audio_dir, <span class="string">f&quot;<span class="subst">&#123;video_name&#125;</span>.wav&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出不含音频的视频文件路径</span></span><br><span class="line">        output_video_path = os.path.join(output_video_dir, <span class="string">f&quot;<span class="subst">&#123;video_name&#125;</span>_no_audio.mp4&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查音频文件是否已经存在，避免重复提取</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(output_audio_path):</span><br><span class="line">            logging.warning(<span class="string">f&quot;音频文件已存在，跳过提取：<span class="subst">&#123;output_audio_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.info(<span class="string">f&quot;开始提取音频：<span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="comment"># 读取视频文件</span></span><br><span class="line">            video = VideoFileClip(video_path)</span><br><span class="line">            <span class="comment"># 提取视频中的音频</span></span><br><span class="line">            audio = video.audio</span><br><span class="line">            <span class="comment"># 保存音频为 WAV 格式</span></span><br><span class="line">            audio.write_audiofile(output_audio_path, codec=<span class="string">&#x27;pcm_s16le&#x27;</span>)</span><br><span class="line">            <span class="comment"># 释放音频资源</span></span><br><span class="line">            audio.close()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取视频文件</span></span><br><span class="line">        video = VideoFileClip(video_path)</span><br><span class="line">        <span class="comment"># 将视频的音频部分设为 None，从而去除音频</span></span><br><span class="line">        video_without_audio = video.without_audio()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存不含音频的视频</span></span><br><span class="line">        video_without_audio.write_videofile(output_video_path, codec=<span class="string">&quot;libx264&quot;</span>, audio=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 释放视频资源</span></span><br><span class="line">        video.close()</span><br><span class="line">        video_without_audio.close()</span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">f&quot;音频已成功提取并保存为: <span class="subst">&#123;output_audio_path&#125;</span>&quot;</span>)</span><br><span class="line">        logging.info(<span class="string">f&quot;不含音频的视频已保存为: <span class="subst">&#123;output_video_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output_audio_path, output_video_path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理视频时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_audio_umx</span>(<span class="params">file_path, output_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 UMX 模型进行音频分离，并添加源文件名到输出文件名中</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> file_path <span class="keyword">in</span> PROCESSED_FILES:</span><br><span class="line">            logging.warning(<span class="string">f&quot;文件已处理，跳过 UMX: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        logging.info(<span class="string">f&quot;开始 UMX 处理: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 使用 openunmix.umx.separate 函数调用</span></span><br><span class="line">        <span class="comment"># 从文件路径中提取文件名（不包含扩展名）</span></span><br><span class="line">        file_name = os.path.basename(file_path).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        output_prefix_dir = os.path.join(output_dir, file_name)  <span class="comment"># 添加前缀到输出目录</span></span><br><span class="line">        os.makedirs(output_prefix_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># if umx_args is None:</span></span><br><span class="line">        <span class="comment">#     umx_args = []</span></span><br><span class="line">        <span class="comment">#     # 构建完整的 umx 命令</span></span><br><span class="line">        command = [<span class="string">&quot;umx&quot;</span>, file_path, <span class="string">&quot;--outdir&quot;</span>, output_prefix_dir]</span><br><span class="line"></span><br><span class="line">        result = subprocess.run(command, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> result.returncode != <span class="number">0</span>:</span><br><span class="line">            logging.error(<span class="string">f&quot;UMX 执行出错: <span class="subst">&#123;result.stderr&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">f&quot;UMX 处理完成: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        PROCESSED_FILES.add(file_path)  <span class="comment"># 记录已处理</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理UMX时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_audio_demucs</span>(<span class="params">file_path, output_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 Demucs 模型进行音频分离，并添加源文件名到输出文件名中</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> file_path <span class="keyword">in</span> PROCESSED_FILES:</span><br><span class="line">            logging.warning(<span class="string">f&quot;文件已处理，跳过 Demucs: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        logging.info(<span class="string">f&quot;开始 Demucs 处理: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 使用 demucs.api.separate_audio 函数调用</span></span><br><span class="line">        <span class="comment"># 从文件路径中提取文件名（不包含扩展名）</span></span><br><span class="line">        file_name = os.path.basename(file_path).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        output_prefix_dir = os.path.join(output_dir, file_name)  <span class="comment"># 添加前缀到输出目录</span></span><br><span class="line">        os.makedirs(output_prefix_dir, exist_ok=<span class="literal">True</span>)  <span class="comment"># 创建输出目录</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># if umx_args is None:</span></span><br><span class="line">        <span class="comment">#     umx_args = []</span></span><br><span class="line">        <span class="comment"># 构建完整的 umx 命令</span></span><br><span class="line">        command = [<span class="string">&quot;umx&quot;</span>, file_path, <span class="string">&quot;--outdir&quot;</span>, output_prefix_dir]</span><br><span class="line"></span><br><span class="line">        result = subprocess.run(command, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 指定编码</span></span><br><span class="line">        <span class="keyword">if</span> result.returncode != <span class="number">0</span>:</span><br><span class="line">            logging.error(<span class="string">f&quot;UMX 执行出错: <span class="subst">&#123;result.stderr&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">f&quot;UMX 处理完成: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        PROCESSED_FILES.add(file_path)  <span class="comment"># 记录已处理</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理UMX时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_all_audio_files</span>(<span class="params">audio_files, output_umx_dir, output_demucs_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    多线程处理所有音频文件</span></span><br><span class="line"><span class="string">    :param audio_files:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    logging.info(<span class="string">f&quot;开始处理 <span class="subst">&#123;<span class="built_in">len</span>(audio_files)&#125;</span> 个音频文件.&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">4</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        futures = []</span><br><span class="line">        <span class="keyword">for</span> file_path <span class="keyword">in</span> audio_files:</span><br><span class="line">            futures.append(executor.submit(process_audio_umx, file_path, output_umx_dir))</span><br><span class="line">            <span class="comment"># futures.append(executor.submit(process_audio_demucs, file_path, output_demucs_dir))</span></span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> tqdm(futures, desc=<span class="string">&quot;处理进度&quot;</span>):</span><br><span class="line">            future.result()  <span class="comment"># 等待完成并处理异常</span></span><br><span class="line">    logging.info(<span class="string">&quot;所有音频文件处理完成.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">collect_audio_from_dir</span>(<span class="params">input_dir, output_audio_dir, output_video_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    读取指定目录下的所有视频文件，提取音频</span></span><br><span class="line"><span class="string">    :param input_dir:</span></span><br><span class="line"><span class="string">    :return: 所有音频文件列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    audio_files = []</span><br><span class="line">    video_files = [os.path.join(input_dir, filename)</span><br><span class="line">                   <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(input_dir)</span><br><span class="line">                   <span class="keyword">if</span> filename.lower().endswith((<span class="string">&#x27;.mp4&#x27;</span>, <span class="string">&#x27;.mov&#x27;</span>, <span class="string">&#x27;.mkv&#x27;</span>, <span class="string">&#x27;.avi&#x27;</span>, <span class="string">&#x27;.webm&#x27;</span>))]</span><br><span class="line">    <span class="keyword">with</span> tqdm(total=<span class="built_in">len</span>(video_files), desc=<span class="string">&quot;提取音频&quot;</span>, unit=<span class="string">&quot;file&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">        <span class="keyword">for</span> video_path <span class="keyword">in</span> video_files:</span><br><span class="line">            audio_file, video_files_out = extract_audio_from_video(video_path, output_audio_dir, output_video_dir)</span><br><span class="line">            <span class="keyword">if</span> audio_file:</span><br><span class="line">                audio_files.append(audio_file)</span><br><span class="line">            pbar.update(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> audio_files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_all_files_from_dir</span>(<span class="params"><span class="built_in">dir</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从指定目录读取所有文件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    all_files = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="built_in">dir</span>):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            file_path = os.path.join(root, file)</span><br><span class="line">            all_files.append(file_path)</span><br><span class="line">    <span class="keyword">return</span> all_files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    input_video_dir = <span class="string">r&#x27;E:\download\youtobe_video\test&#x27;</span>  <span class="comment"># 输入视频文件目录</span></span><br><span class="line">    output_audio_dir = <span class="string">&quot;output_audio&quot;</span>  <span class="comment"># 输出音频目录</span></span><br><span class="line">    output_umx_dir = <span class="string">&quot;output_audio_umxl&quot;</span></span><br><span class="line">    output_demucs_dir = <span class="string">&quot;output_audio_demucs&quot;</span></span><br><span class="line">    output_video_dir = <span class="string">&quot;output_video_dir&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建输出目录（如果不存在）</span></span><br><span class="line">    os.makedirs(output_audio_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    os.makedirs(output_umx_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    os.makedirs(output_demucs_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    os.makedirs(output_video_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">&quot;开始提取音频 单独保存无音频视频文件&quot;</span>)</span><br><span class="line">    <span class="comment"># 1. 从指定目录读取视频文件并提取音频</span></span><br><span class="line">    audio_files = collect_audio_from_dir(input_video_dir, output_audio_dir, output_video_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 多线程处理所有音频文件</span></span><br><span class="line">    <span class="keyword">if</span> audio_files:</span><br><span class="line">        logging.info(<span class="string">&quot;开始处理音频文件 输出无人声音频&quot;</span>)</span><br><span class="line">        process_all_audio_files(audio_files, output_umx_dir, output_demucs_dir)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.warning(<span class="string">&quot;没有找到任何音频文件，请检查输入目录&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 读取所有输出文件</span></span><br><span class="line">    <span class="comment"># logging.info(&quot;输出文件&quot;)</span></span><br><span class="line">    <span class="comment"># all_output_files_umx = get_all_files_from_dir(output_umx_dir)</span></span><br><span class="line">    <span class="comment"># all_output_files_demucs = get_all_files_from_dir(output_demucs_dir)</span></span><br><span class="line">    logging.info(<span class="string">&quot;合并音（无人声）视频（无音频）文件 输出无人声视频文件&quot;</span>)</span><br><span class="line">    video_dir = <span class="string">r&#x27;D:\pythonProject\audio_record_server\src\utils\output_video_dir&#x27;</span>  <span class="comment"># 视频文件夹路径</span></span><br><span class="line">    audio_dir = <span class="string">r&#x27;D:\pythonProject\audio_record_server\src\utils\output_audio_umxl&#x27;</span>  <span class="comment"># 音频文件夹路径</span></span><br><span class="line">    output_dir = <span class="string">r&#x27;D:\pythonProject\audio_record_server\src\utils\output_result&#x27;</span>  <span class="comment"># 输出文件夹路径</span></span><br><span class="line"></span><br><span class="line">    scan_and_merge(video_dir, audio_dir, output_dir)</span><br><span class="line">    logging.info(<span class="string">&quot;处理完成&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="全流程耗时统计">全流程耗时统计</h2><table><thead><tr><th>项目</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>分离视频音频</td><td>&lt;1s</td><td>使用时长为10分15秒时长视频测试</td></tr><tr><td>音频去除人声(umx)</td><td>40s</td><td></td></tr><tr><td>音频去除人声(demucs)</td><td>36s</td><td></td></tr><tr><td>视频分离音频</td><td>145s/141s</td><td>CPU占用极大</td></tr><tr><td>合并音视频</td><td>2s</td><td></td></tr></tbody></table><h2 id="one-more-thing">one more thing</h2><ul><li>噪声去除</li></ul><blockquote><p>使用pydub和noisereduce库去除,具体实现如下:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2024/12/27 11:40</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(czq)</span></span><br><span class="line"><span class="string">Version:  V 0.1</span></span><br><span class="line"><span class="string">File:     noise_split_audio.py</span></span><br><span class="line"><span class="string">Describe: Write during the python at zgxmt, Github link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> noisereduce <span class="keyword">as</span> nr</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pydub</span><br><span class="line"><span class="keyword">from</span> pydub <span class="keyword">import</span> AudioSegment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reduce_noise</span>(<span class="params">input_audio_path, output_audio_path</span>):</span><br><span class="line">    <span class="comment"># 加载音频文件</span></span><br><span class="line">    audio = AudioSegment.from_wav(input_audio_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换音频为 numpy 数组格式（`pydub` 默认以 16-bit PCM 格式加载）</span></span><br><span class="line">    samples = audio.get_array_of_samples()</span><br><span class="line">    samples = np.array(samples)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 noisereduce 去除噪声</span></span><br><span class="line">    reduced_noise_samples = nr.reduce_noise(y=samples, sr=audio.frame_rate)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换去噪后的样本回 `pydub` 格式</span></span><br><span class="line">    reduced_audio = AudioSegment(</span><br><span class="line">        reduced_noise_samples.tobytes(),</span><br><span class="line">        frame_rate=audio.frame_rate,</span><br><span class="line">        sample_width=audio.sample_width,</span><br><span class="line">        channels=audio.channels</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存去噪后的音频</span></span><br><span class="line">    reduced_audio.export(output_audio_path, <span class="built_in">format</span>=<span class="string">&quot;wav&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;去噪后的音频已保存为: <span class="subst">&#123;output_audio_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例使用</span></span><br><span class="line">input_audio = <span class="string">r&quot;D:\pythonProject\audio_record_server\src\utils\output_audio\比赛集锦：Highlights——Ma Jinbao VS Kanoya Ryohei (2018 LA Open).wav&quot;</span>  <span class="comment"># 输入音频文件</span></span><br><span class="line">output_audio = <span class="string">&quot;output_audio_reduced.wav&quot;</span>  <span class="comment"># 输出去噪音频文件</span></span><br><span class="line"></span><br><span class="line">reduce_noise(input_audio, output_audio)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="See">See</h2><ul><li><ol><li><a href="https://github.com/facebookresearch/demucs">https://github.com/facebookresearch/demucs</a></li></ol></li><li><ol start="2"><li><a href="https://github.com/sigsep/open-unmix-pytorch">https://github.com/sigsep/open-unmix-pytorch</a></li></ol></li><li><ol start="3"><li><a href="https://github.com/deezer/spleeter/">https://github.com/deezer/spleeter/</a></li></ol></li><li><ol start="4"><li><a href="https://archives.ismir.net/ismir2019/latebreaking/000036.pdf">https://archives.ismir.net/ismir2019/latebreaking/000036.pdf</a></li></ol></li><li><ol start="5"><li><a href="https://colab.research.google.com/drive/1ogqMwCY45Ka15Gb_ilMt7HUJbkrNX4y-">https://colab.research.google.com/drive/1ogqMwCY45Ka15Gb_ilMt7HUJbkrNX4y-</a></li></ol></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>label studio引入nemo_asr实现预测标注文本</title>
      <link href="/2024/12/25/ml-backend-ls/"/>
      <url>/2024/12/25/ml-backend-ls/</url>
      
        <content type="html"><![CDATA[<h1>label studio引入nemo_asr实现预测标注文本</h1><h2 id="clone-and-use">clone and use</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/HumanSignal/label-studio-ml-backend</span><br></pre></td></tr></table></figure><h2 id="install">install</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure><h2 id="start">start</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label-studio-ml start ./nemo_asr</span><br></pre></td></tr></table></figure><h2 id="coding">coding</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2024/12/19 16:59</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(czq)</span></span><br><span class="line"><span class="string">Version:  V 0.1</span></span><br><span class="line"><span class="string">File:     transit_nameko.py</span></span><br><span class="line"><span class="string">Describe: Write during the python at zgxmt, Github link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> nemo</span><br><span class="line"><span class="keyword">import</span> nemo.collections.asr <span class="keyword">as</span> nemo_asr</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> nemo.collections.asr <span class="keyword">as</span> nemo_asr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有可用的模型</span></span><br><span class="line"><span class="comment"># print(nemo_asr.models.ASRModel.list_available_models())</span></span><br><span class="line"><span class="comment"># 配置 Label Studio API 和项目</span></span><br><span class="line">LABEL_STUDIO_API_URL = <span class="string">&quot;http://localhost:8080/api&quot;</span></span><br><span class="line">PROJECT_ID = <span class="number">12</span>  <span class="comment"># 你的 Label Studio 项目 ID</span></span><br><span class="line">API_KEY = <span class="string">&quot;93e8ebc81cc1337c41567aa20113fd74934a4f17&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">f&quot;Token <span class="subst">&#123;API_KEY&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 Nemo ASR 模型</span></span><br><span class="line">asr_model = nemo_asr.models.ASRModel.from_pretrained(model_name=<span class="string">&quot;stt_zh_citrinet_1024_gamma_0_25&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 音频转录函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transcribe_audio</span>(<span class="params">audio_file_path</span>):</span><br><span class="line">    transcription = asr_model.transcribe([audio_file_path])</span><br><span class="line">    <span class="keyword">return</span> transcription[<span class="number">0</span>]  <span class="comment"># 返回转录文本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建任务并上传音频文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_task</span>(<span class="params">audio_file_path</span>):</span><br><span class="line">    files = &#123;</span><br><span class="line">        <span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(audio_file_path, <span class="string">&#x27;rb&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(<span class="string">f&quot;<span class="subst">&#123;LABEL_STUDIO_API_URL&#125;</span>/projects/<span class="subst">&#123;PROJECT_ID&#125;</span>/import&quot;</span>, headers=headers, files=files)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        task_data = response.json()</span><br><span class="line">        task_id = task_data[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Task created with ID: <span class="subst">&#123;task_id&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> task_id</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error uploading file: <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新任务并填充转录文本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_task_with_transcription</span>(<span class="params">task_id, transcription</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;audio&quot;</span>: task_id,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;annotations&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;result&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;from_name&quot;</span>: <span class="string">&quot;transcription&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;to_name&quot;</span>: <span class="string">&quot;audio&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;textarea&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;value&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;text&quot;</span>: transcription</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.post(<span class="string">f&quot;<span class="subst">&#123;LABEL_STUDIO_API_URL&#125;</span>/tasks/<span class="subst">&#123;task_id&#125;</span>/annotations/&quot;</span>, headers=headers, json=data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Task <span class="subst">&#123;task_id&#125;</span> updated with transcription.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error updating task <span class="subst">&#123;task_id&#125;</span>: <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理和提交音频文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_and_submit_audio_files</span>(<span class="params">audio_files_dir</span>):</span><br><span class="line">    <span class="keyword">for</span> audio_file <span class="keyword">in</span> os.listdir(audio_files_dir):</span><br><span class="line">        audio_file_path = os.path.join(audio_files_dir, audio_file)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取转录结果</span></span><br><span class="line">        transcription = transcribe_audio(audio_file_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建任务并上传音频文件</span></span><br><span class="line">        task_id = create_task(audio_file_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> task_id:</span><br><span class="line">            <span class="comment"># 更新任务并提交转录文本</span></span><br><span class="line">            update_task_with_transcription(task_id, transcription)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定音频文件存放目录</span></span><br><span class="line">audio_files_directory = <span class="string">&quot;./out&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行批量处理</span></span><br><span class="line">process_and_submit_audio_files(audio_files_directory)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在label studio 引入whisper 实现语音转写与说话人分离</title>
      <link href="/2024/12/17/label-studio-whisper/"/>
      <url>/2024/12/17/label-studio-whisper/</url>
      
        <content type="html"><![CDATA[<h1>在label studio 引入whisper 实现语音转写与说话人分离</h1><h2 id="Label-Studio-介绍">Label Studio 介绍</h2><blockquote><p>Label Studio 是一个开源的数据标注工具，广泛应用于机器学习和人工智能项目中，用于标注各种类型的数据，如文本、图像、音频、视频等。它支持多种标注任务，能够帮助用户将原始数据转换为结构化的标签数据，以便训练机器学习模型</p></blockquote><h3 id="安装使用">安装使用</h3><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install label-studio</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker</span></span><br><span class="line">docker run -p 8080:8080 -v /path/to/your/data:/mnt labelstudio/label-studio</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">label-studio start</span><br></pre></td></tr></table></figure><h3 id="API-调用">API 调用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> label_studio_sdk</span><br><span class="line"><span class="keyword">from</span> label_studio_sdk <span class="keyword">import</span> Client</span><br><span class="line"></span><br><span class="line">client = Client(url=<span class="string">&#x27;http://localhost:8080&#x27;</span>, api_key=<span class="string">&#x27;your_api_key&#x27;</span>)</span><br><span class="line">project = client.init_project(<span class="string">&#x27;Your Project Name&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模板自定义">模板自定义</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Choice</span> <span class="attr">name</span>=<span class="string">&quot;Label&quot;</span> <span class="attr">toName</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Choice</span> <span class="attr">value</span>=<span class="string">&quot;Positive&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Choice</span> <span class="attr">value</span>=<span class="string">&quot;Negative&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Choice</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Text</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$text&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Whisper-介绍">Whisper 介绍</h2><blockquote><p>Whisper is an ASR model developed by OpenAI, trained on a large dataset of diverse audio. Whilst it does produces highly accurate transcriptions, the corresponding timestamps are at the utterance-level, not per word, and can be inaccurate by several seconds. OpenAI’s whisper does not natively support batching.</p></blockquote><blockquote><p>Phoneme-Based ASR A suite of models finetuned to recognise the smallest unit of speech distinguishing one word from another, e.g. the element p in “tap”. A popular example model is wav2vec2.0.</p></blockquote><blockquote><p>Forced Alignment refers to the process by which orthographic transcriptions are aligned to audio recordings to automatically generate phone level segmentation.</p></blockquote><blockquote><p>Voice Activity Detection (VAD) is the detection of the presence or absence of human speech.</p></blockquote><blockquote><p>Speaker Diarization is the process of partitioning an audio stream containing human speech into homogeneous segments according to the identity of each speaker.</p></blockquote><h3 id="安装使用-2">安装使用</h3><ul><li>whisper</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install openai-whisper</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">or</span></span><br><span class="line">git clone https://github.com/openai/whisper.git</span><br><span class="line">cd whisper</span><br><span class="line">pip install .</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>pytorch</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install torch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span> </span><br><span class="line">pip install torch --no-index -f https://download.pytorch.org/whl/cpu/torch_stable.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>ffmpeg</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://ffmpeg.org/download.html</span></span><br><span class="line">sudo apt-get install ffmpeg</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="基本使用">基本使用</h3><ul><li>语音转文字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> whisper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 Whisper 模型</span></span><br><span class="line">model = whisper.load_model(<span class="string">&quot;base&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 识别音频文件中的语音</span></span><br><span class="line">result = model.transcribe(<span class="string">&quot;demo.wav&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出识别结果</span></span><br><span class="line"><span class="built_in">print</span>(result[<span class="string">&quot;text&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>音频切割</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2024/12/17 16:09</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(czq)</span></span><br><span class="line"><span class="string">Version:  V 0.1</span></span><br><span class="line"><span class="string">File:     audio_seg.py</span></span><br><span class="line"><span class="string">Describe: Write during the python at zgxmt, Github link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> whisper</span><br><span class="line"><span class="keyword">from</span> pydub <span class="keyword">import</span> AudioSegment</span><br><span class="line"><span class="keyword">import</span> webrtcvad</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Whisper 模型</span></span><br><span class="line">whisper_model = whisper.load_model(<span class="string">&quot;base&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># VAD 音频活动检测器</span></span><br><span class="line">vad = webrtcvad.Vad(<span class="number">3</span>)  <span class="comment"># 设置为 3 表示严格的语音活动检测</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vad_collected_segments</span>(<span class="params">audio_path, sample_rate=<span class="number">16000</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用 VAD 检测音频中的语音活动段 &quot;&quot;&quot;</span></span><br><span class="line">    audio = AudioSegment.from_file(audio_path)</span><br><span class="line">    audio = audio.set_frame_rate(sample_rate)  <span class="comment"># 设置为 16kHz 采样率</span></span><br><span class="line">    raw_audio = audio.raw_data</span><br><span class="line">    frames = <span class="built_in">len</span>(raw_audio) // <span class="number">2</span>  <span class="comment"># 16位采样</span></span><br><span class="line">    segments = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 VAD 切割音频</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, frames, sample_rate // <span class="number">50</span>):  <span class="comment"># 50ms为步长</span></span><br><span class="line">        frame = raw_audio[i:i + sample_rate // <span class="number">50</span>]</span><br><span class="line">        <span class="keyword">if</span> vad.is_speech(frame, sample_rate):</span><br><span class="line">            segments.append((i, i + sample_rate // <span class="number">50</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> segments, audio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transcribe_audio</span>(<span class="params">audio_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 使用 Whisper 模型进行语音转录 &quot;&quot;&quot;</span></span><br><span class="line">    result = whisper_model.transcribe(audio_file)</span><br><span class="line">    <span class="keyword">return</span> result[<span class="string">&#x27;text&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_audio_by_vad</span>(<span class="params">audio_file, segments, output_folder</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 根据 VAD 检测的音频片段切割音频 &quot;&quot;&quot;</span></span><br><span class="line">    audio = AudioSegment.from_file(audio_file)</span><br><span class="line">    segment_index = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> start, end <span class="keyword">in</span> segments:</span><br><span class="line">        segment_audio = audio[start:end]</span><br><span class="line">        segment_audio.export(<span class="string">f&quot;<span class="subst">&#123;output_folder&#125;</span>/segment_<span class="subst">&#123;segment_index&#125;</span>.wav&quot;</span>, <span class="built_in">format</span>=<span class="string">&quot;wav&quot;</span>)</span><br><span class="line">        segment_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_audio</span>(<span class="params">audio_file, output_folder</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 处理音频文件，进行语音转录和按句切割 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 使用 Whisper 转录音频</span></span><br><span class="line">    transcription = transcribe_audio(audio_file)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;转录结果: <span class="subst">&#123;transcription&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 使用 VAD 检测语音活动区域并切割音频</span></span><br><span class="line">    segments, audio = vad_collected_segments(audio_file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 保存音频片段</span></span><br><span class="line">    cut_audio_by_vad(audio_file, segments, output_folder)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;切割完成，音频片段保存在 <span class="subst">&#123;output_folder&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，传入音频文件路径和保存切割音频片段的文件夹路径</span></span><br><span class="line">process_audio(<span class="string">r&quot;C:\Users\DELL\Desktop\audio_mark\1\1-英文对话\1-英文对话\12月17日.WAV&quot;</span>, <span class="string">&quot;./output_segments&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>命令行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whisper demo.wav --model base</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">whisper demo.wav --model base --output_dir ./transcripts</span><br></pre></td></tr></table></figure><h2 id="结合使用">结合使用</h2><blockquote><p>whisper 转写语音后引入label studio 进行标注</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Time:     2024/12/17 10:49</span></span><br><span class="line"><span class="string">Author:   ZhaoQi Cao(czq)</span></span><br><span class="line"><span class="string">Version:  V 0.1</span></span><br><span class="line"><span class="string">File:     label_studio_whisper.py</span></span><br><span class="line"><span class="string">Describe: Write during the python at zgxmt, Github link: https://github.com/caozhaoqi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> whisper</span><br><span class="line"><span class="keyword">from</span> speechbrain.pretrained <span class="keyword">import</span> SpeakerRecognition</span><br><span class="line"><span class="keyword">from</span> label_studio_sdk <span class="keyword">import</span> Client</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Whisper 模型</span></span><br><span class="line">whisper_model = whisper.load_model(<span class="string">&quot;base&quot;</span>)  <span class="comment"># 你可以选择不同大小的模型，如 &#x27;small&#x27;, &#x27;medium&#x27;, &#x27;large&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Speechbrain 的说话人识别模型</span></span><br><span class="line">speaker_model = SpeakerRecognition.from_hparams(source=<span class="string">&quot;speechbrain/embedding-model-libri&quot;</span>, savedir=<span class="string">&quot;tmpdir&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transcribe_audio</span>(<span class="params">audio_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 使用 Whisper 对音频文件进行转写 &quot;&quot;&quot;</span></span><br><span class="line">    result = whisper_model.transcribe(audio_file)</span><br><span class="line">    <span class="keyword">return</span> result[<span class="string">&#x27;text&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">speaker_diarization</span>(<span class="params">audio_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 使用 Speechbrain 对音频进行说话人分离 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取音频的说话人嵌入</span></span><br><span class="line">    signal, fs = speaker_model.load_audio(audio_file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取说话人分离结果</span></span><br><span class="line">    diarization = speaker_model.diarize(signal)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> diarization</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_audio_task</span>(<span class="params">task_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 处理传入的 Label Studio 任务数据 &quot;&quot;&quot;</span></span><br><span class="line">    audio_file = task_data[<span class="string">&#x27;audio_file&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 使用 Whisper 进行语音转写</span></span><br><span class="line">    transcription = transcribe_audio(audio_file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 使用 Speechbrain 进行说话人分离</span></span><br><span class="line">    diarization = speaker_diarization(audio_file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回转写文本和说话人分离信息</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;transcription&#x27;</span>: transcription,</span><br><span class="line">        <span class="string">&#x27;diarization&#x27;</span>: diarization</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 Label Studio API 服务</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    zq_api = <span class="string">&quot;93e8ebc81cc1337c41567aa20113fd74934a4f17&quot;</span></span><br><span class="line">    client = Client(url=<span class="string">&#x27;http://localhost:8080&#x27;</span>, api_key=zq_api)  <span class="comment"># 获取你的 Label Studio API key</span></span><br><span class="line">    project = client.get_project(project_id=<span class="number">1</span>)  <span class="comment"># 假设你已创建项目并设置了ID</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取待标注任务</span></span><br><span class="line">    tasks = project.get_tasks()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理每个任务的音频文件</span></span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">        task_data = task.data</span><br><span class="line">        result = process_audio_task(task_data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在 Label Studio 中提交转写和说话人分离结果</span></span><br><span class="line">        project.create_prediction(task.<span class="built_in">id</span>, result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="pypinyin-音素序列输出">pypinyin 音素序列输出</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> g2p_en <span class="keyword">import</span> G2p</span><br><span class="line"><span class="keyword">from</span> pypinyin <span class="keyword">import</span> pinyin, Style</span><br><span class="line"><span class="keyword">from</span> langdetect <span class="keyword">import</span> detect</span><br><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line">nltk.download(<span class="string">&#x27;averaged_perceptron_tagger&#x27;</span>)</span><br><span class="line">nltk.download(<span class="string">&#x27;averaged_perceptron_tagger_eng&#x27;</span>)</span><br><span class="line">nltk.download(<span class="string">&#x27;punkt&#x27;</span>)  <span class="comment"># 如果还有缺少的标点符号资源，可以一并下载</span></span><br><span class="line"><span class="comment"># C:\Users\DELL\AppData\Roaming\nltk_data</span></span><br><span class="line">nltk_data_path = <span class="string">r&#x27;C:\Users\DELL\AppData\Roaming\nltk_data&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果目录不存在，则创建该目录</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(nltk_data_path):</span><br><span class="line">    os.makedirs(nltk_data_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 NLTK 数据的搜索路径</span></span><br><span class="line">nltk.data.path.append(nltk_data_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 G2P 对象（用于英文）</span></span><br><span class="line">g2p = G2p()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_phonemes</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="comment"># 自动检测文本语言</span></span><br><span class="line">    language = detect(text)</span><br><span class="line"></span><br><span class="line">    phonemes = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理混合语言的文本，按字符处理语言</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;[\u4e00-\u9fa5]&#x27;</span>, char):  <span class="comment"># 判断字符是否为中文</span></span><br><span class="line">            <span class="comment"># 中文字符处理</span></span><br><span class="line">            pinyin_output = pinyin(char, style=Style.TONE3)</span><br><span class="line">            phonemes.append(pinyin_output[<span class="number">0</span>][<span class="number">0</span>].replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>))  <span class="comment"># 去除空格</span></span><br><span class="line">        <span class="keyword">elif</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;[a-zA-Z]&#x27;</span>, char):  <span class="comment"># 判断字符是否为英文</span></span><br><span class="line">            <span class="comment"># 英文字符处理</span></span><br><span class="line">            phonemes.extend(g2p(char))  <span class="comment"># 使用 G2P 对象处理英文音素</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 对于非中文和非英文字符（如标点符号），直接保留</span></span><br><span class="line">            phonemes.append(char)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> phonemes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试中英文混合文本</span></span><br><span class="line">text_mixed = <span class="string">&quot;你说什么？ Wash water off. Why is she inside my own boots? 他没有雨鞋得给他买一双。&quot;</span></span><br><span class="line">phonemes_mixed = get_phonemes(text_mixed)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Mixed language phonemes: <span class="subst">&#123;phonemes_mixed&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试英文文本</span></span><br><span class="line">text_en = <span class="string">&quot;If we use it like. umm&quot;</span></span><br><span class="line">phonemes_en = get_phonemes(text_en)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;English phonemes: <span class="subst">&#123;phonemes_en&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试中文文本（简体）</span></span><br><span class="line">text_zh = <span class="string">&quot;你说什么？&quot;</span></span><br><span class="line">phonemes_zh = get_phonemes(text_zh)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Chinese phonemes: <span class="subst">&#123;phonemes_zh&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试荷兰语文本</span></span><br><span class="line">text_nl = <span class="string">&quot;Hallo wereld&quot;</span></span><br><span class="line">phonemes_nl = get_phonemes(text_nl)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Dutch phonemes: <span class="subst">&#123;phonemes_nl&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试简体中文 (zh-cn)</span></span><br><span class="line">text_zh_cn = <span class="string">&quot;他管你叫老姑父。哈哈哈哈哈  嘿 哈哈哈哈哈哈哈哈哈&quot;</span></span><br><span class="line">phonemes_zh_cn = get_phonemes(text_zh_cn)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Chinese (Simplified) phonemes: <span class="subst">&#123;phonemes_zh_cn&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试繁体中文 (zh-tw)</span></span><br><span class="line">text_zh_tw = <span class="string">&quot;你好，世界&quot;</span></span><br><span class="line">phonemes_zh_tw = get_phonemes(text_zh_tw)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Chinese (Traditional) phonemes: <span class="subst">&#123;phonemes_zh_tw&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="See">See</h2><ul><li><ol><li><a href="https://github.com/m-bain/whisperX">https://github.com/m-bain/whisperX</a></li></ol></li><li><ol start="2"><li><a href="https://ffmpeg.org/download.html">https://ffmpeg.org/download.html</a></li></ol></li><li><ol start="3"><li><a href="https://labelstud.io/">https://labelstud.io/</a></li></ol></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 系统上安装 Docker</title>
      <link href="/2024/12/15/centos-docker-install/"/>
      <url>/2024/12/15/centos-docker-install/</url>
      
        <content type="html"><![CDATA[<h1>CentOS 系统上安装 Docker</h1><p><strong>前提条件：</strong></p><ul><li><strong>CentOS 系统：</strong> 确保你使用的是 CentOS 7 或更高版本。</li><li><strong>具有 sudo 权限的用户：</strong> 你需要一个具有 sudo 权限的用户来执行这些命令。</li><li><strong>网络连接：</strong> 你的 CentOS 系统需要连接到互联网才能下载软件包。</li></ul><p><strong>步骤 1：更新系统软件包</strong></p><p>首先，更新你的 CentOS 系统软件包到最新版本，以确保一切顺利：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum update -y</span><br></pre></td></tr></table></figure><p><strong>步骤 2：安装依赖软件包</strong></p><p>安装 Docker 需要一些依赖软件包，运行以下命令来安装它们：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p><strong>步骤 3：添加 Docker 官方软件仓库</strong></p><p>为了安装 Docker，你需要添加 Docker 官方软件仓库。使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#国外</span></span><br><span class="line"><span class="built_in">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#国内</span></span><br><span class="line"><span class="built_in">sudo</span> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#使用代理</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://your_proxy_address:port&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;https://your_proxy_address:port&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p><strong>步骤 4：安装 Docker Engine</strong></p><p>现在可以安装 Docker Engine 了。使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>如果想要安装指定版本的 Docker，可以执行以下命令查看可用版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br></pre></td></tr></table></figure><p>然后使用以下命令安装指定版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure><p><strong>步骤 5：启动 Docker 服务</strong></p><p>安装完成后，启动 Docker 服务并设置开机自启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p><strong>步骤 6：验证 Docker 安装</strong></p><p>检查 Docker 是否成功安装，可以使用以下命令查看 Docker 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>或者运行一个简单的 Docker 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>如果一切正常，你应该会看到 “Hello from Docker!” 的输出。</p><p><strong>步骤 7：安装 Docker Compose (可选，但推荐)</strong></p><p>Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。 如果你需要使用 Docker Compose，请按照以下步骤安装：</p><p><strong>下载 Docker Compose 二进制文件:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin</span><br></pre></td></tr></table></figure><h2 id="问题解决">问题解决</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Unable to find image &#x27;nginx:latest&#x27; locally</span><br><span class="line">docker: Error response from daemon: Get &quot;https://registry-1.docker.io/v2/&quot;: dial tcp: lookup registry-1.docker.io on 100.127.194.200:53: server misbehaving.</span><br><span class="line">See &#x27;docker run --help&#x27;.</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;:</span><br><span class="line">    [</span><br><span class="line">      &quot;https://docker.m.daocloud.io/&quot;,</span><br><span class="line">      &quot;https://huecker.io/&quot;,</span><br><span class="line">      &quot;https://dockerhub.timeweb.cloud&quot;,</span><br><span class="line">      &quot;https://noohub.ru/&quot;,</span><br><span class="line">      &quot;https://dockerproxy.com&quot;,</span><br><span class="line">      &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">      &quot;https://docker.nju.edu.cn&quot;,</span><br><span class="line">      &quot;https://xx4bwyg2.mirror.aliyuncs.com&quot;,</span><br><span class="line">      &quot;http://f1361db2.m.daocloud.io&quot;,</span><br><span class="line">      &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">      &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">      &quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Easyocr的文字识别</title>
      <link href="/2024/12/15/easy-ocr-gpu/"/>
      <url>/2024/12/15/easy-ocr-gpu/</url>
      
        <content type="html"><![CDATA[<h1>基于Easyocr的文字识别</h1><blockquote><p>EasyOCR 是一个开源的 OCR (光学字符识别) 工具，能够快速并高效地从图像中提取文本。与其他OCR工具如 Tesseract 相比，EasyOCR 具有更强的多语言支持，包括对中文、日语、阿拉伯语等复杂文字的支持，并且它的安装和使用非常简便。</p></blockquote><h2 id="主要功能">主要功能</h2><blockquote><p>EasyOCR 是一个 Python 包，用于执行光学字符识别 (OCR)。它旨在易于使用，并支持多种语言的文本识别。其主要特点包括：</p></blockquote><ul><li><p>简单易用</p></li><li><p>多语言支持</p></li><li><p>GPU 加速支持</p></li><li><p>开源</p></li></ul><h2 id="安装-EasyOCR">安装 EasyOCR:</h2><blockquote><p>可以使用 pip 安装：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install easyocr</span><br></pre></td></tr></table></figure><blockquote><p>使用 GPU 加速，安装 PyTorch 的 GPU 版本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="导入-EasyOCR">导入 EasyOCR:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> easyocr</span><br></pre></td></tr></table></figure><h3 id="创建-OCR-读取器-Reader">创建 OCR 读取器 (Reader):</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reader = easyocr.Reader([<span class="string">&#x27;ch_sim&#x27;</span>, <span class="string">&#x27;en&#x27;</span>])  <span class="comment"># ch_sim 表示简体中文，en 表示英文</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用 GPU加速，需要指定 gpu=True：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reader = easyocr.Reader([<span class="string">&#x27;ch_sim&#x27;</span>, <span class="string">&#x27;en&#x27;</span>], gpu=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="demo">demo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># readtext() 方法会返回一个包含识别结果的列表，列表中的每个元素都是一个包含文本框位置坐标和识别文本的元组。</span></span><br><span class="line"></span><br><span class="line">result = reader.readtext(<span class="string">&#x27;image.jpg&#x27;</span>)  <span class="comment"># image.jpg 是你要识别的图像文件路径</span></span><br></pre></td></tr></table></figure><ul><li>处理识别结果:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (bbox, text, prob) <span class="keyword">in</span> result:</span><br><span class="line">  (tl, tr, br, bl) = bbox  <span class="comment"># 文本框的左上角、右上角、右下角、左下角的坐标</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;文本: <span class="subst">&#123;text&#125;</span>, 置信度: <span class="subst">&#123;prob&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="comment"># 在这里可以根据坐标将文本框绘制到图像上，或者进行其他处理</span></span><br></pre></td></tr></table></figure><h3 id="基础功能测试">基础功能测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> easyocr</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 OCR Reader, 使用简体中文和英文模型，并启用 GPU 加速</span></span><br><span class="line">reader = easyocr.Reader([<span class="string">&#x27;ch_sim&#x27;</span>, <span class="string">&#x27;en&#x27;</span>], gpu=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">image_path = <span class="string">&#x27;test.png&#x27;</span>  <span class="comment"># 替换为你的图像文件路径</span></span><br><span class="line">image = cv2.imread(image_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 OCR</span></span><br><span class="line">result = reader.readtext(image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历结果并打印</span></span><br><span class="line"><span class="keyword">for</span> (bbox, text, prob) <span class="keyword">in</span> result:</span><br><span class="line">    (tl, tr, br, bl) = bbox</span><br><span class="line">    tl = (<span class="built_in">int</span>(tl[<span class="number">0</span>]), <span class="built_in">int</span>(tl[<span class="number">1</span>]))</span><br><span class="line">    tr = (<span class="built_in">int</span>(tr[<span class="number">0</span>]), <span class="built_in">int</span>(tr[<span class="number">1</span>]))</span><br><span class="line">    br = (<span class="built_in">int</span>(br[<span class="number">0</span>]), <span class="built_in">int</span>(br[<span class="number">0</span>]))</span><br><span class="line">    bl = (<span class="built_in">int</span>(bl[<span class="number">0</span>]), <span class="built_in">int</span>(bl[<span class="number">1</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;文本: <span class="subst">&#123;text&#125;</span>, 置信度: <span class="subst">&#123;prob&#125;</span>&quot;</span>)</span><br><span class="line">    cv2.rectangle(image, tl, br, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">    cv2.putText(image, text, tl, cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.8</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示带有文本框的图像</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;OCR Result&#x27;</span>, image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="one-more-thing">one more thing</h2><h3 id="一些其他用法">一些其他用法:</h3><ul><li><p>识别特定区域: 可以使用 detect() 方法预先检测文本区域，然后传递给 readtext() 方法。</p></li><li><p>自定义模型: 可以使用自定义模型，并指定路径。</p></li><li><p>批处理: 可以处理多张图像。</p></li><li><p>文本方向: EasyOCR 会自动检测文本方向，但也可以手动指定。</p></li></ul><h4 id="使用场景">使用场景:</h4><ul><li><p>文档数字化: 将扫描的纸质文档转化为可编辑的文本。</p></li><li><p>图像信息提取: 从图像中提取关键文本信息，例如车牌号、验证码等。</p></li><li><p>自动化数据输入: 自动化从图像中提取文本并输入到系统。</p></li><li><p>多语言应用: 支持多语言识别，方便国际化应用开发。</p></li></ul><h2 id="总结">总结:</h2><p>EasyOCR 是一个功能强大且易于使用的 OCR 库，可以帮助你在 Python 应用中快速实现文本识别功能。只需要几行代码，你就可以从图像中提取出文本。希望这个介绍和示例能帮助你快速上手 EasyOCR! 记得根据你的具体需求调整代码。</p><h2 id="实际案例">实际案例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> easyocr</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pypinyin <span class="keyword">import</span> pinyin, Style</span><br><span class="line"></span><br><span class="line">lan_code = [<span class="string">&#x27;ru&#x27;</span>, <span class="string">&#x27;ind&#x27;</span>, <span class="string">&#x27;tur&#x27;</span>, <span class="string">&#x27;deu&#x27;</span>, <span class="string">&#x27;ita&#x27;</span>, <span class="string">&#x27;jpn&#x27;</span>, <span class="string">&#x27;fra&#x27;</span>, <span class="string">&#x27;tha&#x27;</span>, <span class="string">&#x27;por&#x27;</span>, <span class="string">&#x27;spa&#x27;</span>, <span class="string">&#x27;vie&#x27;</span>, <span class="string">&#x27;ara&#x27;</span>, <span class="string">&#x27;kor&#x27;</span>, <span class="string">&#x27;msa&#x27;</span>]</span><br><span class="line">language_map = &#123;</span><br><span class="line">    <span class="string">&#x27;俄语&#x27;</span>: <span class="string">&#x27;ru&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;印尼&#x27;</span>: <span class="string">&#x27;ind&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;土耳其&#x27;</span>: <span class="string">&#x27;tur&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;德语&#x27;</span>: <span class="string">&#x27;deu&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;意大利语&#x27;</span>: <span class="string">&#x27;ita&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;日语&#x27;</span>: <span class="string">&#x27;jpn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;法语&#x27;</span>: <span class="string">&#x27;fra&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;泰语&#x27;</span>: <span class="string">&#x27;tha&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;葡萄牙&#x27;</span>: <span class="string">&#x27;por&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;西班牙语&#x27;</span>: <span class="string">&#x27;spa&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;越南语&#x27;</span>: <span class="string">&#x27;vie&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;阿拉伯语&#x27;</span>: <span class="string">&#x27;ara&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;韩语&#x27;</span>: <span class="string">&#x27;kor&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;马来语&#x27;</span>: <span class="string">&#x27;msa&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 EasyOCR 阅读器</span></span><br><span class="line"><span class="comment"># reader = easyocr.Reader([&#x27;en&#x27;, &#x27;ch_sim&#x27;, &#x27;ru&#x27;, &#x27;ja&#x27;, &#x27;de&#x27;, &#x27;fr&#x27;, &#x27;es&#x27;, &#x27;it&#x27;, &#x27;pt&#x27;, &#x27;tr&#x27;, &#x27;ar&#x27;], gpu=True)  # 支持多语言</span></span><br><span class="line"></span><br><span class="line">reader = easyocr.Reader([<span class="string">&#x27;ru&#x27;</span>], gpu=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_to_pinyin</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将中文字符转换为拼音。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    result = pinyin(text, style=Style.NORMAL)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([item[<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> result])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_path</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将���径中的非法字符替换为拼音。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    illegal_chars = <span class="string">r&#x27;[\/:*?&quot;&lt;&gt;|]&#x27;</span></span><br><span class="line">    path_parts = path.split(os.sep)</span><br><span class="line">    cleaned_parts = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> part <span class="keyword">in</span> path_parts:</span><br><span class="line">        part = convert_to_pinyin(part)  <span class="comment"># 转换为拼音</span></span><br><span class="line">        cleaned_parts.append(part)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> os.sep.join(cleaned_parts)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_language_code_in_directory</span>(<span class="params">directory_path, lan_codes</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    检查指定路径中是否包含语言代码列表中的任何一个内容。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    found_codes = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> lan_code <span class="keyword">in</span> lan_codes:</span><br><span class="line">            <span class="keyword">if</span> lan_code <span class="keyword">in</span> directory_path:</span><br><span class="line">                found_codes.append(lan_code)</span><br><span class="line">        <span class="keyword">return</span> found_codes</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">numpy_encoder</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义 JSON 序列化函数。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, np.ndarray):</span><br><span class="line">        <span class="keyword">return</span> obj.tolist()</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">f&quot;Type <span class="subst">&#123;<span class="built_in">type</span>(obj)&#125;</span> not serializable&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_text_with_coords</span>(<span class="params">image_path, folder, lan_code</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从图像中提取文字及其坐标，并返回格式化的 JSON 数据。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        lan_zh = check_language_code_in_directory(image_path, folder)</span><br><span class="line">        <span class="comment"># if not lan_zh:</span></span><br><span class="line">        <span class="comment">#     raise ValueError(f&quot;未在路径中找到任何语言代码：&#123;image_path&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">        language_codes = <span class="string">&quot;ru&quot;</span></span><br><span class="line">        img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">        img = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> img <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">f&quot;无法读取图像: <span class="subst">&#123;image_path&#125;</span>&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用 EasyOCR 提取文本和坐标</span></span><br><span class="line">        results = reader.readtext(image_path)</span><br><span class="line"></span><br><span class="line">        formatted_results = []</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">            <span class="comment"># result 格式: [bbox, text, confidence]</span></span><br><span class="line">            bbox, text, _ = result</span><br><span class="line">            <span class="keyword">if</span> text.strip():</span><br><span class="line">                <span class="comment"># 获取坐标，转换为浮动数</span></span><br><span class="line">                x_min, y_min = bbox[<span class="number">0</span>]</span><br><span class="line">                x_max, y_max = bbox[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 创建浮动数坐标数组，保留高精度</span></span><br><span class="line">                coords = np.array([</span><br><span class="line">                    [x_min, y_min],</span><br><span class="line">                    [x_max, y_min],</span><br><span class="line">                    [x_max, y_max],</span><br><span class="line">                    [x_min, y_max]</span><br><span class="line">                ], dtype=np.float64)  <span class="comment"># 使用 float64 保证高精度</span></span><br><span class="line"></span><br><span class="line">                result_dict = &#123;</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: text,</span><br><span class="line">                    <span class="string">&quot;points&quot;</span>: numpy_encoder(coords),  <span class="comment"># 保持高精度坐标</span></span><br><span class="line">                    <span class="string">&quot;language&quot;</span>: lan_zh[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">&quot;textType&quot;</span>: <span class="string">&quot;Mix&quot;</span> <span class="keyword">if</span> <span class="built_in">len</span>(text) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;Single&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;textDirection&quot;</span>: <span class="string">&quot;Horizontal_0&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;assign&quot;</span>: <span class="string">&quot;Normal&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;group_id&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">                    <span class="string">&quot;shape_type&quot;</span>: <span class="string">&quot;polygon&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;flags&quot;</span>: &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将结果添加到列表</span></span><br><span class="line">                formatted_results.append(result_dict)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 绘制矩形框时，使用整数坐标，不改变精度</span></span><br><span class="line">                cv2.rectangle(img, (<span class="built_in">int</span>(x_min), <span class="built_in">int</span>(y_min)), (<span class="built_in">int</span>(x_max), <span class="built_in">int</span>(y_max)), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 拼音路径</span></span><br><span class="line">        output_image_path = os.path.splitext(image_path)[<span class="number">0</span>] + <span class="string">&quot;_with_boxes.jpg&quot;</span></span><br><span class="line">        output_image_path = clean_path(output_image_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 目标文件夹</span></span><br><span class="line">        output_folder = os.path.dirname(output_image_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_folder):</span><br><span class="line">            os.makedirs(output_folder)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存带框图像</span></span><br><span class="line">        result = cv2.imwrite(output_image_path, img)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;已保存带框图像: <span class="subst">&#123;output_image_path&#125;</span>, result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保留原图到拼音化目录</span></span><br><span class="line">        original_image_path = clean_path(image_path)</span><br><span class="line">        original_output_folder = os.path.dirname(original_image_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(original_output_folder):</span><br><span class="line">            os.makedirs(original_output_folder)</span><br><span class="line"></span><br><span class="line">        shutil.copy(image_path, original_image_path)  <span class="comment"># 复制原图到拼音化目录</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;原图已复制到: <span class="subst">&#123;original_image_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> formatted_results</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">f&quot;发生错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_json_result</span>(<span class="params">image_path, result</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将识别结果保存为 JSON 文件。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        image_name = os.path.splitext(os.path.basename(image_path))[<span class="number">0</span>]</span><br><span class="line">        json_path = os.path.join(os.path.dirname(image_path), <span class="string">f&quot;<span class="subst">&#123;image_name&#125;</span>.json&quot;</span>)</span><br><span class="line">        json_path = clean_path(json_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(json_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">            json.dump(result, json_file, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;结果已保存到: <span class="subst">&#123;json_path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;保存 JSON 文件时发生错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_all_images_in_directory</span>(<span class="params">directory_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    递归读取指定目录及其子目录中的所有图像文件。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    image_files = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory_path):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.lower().endswith((<span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>, <span class="string">&#x27;.bmp&#x27;</span>)):</span><br><span class="line">                image_files.append(os.path.join(root, file))</span><br><span class="line">    <span class="keyword">return</span> image_files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_images_in_directory</span>(<span class="params">directory_path, folders, lan_code</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    批量处理指定目录中的所有图像文件。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    image_paths = get_all_images_in_directory(directory_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> image_path <span class="keyword">in</span> tqdm(image_paths, desc=<span class="string">&quot;Processing images&quot;</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;正在处理图像: <span class="subst">&#123;image_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="comment"># 获取文件夹名作为语言代码</span></span><br><span class="line">            folder_name = os.path.basename(os.path.dirname(image_path))</span><br><span class="line">            <span class="keyword">if</span> folder_name <span class="keyword">in</span> language_map:</span><br><span class="line">                lan_code = language_map[folder_name]  <span class="comment"># 根据文件夹名获取语言代码</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;未找到对应的语言代码: <span class="subst">&#123;folder_name&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># 如果没有找到对应的语言代码，跳过该图像</span></span><br><span class="line"></span><br><span class="line">            result = extract_text_with_coords(image_path, folders, lan_code)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(result, <span class="built_in">dict</span>) <span class="keyword">and</span> <span class="string">&quot;error&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;处理 <span class="subst">&#123;image_path&#125;</span> 时发生错误: <span class="subst">&#123;result[<span class="string">&#x27;error&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(result, <span class="built_in">list</span>) <span class="keyword">and</span> result:</span><br><span class="line">                save_json_result(image_path, result)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;处理 <span class="subst">&#123;image_path&#125;</span> 时没有检测到有效文本。&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;处理 <span class="subst">&#123;image_path&#125;</span> 时发生错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_all_folders_in_directory</span>(<span class="params">directory_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取目录下所有文件夹名。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        items = os.listdir(directory_path)</span><br><span class="line">        folders = [item <span class="keyword">for</span> item <span class="keyword">in</span> items <span class="keyword">if</span> os.path.isdir(os.path.join(directory_path, item))]</span><br><span class="line">        <span class="keyword">return</span> folders</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fix_non_ascii_path</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    修复路径中的非 ASCII 字符问题。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> path.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：从指定目录批量处理图像</span></span><br><span class="line">image_directory = <span class="string">r&quot;C:\Users\DELL\Desktop\CZQ\俄语&quot;</span>  <span class="comment"># 替换为你的图片目录路径</span></span><br><span class="line">image_directory = fix_non_ascii_path(image_directory)</span><br><span class="line">folders = get_all_folders_in_directory(image_directory)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;文件夹列表:&quot;</span>, folders)  <span class="comment"># 打印文件夹列表，确保获取的文件夹正确</span></span><br><span class="line"></span><br><span class="line">process_images_in_directory(image_directory, folders, lan_code)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>上述代码批量处理指定目录及其子目录下的图像文件，使用 EasyOCR 提取图像中的文本及其坐标，并将结果保存为 JSON 文件。同时，它还会在原始图像上绘制文本框，并将带框的图像和原始图像复制到以拼音命名的路径下</p></blockquote><p><em>使用pillow、easyocr、numpy、pypinyin、tqdm、多线程等技术</em></p><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Appium Debug Bridge</title>
      <link href="/2024/11/21/appium_adb_app/"/>
      <url>/2024/11/21/appium_adb_app/</url>
      
        <content type="html"><![CDATA[<h1>Appium Debug Bridge</h1><h2 id="ADB">ADB</h2><h2 id="install">install</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://developer.android.com/studio?hl=zh-cn#command-line-tools-only</span><br></pre></td></tr></table></figure><h2 id="appium">appium</h2><h3 id="install-2">install</h3><ul><li>server</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/appium/appium</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">install</span></span><br><span class="line">npm i -g appium</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">install driver</span></span><br><span class="line">appium driver install uiautomator2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Start the server on the default host (0.0.0.0) and port (4723)</span></span><br><span class="line">appium server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">You can also omit the <span class="string">&#x27;server&#x27;</span> subcommand</span></span><br><span class="line">appium</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Start the server on the given host, port and use a custom base path prefix (the default prefix is <span class="string">&#x27;/&#x27;</span>)</span></span><br><span class="line">appium --address 127.0.0.1 --port 9000 --base-path /wd/hub</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">use</span></span><br><span class="line">appium</span><br></pre></td></tr></table></figure><h2 id="python-selenium">python selenium</h2><p><a href="appium_adb_app.md">appium_adb_app.md</a></p><blockquote><p>automatic test</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from venv import logger</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> appium.options.android <span class="keyword">import</span> UiAutomator2Options</span><br><span class="line"><span class="keyword">from</span> appium.webdriver.common.appiumby <span class="keyword">import</span> AppiumBy</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">appium_init</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    appium catch video</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    delay_time = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    desired_caps = &#123;</span><br><span class="line">        <span class="string">&#x27;platformName&#x27;</span>: <span class="string">&#x27;Android&#x27;</span>,  <span class="comment"># 或 &#x27;iOS&#x27;，取决于你的设备</span></span><br><span class="line">        <span class="string">&#x27;platformVersion&#x27;</span>: <span class="string">&#x27;10&#x27;</span>,  <span class="comment"># 设备的 Android 版本</span></span><br><span class="line">        <span class="string">&#x27;deviceName&#x27;</span>: <span class="string">&#x27;Android&#x27;</span>,  <span class="comment"># 模拟器的设备名或连接的设备名</span></span><br><span class="line">        <span class="string">&#x27;appPackage&#x27;</span>: <span class="string">&#x27;com.ayay.yoga&#x27;</span>,  <span class="comment"># 替换为你的 App 包名</span></span><br><span class="line">        <span class="string">&#x27;appActivity&#x27;</span>: <span class="string">&#x27;.MainActivity&#x27;</span>,  <span class="comment"># 替换为你的主 Activity</span></span><br><span class="line">        <span class="string">&#x27;noReset&#x27;</span>: <span class="literal">True</span>,  <span class="comment"># 不重置应用</span></span><br><span class="line">        <span class="string">&#x27;fullContextIgnore&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;automationName&#x27;</span>: <span class="string">&#x27;UiAutomator2&#x27;</span>,  <span class="comment"># Android 使用 UiAutomator2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建 Appium WebDriver 实例</span></span><br><span class="line">    <span class="comment"># 创建 UiAutomator2Options 对象，并设置所需的能力</span></span><br><span class="line">    options = UiAutomator2Options()</span><br><span class="line">    <span class="comment"># options.add_argument(&quot;--no-reset&quot;)  # 用于传递命令行参数，不是能力配置</span></span><br><span class="line">    options.platform_name = <span class="string">&quot;Android&quot;</span></span><br><span class="line">    options.platform_version = <span class="string">&quot;10&quot;</span>  <span class="comment"># 目标设备的 Android 版本</span></span><br><span class="line">    options.device_name = <span class="string">&quot;emulator-5554&quot;</span>  <span class="comment"># 模拟器或设备名</span></span><br><span class="line">    options.app_package = <span class="string">&quot;com.ayay.yoga&quot;</span>  <span class="comment"># 替换为你的 App 包名</span></span><br><span class="line">    options.app_activity = <span class="string">&quot;com.ayay.yoga.MainActivity&quot;</span>  <span class="comment"># 替换为你的 Activity 名称</span></span><br><span class="line">    options.no_reset = <span class="literal">True</span>  <span class="comment"># 确保传递布尔值</span></span><br><span class="line"></span><br><span class="line">    capabilities = <span class="built_in">dict</span>(</span><br><span class="line">        platformName=<span class="string">&#x27;Android&#x27;</span>,</span><br><span class="line">        automationName=<span class="string">&#x27;uiautomator2&#x27;</span>,</span><br><span class="line">        deviceName=<span class="string">&#x27;Android&#x27;</span>,</span><br><span class="line">        appPackage=<span class="string">&#x27;com.ayay.yoga&#x27;</span>,</span><br><span class="line">        appActivity=<span class="string">&#x27;.MainActivity&#x27;</span>,</span><br><span class="line">        language=<span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">        locale=<span class="string">&#x27;US&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接到 Appium 服务器</span></span><br><span class="line">    driver = webdriver.Remote(<span class="string">&#x27;http://localhost:4723&#x27;</span>, options=UiAutomator2Options().load_capabilities(capabilities))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待应用加载</span></span><br><span class="line">    sleep(delay_time)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">click_element_by_xpath</span>(<span class="params">xpath</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;通过 XPath 查找并点击元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># element = driver.find_element(xpath)</span></span><br><span class="line">        element_faxian = driver.find_element(by=AppiumBy.XPATH, value=xpath)</span><br><span class="line">        element_faxian.click()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">click_element_by_id</span>(<span class="params">element_id</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;通过 ID 查找并点击元素&quot;&quot;&quot;</span></span><br><span class="line">        element = driver.find_element(by=AppiumBy.ID, value=element_id)</span><br><span class="line">        element.click()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swipe_to_center</span>(<span class="params">x_offset, y_offset</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;模拟点击屏幕中心&quot;&quot;&quot;</span></span><br><span class="line">        center_x = x_offset // <span class="number">2</span></span><br><span class="line">        center_y = y_offset // <span class="number">2</span></span><br><span class="line">        <span class="comment"># TouchAction(driver).tap(x=center_x, y=center_y).perform()</span></span><br><span class="line"></span><br><span class="line">    sleep(delay_time)</span><br><span class="line">    <span class="comment"># element = driver.find_element_by_android_uiautomator(&#x27;new UiSelector().text(&quot;发现&quot;)&#x27;)</span></span><br><span class="line">    <span class="comment"># element_faxian = driver.find_element(by=AppiumBy.XPATH, value=&#x27;//*[@text=&quot;发现&quot;]&#x27;)</span></span><br><span class="line">    click_element_by_xpath(<span class="string">&#x27;//*[@text=&quot;发现&quot;]&#x27;</span>)</span><br><span class="line">    <span class="comment"># element.click()</span></span><br><span class="line">    <span class="comment"># element_faxian.click()</span></span><br><span class="line">    sleep(delay_time)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;switch tab&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 点击 &quot;发现&quot; 按钮（假设它的 XPath 是 &#x27;/hierarchy/.../发现&#x27;）</span></span><br><span class="line">    <span class="comment"># click_element_by_xpath(&#x27;//*[@text=&quot;发现&quot;]&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 点击 &quot;全部课程&quot; 按钮（假设它的 XPath 是 &#x27;/hierarchy/.../全部课程&#x27;）</span></span><br><span class="line">    click_element_by_xpath(<span class="string">&#x27;//*[@text=&quot;全部课程&quot;]&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;all course&quot;</span>)</span><br><span class="line">    sleep(delay_time)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取所有课程图片的元素（假设它们的 XPath 是 &#x27;/hierarchy/.../课程图片&#x27;）</span></span><br><span class="line">    <span class="comment"># 这里需要确保你能够定位到所有图片</span></span><br><span class="line">    images = driver.find_elements(by=AppiumBy.CLASS_NAME, value=<span class="string">&#x27;android.widget.ImageView&#x27;</span>)</span><br><span class="line">    <span class="comment"># images = driver.find_elements(by=AppiumBy.ID, value=&#x27;//*[@resource-id=&quot;com.ayay.yoga:id/course_image&quot;]&#x27;)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(<span class="built_in">len</span>(images)) + <span class="string">&#x27;image load result&#x27;</span>)</span><br><span class="line">    sleep(delay_time)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> images:</span><br><span class="line">        <span class="comment"># 3. 点击每个课程图片</span></span><br><span class="line">        img.click()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 点击 &quot;开始训练&quot; 按钮（假设它的 XPath 是 &#x27;/hierarchy/.../开始训练&#x27;）</span></span><br><span class="line">        click_element_by_xpath(<span class="string">&#x27;//*[@text=&quot;开始训练&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5. 等待十秒</span></span><br><span class="line">        sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 6. 点击屏幕中心位置（假设屏幕大小为 1080x1920）</span></span><br><span class="line">        swipe_to_center(<span class="number">1080</span>, <span class="number">1920</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 7. 点击左上角的按钮退出（假设它的 XPath 是 &#x27;/hierarchy/.../左上角按钮&#x27;）</span></span><br><span class="line">        click_element_by_xpath(<span class="string">&#x27;//*[@content-desc=&quot;Navigate up&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 8. 点击 &quot;结束训练&quot; 按钮（假设它的 XPath 是 &#x27;/hierarchy/.../结束训练&#x27;）</span></span><br><span class="line">        click_element_by_xpath(<span class="string">&#x27;//*[@text=&quot;结束训练&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 9. 等待十秒后继续循环</span></span><br><span class="line">        sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 完成操作后退出</span></span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    appium_init()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="adb-pull-video">adb pull video</h2><blockquote><p>adb pull log</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> extract_mp4_links <span class="keyword">import</span> extract_mp4_links, video_link_process</span><br><span class="line"><span class="keyword">from</span> src.pull_ld_video <span class="keyword">import</span> adb_connect, adb_root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 adb 路径和设备 ID</span></span><br><span class="line">ADB_PATH = <span class="string">r&quot;C:\Users\DELL\Desktop\platform-tools\adb.exe&quot;</span></span><br><span class="line">DEVICE_ID = <span class="string">&quot;emulator-5554&quot;</span>  <span class="comment"># 根据实际设备 ID 选择模拟器</span></span><br><span class="line">package_name = <span class="string">&#x27;com.ayay.yoga&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 adb shell pidof 命令获取指定包名的进程 ID</span></span><br><span class="line">pid_command = [ADB_PATH, <span class="string">&#x27;shell&#x27;</span>, <span class="string">&#x27;pidof&#x27;</span>, <span class="string">&#x27;-s&#x27;</span>, package_name]</span><br><span class="line">pid_process = subprocess.Popen(pid_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">pid = pid_process.communicate()[<span class="number">0</span>].decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> pid:</span><br><span class="line">    logger.error(<span class="string">f&quot;无法找到包名 &#x27;<span class="subst">&#123;package_name&#125;</span>&#x27; 对应的进程。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 使用 adb logcat 命令抓取指定进程的日志</span></span><br><span class="line">    log_command = [ADB_PATH, <span class="string">&#x27;logcat&#x27;</span>, <span class="string">&#x27;--pid=&#x27;</span> + pid]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 adb logcat 获取模拟器日志</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_simulator_log</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;simulator_log.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 执行 adb logcat 命令并将输出写入文件</span></span><br><span class="line">        adb_connect()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 获取 root 权限（如果需要）</span></span><br><span class="line">        adb_root()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            user_input = <span class="built_in">input</span>(<span class="string">&quot;按下 &#x27;c&#x27; 键停止：&quot;</span>)</span><br><span class="line">            <span class="comment"># 判断用户输入是否为 &#x27;c&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> user_input.lower() == <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                logger.debug(<span class="string">&quot;你按下了 &#x27;c&#x27; 键！&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># 按下 &#x27;c&#x27; 键后退出循环</span></span><br><span class="line">            process = subprocess.Popen(log_command, stdout=f, stderr=subprocess.PIPE)</span><br><span class="line">            process.communicate()  <span class="comment"># 等待 logcat 命令执行完成</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取日志</span></span><br><span class="line">get_simulator_log()</span><br><span class="line">logger.success(<span class="string">&quot;start video link process...&quot;</span>)</span><br><span class="line">video_link_process()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="adb-pull-video-from-cache">adb pull video from cache</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> anyio <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> matplotlib.cbook <span class="keyword">import</span> pts_to_midstep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 adb 路径和设备 ID</span></span><br><span class="line">ADB_PATH = <span class="string">r&quot;C:\Users\DELL\Desktop\platform-tools\adb.exe&quot;</span></span><br><span class="line">DEVICE_ID = <span class="string">&quot;emulator-5554&quot;</span>  <span class="comment"># 根据实际设备 ID 选择模拟器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取指定路径的文件</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adb_connect</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 确保连接到指定模拟器</span></span><br><span class="line">        result = subprocess.run([ADB_PATH, <span class="string">&quot;-s&quot;</span>, DEVICE_ID, <span class="string">&quot;devices&quot;</span>], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, check=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;device&quot;</span> <span class="keyword">in</span> result.stdout:</span><br><span class="line">            logger.debug(<span class="string">f&quot;已连接到模拟器 <span class="subst">&#123;DEVICE_ID&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">f&quot;无法连接到模拟器 <span class="subst">&#123;DEVICE_ID&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        logger.debug(<span class="string">f&quot;连接模拟器失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 root 权限</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adb_root</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取 root 权限（如果模拟器支持）</span></span><br><span class="line">        subprocess.run([ADB_PATH, <span class="string">&quot;-s&quot;</span>, DEVICE_ID, <span class="string">&quot;root&quot;</span>], check=<span class="literal">True</span>)</span><br><span class="line">        logger.debug(<span class="string">&quot;获取 root 权限成功！&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        logger.debug(<span class="string">f&quot;无法获取 root 权限: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出指定目录的文件</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_files</span>(<span class="params">remote_dir</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 使用 adb shell ls 命令列出远程目录文件</span></span><br><span class="line">        result = subprocess.run(</span><br><span class="line">            [ADB_PATH, <span class="string">&quot;-s&quot;</span>, DEVICE_ID, <span class="string">&quot;shell&quot;</span>, <span class="string">&quot;ls&quot;</span>, remote_dir],</span><br><span class="line">            capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, check=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        files = result.stdout.splitlines()  <span class="comment"># 按行分割文件列表</span></span><br><span class="line">        <span class="keyword">return</span> files</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        logger.debug(<span class="string">f&quot;获取文件列表失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载文件到本地</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pull_files</span>(<span class="params">remote_dir, local_dir, files</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 确保本地目录存在</span></span><br><span class="line">        os.makedirs(local_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            remote_file = os.path.join(remote_dir, file).replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>)  <span class="comment"># 替换反斜杠为正斜杠</span></span><br><span class="line">            local_file = os.path.join(local_dir, file).replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>)  <span class="comment"># 替换反斜杠为正斜杠</span></span><br><span class="line">            logger.debug(<span class="string">f&quot;正在下载 <span class="subst">&#123;remote_file&#125;</span> 到 <span class="subst">&#123;local_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 使用 adb pull 命令下载文件</span></span><br><span class="line">            subprocess.run([ADB_PATH, <span class="string">&quot;-s&quot;</span>, DEVICE_ID, <span class="string">&quot;pull&quot;</span>, remote_file, local_file], check=<span class="literal">True</span>)</span><br><span class="line">            logger.debug(<span class="string">f&quot;<span class="subst">&#123;file&#125;</span> 下载完成！&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        logger.debug(<span class="string">f&quot;下载文件失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    remote_dir = <span class="string">&quot;/storage/emulated/0/Android/data/com.wtp.wtpilates/cache/video-cache&quot;</span>  <span class="comment"># 指定远程目录</span></span><br><span class="line">    local_dir = <span class="string">&quot;./video/&quot;</span>  <span class="comment"># 本地保存路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 1. 连接到模拟器</span></span><br><span class="line">        adb_connect()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 获取 root 权限（如果需要）</span></span><br><span class="line">        adb_root()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 列出远程目录中的文件</span></span><br><span class="line">        files = list_files(remote_dir)</span><br><span class="line">        <span class="keyword">if</span> files:</span><br><span class="line">            logger.debug(<span class="string">&quot;文件列表：&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(local_dir, file)):</span><br><span class="line">                    logger.debug(file)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    files.remove(file)</span><br><span class="line">                    logger.debug(file + <span class="string">&quot;, 已存在，跳过&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 4. 拉取文件到本地</span></span><br><span class="line">            pull_files(remote_dir, local_dir, files)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.debug(<span class="string">&quot;没有找到文件。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.debug(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    logger.add(<span class="string">&quot;../logs/ld_monitor.log&quot;</span>, level=<span class="string">&quot;DEBUG&quot;</span>, rotation=<span class="string">&quot;5MB&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        main()</span><br><span class="line">        logger.debug(<span class="string">&quot;sleep 60 s..&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="see">see</h2><ul><li>1.<a href="https://github.com/appium/appium">https://github.com/appium/appium</a></li><li>2.<a href="https://developer.android.com/studio?hl=zh-cn#command-line-tools-only">https://developer.android.com/studio?hl=zh-cn#command-line-tools-only</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Appium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel file parser</title>
      <link href="/2024/11/21/excel_parser_pandas/"/>
      <url>/2024/11/21/excel_parser_pandas/</url>
      
        <content type="html"><![CDATA[<h1>Excel file parser</h1><h2 id="introduce">introduce</h2><blockquote><p>pandas 是一个开源的 Python 数据分析库，提供了高效的数据结构（如 DataFrame 和 Series）和多种数据操作工具。它非常适合用于数据清洗、数据分析和数据处理等任务，尤其是在处理表格型数据（例如 Excel 表格、CSV 文件、SQL 数据库等）时非常强大。</p></blockquote><blockquote><p>pandas 的名称源自“panel data”（面板数据），即带有时间和多维索引的复杂数据结构。虽然这个名字与面板数据相关，但 pandas 已经成为了所有类型数据分析的标准工具之一。</p></blockquote><h2 id="核心功能">核心功能</h2><blockquote><p>通过 Series 和 DataFrame 两个核心数据结构，pandas 提供了极其灵活和高效的操作方式，几乎是进行数据分析和科学计算时的标准工具。</p></blockquote><ul><li>读写excel\sql\csv文件</li><li>数据过滤 选择</li><li>数据清洗 转换</li><li>数据合并连接</li><li>数据透视</li><li>数据可视化</li><li>大数据处理</li></ul><h2 id="lib">lib</h2><blockquote><p>pandas</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><h2 id="use-demo">use demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">加权平均内容= </span></span><br><span class="line"><span class="string">∑(文本长度)</span></span><br><span class="line"><span class="string">————————————</span></span><br><span class="line"><span class="string">∑(内容×文本长度)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取Excel文件（假设你的数据已经保存在Excel文件中）</span></span><br><span class="line">file_path = <span class="string">&#x27;./data/data.xlsx&#x27;</span>  <span class="comment"># 替换为实际的Excel文件路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取Excel文件</span></span><br><span class="line">df = pd.read_excel(file_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看原始数据（可选）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原始数据:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.head())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理“内容”列，检查是否为字符串，若是百分比文本，则转换为浮动类型</span></span><br><span class="line"><span class="comment"># 先检查内容列的数据类型</span></span><br><span class="line"><span class="keyword">if</span> df[<span class="string">&#x27;内容&#x27;</span>].dtype == <span class="string">&#x27;object&#x27;</span>:  <span class="comment"># 如果是字符串类型</span></span><br><span class="line">    df[<span class="string">&#x27;内容&#x27;</span>] = df[<span class="string">&#x27;内容&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;&#x27;</span>).astype(<span class="built_in">float</span>) / <span class="number">100</span>  <span class="comment"># 去掉百分号并转换为浮动类型</span></span><br><span class="line"><span class="keyword">elif</span> df[<span class="string">&#x27;内容&#x27;</span>].dtype != <span class="string">&#x27;float&#x27;</span>:  <span class="comment"># 如果是其他数值类型但不是float</span></span><br><span class="line">    df[<span class="string">&#x27;内容&#x27;</span>] = df[<span class="string">&#x27;内容&#x27;</span>].astype(<span class="built_in">float</span>)  <span class="comment"># 强制转换为浮动类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取文件名的核心部分，例如“超宠时代” 或 “小黑龙” 等</span></span><br><span class="line">df[<span class="string">&#x27;文件名&#x27;</span>] = df[<span class="string">&#x27;文件名&#x27;</span>].apply(<span class="keyword">lambda</span> x: re.sub(<span class="string">r&#x27;\d+$&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="built_in">str</span>(x)))  <span class="comment"># 强制转换为字符串，去除名称末尾的数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按内容和文件名分组，计算每个组的文本长度总和和加权平均内容</span></span><br><span class="line">grouped = df.groupby([<span class="string">&#x27;内容&#x27;</span>, <span class="string">&#x27;文件名&#x27;</span>]).agg(</span><br><span class="line">    文本长度总和=(<span class="string">&#x27;文本长度&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>),</span><br><span class="line">    内容加权平均=(<span class="string">&#x27;内容&#x27;</span>, <span class="keyword">lambda</span> x: (x * df.loc[x.index, <span class="string">&#x27;长度&#x27;</span>]).<span class="built_in">sum</span>() / x.<span class="built_in">sum</span>())</span><br><span class="line">).reset_index()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将加权平均内容转换为百分比形式</span></span><br><span class="line">grouped[<span class="string">&#x27;最低加权平均内容&#x27;</span>] = grouped[<span class="string">&#x27;内容加权平均&#x27;</span>].<span class="built_in">min</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化为百分比，保留两位小数</span></span><br><span class="line">grouped[<span class="string">&#x27;内容加权平均&#x27;</span>] = grouped[<span class="string">&#x27;内容加权平均&#x27;</span>].apply(<span class="keyword">lambda</span> x: <span class="string">f&quot;<span class="subst">&#123;x / <span class="number">1000</span>:<span class="number">.2</span>f&#125;</span>%&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并后的数据</span></span><br><span class="line">merged_data = []</span><br><span class="line"><span class="keyword">for</span> _, group <span class="keyword">in</span> grouped.iterrows():</span><br><span class="line">    merged_data.append(&#123;</span><br><span class="line">        <span class="string">&#x27;内容&#x27;</span>: group[<span class="string">&#x27;内容&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将合并后的数据转化为DataFrame</span></span><br><span class="line">merged_df = pd.DataFrame(merged_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出合并后的结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n合并后的数据:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(merged_df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存为新的Excel文件</span></span><br><span class="line">output_path = <span class="string">&#x27;result_data.xlsx&#x27;</span>  <span class="comment"># 输出路径</span></span><br><span class="line">merged_df.to_excel(output_path, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\n数据已保存到 <span class="subst">&#123;output_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nlp scapy use</title>
      <link href="/2024/11/21/npl_scapy/"/>
      <url>/2024/11/21/npl_scapy/</url>
      
        <content type="html"><![CDATA[<h1>nlp scapy use</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pip install spacy</span><br><span class="line">python -m spacy download zh_core_web_sm</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">z中等</span></span><br><span class="line">python -m spacy download zh-core-web-md</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">大语言模型</span></span><br><span class="line">python -m spacy download zh-core-web-lg</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插件 支持</span></span><br><span class="line">pip install &quot;spacy-pkuseg&lt;2.0.0,&gt;=1.0.0&quot; </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add run</span> </span><br><span class="line">pip install &quot;spacy-pkuseg&gt;=0.0.27,&lt;0.1.0&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">pip uninstall spacy-pkuseg</span><br><span class="line">pip install spacy-pkuseg==1.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">pip uninstall spacy zh-core-web-sm spacy-pkuseg</span><br><span class="line">pip install spacy</span><br><span class="line">pip install zh-core-web-sm</span><br><span class="line">pip install &quot;spacy-pkuseg&gt;=1.0.0,&lt;2.0.0&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python -m spacy download en_core_web_sm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="use">use</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># english</span></span><br><span class="line"><span class="keyword">import</span> spacy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载下载的模型</span></span><br><span class="line">nlp = spacy.load(<span class="string">&#x27;en_core_web_sm&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理文本</span></span><br><span class="line">doc = nlp(<span class="string">&quot;Hello, how are you?&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> token <span class="keyword">in</span> doc:</span><br><span class="line">    <span class="built_in">print</span>(token.text, token.pos_)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># chinese</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> spacy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载中文模型</span></span><br><span class="line">nlp = spacy.load(<span class="string">&#x27;zh_core_web_sm&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_dialogue_with_spacy_chinese</span>(<span class="params">text</span>):</span><br><span class="line">    doc = nlp(text)</span><br><span class="line">    dialogues = []</span><br><span class="line">    current_speaker = <span class="literal">None</span></span><br><span class="line">    current_dialogue = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> sent <span class="keyword">in</span> doc.sents:</span><br><span class="line">        <span class="keyword">for</span> ent <span class="keyword">in</span> sent.ents:</span><br><span class="line">            <span class="keyword">if</span> ent.label_ == <span class="string">&quot;PERSON&quot;</span>:</span><br><span class="line">                <span class="comment"># 假设实体标签为“PERSON”表示人物</span></span><br><span class="line">                <span class="keyword">if</span> current_speaker:  <span class="comment"># 如果之前有一个人物，记录对话</span></span><br><span class="line">                    dialogues.append((current_speaker, <span class="string">&quot; &quot;</span>.join(current_dialogue)))</span><br><span class="line">                current_speaker = ent.text</span><br><span class="line">                current_dialogue = []</span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># 跳到下一个句子</span></span><br><span class="line">        <span class="keyword">if</span> current_speaker:</span><br><span class="line">            current_dialogue.append(sent.text.strip())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> current_dialogue:</span><br><span class="line">        dialogues.append((current_speaker, <span class="string">&quot; &quot;</span>.join(current_dialogue)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dialogues</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例文本</span></span><br><span class="line">script = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">张三: 你好吗？</span></span><br><span class="line"><span class="string">李四: 我很好，谢谢！</span></span><br><span class="line"><span class="string">张三: 太好了！</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">dialogues = extract_dialogue_with_spacy_chinese(script)</span><br><span class="line"><span class="keyword">for</span> character, line <span class="keyword">in</span> dialogues:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;人物: <span class="subst">&#123;character&#125;</span>, 对话: <span class="subst">&#123;line&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> nlp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nltk lib use</title>
      <link href="/2024/11/21/nltk-use/"/>
      <url>/2024/11/21/nltk-use/</url>
      
        <content type="html"><![CDATA[<h1>nltk lib use</h1><h2 id="简介">简介</h2><blockquote><p>NLTK（Natural Language Toolkit，中文叫做自然语言工具包）是一个用于处理和分析人类语言数据（自然语言）的Python库。它为自然语言处理（NLP）提供了许多有用的工具和资源，广泛用于学术研究、机器学习、文本分析等领域。</p></blockquote><h2 id="安装使用">安装使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install nltk</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装资源">安装资源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import nltk</span><br><span class="line">nltk.download(&#x27;punkt&#x27;)  # 下载用于标记化的资源</span><br><span class="line">nltk.download(&#x27;stopwords&#x27;)  # 下载停用词列表</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="功能">功能</h2><ol><li><p><strong>文本处理和标记化（Tokenization）</strong>：</p><ul><li>将文本分解为更小的单位，如单词、句子等。例如，把一句话分成单词列表。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> word_tokenize</span><br><span class="line">text = <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">words = word_tokenize(text)</span><br><span class="line"><span class="built_in">print</span>(words)  <span class="comment"># 输出: [&#x27;Hello&#x27;, &#x27;,&#x27;, &#x27;world&#x27;, &#x27;!&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>词性标注（POS Tagging）</strong>：</p><ul><li>给每个单词打上一个词性标签（如名词、动词、形容词等），帮助理解单词在句中的语法作用。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> word_tokenize</span><br><span class="line"><span class="keyword">from</span> nltk <span class="keyword">import</span> pos_tag</span><br><span class="line">sentence = <span class="string">&quot;I am learning Python.&quot;</span></span><br><span class="line">words = word_tokenize(sentence)</span><br><span class="line">tagged = pos_tag(words)</span><br><span class="line"><span class="built_in">print</span>(tagged)</span><br><span class="line"><span class="comment"># 输出: [(&#x27;I&#x27;, &#x27;PRP&#x27;), (&#x27;am&#x27;, &#x27;VBP&#x27;), (&#x27;learning&#x27;, &#x27;VBG&#x27;), (&#x27;Python&#x27;, &#x27;NNP&#x27;)]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>命名实体识别（NER, Named Entity Recognition）</strong>：</p><ul><li>NLTK能够识别文本中的命名实体，如人名、地名、组织名等。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk <span class="keyword">import</span> ne_chunk</span><br><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> word_tokenize</span><br><span class="line"><span class="keyword">from</span> nltk <span class="keyword">import</span> pos_tag</span><br><span class="line"></span><br><span class="line">sentence = <span class="string">&quot;Barack Obama was born in Hawaii.&quot;</span></span><br><span class="line">words = word_tokenize(sentence)</span><br><span class="line">tagged = pos_tag(words)</span><br><span class="line">named_entities = ne_chunk(tagged)</span><br><span class="line"><span class="built_in">print</span>(named_entities)</span><br><span class="line"><span class="comment"># 输出: (S (PERSON Barack/NNP Obama/NNP) was/VBD born/VBN in/IN Hawaii/NNP ./.)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>词汇和语料库（Corpora）</strong>：</p><ul><li>NLTK提供了许多内置的语料库（corpora），这些语料库包含大量的文本数据，可以用于语言模型训练、文本分析等。例如，<code>punkt</code>语料库用于句子分割，<code>stopwords</code>语料库提供了常见的停用词（如“the”，“is”等），可以在文本处理时忽略这些词。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> stopwords</span><br><span class="line">stop_words = <span class="built_in">set</span>(stopwords.words(<span class="string">&#x27;english&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(stop_words)  <span class="comment"># 输出: &#123;&#x27;the&#x27;, &#x27;and&#x27;, &#x27;is&#x27;, &#x27;in&#x27;, &#x27;of&#x27;, &#x27;to&#x27;, ...&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>词干提取（Stemming）和词形还原（Lemmatization）</strong>：</p><ul><li>这两个技术用于将单词还原为其基础形式（如将“running”变为“run”）。</li><li>词干提取（Stemming）是通过简单的规则来去除词尾，而词形还原（Lemmatization）则考虑上下文，使用字典和规则。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.stem <span class="keyword">import</span> PorterStemmer</span><br><span class="line">stemmer = PorterStemmer()</span><br><span class="line"><span class="built_in">print</span>(stemmer.stem(<span class="string">&quot;running&quot;</span>))  <span class="comment"># 输出: run</span></span><br></pre></td></tr></table></figure></li><li><p><strong>文本分类（Text Classification）</strong>：</p><ul><li>NLTK支持构建和训练文本分类器，适用于垃圾邮件分类、情感分析等任务。</li></ul></li><li><p><strong>句法分析（Parsing）</strong>：</p><ul><li>NLTK支持各种句法分析技术，包括上下文无关文法（CFG）和依存句法分析，帮助理解句子的结构。</li></ul></li><li><p><strong>机器翻译和词向量（Word Embeddings）</strong>：</p><ul><li>NLTK也可以与其他库（如Gensim）结合，用于词向量模型和机器翻译等任务。</li></ul></li></ol><h2 id="demo">demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> stopwords</span><br><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> word_tokenize</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> LatentDirichletAllocation</span><br><span class="line"><span class="keyword">import</span> spacy</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> textblob <span class="keyword">import</span> TextBlob</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> src.txt_decode.txt_decode_new <span class="keyword">import</span> en_model_path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载必要的NLTK数据</span></span><br><span class="line">nltk.download(<span class="string">&#x27;punkt&#x27;</span>)</span><br><span class="line">nltk.download(<span class="string">&#x27;stopwords&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载Spacy英文模型</span></span><br><span class="line">nlp = spacy.load(en_model_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">basic_text_features</span>(<span class="params">script</span>):</span><br><span class="line">    <span class="comment"># 分词</span></span><br><span class="line">    words = word_tokenize(script)</span><br><span class="line">    <span class="comment"># 去除停用词</span></span><br><span class="line">    stop_words = <span class="built_in">set</span>(stopwords.words(<span class="string">&#x27;english&#x27;</span>))</span><br><span class="line">    filtered_words = [word.lower() <span class="keyword">for</span> word <span class="keyword">in</span> words <span class="keyword">if</span> word.isalnum() <span class="keyword">and</span> word.lower() <span class="keyword">not</span> <span class="keyword">in</span> stop_words]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 词频统计</span></span><br><span class="line">    word_freq = Counter(filtered_words)</span><br><span class="line">    <span class="keyword">return</span> word_freq</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">syntax_features</span>(<span class="params">script</span>):</span><br><span class="line">    doc = nlp(script)</span><br><span class="line">    pos_tags = [(token.text, token.pos_) <span class="keyword">for</span> token <span class="keyword">in</span> doc]</span><br><span class="line">    dependencies = [(token.text, token.dep_, token.head.text) <span class="keyword">for</span> token <span class="keyword">in</span> doc]</span><br><span class="line">    <span class="keyword">return</span> pos_tags, dependencies</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tfidf_features</span>(<span class="params">scripts</span>):</span><br><span class="line">    vectorizer = TfidfVectorizer()</span><br><span class="line">    X = vectorizer.fit_transform(scripts)</span><br><span class="line">    <span class="keyword">return</span> X, vectorizer.get_feature_names_out()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">topic_modeling</span>(<span class="params">scripts, num_topics=<span class="number">2</span></span>):</span><br><span class="line">    vectorizer = TfidfVectorizer()</span><br><span class="line">    X = vectorizer.fit_transform(scripts)</span><br><span class="line">    lda = LatentDirichletAllocation(n_components=num_topics, random_state=<span class="number">0</span>)</span><br><span class="line">    lda.fit(X)</span><br><span class="line">    <span class="keyword">return</span> lda, vectorizer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sentiment_analysis</span>(<span class="params">script</span>):</span><br><span class="line">    blob = TextBlob(script)</span><br><span class="line">    sentiment = blob.sentiment</span><br><span class="line">    <span class="keyword">return</span> sentiment.polarity, sentiment.subjectivity</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dialogue_features</span>(<span class="params">script</span>):</span><br><span class="line">    <span class="comment"># 改进正则表达式，适应中文和英文引号</span></span><br><span class="line">    dialogues = re.findall(<span class="string">r&#x27;[&quot;“”](.*?)[”&quot;]&#x27;</span>, script)</span><br><span class="line">    <span class="keyword">return</span> dialogues</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_script</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</span><br><span class="line">        <span class="keyword">raise</span> FileNotFoundError(<span class="string">f&quot;File <span class="subst">&#123;file_path&#125;</span> not found.&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="keyword">return</span> file.read()</span><br><span class="line">    <span class="keyword">except</span> PermissionError:</span><br><span class="line">        <span class="keyword">raise</span> PermissionError(<span class="string">f&quot;Permission denied to read the file <span class="subst">&#123;file_path&#125;</span>. Please check file permissions.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    file_path = <span class="string">r&#x27;D:\pythonProject\LE-SEO.doc&#x27;</span>  </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        script = read_script(file_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 基本文本特征提取</span></span><br><span class="line">        word_freq = basic_text_features(script)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Basic Text Features (Word Frequency):&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(word_freq)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 语法特征提取</span></span><br><span class="line">        pos_tags, dependencies = syntax_features(script)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nSyntax Features (POS Tags and Dependencies):&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;POS Tags:&quot;</span>, pos_tags)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Dependencies:&quot;</span>, dependencies)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 语义特征提取（TF-IDF）</span></span><br><span class="line">        scripts_list = [script]  <span class="comment"># 如果需要分析多个脚本，可以在这里添加</span></span><br><span class="line">        X, feature_names = tfidf_features(scripts_list)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nTF-IDF Features:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(X.toarray())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Feature Names:&quot;</span>, feature_names)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 主题建模（LDA）</span></span><br><span class="line">        lda, vectorizer = topic_modeling(scripts_list)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nTopic Modeling (LDA):&quot;</span>)</span><br><span class="line">        <span class="comment"># 打印每个主题的前几个单词</span></span><br><span class="line">        <span class="keyword">for</span> topic_idx, topic <span class="keyword">in</span> <span class="built_in">enumerate</span>(lda.components_):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Topic #<span class="subst">&#123;topic_idx&#125;</span>:&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>([feature_names[i] <span class="keyword">for</span> i <span class="keyword">in</span> topic.argsort()[:-<span class="number">10</span> - <span class="number">1</span>:-<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 情感分析</span></span><br><span class="line">        polarity, subjectivity = sentiment_analysis(script)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nSentiment Analysis:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Polarity: <span class="subst">&#123;polarity&#125;</span>, Subjectivity: <span class="subst">&#123;subjectivity&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对话特征提取</span></span><br><span class="line">        dialogues = dialogue_features(script)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nDialogue Features:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(dialogues)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;An error occurred: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="See">See</h2><ul><li><a href="https://www.nltk.org/">https://www.nltk.org/</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> nlp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolov5s 模型识别人脸</title>
      <link href="/2024/11/21/yolo_user_face_recognized/"/>
      <url>/2024/11/21/yolo_user_face_recognized/</url>
      
        <content type="html"><![CDATA[<h1>yolov5s 模型识别人脸</h1><h2 id="简介">简介</h2><blockquote><p>YOLO（You Only Look Once）是一个广泛使用的实时目标检测算法，它能够在图片或视频中快速检测到目标并进行分类。YOLO 的优点在于其速度和准确度，能够在单个前向传播中同时进行目标定位和分类，从而实现实时目标检测。YOLO 在许多应用场景中都有很好的表现，包括自动驾驶、视频监控、无人机巡检等。</p></blockquote><h2 id="特点">特点</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">YOLO 通过以下步骤进行目标检测：</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输入图像: 将输入图像分割成网格，并为每个网格预测一个边界框和对应的类概率。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">目标检测: 每个网格预测一个边界框，包含位置（x, y, w, h）和类别概率。网络还预测是否存在目标。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">非极大值抑制（NMS）: 通过 NMS 去除冗余的检测结果，仅保留最有可能的边界框。</span></span><br></pre></td></tr></table></figure><h2 id="安装使用">安装使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install torch</span><br><span class="line">pip install cv2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">or</span></span><br><span class="line"></span><br><span class="line">pip install torch torchvision torchaudio</span><br><span class="line">pip install yolov5</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="demo">demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置参数</span></span><br><span class="line">MODEL_NAME = <span class="string">&#x27;yolov5s&#x27;</span>  <span class="comment"># 使用 YOLOv5s 模型，可根据需求选择 yolov5m, yolov5l, yolov5x</span></span><br><span class="line">COCO_NAMES = <span class="string">r&quot;C:\Users\DELL\PycharmProjects\audio_record_server\src\config\coco.names&quot;</span></span><br><span class="line">DETECTED_HUMANS_DIR = <span class="string">r&quot;E:&quot;</span>  <span class="comment"># 存放检测到人的视频</span></span><br><span class="line">BATCH_SIZE = <span class="number">5</span>  <span class="comment"># 每批处理视频数</span></span><br><span class="line">THREAD_COUNT = <span class="number">4</span>  <span class="comment"># 线程数量</span></span><br><span class="line">INTERVAL_DURATION_SECONDS = <span class="number">60</span>  <span class="comment"># 每个检测段的时长（秒）</span></span><br><span class="line">DETECTION_COUNT_PER_INTERVAL = <span class="number">10</span>  <span class="comment"># 每个3分钟段的检测次数</span></span><br><span class="line">DETECTION_THRESHOLD = <span class="number">1</span>  <span class="comment"># 每个3分钟段的检测阈值</span></span><br><span class="line">MIN_CONFIDENCE = <span class="number">0.7</span>  <span class="comment"># 检测置信度阈值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程锁</span></span><br><span class="line">model_lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果目标目录不存在，则创建它</span></span><br><span class="line">os.makedirs(DETECTED_HUMANS_DIR, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载类别名称</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(COCO_NAMES, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    classes = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化日志</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    filename=<span class="string">&#x27;log.log&#x27;</span>,</span><br><span class="line">    level=logging.INFO,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>,</span><br><span class="line">    filemode=<span class="string">&#x27;w&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_output_dir</span>(<span class="params">output_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建输出目录&quot;&quot;&quot;</span></span><br><span class="line">    os.makedirs(output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_model</span>(<span class="params">model_name=<span class="string">&#x27;yolov5s&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;加载YOLOv5模型，返回模型对象&quot;&quot;&quot;</span></span><br><span class="line">    model = torch.hub.load(<span class="string">&#x27;ultralytics/yolov5&#x27;</span>, model_name, pretrained=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 设置模型为评估模式</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_random_detection_times</span>(<span class="params">start_sec, end_sec, detection_count</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在[start_sec, end_sec)区间内生成随机的检测时间点（秒）。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> end_sec &lt;= start_sec:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">return</span> [random.uniform(start_sec, end_sec) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(detection_count)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_person_many</span>(<span class="params">model, frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对单帧图像进行人检测，返回是否仅检测到一个人。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    results = model(frame)</span><br><span class="line">    <span class="comment"># 解析检测结果</span></span><br><span class="line">    detections = results.xyxy[<span class="number">0</span>]  <span class="comment"># [xmin, ymin, xmax, ymax, confidence, class]</span></span><br><span class="line">    person_count = <span class="number">0</span>  <span class="comment"># 记录检测到的人数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> *box, confidence, cls <span class="keyword">in</span> detections:</span><br><span class="line">        <span class="keyword">if</span> confidence &gt;= MIN_CONFIDENCE <span class="keyword">and</span> classes[<span class="built_in">int</span>(cls)].lower() == <span class="string">&quot;person&quot;</span>:</span><br><span class="line">            person_count += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 如果检测到超过一个人，直接返回 False</span></span><br><span class="line">            <span class="keyword">if</span> person_count &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果检测到正好一个人，返回 True</span></span><br><span class="line">    <span class="keyword">return</span> person_count == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_person</span>(<span class="params">model, frame</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对单帧图像进行人检测，返回是否检测到人的布尔值。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    results = model(frame)</span><br><span class="line">    <span class="comment"># 解析检测结果</span></span><br><span class="line">    detections = results.xyxy[<span class="number">0</span>]  <span class="comment"># [xmin, ymin, xmax, ymax, confidence, class]</span></span><br><span class="line">    person_detected = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> *box, confidence, cls <span class="keyword">in</span> detections:</span><br><span class="line">        <span class="keyword">if</span> confidence &gt;= MIN_CONFIDENCE <span class="keyword">and</span> classes[<span class="built_in">int</span>(cls)].lower() == <span class="string">&quot;person&quot;</span>:</span><br><span class="line">            person_detected = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> person_detected</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_person_in_video</span>(<span class="params">video_path, model</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理单个视频，按照每3分钟段进行人检测&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        logging.info(<span class="string">f&quot;开始处理视频: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;开始处理视频: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">        cap = cv2.VideoCapture(video_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">            logging.error(<span class="string">f&quot;无法打开视频文件: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;无法打开视频文件: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        width = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">        height = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line">        fps = cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line">        total_frames = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">        total_seconds = total_frames / fps <span class="keyword">if</span> fps <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        logging.info(<span class="string">f&quot;视频信息 - 宽度: <span class="subst">&#123;width&#125;</span>, 高度: <span class="subst">&#123;height&#125;</span>, 帧率: <span class="subst">&#123;fps&#125;</span>, 总时长: <span class="subst">&#123;total_seconds:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;视频信息 - 宽度: <span class="subst">&#123;width&#125;</span>, 高度: <span class="subst">&#123;height&#125;</span>, 帧率: <span class="subst">&#123;fps&#125;</span>, 总时长: <span class="subst">&#123;total_seconds:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> total_seconds &lt;= <span class="number">0</span>:</span><br><span class="line">            logging.error(<span class="string">f&quot;视频时长无效: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;视频时长无效: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            cap.release()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算3分钟段数</span></span><br><span class="line">        num_intervals = <span class="built_in">int</span>(total_seconds // INTERVAL_DURATION_SECONDS)</span><br><span class="line">        <span class="keyword">if</span> num_intervals == <span class="number">0</span>:</span><br><span class="line">            logging.error(<span class="string">f&quot;视频时长不足3分钟: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;视频时长不足3分钟: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            cap.release()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        passed_segments = <span class="number">0</span>  <span class="comment"># 通过检测的段数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 逐段检测</span></span><br><span class="line">        <span class="keyword">for</span> interval_idx <span class="keyword">in</span> <span class="built_in">range</span>(num_intervals):</span><br><span class="line">            <span class="keyword">if</span> passed_segments &gt;= <span class="number">3</span>:</span><br><span class="line">                <span class="comment"># 已经有足够的段通过，提前结束</span></span><br><span class="line">                logging.info(<span class="string">f&quot;已达到足够的通过段数 (<span class="subst">&#123;passed_segments&#125;</span>)，提前结束检测&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;已达到足够的通过段数 (<span class="subst">&#123;passed_segments&#125;</span>)，提前结束检测&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            interval_start = interval_idx * INTERVAL_DURATION_SECONDS</span><br><span class="line">            interval_end = (interval_idx + <span class="number">1</span>) * INTERVAL_DURATION_SECONDS</span><br><span class="line">            detection_times = get_random_detection_times(interval_start, interval_end, DETECTION_COUNT_PER_INTERVAL)</span><br><span class="line">            logging.info(<span class="string">f&quot;段 <span class="subst">&#123;interval_idx + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;num_intervals&#125;</span> 检测时间点（秒）: <span class="subst">&#123;detection_times&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;段 <span class="subst">&#123;interval_idx + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;num_intervals&#125;</span> 检测时间点（秒）: <span class="subst">&#123;detection_times&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            detections = <span class="number">0</span>  <span class="comment"># 检测到人的次数</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> detection_time <span class="keyword">in</span> detection_times:</span><br><span class="line">                frame_number = <span class="built_in">int</span>(detection_time * fps)</span><br><span class="line">                cap.<span class="built_in">set</span>(cv2.CAP_PROP_POS_FRAMES, frame_number)</span><br><span class="line">                ret, frame = cap.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">                    logging.warning(<span class="string">f&quot;无法读取视频 <span class="subst">&#123;video_path&#125;</span> 的第 <span class="subst">&#123;frame_number&#125;</span> 帧&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;无法读取视频 <span class="subst">&#123;video_path&#125;</span> 的第 <span class="subst">&#123;frame_number&#125;</span> 帧&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 确保帧内容有效</span></span><br><span class="line">                <span class="keyword">if</span> frame <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> frame.size == <span class="number">0</span>:</span><br><span class="line">                    logging.warning(<span class="string">f&quot;读取到空帧，在时间 <span class="subst">&#123;detection_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;读取到空帧，在时间 <span class="subst">&#123;detection_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 使用锁确保线程安全</span></span><br><span class="line">                <span class="keyword">with</span> model_lock:</span><br><span class="line">                    person_detected = detect_person_many(model, frame)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> person_detected:</span><br><span class="line">                    detections += <span class="number">1</span></span><br><span class="line">                    logging.info(<span class="string">f&quot;检测到人，在时间 <span class="subst">&#123;detection_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;检测到人，在时间 <span class="subst">&#123;detection_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    logging.info(<span class="string">f&quot;未检测到人，在时间 <span class="subst">&#123;detection_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;未检测到人，在时间 <span class="subst">&#123;detection_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">            logging.info(<span class="string">f&quot;段 <span class="subst">&#123;interval_idx + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;num_intervals&#125;</span> 检测到人次数: <span class="subst">&#123;detections&#125;</span>/<span class="subst">&#123;DETECTION_COUNT_PER_INTERVAL&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;段 <span class="subst">&#123;interval_idx + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;num_intervals&#125;</span> 检测到人次数: <span class="subst">&#123;detections&#125;</span>/<span class="subst">&#123;DETECTION_COUNT_PER_INTERVAL&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> detections == DETECTION_THRESHOLD:</span><br><span class="line">                passed_segments += <span class="number">1</span></span><br><span class="line">                logging.info(<span class="string">f&quot;段 <span class="subst">&#123;interval_idx + <span class="number">1</span>&#125;</span> 通过检测，当前通过段数: <span class="subst">&#123;passed_segments&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;段 <span class="subst">&#123;interval_idx + <span class="number">1</span>&#125;</span> 通过检测，当前通过段数: <span class="subst">&#123;passed_segments&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.info(<span class="string">f&quot;段 <span class="subst">&#123;interval_idx + <span class="number">1</span>&#125;</span> 未达到检测阈值&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;段 <span class="subst">&#123;interval_idx + <span class="number">1</span>&#125;</span> 未达到检测阈值&quot;</span>)</span><br><span class="line"></span><br><span class="line">        cap.release()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> passed_segments &gt;= <span class="number">3</span>:</span><br><span class="line">            logging.info(<span class="string">f&quot;视频处理完成且符合要求（通过段数: <span class="subst">&#123;passed_segments&#125;</span>）: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;视频处理完成且符合要求（通过段数: <span class="subst">&#123;passed_segments&#125;</span>）: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 符合要求</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.info(<span class="string">f&quot;视频处理完成但不符合要求（通过段数: <span class="subst">&#123;passed_segments&#125;</span>）: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;视频处理完成但不符合要求（通过段数: <span class="subst">&#123;passed_segments&#125;</span>）: <span class="subst">&#123;video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 不符合要求</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理视频时出错: <span class="subst">&#123;video_path&#125;</span>, 错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理视频时出错: <span class="subst">&#123;video_path&#125;</span>, 错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_batch</span>(<span class="params">video_files, model</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理一批视频文件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> video_file <span class="keyword">in</span> video_files:</span><br><span class="line">        relative_path = os.path.relpath(video_file, <span class="string">r&quot;E:\video竖屏_低分辨率&quot;</span>)</span><br><span class="line">        detected_human_dir = os.path.join(DETECTED_HUMANS_DIR, os.path.dirname(relative_path))</span><br><span class="line"></span><br><span class="line">        create_output_dir(detected_human_dir)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> detect_person_in_video(video_file, model):</span><br><span class="line">            logging.info(<span class="string">f&quot;检测到人且符合要求: <span class="subst">&#123;video_file&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;检测到人且符合要求: <span class="subst">&#123;video_file&#125;</span>&quot;</span>)</span><br><span class="line">            shutil.move(video_file, os.path.join(detected_human_dir, os.path.basename(video_file)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.info(<span class="string">f&quot;未检测到人或不符合要求: <span class="subst">&#123;video_file&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;未检测到人或不符合要求: <span class="subst">&#123;video_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    video_files = []</span><br><span class="line">    root_path = <span class="string">r&quot;E:\video竖屏_低分辨率&quot;</span></span><br><span class="line">    root = Path(root_path).resolve()</span><br><span class="line">    exclude_dirs = &#123;<span class="string">&#x27;$RECYCLE.BIN&#x27;</span>, <span class="string">&#x27;System Volume Information&#x27;</span>, <span class="string">&#x27;Windows&#x27;</span>, <span class="string">&#x27;Program Files&#x27;</span>, <span class="string">&#x27;Program Files (x86)&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">f&quot;开始查找目录 <span class="subst">&#123;root_path&#125;</span> 下的视频文件&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;开始查找目录 <span class="subst">&#123;root_path&#125;</span> 下的视频文件&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> extension <span class="keyword">in</span> (<span class="string">&#x27;*.mp4&#x27;</span>, <span class="string">&#x27;*.avi&#x27;</span>, <span class="string">&#x27;*.mov&#x27;</span>, <span class="string">&#x27;*.mkv&#x27;</span>, <span class="string">&#x27;*.m4v&#x27;</span>, <span class="string">&#x27;*.WMV&#x27;</span>, <span class="string">&#x27;*.rmvb&#x27;</span>, <span class="string">&#x27;*.DAT&#x27;</span>, <span class="string">&#x27;*.VOB&#x27;</span>):</span><br><span class="line">        video_files += [</span><br><span class="line">            <span class="built_in">str</span>(file.resolve()) <span class="keyword">for</span> file <span class="keyword">in</span> root.rglob(extension)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">any</span>(excluded.lower() <span class="keyword">in</span> (part.lower() <span class="keyword">for</span> part <span class="keyword">in</span> file.parts) <span class="keyword">for</span> excluded <span class="keyword">in</span> exclude_dirs)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> video_files:</span><br><span class="line">        logging.error(<span class="string">&quot;没有找到符合条件的文件&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;没有找到符合条件的文件&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载模型（在主线程中加载一次模型，供所有线程使用）</span></span><br><span class="line">    model = load_model(MODEL_NAME)</span><br><span class="line"></span><br><span class="line">    start_main_time = time.time()</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">f&quot;开始分批处理视频，共有 <span class="subst">&#123;<span class="built_in">len</span>(video_files)&#125;</span> 个文件，批次大小为 <span class="subst">&#123;BATCH_SIZE&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;开始分批处理视频，共有 <span class="subst">&#123;<span class="built_in">len</span>(video_files)&#125;</span> 个文件，批次大小为 <span class="subst">&#123;BATCH_SIZE&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多线程处理</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=THREAD_COUNT) <span class="keyword">as</span> executor:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(video_files), BATCH_SIZE):</span><br><span class="line">            batch = video_files[i:i + BATCH_SIZE]</span><br><span class="line">            executor.submit(process_batch, batch, model)</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">f&quot;所有视频文件处理完成，总耗时 <span class="subst">&#123;time.time() - start_main_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;所有视频文件处理完成，总耗时 <span class="subst">&#123;time.time() - start_main_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;代码修改详解</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 1. **模型加载与初始化**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">YOLOv5 使用 PyTorch 实现，通过 `torch.hub` 方便地加载模型。我们在主线程中加载一次模型，并在所有线程中共享该模型对象，以避免重复加载和节省内存。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def load_model(model_name=&#x27;yolov5s&#x27;):</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;加载YOLOv5模型，返回模型对象&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    model = torch.hub.load(&#x27;ultralytics/yolov5&#x27;, model_name, pretrained=True)</span></span><br><span class="line"><span class="string">    # 设置模型为评估模式</span></span><br><span class="line"><span class="string">    model.eval()</span></span><br><span class="line"><span class="string">    return model</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> yolov5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用js log库和python FastApi完成 微信小程序日志保存与上传</title>
      <link href="/2024/11/16/wechat-log-upload/"/>
      <url>/2024/11/16/wechat-log-upload/</url>
      
        <content type="html"><![CDATA[<h1>使用js log库和python FastApi完成 微信小程序日志保存与上传</h1><h2 id="简介">简介</h2><blockquote><p>使用log.js 通过定义日志输出格式：console.log(<code>[$&#123;log.level&#125;] $&#123;log.timestamp&#125;: $&#123;log.message&#125;</code>); 输出日志 通过http post请求上传日志数据到服务端</p></blockquote><h2 id="微信程序日志保存与上传">微信程序日志保存与上传</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// log.js - 微信小程序日志库</span></span><br><span class="line"><span class="keyword">import</span> admin_url <span class="keyword">from</span> <span class="string">&#x27;@/common/config.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> user_msg = uni.<span class="title function_">getStorageSync</span>(<span class="string">&quot;token&quot;</span>)</span><br><span class="line"><span class="comment">// log.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Logger</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">logs</span> = []; <span class="comment">// 存储日志记录的数组</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">levels</span> = &#123; <span class="comment">// 定义日志级别</span></span><br><span class="line"><span class="attr">INFO</span>: <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line"><span class="attr">DEBUG</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line"><span class="attr">ERROR</span>: <span class="string">&#x27;ERROR&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">isDebug</span> = <span class="literal">true</span>; <span class="comment">// 控制是否在控制台输出日志，调试期间开启</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">uploadEndpoint</span> =<span class="string">&#x27;/api/upload-log&#x27;</span>; <span class="comment">// 上传日志的接口地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化日志</span></span><br><span class="line"><span class="title function_">formatLog</span>(<span class="params">level, message</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">level</span>: level,</span><br><span class="line"><span class="attr">message</span>: user_msg + <span class="string">&quot;: &quot;</span> + message,</span><br><span class="line"><span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>()</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印日志到控制台</span></span><br><span class="line"><span class="title function_">printLog</span>(<span class="params">log</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isDebug</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;log.level&#125;</span>] <span class="subst">$&#123;log.timestamp&#125;</span>: <span class="subst">$&#123;log.message&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录日志到数组</span></span><br><span class="line"><span class="title function_">log</span>(<span class="params">level, message</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> logEntry = <span class="variable language_">this</span>.<span class="title function_">formatLog</span>(level, message);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">logs</span>.<span class="title function_">push</span>(logEntry);</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">printLog</span>(logEntry);</span><br><span class="line">wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;appLogs&#x27;</span>, <span class="variable language_">this</span>.<span class="property">logs</span>); <span class="comment">// 同步存储到本地</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各级别的日志记录方法</span></span><br><span class="line"><span class="title function_">info</span>(<span class="params">message</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">levels</span>.<span class="property">INFO</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">debug</span>(<span class="params">message</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">levels</span>.<span class="property">DEBUG</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">error</span>(<span class="params">message</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">levels</span>.<span class="property">ERROR</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = <span class="keyword">new</span> <span class="title class_">Logger</span>();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> logger;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="日志输出使用">日志输出使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">&#x27;../log.js&#x27;</span></span><br><span class="line"></span><br><span class="line">logger.<span class="title function_">info</span>(<span class="string">&#x27;输出示例&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="服务端日志上传接口定义">服务端日志上传接口定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="meta">@router.post(<span class="params"><span class="string">&quot;/upload-log&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">upload_log</span>(<span class="params">request: LogUploadRequest</span>):</span><br><span class="line">    logs = request.logs</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> logs:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">400</span>, detail=<span class="string">&quot;日志内容不能为空&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将日志数据保存到文件</span></span><br><span class="line">    save_logs_to_file([log.<span class="built_in">dict</span>() <span class="keyword">for</span> log <span class="keyword">in</span> logs])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">len</span>(logs)&#125;</span>条日志已上传&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志存储文件路径</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Dict</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">LOG_FILE_PATH = <span class="string">&quot;wechat_logs.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间，并格式化为指定格式</span></span><br><span class="line">current_timestamp = datetime.now().strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S.%f&quot;</span>)[:-<span class="number">3</span>]</span><br><span class="line"><span class="comment"># print(current_timestamp)</span></span><br><span class="line"></span><br><span class="line">file_name = <span class="built_in">str</span>(uuid.uuid4()) + current_timestamp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入日志到文件</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_logs_to_file</span>(<span class="params">logs: <span class="type">List</span>[<span class="type">Dict</span>]</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/wechat_logs/&quot;</span> + LOG_FILE_PATH + <span class="string">&quot;_&quot;</span> + file_name, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> log_file:</span><br><span class="line">            <span class="keyword">for</span> log <span class="keyword">in</span> logs:</span><br><span class="line">                log_file.write(json.dumps(log) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;日志保存到文件失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="微信小程序调用api上传log">微信小程序调用api上传log</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 批量上传日志到服务器</span></span><br><span class="line"><span class="title function_">uploadLogs</span>(<span class="params">api</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> logsToUpload = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;appLogs&#x27;</span>) || [];</span><br><span class="line"><span class="keyword">if</span> (logsToUpload.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line"><span class="attr">url</span>:  api + <span class="variable language_">this</span>.<span class="property">uploadEndpoint</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">logs</span>: logsToUpload</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">header</span>: &#123;</span><br><span class="line"><span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;日志上传成功&quot;</span>, res.<span class="property">data</span>);</span><br><span class="line">wx.<span class="title function_">removeStorageSync</span>(<span class="string">&#x27;appLogs&#x27;</span>); <span class="comment">// 上传成功后清空本地存储的日志</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;日志上传失败&quot;</span>, err);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="输出结果示例">输出结果示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: [object Object]&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:02:26.322Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: start select user login msg&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:02:26.325Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: [object Object]&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:02:26.520Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: start select user login msg&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:02:26.523Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: [object Object]&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:02:26.593Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: [object Object]&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:02:26.706Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: [object Object]&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:05:19.227Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: start select user login msg&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:05:19.235Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: [object Object]&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:05:19.389Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: start select user login msg&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:05:19.392Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: [object Object]&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:05:19.441Z&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;: &quot;DEBUG&quot;, &quot;message&quot;: &quot;obGGb7aolzF2Tm0FaO0rn4gik1WQ: [object Object]&quot;, &quot;timestamp&quot;: &quot;2024-11-11T09:05:19.676Z&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于AX516 FPGA 开发板的音频录制与回放</title>
      <link href="/2024/10/28/wm8731-record-audio/"/>
      <url>/2024/10/28/wm8731-record-audio/</url>
      
        <content type="html"><![CDATA[<h1>基于AX516 FPGA 开发板的音频录制与回放</h1><h2 id="硬件介绍">硬件介绍</h2><blockquote><p>AX516是一款基于FPGA平台的高性能开发板，它使用赛灵思生产的 Spartan6 系列的XC6SLX16-2CSG324FPGA 作为CPU。这一系列具有众多优点：具有丰富硬件资源、具有丰富接口等。在包括：软件无线电、工控、IC验证等众多领域都有所广泛应用。</p></blockquote><h3 id="基本流程">基本流程</h3><blockquote><p>选取FPGA开发板与外接音频模块相结合的方式，利用音频模块的音频芯片WM8731模拟信号与数字信号之间转换的功能来实现。除此之外，还用到I2C和I2S总线接口，通过它们来实现FPGA与WM8731之间的控制与数据通信。其中，I2C接口负责FPGA对WM8731的寄存器的配置，而I2S接口负责对音频数据的通信。通过DDR3读写控制、音频通信与控制、按键检测等程序来实现。</p></blockquote><blockquote><p>在硬件上电结束后，开始按键检测。判断有按键按下时，再次判断按键是否松开。在按键松开后开始DDR读写控制程序，然后初始化管脚配置与位宽。将时钟复位后，再配置WM8731寄存器，启动音频产生程序，发送音频数据。在另一端接收音频数据，至此结束。</p></blockquote><h3 id="硬件结构">硬件结构</h3><blockquote><p>如图</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/st.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/st.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="开发板主要参数">开发板主要参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">项目            参数</span><br><span class="line">逻辑单元Logic Cells14579</span><br><span class="line">乘法器DSP48        32</span><br><span class="line">可配置逻辑块CLBs 136Kb</span><br><span class="line">Block RAM       576Kb</span><br><span class="line">时钟单元CMTs    2</span><br><span class="line">可用IO数量        218个</span><br><span class="line">内核电压        1.15V-1.25V（推荐1.2V）</span><br><span class="line">工作温度        0-85℃</span><br></pre></td></tr></table></figure><h3 id="电路设计">电路设计</h3><blockquote><p>如图</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/rou.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/rou.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="WM8731结构">WM8731结构</h3><blockquote><p>如图 WM8731主要负责数字信号与模拟信号之间的转换功能。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/wm.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/wm.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="寄存器信息">寄存器信息</h3><blockquote><p>如图:在WM8731的内部有11个寄存器，通过I2C总线的方式对其内部的11个寄存器进行相应的配置，来实现对芯片的初始化以及工作时的工作状态和功能。ADC和DAC都是WM8731的内部模块，ADC是模拟数字转换器，DAC是数字模拟转换器。音频信息通过外部的麦克风输入，在WM8731中来进行数字信号与模拟信号之间的转换。控制器可以通过控制接口来对WM8731进行配置，然后在通过音频接口读写数据音频信号。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/jq.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/jq.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="寄存器地址及功能">寄存器地址及功能</h3><blockquote><p>如下</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">寄存器地址寄存器名称    相关功能</span><br><span class="line">0000000   左通道控制   静音控制</span><br><span class="line">0000001   右通道控制   静音控制</span><br><span class="line">0000100   模拟音频路径控制A/D转换输入选择</span><br><span class="line">0000101   数字音频路径控制高通滤波器使能控制</span><br><span class="line">0000110   掉电控制       麦克风输入掉电控制</span><br><span class="line">0000111   数字音频格式控制音频位长度和格式控制</span><br><span class="line">0001000   采样控制       核心时钟分配控制</span><br></pre></td></tr></table></figure><h3 id="wm8731-FPGA引脚及功能">wm8731 FPGA引脚及功能</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">WM8731引脚FPGA引脚</span><br><span class="line">VM_I2C_SCLKPIN:N11</span><br><span class="line">VM_I2C_SDATPIN:M11</span><br><span class="line">VM_BCLK    PIN:U16</span><br><span class="line">VM_DACDAT  PIN:V16</span><br><span class="line">VM_DADLRC  PIN:U15</span><br><span class="line">VM_ADCDAT  PIN:V15</span><br><span class="line">VM_ADCLRC  PIN:V13</span><br></pre></td></tr></table></figure><h2 id="开发流程">开发流程</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设计定义、HDL实现、功能仿真、逻辑综合、前仿真、布局布线、后仿真、静态时序分析、系统测试</span><br></pre></td></tr></table></figure><p><img src="/2024/10/28/wm8731-record-audio/re.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/re.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="协议">协议</h2><h3 id="i2c">i2c</h3><blockquote><p>I2C（Inter Interface Circuit）全称为芯片间总线，是目前使用广泛的芯片间串行扩展总线。目前世界上采用I2C总线有两个规范，荷兰飞利浦公司和日本索尼公司，现多采用飞利浦公司I2C总线技术规范，已成为电子行业认可的总线标准。采用I2C技术单片机以及外围器件种类很多，已广泛用于各类电子产品、家用电器及通信设备中。<br>I2C串行总线只有两条信号线，一条是数据线SDA，另一条是时钟线SCL。SDA和SCL是双向的，I2C总线上各器件数据线都接到SDA线上，各器件时钟线均接到SCL线上。<br>带有I2C接口单片机可直接与I2C总线接口的各种扩展器件（如存储器、I/O芯片、A/D、D/A、键盘、显示器、日历/时钟）连接。由于I2C总线采用纯软件寻址方法，无需片选线连接，大大简化总线数量。</p></blockquote><blockquote><p>基本结构如图</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/ic.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/ic.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="访问">访问</h4><blockquote><p>由总线规范，起始信号表明一次数据传送的开始，其后为寻址字节。在寻址字节后是按指定读、写的数据字节与应答位。在数据传送完成后主器件都必须发送终止信号。在起始与终止信号之间传输的数据字节数由主器件（单片机）决定</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/fw.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/fw.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="寄存器配置">寄存器配置</h4><blockquote><p>如图 每个寄存器都需i2c传输3个字节。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/jcq.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/jcq.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="i2s">i2s</h3><blockquote><p>数字音频接口四种模式 1.Right justified 2.Left justified 3.I2S 4.DSP mode</p></blockquote><blockquote><p>音频数据传输：WM8731的数字音频接口有5根引脚，分别为：BCLK（数字音频位时钟）、DACDAT（DAC数字音频数据输入）、DACLRC（DAC采样左/右声道信号）、ADCDAT（ADC数字音频信号输出）、ADCLRC（ADC采样左/右声道信号）。</p></blockquote><blockquote><p>FPGA为从设备，WM8731为主设备。ADCDAT、DACDST、ADCLRC和DACLRC与位时钟BCLK同步，在每个BCLK的下降沿进行一次数据传输。BCLK、DACDAT、DACLRC、ADCLRC为WM8731的输入信号。ADCDAT为WM8731的输出信号。FPGA和WM8731的I2S的通信右对齐的时序图如下图所示：</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/is.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/is.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="DDR3-读写">DDR3 读写</h2><blockquote><p>录取的数据存放到DDR3 选择的是两个64bit用户port口，一个port口用来读取DDR3数据，另一个则用来读写数据到DDR3里</p></blockquote><h2 id="代码实现">代码实现</h2><blockquote><p>音频部分包含一个主程序（mywav.v）和四个子程序，四个子程序分别是音频接收程序（sinwave_store.v），音频播放程序（sinwave_gen.v），WM8731寄存器配置程序（reg_config.v）和复位延迟程序（reset_delay.v）。另外寄存器配置程序（reg_config.v）还调用了iic的通信程序i2c_com.v。</p></blockquote><h3 id="主程序">主程序</h3><blockquote><p>在硬件上电结束后，开始按键检测。判断有按键按下时，再次判断按键是否松开。在按键松开后开始ddr读写控制程序，后初始化管脚配置与位宽。将时钟复位后，配置WM8731寄存器，启动音频产生程序，发送音频数据。在另一端接收音频数据，至此，主程序结束。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/stu.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/stu.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="示例代码">示例代码</h3><blockquote><p>在按键检测程序和ddr读写控制程序执行后，主程序首先分配管脚与位宽。在此之后依次调用各个模块功能</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/main.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/main.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="音频接收">音频接收</h4><blockquote><p>编写音频接收程序：sinwave_store.v，程序通过判断bclk输入时钟的上升沿来采样音频adcdat输入的数据，串行转化为64bit的并行数据并产生一个DDR3数据写请求信号</p></blockquote><ul><li>流程</li></ul><blockquote><p>在初始化变量结束后，程序首先检测是否有bclk、dacclk信号的跳变；在检测到时钟信号跳变后，采集ADC数据。当blc时钟处于下降沿时，开始采集数据。之后产生ddr写信号，在判断满足输出条件后输出接收结果。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/stu2.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/stu2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>代码</li></ul><blockquote><p>首先初始化变量，之后检测对应时钟信号是否跳变。确认有信号跳变后采集对应ADC数据。在开始采集前，判断时钟信号处于下降沿，之后产生ddr读写控制信号，在满足输出结果后输出音频接收结果。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/code.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/code.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="音频播放">音频播放</h4><ul><li>流程</li></ul><blockquote><p>频播放程序流程与音频接收程序流程类似。在初始化变量后，检测dacclk、bclk时钟信号是否跳变。再确认跳变后，检测时钟处于下降沿时开始播放音频数据，随后产生ddr读信号。在判断播放完成后结束流程。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/stu3.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/stu3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>代码</li></ul><blockquote><p>在初始化变量和配置管脚和位宽后，检测dacclk、bclk时钟是否跳变，在确认时钟跳变后开始播放声音数据，首先判断dacclk时钟是否处于下降沿，处于下降沿后播放数据。同时产生ddr读信号，在判断播放完成后程序结束。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/code2.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/code2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="寄存器配置-2">寄存器配置</h4><ul><li>流程</li></ul><blockquote><p>在初始化变量后，程序开始产生i2c控制时钟，之后进行寄存器i2c配置过程控制。在此之后判断是否复位，在确认复位后开始i2c传输数据，之后判断是否接收到i2c应答信号，如果收到，则继续下一个寄存器配置，否则配置WM8731寄存器赋值。至此流程结束。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/stu4.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/stu4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>代码</li></ul><blockquote><p>在初始化变量后配置位宽和管脚，之后产生频率为20khz的i2c控制时钟；之后进行寄存器IIC配置过程控制；判断复位后，开始数据传输，如果收到i2c应答信号，则继续下个寄存器配置，否则发送结束。开始WM8731寄存器赋值。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/code3.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/code3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="I2C通信">I2C通信</h4><ul><li>流程</li></ul><blockquote><p>在配置变量后引脚后，首先i2c处于空闲状态，在判断输入信号处于低电平后，开始数据传输，在接受到应答信号后，开始下次传输，在判断传输结束后，流程结束。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/stu5.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/stu5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>代码</li></ul><blockquote><p>在判断处于低电平后，开始数据传输，接收到应答信号后，开始下次数据传输，直至数据传输结束。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/code4.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/code4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="复位延迟">复位延迟</h4><blockquote><p>当始终处于上升沿是判断cnt是否满足条件，满足指定条件后，使得cnt自增。不满足时进行复位操作，以此达到复位时延操作。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/code5.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/code5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="按键检测">按键检测</h4><ul><li>流程</li></ul><blockquote><p>初始化变量结束后，判断按键是否按下，如果按键按下ddr写地址复位，开始计数。在判断超过抖动时间后，开始录音。判断按键是否松开，按键松开后ddr读地址开始计数，超过抖动时间后，录音结束。按键检测程序流程结束。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/stu6.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/stu6.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>代码</li></ul><blockquote><p>第一部分检测按键是否按下，第二部分检测按键是否松开。最后执行相应操作。</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/code6.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/code6.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="顶层模块">顶层模块</h4><ul><li>流程</li></ul><blockquote><p>依次调用：WM8731驱动程序、按键检测程序、DDR读写控制程序。</p></blockquote><ul><li>代码</li></ul><p><img src="/2024/10/28/wm8731-record-audio/code7.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/code7.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="效果">效果</h2><blockquote><p>如图</p></blockquote><p><img src="/2024/10/28/wm8731-record-audio/res.png" class="lazyload placeholder" data-srcset="/2024/10/28/wm8731-record-audio/res.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="编译与操作">编译与操作</h3><blockquote><p>在音频模块上有三个不同颜色的音频连接器，蓝色的接口是音频输入接口；粉色的接口是麦克风的输入接口；绿色的接口则为麦克风的输出接口。</p></blockquote><blockquote><p>在连接过程中，我们需要注意的是不要将插头与接口插错，耳机的粉色插头要插到音频模块的粉色接口上，耳机的绿色插头则要插到音频模块的绿色接口上。</p></blockquote><blockquote><p>编译工程生成文件，然后再用Impact 工具下载生成的文件到FPGA里，这样就完成了我们FPGA版的录音机了。</p></blockquote><blockquote><p>想要实现录音与播放功能很简单，就像在微信发语音一样，按住录音键说话，说完话后再松开录音就可以了。我们需要按住开发板上的KEY1键，对着耳机的麦克风说上一段话，然后释放KEY1键，之后我们就能在耳机中听到我们自己说的话了，非常简单，方便快捷。</p></blockquote><h2 id="See">See</h2><ul><li><ol><li>黑金AX516开发板用户手册</li></ol></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> fpga </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ESP32智能空气站实现</title>
      <link href="/2024/10/27/air-station/"/>
      <url>/2024/10/27/air-station/</url>
      
        <content type="html"><![CDATA[<h1>基于ESP32智能空气站实现</h1><h2 id="简介">简介</h2><blockquote><p>采用D1 mini模块，颗粒物传感器，二氧化碳传感器，光线传感器，温湿度传感器，屏幕等通过串口语言进行开发,可检测空气中主要有害物质–pM2.5,PM10的仪器，并实现实时监测功能</p></blockquote><h3 id="实现功能">实现功能</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.二氧化碳监测</span><br><span class="line">2.环境光检测</span><br><span class="line">3.可吸入颗粒物检测</span><br><span class="line">4.温湿度检测</span><br><span class="line">5.天气预报</span><br><span class="line">6.时钟功能</span><br><span class="line">7.显示监测数据动态切换</span><br><span class="line">8.便携、低功耗</span><br></pre></td></tr></table></figure><h3 id="使用硬件">使用硬件</h3><blockquote><p>硬件中通过ESP8266与PMS5003可吸入物颗粒物传感器、BME280温湿度传感器、BH1750光线传感器、UsartGPU26B串口屏、Sense air s8二氧化碳传感器使用杜邦线连接，用电源线进行供电</p></blockquote><h3 id="原理图">原理图</h3><blockquote><p>如图， 分为以下模块：BH1750（光线传感器）、BME280（温湿度传感器）、Switch（开关）、PMS5003（颗粒物传感器）、UsartGPU26B（串口屏）、Sense air s8（二氧化碳传感器）、D1MINI（主控板）。</p></blockquote><p><img src="/2024/10/27/air-station/map.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/map.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="技术">技术</h2><ul><li><p>ardunio</p></li><li><p>python</p></li><li><p>esp32等硬件</p></li><li><p>mqtt</p></li><li><p>requests</p></li><li><p>GPUMarker</p></li></ul><h2 id="数据指标">数据指标</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">功能               指标</span><br><span class="line">颗粒物浓度检测        0~1000pm</span><br><span class="line">室内温湿度检测        温度量程：-40度~85度 湿度量程：0~100RH</span><br><span class="line">二氧化碳浓度检测    量程：0~10000ppm（正常的二氧化碳量程为0~2000ppm）</span><br><span class="line">时钟功能           北京时间</span><br><span class="line">自动调节光线亮度功能1-65535lx(光线亮度量程)</span><br></pre></td></tr></table></figure><h2 id="功能实现">功能实现</h2><blockquote><p>总体结构如图</p></blockquote><p><img src="/2024/10/27/air-station/struct.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/struct.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="天气数据获取">天气数据获取</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @FileName  :server.py</span></span><br><span class="line"><span class="comment"># @Time      :2021/3/24 21:26</span></span><br><span class="line"><span class="comment"># @Author    :czq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> paho.mqtt.publish <span class="keyword">as</span> publish</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">parameter</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">location = <span class="string">&#x27;117.22,39.0&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;8d7a3e69f9644bb5bf9ed5da19209e67&#x27;</span></span><br><span class="line">client_id = time.strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>, time.localtime(time.time()))</span><br><span class="line">host = <span class="string">&#x27;121.43.238.135&#x27;</span></span><br><span class="line">port = <span class="number">18083</span></span><br><span class="line">user = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;public&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">weather_url = <span class="string">&quot;https://devapi.heweather.net/v7/weather/now?location=&quot;</span>+location+<span class="string">&quot;&amp;key=&quot;</span>+key</span><br><span class="line">weather_response = urllib.request.urlopen(weather_url)</span><br><span class="line">weather_responsebyte = weather_response.read()</span><br><span class="line">buff = BytesIO(weather_responsebyte)</span><br><span class="line">f = gzip.GzipFile(fileobj=buff)</span><br><span class="line">weather_result = f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">data2 = json.loads(weather_result)</span><br><span class="line">real = data2[<span class="string">&quot;now&quot;</span>][<span class="string">&quot;temp&quot;</span>]</span><br><span class="line">hum = data2[<span class="string">&quot;now&quot;</span>][<span class="string">&quot;humidity&quot;</span>]</span><br><span class="line">tempfl = data2[<span class="string">&quot;now&quot;</span>][<span class="string">&quot;feelsLike&quot;</span>]</span><br><span class="line">code = data2[<span class="string">&quot;now&quot;</span>][<span class="string">&quot;icon&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> code == <span class="string">&#x27;100&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;150&#x27;</span>:</span><br><span class="line">    code = <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> code == <span class="string">&#x27;104&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;154&#x27;</span>:</span><br><span class="line">    code = <span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> code == <span class="string">&#x27;101&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;103&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;102&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;153&#x27;</span>:</span><br><span class="line">    code = <span class="number">3</span></span><br><span class="line"><span class="keyword">elif</span> code == <span class="string">&#x27;300&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;301&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;350&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;351&#x27;</span>:</span><br><span class="line">    code = <span class="number">4</span></span><br><span class="line"><span class="keyword">elif</span> code == <span class="string">&#x27;302&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;303&#x27;</span>:</span><br><span class="line">    code = <span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> code == <span class="string">&#x27;304&#x27;</span>:</span><br><span class="line">    code = <span class="number">6</span></span><br><span class="line"><span class="keyword">elif</span> code == <span class="string">&#x27;305&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;309&#x27;</span>:</span><br><span class="line">    code = <span class="number">7</span></span><br><span class="line"><span class="keyword">elif</span> code == <span class="string">&#x27;306&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;307&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;308&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;310&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;311&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;312&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;313&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;314&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;315&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;316&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;317&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;318&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;399&#x27;</span>:</span><br><span class="line">    code = <span class="number">8</span></span><br><span class="line"><span class="keyword">elif</span> code == <span class="string">&#x27;404&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;405&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;406&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;456&#x27;</span>:</span><br><span class="line">    code = <span class="number">9</span></span><br><span class="line"><span class="keyword">elif</span> code == <span class="string">&#x27;400&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;408&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;407&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;457&#x27;</span>:</span><br><span class="line">    code = <span class="number">10</span></span><br><span class="line"><span class="keyword">elif</span> code == <span class="string">&#x27;401&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;402&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;403&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;499&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;410&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;409&#x27;</span>:</span><br><span class="line">    code = <span class="number">11</span></span><br><span class="line"><span class="keyword">elif</span> code == <span class="string">&#x27;503&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;504&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;507&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;508&#x27;</span>:</span><br><span class="line">    code = <span class="number">12</span></span><br><span class="line"><span class="keyword">elif</span> code == <span class="string">&#x27;500&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;509&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;510&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;514&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;515&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;501&#x27;</span>:</span><br><span class="line">    code = <span class="number">13</span></span><br><span class="line"><span class="keyword">elif</span> code == <span class="string">&#x27;511&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;512&#x27;</span> <span class="keyword">or</span> code == <span class="string">&#x27;513&#x27;</span>:</span><br><span class="line">    code = <span class="number">14</span></span><br><span class="line"><span class="keyword">elif</span> code == <span class="string">&#x27;900&#x27;</span>:</span><br><span class="line">    code = <span class="number">16</span></span><br><span class="line"><span class="keyword">elif</span> code == <span class="string">&#x27;901&#x27;</span>:</span><br><span class="line">    code = <span class="number">17</span></span><br><span class="line"><span class="keyword">elif</span> code == <span class="string">&#x27;999&#x27;</span>:</span><br><span class="line">    code = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(real)</span><br><span class="line"><span class="built_in">print</span>(hum)</span><br><span class="line"><span class="built_in">print</span>(tempfl)</span><br><span class="line"><span class="built_in">print</span>(code)</span><br><span class="line"></span><br><span class="line">fweather_url = <span class="string">&quot;https://devapi.heweather.net/v7/weather/3d?location=&quot;</span>+location+<span class="string">&quot;&amp;key=&quot;</span>+key</span><br><span class="line">fweather_response = urllib.request.urlopen(fweather_url)</span><br><span class="line">fweather_responsebyte = fweather_response.read()</span><br><span class="line">bufff = BytesIO(fweather_responsebyte)</span><br><span class="line">ff = gzip.GzipFile(fileobj=bufff)</span><br><span class="line">fweather_result = ff.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">data3 = json.loads(fweather_result)</span><br><span class="line">high = data3[<span class="string">&quot;daily&quot;</span>][<span class="number">0</span>][<span class="string">&quot;tempMax&quot;</span>]</span><br><span class="line">low = data3[<span class="string">&quot;daily&quot;</span>][<span class="number">0</span>][<span class="string">&quot;tempMin&quot;</span>]</span><br><span class="line">fcode = data3[<span class="string">&quot;daily&quot;</span>][<span class="number">0</span>][<span class="string">&quot;iconDay&quot;</span>]</span><br><span class="line">thigh = data3[<span class="string">&quot;daily&quot;</span>][<span class="number">1</span>][<span class="string">&quot;tempMax&quot;</span>]</span><br><span class="line">tlow = data3[<span class="string">&quot;daily&quot;</span>][<span class="number">1</span>][<span class="string">&quot;tempMin&quot;</span>]</span><br><span class="line">tcode = data3[<span class="string">&quot;daily&quot;</span>][<span class="number">1</span>][<span class="string">&quot;iconDay&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> fcode == <span class="string">&#x27;100&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;150&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">19</span></span><br><span class="line"><span class="keyword">elif</span> fcode == <span class="string">&#x27;104&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;154&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">20</span></span><br><span class="line"><span class="keyword">elif</span> fcode == <span class="string">&#x27;101&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;103&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;102&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;153&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">21</span></span><br><span class="line"><span class="keyword">elif</span> fcode == <span class="string">&#x27;300&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;301&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;350&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;351&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">22</span></span><br><span class="line"><span class="keyword">elif</span> fcode == <span class="string">&#x27;302&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;303&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">23</span></span><br><span class="line"><span class="keyword">elif</span> fcode == <span class="string">&#x27;304&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">24</span></span><br><span class="line"><span class="keyword">elif</span> fcode == <span class="string">&#x27;305&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;309&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">25</span></span><br><span class="line"><span class="keyword">elif</span> fcode == <span class="string">&#x27;306&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;307&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;308&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;310&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;311&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;312&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;313&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;314&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;315&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;316&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;317&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;318&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;399&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">26</span></span><br><span class="line"><span class="keyword">elif</span> fcode == <span class="string">&#x27;404&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;405&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;406&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;456&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">27</span></span><br><span class="line"><span class="keyword">elif</span> fcode == <span class="string">&#x27;400&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;408&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;407&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;457&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">28</span></span><br><span class="line"><span class="keyword">elif</span> fcode == <span class="string">&#x27;401&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;402&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;403&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;499&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;410&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;409&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">29</span></span><br><span class="line"><span class="keyword">elif</span> fcode == <span class="string">&#x27;503&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;504&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;507&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;508&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">30</span></span><br><span class="line"><span class="keyword">elif</span> fcode == <span class="string">&#x27;500&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;509&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;510&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;514&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;515&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;501&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">31</span></span><br><span class="line"><span class="keyword">elif</span> fcode == <span class="string">&#x27;511&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;512&#x27;</span> <span class="keyword">or</span> fcode == <span class="string">&#x27;513&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">32</span></span><br><span class="line"><span class="keyword">elif</span> fcode == <span class="string">&#x27;900&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">33</span></span><br><span class="line"><span class="keyword">elif</span> fcode == <span class="string">&#x27;901&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">34</span></span><br><span class="line"><span class="keyword">elif</span> fcode == <span class="string">&#x27;999&#x27;</span>:</span><br><span class="line">    fcode = <span class="number">35</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> tcode == <span class="string">&#x27;100&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;150&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">19</span></span><br><span class="line"><span class="keyword">elif</span> tcode == <span class="string">&#x27;104&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;154&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">20</span></span><br><span class="line"><span class="keyword">elif</span> tcode == <span class="string">&#x27;101&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;103&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;102&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;153&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">21</span></span><br><span class="line"><span class="keyword">elif</span> tcode == <span class="string">&#x27;300&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;301&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;350&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;351&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">22</span></span><br><span class="line"><span class="keyword">elif</span> tcode == <span class="string">&#x27;302&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;303&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">23</span></span><br><span class="line"><span class="keyword">elif</span> tcode == <span class="string">&#x27;304&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">24</span></span><br><span class="line"><span class="keyword">elif</span> tcode == <span class="string">&#x27;305&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;309&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">25</span></span><br><span class="line"><span class="keyword">elif</span> tcode == <span class="string">&#x27;306&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;307&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;308&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;310&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;311&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;312&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;313&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;314&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;315&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;316&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;317&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;318&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;399&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">26</span></span><br><span class="line"><span class="keyword">elif</span> tcode == <span class="string">&#x27;404&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;405&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;406&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;456&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">27</span></span><br><span class="line"><span class="keyword">elif</span> tcode == <span class="string">&#x27;400&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;408&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;407&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;457&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">28</span></span><br><span class="line"><span class="keyword">elif</span> tcode == <span class="string">&#x27;401&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;402&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;403&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;499&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;410&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;409&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">29</span></span><br><span class="line"><span class="keyword">elif</span> tcode == <span class="string">&#x27;503&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;504&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;507&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;508&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">30</span></span><br><span class="line"><span class="keyword">elif</span> tcode == <span class="string">&#x27;500&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;509&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;510&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;514&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;515&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;501&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">31</span></span><br><span class="line"><span class="keyword">elif</span> tcode == <span class="string">&#x27;511&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;512&#x27;</span> <span class="keyword">or</span> tcode == <span class="string">&#x27;513&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">32</span></span><br><span class="line"><span class="keyword">elif</span> tcode == <span class="string">&#x27;900&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">33</span></span><br><span class="line"><span class="keyword">elif</span> tcode == <span class="string">&#x27;901&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">34</span></span><br><span class="line"><span class="keyword">elif</span> tcode == <span class="string">&#x27;999&#x27;</span>:</span><br><span class="line">    tcode = <span class="number">35</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(high)</span><br><span class="line"><span class="built_in">print</span>(low)</span><br><span class="line"><span class="built_in">print</span>(fcode)</span><br><span class="line"><span class="built_in">print</span>(thigh)</span><br><span class="line"><span class="built_in">print</span>(tlow)</span><br><span class="line"><span class="built_in">print</span>(tcode)</span><br><span class="line"></span><br><span class="line">aqiindex_url = <span class="string">&quot;http://219.233.250.38:8087/AQI/PatrolHandler.do?provider=SEMCShare.ChildWeb&amp;method=RegionData&amp;groupID=213&amp;tdsourcetag=s_pctim_aiomsg&quot;</span></span><br><span class="line">aqiindex_response = requests.get(aqiindex_url)</span><br><span class="line">aqiindex_result = aqiindex_response.text</span><br><span class="line">result = json.loads(aqiindex_result)</span><br><span class="line"></span><br><span class="line">PM25 = <span class="built_in">str</span>(result[<span class="number">1</span>][<span class="string">&#x27;pm25Value&#x27;</span>])</span><br><span class="line">PM10 = <span class="built_in">str</span>(result[<span class="number">1</span>][<span class="string">&#x27;pm10Value&#x27;</span>])</span><br><span class="line">aqi = <span class="built_in">str</span>(result[<span class="number">1</span>][<span class="string">&#x27;primaryPollutantAQI&#x27;</span>])</span><br><span class="line">o3 = <span class="built_in">str</span>(result[<span class="number">1</span>][<span class="string">&#x27;o3Value&#x27;</span>])</span><br><span class="line">primary = <span class="built_in">str</span>(result[<span class="number">1</span>][<span class="string">&#x27;primaryPollutantType&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(PM25)</span><br><span class="line"><span class="built_in">print</span>(PM10)</span><br><span class="line"><span class="built_in">print</span>(aqi)</span><br><span class="line"><span class="built_in">print</span>(o3)</span><br><span class="line"></span><br><span class="line">publish.single(<span class="string">&quot;casatift/weather/shanghai/tempfl&quot;</span>, tempfl, qos=<span class="number">1</span>, hostname=host, port=port, client_id=client_id,</span><br><span class="line">               auth=&#123;<span class="string">&#x27;username&#x27;</span>: user, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br><span class="line">publish.single(<span class="string">&quot;casatift/weather/shanghai/real&quot;</span>, real, qos=<span class="number">1</span>, hostname=host, port=port, client_id=client_id,</span><br><span class="line">               auth=&#123;<span class="string">&#x27;username&#x27;</span>: user, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br><span class="line">publish.single(<span class="string">&quot;casatift/weather/shanghai/hum&quot;</span>, hum, qos=<span class="number">1</span>, hostname=host, port=port, client_id=client_id,</span><br><span class="line">               auth=&#123;<span class="string">&#x27;username&#x27;</span>: user, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br><span class="line">publish.single(<span class="string">&quot;casatift/weather/shanghai/code&quot;</span>, code, qos=<span class="number">1</span>, hostname=host, port=port, client_id=client_id,</span><br><span class="line">               auth=&#123;<span class="string">&#x27;username&#x27;</span>: user, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br><span class="line">publish.single(<span class="string">&quot;casatift/weather/shanghai/high&quot;</span>, high, qos=<span class="number">1</span>, hostname=host, port=port, client_id=client_id,</span><br><span class="line">               auth=&#123;<span class="string">&#x27;username&#x27;</span>: user, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br><span class="line">publish.single(<span class="string">&quot;casatift/weather/shanghai/low&quot;</span>, low, qos=<span class="number">1</span>, hostname=host, port=port, client_id=client_id,</span><br><span class="line">               auth=&#123;<span class="string">&#x27;username&#x27;</span>: user, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br><span class="line">publish.single(<span class="string">&quot;casatift/weather/shanghai/fcode&quot;</span>, fcode, qos=<span class="number">1</span>, hostname=host, port=port, client_id=client_id,</span><br><span class="line">               auth=&#123;<span class="string">&#x27;username&#x27;</span>: user, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br><span class="line">publish.single(<span class="string">&quot;casatift/weather/shanghai/tcode&quot;</span>, tcode, qos=<span class="number">1</span>, hostname=host, port=port, client_id=client_id,</span><br><span class="line">               auth=&#123;<span class="string">&#x27;username&#x27;</span>: user, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br><span class="line">publish.single(<span class="string">&quot;casatift/weather/shanghai/thigh&quot;</span>, thigh, qos=<span class="number">1</span>, hostname=host, port=port, client_id=client_id,</span><br><span class="line">               auth=&#123;<span class="string">&#x27;username&#x27;</span>: user, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br><span class="line">publish.single(<span class="string">&quot;casatift/weather/shanghai/tlow&quot;</span>, tlow, qos=<span class="number">1</span>, hostname=host, port=port, client_id=client_id,</span><br><span class="line">               auth=&#123;<span class="string">&#x27;username&#x27;</span>: user, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br><span class="line">publish.single(<span class="string">&quot;casatift/weather/shanghai/pm25&quot;</span>, PM25, qos=<span class="number">1</span>, hostname=host, port=port, client_id=client_id,</span><br><span class="line">               auth=&#123;<span class="string">&#x27;username&#x27;</span>: user, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br><span class="line">publish.single(<span class="string">&quot;casatift/weather/shanghai/pm10&quot;</span>, PM10, qos=<span class="number">1</span>, hostname=host, port=port, client_id=client_id,</span><br><span class="line">               auth=&#123;<span class="string">&#x27;username&#x27;</span>: user, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br><span class="line">publish.single(<span class="string">&quot;casatift/weather/shanghai/aqi&quot;</span>, aqi, qos=<span class="number">1</span>, hostname=host, port=port, client_id=client_id,</span><br><span class="line">               auth=&#123;<span class="string">&#x27;username&#x27;</span>: user, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br><span class="line">publish.single(<span class="string">&quot;casatift/weather/shanghai/o3&quot;</span>, o3, qos=<span class="number">1</span>, hostname=host, port=port, client_id=client_id,</span><br><span class="line">               auth=&#123;<span class="string">&#x27;username&#x27;</span>: user, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br><span class="line"><span class="keyword">if</span> primary == <span class="string">&#x27;PM2.5&#x27;</span>:</span><br><span class="line">    primary = <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> primary == <span class="string">&#x27;PM10&#x27;</span>:</span><br><span class="line">    primary = <span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> primary == <span class="string">&#x27;O3&#x27;</span>:</span><br><span class="line">    primary = <span class="number">3</span></span><br><span class="line"><span class="keyword">elif</span> primary == <span class="string">&#x27;CO&#x27;</span>:</span><br><span class="line">    primary = <span class="number">4</span></span><br><span class="line"><span class="keyword">elif</span> primary == <span class="string">&#x27;SO2&#x27;</span>:</span><br><span class="line">    primary = <span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> primary == <span class="string">&#x27;NO2&#x27;</span>:</span><br><span class="line">    primary = <span class="number">6</span></span><br><span class="line">publish.single(<span class="string">&quot;casatift/weather/shanghai/primary&quot;</span>, primary, qos=<span class="number">1</span>, hostname=host, port=port,</span><br><span class="line">               client_id=client_id, auth=&#123;<span class="string">&#x27;username&#x27;</span>: user, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br></pre></td></tr></table></figure><h3 id="mqtt-数据上传与传感器数据处理">mqtt 数据上传与传感器数据处理</h3><ul><li>BME280传感器实物 温湿度传感器</li></ul><blockquote><p>激光照射在空气中，遇到颗粒物后由于光的折射使激光形成散射光，再通过散射光收集装置，将空气中反射回来的散射光收集起来，持续一段时间之后，传感器将会把单位体积内连续收集的不同的散射光进行整理，计算与分析，其优点在于体积小，工作无噪音，测量精度高。</p></blockquote><p><img src="/2024/10/27/air-station/wd.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/wd.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><blockquote><p>pm10 pm2.5 hum（温度，湿度）数据获取与发送</p></blockquote><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">on</span> System#Boot <span class="keyword">do</span></span><br><span class="line">GPIO,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">timerSet,<span class="number">1</span>,<span class="number">60</span></span><br><span class="line">SerialSend SPG(<span class="number">1</span>);</span><br><span class="line">endon</span><br><span class="line"></span><br><span class="line"><span class="keyword">On</span> Rules#Timer=<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">GPIO,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">timerSet,<span class="number">2</span>,<span class="number">10</span></span><br><span class="line">endon</span><br><span class="line"></span><br><span class="line"><span class="keyword">On</span> PMS#pm10 <span class="keyword">do</span></span><br><span class="line">Publish domoticzc/<span class="keyword">in</span>,<span class="comment">&#x27;&#123;&quot;idx&quot;:152,&quot;nvalue&quot;:0,&quot;svalue&quot;:&quot;[PMS#pm2.5]&quot;&#125;&#x27; “这一段是mqtt发送pm2.5数值，请自行更改topic和payload，并将此句说明删除”</span></span><br><span class="line">Publish domoticzc/<span class="keyword">in</span>,<span class="comment">&#x27;&#123;&quot;idx&quot;:151,&quot;nvalue&quot;:0,&quot;svalue&quot;:&quot;[PMS#pm10]&quot;&#125;&#x27;“这一段是mqtt发送pm10数值，请自行更改topic和payload，并将此句说明删除”</span></span><br><span class="line">Publish domoticzc/<span class="keyword">in</span>,<span class="comment">&#x27;&#123;&quot;idx&quot;:313,&quot;nvalue&quot;:0,&quot;svalue&quot;:&quot;[PMS#temp];[PMS#hum];0&quot;&#125;&#x27;“这一段是mqtt发送温湿度，请自行更改topic和payload，并将此句说明删除”</span></span><br><span class="line">SerialSend DS16(<span class="number">214</span>,<span class="number">104</span>,<span class="comment">&#x27;indoor: [PMS#temp]/[PMS#hum]%   &#x27;,15,0);</span></span><br><span class="line">Delay <span class="number">20</span></span><br><span class="line">SerialSend DS16(<span class="number">214</span>,<span class="number">120</span>,<span class="comment">&#x27;pm2.5: [PMS#pm2.5]ug/m3   &#x27;,18,0);</span></span><br><span class="line">Delay <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> [PMS#pm10] &gt; <span class="number">50</span></span><br><span class="line">timerSet,<span class="number">2</span>,<span class="number">30</span></span><br><span class="line">endif</span><br><span class="line">endon</span><br><span class="line"></span><br><span class="line"><span class="keyword">On</span> Rules#Timer=<span class="number">2</span> <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [PMS#pm10] &gt; <span class="number">35</span></span><br><span class="line">GPIO,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">timerSet,<span class="number">1</span>,<span class="number">60</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">GPIO,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">timerSet,<span class="number">1</span>,<span class="number">120</span></span><br><span class="line">endif</span><br><span class="line">endon</span><br></pre></td></tr></table></figure><ul><li>PMS5003S系列传感器实物图</li></ul><p><img src="/2024/10/27/air-station/pm.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/pm.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>co2 二氧化碳传感器 Sense air s8</li></ul><blockquote><p>氧化碳传感器的工作原理是非色散红外：测量被红外传感器吸收的红外光，来判断被测二氧化碳的浓度，再通过数字模拟，仪器仪表就能够计算出被测气体的浓度。<br><img src="/2024/10/27/air-station/co2.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/co2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p></blockquote><ul><li>光线传感器 BH1750</li></ul><p><img src="/2024/10/27/air-station/gx.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/gx.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><blockquote><p>temp,co2（温度  二氧化碳）数据获取与转发</p></blockquote><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">on</span> MQTTCODE#PCODE <span class="keyword">do</span></span><br><span class="line"><span class="keyword">If</span> %systime% &gt; <span class="number">07</span>:<span class="number">00</span>:<span class="number">00</span> <span class="built_in">and</span>  %systime% &lt; <span class="number">21</span>:<span class="number">00</span>:<span class="number">00</span> </span><br><span class="line">SerialSend SEBL(<span class="number">100</span>);</span><br><span class="line">Delay <span class="number">20</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">SerialSend SEBL(<span class="number">5</span>);</span><br><span class="line">Endif</span><br><span class="line">SerialSend BPIC(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,[MQTTNOW#CODE]);</span><br><span class="line">Delay <span class="number">20</span></span><br><span class="line">SerialSend DS64(<span class="number">210</span>,<span class="number">45</span>,<span class="comment">&#x27;[MQTTNOW#NOW]/[MQTTNOW#TEMPFL]   &#x27;,15,0);</span></span><br><span class="line">Delay <span class="number">20</span></span><br><span class="line">SerialSend DS16(<span class="number">214</span>,<span class="number">104</span>,<span class="comment">&#x27;indoor: [PMS#temp]/[PMS#hum]%&#x27;,15,0);</span></span><br><span class="line">Delay <span class="number">20</span></span><br><span class="line">SerialSend DS16(<span class="number">214</span>,<span class="number">120</span>,<span class="comment">&#x27;pm2.5: [PMS#pm2.5]ug/m3   &#x27;,18,0);</span></span><br><span class="line">Delay <span class="number">20</span></span><br><span class="line">SerialSend DS16(<span class="number">214</span>,<span class="number">136</span>,<span class="comment">&#x27;co2: [CO2#ppm] ppm   &#x27;,16,0);</span></span><br><span class="line">Delay <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> [MQTTCODE#PCODE] = <span class="number">1</span></span><br><span class="line">SerialSend DS16(<span class="number">214</span>,<span class="number">153</span>,<span class="comment">&#x27;aqi: [MQTTAQI#AQI](PM2.5)  &#x27;,15,0);</span></span><br><span class="line">endif</span><br><span class="line"><span class="keyword">if</span> [MQTTCODE#PCODE] = <span class="number">2</span></span><br><span class="line">SerialSend DS16(<span class="number">214</span>,<span class="number">153</span>,<span class="comment">&#x27;aqi: [MQTTAQI#AQI](PM10)  &#x27;,15,0);</span></span><br><span class="line">endif</span><br><span class="line"><span class="keyword">if</span> [MQTTCODE#PCODE] = <span class="number">3</span></span><br><span class="line">SerialSend DS16(<span class="number">214</span>,<span class="number">153</span>,<span class="comment">&#x27;aqi: [MQTTAQI#AQI](O3)  &#x27;,15,0);</span></span><br><span class="line">endif</span><br><span class="line"><span class="keyword">if</span> [MQTTCODE#PCODE] = <span class="number">4</span></span><br><span class="line">SerialSend DS16(<span class="number">214</span>,<span class="number">153</span>,<span class="comment">&#x27;aqi: [MQTTAQI#AQI](CO)  &#x27;,15,0);</span></span><br><span class="line">endif</span><br><span class="line"><span class="keyword">if</span> [MQTTCODE#PCODE] = <span class="number">5</span></span><br><span class="line">SerialSend DS16(<span class="number">214</span>,<span class="number">153</span>,<span class="comment">&#x27;aqi: [MQTTAQI#AQI](SO2)  &#x27;,15,0);</span></span><br><span class="line">endif</span><br><span class="line"><span class="keyword">if</span> [MQTTCODE#PCODE] = <span class="number">6</span></span><br><span class="line">SerialSend DS16(<span class="number">214</span>,<span class="number">153</span>,<span class="comment">&#x27;aqi: [MQTTAQI#AQI](NO2)  &#x27;,15,0);</span></span><br><span class="line">endif</span><br><span class="line">Delay <span class="number">20</span></span><br><span class="line">SerialSend BPIC(<span class="number">1</span>,<span class="number">340</span>,<span class="number">52</span>,<span class="number">35</span>);</span><br><span class="line">Delay <span class="number">20</span></span><br><span class="line">SerialSend DS24(<span class="number">20</span>,<span class="number">204</span>,<span class="comment">&#x27;%syshour_0%:%sysmin_0%  &#x27;,15,0);;</span></span><br><span class="line">Delay <span class="number">20</span></span><br><span class="line">SerialSend BPIC(<span class="number">1</span>,<span class="number">207</span>,<span class="number">200</span>,[MQTTCODE#FCODE]);</span><br><span class="line">Delay <span class="number">20</span></span><br><span class="line">SerialSend DS24(<span class="number">239</span>,<span class="number">204</span>,<span class="comment">&#x27;[MQTTTEMP#HIGH]/[MQTTTEMP#LOW]  &#x27;,15,0);</span></span><br><span class="line">Delay <span class="number">20</span></span><br><span class="line">SerialSend BPIC(<span class="number">1</span>,<span class="number">300</span>,<span class="number">200</span>,[MQTTCODE#TCODE]);</span><br><span class="line">Delay <span class="number">20</span></span><br><span class="line">SerialSend DS24(<span class="number">332</span>,<span class="number">204</span>,<span class="comment">&#x27;[MQTTTEMP#THIGH]/[MQTTTEMP#TLOW]  &#x27;,15,0);</span></span><br><span class="line">Delay <span class="number">20</span></span><br><span class="line">endon</span><br><span class="line"></span><br><span class="line"><span class="keyword">on</span> CO2#ppm <span class="keyword">do</span></span><br><span class="line">Publish domoticzc/<span class="keyword">in</span>,<span class="comment">&#x27;&#123;&quot;idx&quot;:25,&quot;nvalue&quot;:[CO2#ppm]&#125;&#x27;“这一段是mqtt发送CO2数值，请自行更改topic和payload，并将此句说明删除”</span></span><br><span class="line">SerialSend DS16(<span class="number">214</span>,<span class="number">136</span>,<span class="comment">&#x27;co2: [CO2#ppm] ppm&#x27;,16,0);</span></span><br><span class="line">Delay <span class="number">20</span></span><br><span class="line">endon</span><br><span class="line"></span><br><span class="line"><span class="keyword">on</span> Clock#Time=All,**:** <span class="keyword">do</span></span><br><span class="line">SerialSend DS24(<span class="number">20</span>,<span class="number">204</span>,<span class="comment">&#x27;%syshour_0%:%sysmin_0%  &#x27;,15,0);;</span></span><br><span class="line">endon</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>显示屏UsartGPU26B</li></ul><p><img src="/2024/10/27/air-station/xs.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/xs.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="硬件连接">硬件连接</h2><blockquote><p>如图</p></blockquote><p><img src="/2024/10/27/air-station/air.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/air.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="连接前数据线改装">连接前数据线改装</h3><blockquote><p>我们需要改装一个一转六的杜邦线来供使用，由于各个传感器之间所需要的工作电压也不尽相同，包含5v和3.3的工作电压，因而还需要制作两根一转4的杜邦线以供使用，而光线传感器和温湿度传感器，考虑到它们是I2C的接口，可以用并联的方式连接，便还需要2根1转2的杜邦线，其余需要准备若干单根的杜邦线去单独连接开关，二氧化碳传感器，屏幕</p></blockquote><p><img src="/2024/10/27/air-station/line.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/line.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="屏幕程序写入">屏幕程序写入</h3><blockquote><p>串口屏幕的VCC接口接USB -TTL的5V，两者的GND接GND，形成回路，工具的RX接收端口接屏幕的TX发送端口，工具的发送TX端口接屏幕的RX接受端口</p></blockquote><blockquote><p>在控制面板中找到电脑端口，选择端口为USB-TTL的端口，鼠标右键点击，将波特率设置为115200</p></blockquote><blockquote><p>下载GpuMaker，打开首页，使用串口命令将我们所需要开机屏幕欢迎界面信息，时间显示信息，温湿度显示信息，PM2.5，PM10，以及二氧化碳界面显示信息导入。</p></blockquote><ul><li>举例</li></ul><p><img src="/2024/10/27/air-station/sc.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/sc.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="线路连接">线路连接</h3><blockquote><p>以DI mini为连接起点，用改装的一转六杜邦线连接所有其他设备的GN，我们需拿出一根一转四的杜邦线，杜邦线的其中一头连接D1 mini的5v，另外几头分别连接颗粒物传感器，二氧化碳传感器及串口屏幕的VCC端，保证有足够的电压输入给我们的设备</p></blockquote><blockquote><p>使用一根一转四的杜邦线连接D1 mini的3.3v端，其余线口分别去连接开关，光线传感器，温湿度传感器等额定电压为3.3v的传感器</p></blockquote><p><img src="/2024/10/27/air-station/scene.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/scene.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><blockquote><p>使用两根一转二的杜邦线使温湿度传感器的SDA与光线传感器的SDA相连，SCL与SCL相连，其中SDA表示数据传送线，SCL表示数据数据控制线，</p></blockquote><blockquote><p>D1 mini的D6端，需要用单线去连接颗粒物传感器的TXD控制线，二氧化碳传感器的UART OX/OT 端接MCU的D3、D4端.开关的output接DI mini的D5端</p></blockquote><p><img src="/2024/10/27/air-station/d1.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/d1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="D1-mini-esp32-测试-页面配置">D1 mini(esp32) 测试 页面配置</h3><blockquote><p>将D1 mini与电脑连接,去GitHub下载ESPEASY固件，点开文件夹运行FlashESP.exe，在设备管理器中选择D1 mini端口号，选择test_ESP8266_4096.bin的即可</p></blockquote><blockquote><p>移植之后翻看板子背面，轻按下reset使MCU重启，然后最好通过电脑搜索WIFI，之后就能搜索到一个名为ESP-Easy_0的WIFI。WIFI连接密码为configure，连入后会在页面看到此时你电脑所监测到的所有WiFi网络名称</p></blockquote><blockquote><p>找到你自己的WiFi网络，点击连接，网站会提醒你需要等待20秒，之后会告知IP的地址，浏览器中输入这个IP地址，等待数秒之后就能进入ESPEASY的配置页面，出现IP地址即表示配置成功</p></blockquote><p><img src="/2024/10/27/air-station/conf.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/conf.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="硬件配置">硬件配置</h2><h3 id="web-检测物配置">web 检测物配置</h3><ul><li>打开D1 mini，进入ESPEASY的网络配置界面，找到tools界面，配置各项功能：</li></ul><blockquote><p>其中rules的勾选是为了给按键设置切换规则及延迟时间，勾选NTP可以自动达成网络时间同步协议</p></blockquote><p><img src="/2024/10/27/air-station/airconf.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/airconf.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>检测值</li></ul><blockquote><p>以二氧化碳传感器为例，在Device处选择好设备型号，Name处填写好设备名称，点击Enabled添加后，一定注意端口的设置与设备连接时对应，由于与D1 mini模块连接时二氧化碳连接5v电压，为保证设备正常运行，需要连接上拉电阻引脚。因此此处 GPIO处选择D3,D4，Sensor处选择二氧化碳Carbon Dioxide，检测刷新时间定为60秒，而后将输出单位设置为PPM。</p></blockquote><p><img src="/2024/10/27/air-station/co2c.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/co2c.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="命令配置">命令配置</h3><blockquote><p>当所有设备添加设置完毕后，点击Rules选项，如图所示，设置按钮响应，其中delay指令代表延迟，on Button#Switch=1 do 这一行表示，当开关的状态为开时，执行do之后的 if逻辑命令，其中命令SPG表示显示第几界面，具体情况看数据显示，CIR（156，120，119，[Dummy#cc]）命令表示在屏幕中坐标为（156，120）的位置用#cc的颜色画一个半径为180的圆形。BOXF命令可以在屏幕上呈现一个方框，而DS64（98，65，‘[PMS#pm10]’，15）命令表示在（98，65）坐标处用15号颜色显示颗粒物传感器中PM10的数据。</p></blockquote><p><img src="/2024/10/27/air-station/w.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/w.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="效果">效果</h3><p><img src="/2024/10/27/air-station/air_value.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/air_value.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="最终效果">最终效果</h2><h3 id="如图">如图</h3><p><img src="/2024/10/27/air-station/re.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/re.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><img src="/2024/10/27/air-station/re2.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/re2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><img src="/2024/10/27/air-station/re3.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/re3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><img src="/2024/10/27/air-station/re4.png" class="lazyload placeholder" data-srcset="/2024/10/27/air-station/re4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><!-- ![img](ohos-pixiv-image/log.png) --><h2 id="See">See</h2><ul><li>1.<a href="https://post.smzdm.com/p/768952/">https://post.smzdm.com/p/768952/</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> esp32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ESP32-CAM的智能猫眼实现</title>
      <link href="/2024/10/27/cat-camera/"/>
      <url>/2024/10/27/cat-camera/</url>
      
        <content type="html"><![CDATA[<h1>基于ESP32-CAM的智能猫眼实现</h1><h2 id="简介">简介</h2><ul><li>项目简介</li></ul><blockquote><p>用python和Tensor Flow进行人脸识别，通过语音识别模块进行语音识别</p></blockquote><p><img src="/2024/10/27/cat-camera/my.png" class="lazyload placeholder" data-srcset="/2024/10/27/cat-camera/my.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>硬件简介</li></ul><p><img src="/2024/10/27/cat-camera/esp32.png" class="lazyload placeholder" data-srcset="/2024/10/27/cat-camera/esp32.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><blockquote><p>如图，模块包含一块ESP32-CAM的MCU和一个OV2640的200W像素摄像头，ESP32-CAM除了支持OV2640外还支持OV7670摄像头</p></blockquote><p><img src="/2024/10/27/cat-camera/esp32cam.png" class="lazyload placeholder" data-srcset="/2024/10/27/cat-camera/esp32cam.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>硬件结构</li></ul><p><img src="/2024/10/27/cat-camera/esps.png" class="lazyload placeholder" data-srcset="/2024/10/27/cat-camera/esps.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><blockquote><p>针脚定义</p></blockquote><p><img src="/2024/10/27/cat-camera/esppin.png" class="lazyload placeholder" data-srcset="/2024/10/27/cat-camera/esppin.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><blockquote><p>如何烧录程序，使用以下方式</p></blockquote><p><img src="/2024/10/27/cat-camera/espwri.png" class="lazyload placeholder" data-srcset="/2024/10/27/cat-camera/espwri.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>最终效果</li></ul><p><img src="/2024/10/27/cat-camera/espend.png" class="lazyload placeholder" data-srcset="/2024/10/27/cat-camera/espend.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="技术">技术</h2><ul><li><p>esp32</p></li><li><p>http</p></li><li><p>html</p></li><li><p>pyqt5</p></li><li><p>opencv</p></li><li><p>mysql</p></li><li><p>ov2640</p></li><li><p>ardunio IDE and PyCharm IDE</p></li><li><p>云服务（巴法云）</p></li><li><p>ubuntu</p></li><li><p>other（python第三方库）</p></li></ul><h2 id="程序写入方式">程序写入方式</h2><h3 id="ardunio-IDE设置">ardunio IDE设置</h3><blockquote><p>设置方式如下</p></blockquote><p><img src="/2024/10/27/cat-camera/espdeconfig.png" class="lazyload placeholder" data-srcset="/2024/10/27/cat-camera/espdeconfig.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><blockquote><p>添加芯片驱动支持：在附加开发板管理器网址里填上：<a href="https://dl.espressif.com/dl/package_esp32_index.json">https://dl.espressif.com/dl/package_esp32_index.json</a> 然后单击好</p></blockquote><p><img src="/2024/10/27/cat-camera/conf.png" class="lazyload placeholder" data-srcset="/2024/10/27/cat-camera/conf.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><blockquote><p>开发板管理</p></blockquote><p><img src="/2024/10/27/cat-camera/hac.png" class="lazyload placeholder" data-srcset="/2024/10/27/cat-camera/hac.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><blockquote><p>代码下载 (<a href="https://github.com/RuiSantosdotme/arduino-esp32-CameraWebServer">https://github.com/RuiSantosdotme/arduino-esp32-CameraWebServer</a>)</p></blockquote><p><img src="/2024/10/27/cat-camera/codedwoanlod.png" class="lazyload placeholder" data-srcset="/2024/10/27/cat-camera/codedwoanlod.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><blockquote><p>基础配置</p></blockquote><p><img src="/2024/10/27/cat-camera/ideconfigf.png" class="lazyload placeholder" data-srcset="/2024/10/27/cat-camera/ideconfigf.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="ESP32-CAM-内置接口">ESP32-CAM 内置接口</h2><h3 id="接口定义">接口定义</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">ip            端口后缀方式响应说明</span><br><span class="line"><span class="number">192.168</span><span class="number">.2</span><span class="number">.151</span><span class="number">80</span>/statusget<span class="punctuation">&#123;</span><span class="punctuation">&#123;</span></span><br><span class="line">            /controlget    <span class="attr">&quot;framesize&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span>    <span class="attr">&quot;framesize&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">81</span>/streamget    <span class="attr">&quot;quality&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span>视频流  <span class="comment">//  &quot;quality&quot;: 10,</span></span><br><span class="line">            /captureget    <span class="attr">&quot;brightness&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>图像流    <span class="attr">&quot;brightness&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            /get    <span class="attr">&quot;contrast&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>主页    <span class="comment">//&quot;contrast&quot;: 0, //对比度</span></span><br><span class="line">                        <span class="attr">&quot;saturation&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">//   &quot;saturation&quot;: 0,//饱和度</span></span><br><span class="line">                        <span class="attr">&quot;special_effect&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>    <span class="attr">&quot;special_effect&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//特殊效果</span></span><br><span class="line">                        <span class="attr">&quot;wb_mode&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//    &quot;wb_mode&quot;: 0,//模式</span></span><br><span class="line">                        <span class="attr">&quot;awb&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>  <span class="comment">//  &quot;awb&quot;: 1,//自动白平衡</span></span><br><span class="line">                        <span class="attr">&quot;awb_gain&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//    &quot;awb_gain&quot;: 1,//自动白平衡增益</span></span><br><span class="line">                        <span class="attr">&quot;aec&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="comment">//   &quot;aec&quot;: 1,//回声消除</span></span><br><span class="line">                        <span class="attr">&quot;aec2&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">//   &quot;aec2&quot;: 0,//</span></span><br><span class="line">                        <span class="attr">&quot;ae_level&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">//   &quot;ae_level&quot;: 0,//ae 等级</span></span><br><span class="line">                        <span class="attr">&quot;aec_value&quot;</span><span class="punctuation">:</span> <span class="number">168</span><span class="punctuation">,</span>    <span class="attr">&quot;aec_value&quot;</span><span class="punctuation">:</span> <span class="number">168</span><span class="punctuation">,</span><span class="comment">//回声消除数值</span></span><br><span class="line">                        <span class="attr">&quot;agc&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>  <span class="comment">//  &quot;agc&quot;: 1,//自动增益控制</span></span><br><span class="line">                        <span class="attr">&quot;agc_gain&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">//   &quot;agc_gain&quot;: 0,//自动控制增益 增益</span></span><br><span class="line">                        <span class="attr">&quot;gainceiling&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>    <span class="attr">&quot;gainceiling&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//增益上限</span></span><br><span class="line">                        <span class="attr">&quot;bpc&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>   <span class="comment">// &quot;bpc&quot;: 0,//贝叶斯预测补偿</span></span><br><span class="line">                        <span class="attr">&quot;wpc&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>   <span class="comment">// &quot;wpc&quot;: 1,//瓦特脉冲通信</span></span><br><span class="line">                        <span class="attr">&quot;raw_gma&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//    &quot;raw_gma&quot;: 1,//raw生成</span></span><br><span class="line">                        <span class="attr">&quot;lenc&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>  <span class="comment">//  &quot;lenc&quot;: 1,//镜头校正</span></span><br><span class="line">                        <span class="attr">&quot;vflip&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>  <span class="comment">//  &quot;vflip&quot;: 0,//垂直旋转</span></span><br><span class="line">                        <span class="attr">&quot;hmirror&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//    &quot;hmirror&quot;: 0,//水平镜像</span></span><br><span class="line">                        <span class="attr">&quot;dcw&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>   <span class="comment">// &quot;dcw&quot;: 1,//</span></span><br><span class="line">                        <span class="attr">&quot;colorbar&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//    &quot;colorbar&quot;: 0,//色条</span></span><br><span class="line">                        <span class="attr">&quot;face_detect&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>    <span class="attr">&quot;face_detect&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//人脸注册</span></span><br><span class="line">                        <span class="attr">&quot;face_enroll&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>    <span class="attr">&quot;face_enroll&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//人脸注册</span></span><br><span class="line">                        <span class="attr">&quot;face_recognize&quot;</span><span class="punctuation">:</span> <span class="number">0</span>    <span class="attr">&quot;face_recognize&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="comment">//人脸识别</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">                                  </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="http接口">http接口</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">参数方法含义位置类型ra</span><br><span class="line">ra_filter_t使用的过滤值37-43结构体显色指数</span><br><span class="line">jpg_chunking_t45-58结构体</span><br><span class="line">face_id_list人脸识别列表63数组</span><br><span class="line">ra_filter_initra过滤方法初始化65方法</span><br><span class="line">ra_filter_runra过滤方法运行78方法</span><br><span class="line">rgb_printRGB输出93方法</span><br><span class="line">rgb_printfRGB格式化输出103方法</span><br><span class="line">draw_face_boxes绘制识别框128方法</span><br><span class="line">run_face_recognition运行脸部识别程序164方法</span><br><span class="line">jpg_encode_streamJPG解码206方法</span><br><span class="line">capture_handler绘图线程218方法</span><br><span class="line">stream_handler数据流线程303方法</span><br><span class="line">cmd_handler控制线程453方法</span><br><span class="line">status_handler状态线程540方法</span><br><span class="line">index_handler主页581方法</span><br><span class="line">startCameraServer启动照相机服务578方法</span><br><span class="line">                                                </span><br><span class="line">                                                </span><br><span class="line">                                                </span><br><span class="line">                                                </span><br><span class="line">1234</span><br><span class="line">startCameraServerra_filter_initface_id_inithttpd_register_uri_handler</span><br><span class="line">                                                </span><br><span class="line">1index handlerindex handler/get</span><br><span class="line">                                                </span><br><span class="line">3status handlerstatus handler/statusgetesp_camera_sensor_gethttpd_resp_sendjson data</span><br><span class="line">                                                </span><br><span class="line">2cmd handlercmd handler/controlget</span><br><span class="line">    192.168.2.151</span><br><span class="line"></span><br><span class="line">4capture handlercapture handler/captureget</span><br><span class="line">                                                </span><br><span class="line">5stream handlerstream handler/streamgetface_detectrun_face_recognition</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="程序设计">程序设计</h2><h3 id="流程设计">流程设计</h3><blockquote><p>功能流程</p></blockquote><p><img src="/2024/10/27/cat-camera/st.png" class="lazyload placeholder" data-srcset="/2024/10/27/cat-camera/st.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="主要功能">主要功能</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.通过语音识别访客身份</span><br><span class="line">2.通过人脸识别访问者</span><br><span class="line">3.通过摄像进行移动侦测</span><br><span class="line">4.入侵者报警</span><br><span class="line">5.录像、拍照数据保存（云存储）</span><br><span class="line">6.访客近距离侦测后亮灯</span><br><span class="line">7.通话变声</span><br><span class="line">8.视频通话</span><br><span class="line">9.WIFI+4G联网</span><br><span class="line">10.连接小度智能助手</span><br></pre></td></tr></table></figure><h2 id="功能实现">功能实现</h2><h3 id="人脸识别">人脸识别</h3><blockquote><p>脸部信息对比</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># # -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测人脸</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_face</span>(<span class="params">img</span>):</span><br><span class="line">    <span class="comment">#将测试图像转换为灰度图像，因为opencv人脸检测器需要灰度图像</span></span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="comment">#加载OpenCV人脸检测分类器Haar</span></span><br><span class="line">    face_cascade = cv2.CascadeClassifier(<span class="string">&#x27;C:/Users/Administrator/Downloads/opencv-python-4.4.0.40/opencv-python-4.4.0.40/opencv/data/haarcascades_cuda/haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line">    <span class="comment">#检测多尺度图像，返回值是一张脸部区域信息的列表（x,y,宽,高）</span></span><br><span class="line">    faces = face_cascade.detectMultiScale(gray, scaleFactor=<span class="number">1.2</span>, minNeighbors=<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 如果未检测到面部，则返回原始图像</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(faces) == <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;error！ 未检测到面部图像&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="comment">#目前假设只有一张脸，xy为左上角坐标，wh为矩形的宽高</span></span><br><span class="line">    (x, y, w, h) = faces[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#返回图像的正面部分</span></span><br><span class="line">    <span class="keyword">return</span> gray[y:y + w, x:x + h], faces[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该函数将读取所有的训练图像，从每个图像检测人脸并将返回两个相同大小的列表，分别为脸部信息和标签</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prepare_training_data</span>(<span class="params">data_folder_path</span>):</span><br><span class="line">    <span class="comment"># 获取数据文件夹中的目录（每个主题的一个目录）</span></span><br><span class="line">    dirs = os.listdir(data_folder_path)</span><br><span class="line">    <span class="comment"># 两个列表分别保存所有的脸部和标签</span></span><br><span class="line">    faces = []</span><br><span class="line">    labels = []</span><br><span class="line">    <span class="comment"># 浏览每个目录并访问其中的图像</span></span><br><span class="line">    <span class="keyword">for</span> dir_name <span class="keyword">in</span> dirs:</span><br><span class="line">        <span class="comment"># dir_name(str类型)即标签</span></span><br><span class="line">        label = <span class="built_in">int</span>(dir_name)</span><br><span class="line">        <span class="comment"># 建立包含当前主题主题图像的目录路径</span></span><br><span class="line">        subject_dir_path = data_folder_path + <span class="string">&quot;/&quot;</span> + dir_name</span><br><span class="line">        <span class="comment"># 获取给定主题目录内的图像名称</span></span><br><span class="line">        subject_images_names = os.listdir(subject_dir_path)</span><br><span class="line">        <span class="comment"># 浏览每张图片并检测脸部，然后将脸部信息添加到脸部列表faces[]</span></span><br><span class="line">    <span class="keyword">for</span> image_name <span class="keyword">in</span> subject_images_names:</span><br><span class="line">        <span class="comment"># 建立图像路径</span></span><br><span class="line">        image_path = subject_dir_path + <span class="string">&quot;/&quot;</span> + image_name</span><br><span class="line">        <span class="comment"># 读取图像</span></span><br><span class="line">        image = cv2.imread(image_path)</span><br><span class="line">        <span class="comment"># 显示图像0.1s</span></span><br><span class="line">        cv2.imshow(<span class="string">&quot;Training on image...&quot;</span>, image)</span><br><span class="line">        cv2.waitKey(<span class="number">100</span>)</span><br><span class="line">        <span class="comment"># 检测脸部</span></span><br><span class="line">        face, rect = detect_face(image)</span><br><span class="line">        <span class="comment"># 我们忽略未检测到的脸部</span></span><br><span class="line">    <span class="keyword">if</span> face <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment">#将脸添加到脸部列表并添加相应的标签</span></span><br><span class="line">        faces.append(face)</span><br><span class="line">        labels.append(label)</span><br><span class="line">        cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">        cv2.destroyAllWindows()</span><br><span class="line">        <span class="comment">#最终返回值为人脸和标签列表</span></span><br><span class="line">        <span class="keyword">return</span> faces, labels</span><br><span class="line">    <span class="comment">#调用prepare_training_data（）函数</span></span><br><span class="line">    faces, labels = prepare_training_data(<span class="string">&quot;training_data&quot;</span>)</span><br><span class="line">    <span class="comment">#创建LBPH识别器并开始训练，当然也可以选择Eigen或者Fisher识别器</span></span><br><span class="line">    face_recognizer = cv2.face.LBPHFaceRecognizer_create()</span><br><span class="line">    face_recognizer.train(faces, np.array(labels))</span><br><span class="line"><span class="comment">#根据给定的（x，y）坐标和宽度高度在图像上绘制矩形</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_rectangle</span>(<span class="params">img, rect</span>):</span><br><span class="line">    (x, y, w, h) = rect</span><br><span class="line">    cv2.rectangle(img, (x, y), (x + w, y + h), (<span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 根据给定的（x，y）坐标标识出人名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_text</span>(<span class="params">img, text, x, y</span>):</span><br><span class="line">    cv2.putText(img, text, (x, y), cv2.FONT_HERSHEY_COMPLEX, <span class="number">1</span>, (<span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">    <span class="comment">#建立标签与人名的映射列表（标签只能为整数）</span></span><br><span class="line">    subjects = [<span class="string">&quot;czq&quot;</span>, <span class="string">&quot;other&quot;</span>]</span><br><span class="line">    <span class="comment"># 此函数识别传递的图像中的人物并在检测到的脸部周围绘制一个矩形及其名称</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">test_img</span>):</span><br><span class="line">    <span class="comment">#生成图像的副本，这样就能保留原始图像</span></span><br><span class="line">    img = test_img.copy()</span><br><span class="line">    <span class="comment">#检测人脸</span></span><br><span class="line">    face, rect = detect_face(img)</span><br><span class="line">    <span class="comment">#预测人脸</span></span><br><span class="line">    label = predict(face)</span><br><span class="line">    <span class="comment"># 获取由人脸识别器返回的相应标签的名称</span></span><br><span class="line">    label_text = subjects[label[<span class="number">0</span>]]</span><br><span class="line">    <span class="comment"># 在检测到的脸部周围画一个矩形</span></span><br><span class="line">    draw_rectangle(img, rect)</span><br><span class="line">    <span class="comment"># 标出预测的名字</span></span><br><span class="line">    draw_text(img, label_text, rect[<span class="number">0</span>], rect[<span class="number">1</span>] - <span class="number">5</span>)</span><br><span class="line">    <span class="comment">#返回预测的图像</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"><span class="comment">#加载测试图像</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_img1 = cv2.imread(<span class="string">&quot;../images/face_img/face9.png&quot;</span>)</span><br><span class="line">test_img2 = cv2.imread(<span class="string">&quot;../images/face_img/face1.png&quot;</span>)</span><br><span class="line"><span class="comment">#执行预测</span></span><br><span class="line">predicted_img1 = predict(test_img1)</span><br><span class="line">predicted_img2 = predict(test_img2)</span><br><span class="line"><span class="comment">#显示两个图像</span></span><br><span class="line">cv2.imshow(subjects[<span class="number">0</span>], predicted_img1)</span><br><span class="line">cv2.imshow(subjects[<span class="number">1</span>], predicted_img2)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h4 id="串口数据获取">串口数据获取</h4><blockquote><p>数据流获取</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># /usr/bin/env/python3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;use opencv3 to capture video frame, show and save its stream.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream_processing</span>():</span><br><span class="line">    <span class="comment"># 获取VideoCapture类实例，读取视频文件</span></span><br><span class="line">    fcap = cv2.VideoCapture(<span class="string">&#x27;http://192.168.1.104:81/stream&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置摄像头分辨率的高</span></span><br><span class="line">    fcap.<span class="built_in">set</span>(cv2.CAP_PROP_FRAME_HEIGHT, <span class="number">1080</span>)</span><br><span class="line">    <span class="comment"># 设置摄像头分辨率的宽</span></span><br><span class="line">    fcap.<span class="built_in">set</span>(cv2.CAP_PROP_FRAME_WIDTH, <span class="number">1920</span>)</span><br><span class="line">    <span class="comment"># 跳到某一感兴趣帧并从此帧开始读取,如从第360帧开始读取</span></span><br><span class="line">    fcap.<span class="built_in">set</span>(cv2.CAP_PROP_POS_FRAMES, <span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取视频帧的宽</span></span><br><span class="line">    w = fcap.get(cv2.CAP_PROP_FRAME_WIDTH)</span><br><span class="line">    <span class="comment"># 获取视频帧的高</span></span><br><span class="line">    h = fcap.get(cv2.CAP_PROP_FRAME_HEIGHT)</span><br><span class="line">    <span class="comment"># 获取视频帧的帧率</span></span><br><span class="line">    fps = fcap.get(cv2.CAP_PROP_FPS)</span><br><span class="line">    <span class="comment"># 获取视频流的总帧数</span></span><br><span class="line">    fcount = fcap.get(cv2.CAP_PROP_FRAME_COUNT)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取VideoWriter类实例</span></span><br><span class="line">    writer = cv2.VideoWriter(<span class="string">&#x27;http://192.168.1.104:81/stream&#x27;</span>, cv2.VideoWriter_fourcc(<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;D&#x27;</span>), <span class="built_in">int</span>(fps), (<span class="built_in">int</span>(w), <span class="built_in">int</span>(h)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否正确获取VideoCapture类实例</span></span><br><span class="line">    <span class="keyword">while</span> fcap.isOpened():</span><br><span class="line">        <span class="comment"># 获取帧画面</span></span><br><span class="line">        success, frame = fcap.read()</span><br><span class="line">        <span class="keyword">while</span> success:</span><br><span class="line">            cv2.imshow(<span class="string">&quot;demo&quot;</span>, frame)  <span class="comment">## 显示画面</span></span><br><span class="line">            <span class="comment"># 获取帧画面</span></span><br><span class="line">            success, frame = fcap.read()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 保存帧数据</span></span><br><span class="line">            writer.write(frame)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cv2.waitKey(<span class="number">20</span>) &amp; <span class="number">0xff</span>) == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):  <span class="comment">## 等待20ms并判断是按“q”退出，相当于帧率是50hz，注意waitKey只能传入整数，</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 释放VideoCapture资源</span></span><br><span class="line">        fcap.release()</span><br><span class="line">    <span class="comment"># 释放VideoWriter资源</span></span><br><span class="line">    writer.release()</span><br><span class="line">    cv2.destroyAllWindows()  <span class="comment">## 销毁所有opencv显示窗口</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    stream_processing()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>视频生成c存储</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line">import cv2</span><br><span class="line">from cv2 import VideoWriter, VideoWriter_fourcc, imread, resize</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">import readSql</span><br><span class="line">import datetime</span><br><span class="line"><span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@theme 视频存储处理</span></span><br><span class="line"><span class="string">@author czq</span></span><br><span class="line"><span class="string">@date 2021 01 12</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def pic_save_video():</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    图片转视频</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    img_root = <span class="string">&quot;E:/czq/personFile/catCamera/src/server/data/video_img/&quot;</span></span><br><span class="line">    <span class="comment"># Edit each frame&#x27;s appearing time! E:\czq\personFile\catCamera\src\server\data\video_img src\server\data\video_img</span></span><br><span class="line">    fps = 5</span><br><span class="line">    <span class="comment"># fourcc=VideoWriter_fourcc(*&quot;MJPG&quot;)</span></span><br><span class="line">    <span class="comment"># videoWriter=cv2.VideoWriter(&quot;./Vid.avi&quot;,fourcc,fps,(720,720))</span></span><br><span class="line">    localtime = datetime.datetime.now()</span><br><span class="line">    <span class="built_in">date</span> = str(localtime.year) + <span class="string">&quot; &quot;</span> + str(localtime.month) + <span class="string">&quot; &quot;</span> + str(localtime.day)</span><br><span class="line">    <span class="built_in">times</span> = str(localtime.hour) + <span class="string">&quot;:&quot;</span> + str(localtime.minute) + <span class="string">&quot;:&quot;</span> + str(localtime.minute)</span><br><span class="line">    video_src = <span class="string">&#x27;E:/czq/personFile/catCamera/src/server/data/video/catEye&#x27;</span> + <span class="built_in">date</span> +<span class="string">&#x27;.avi&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(video_src)</span><br><span class="line">    videoWriter = cv2.VideoWriter(video_src, cv2.VideoWriter_fourcc(<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;G&#x27;</span>), fps, (720, 720))</span><br><span class="line">    im_names = os.listdir(img_root)</span><br><span class="line">    <span class="comment"># for im_name in range(len(im_names)):</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> im_names:</span><br><span class="line">        <span class="comment"># frame=cv2.imread(img_root+str(im_name)+&#x27;.jpg&#x27;)</span></span><br><span class="line">        imgname = <span class="string">&quot;E:/czq/personFile/catCamera/src/server/data/video_img/&quot;</span> + filename</span><br><span class="line">        frame = cv2.imread(imgname)</span><br><span class="line">        try:</span><br><span class="line">            frame = cv2.resize(frame, (720, 720))</span><br><span class="line">            cv2.imshow(<span class="string">&quot;猫眼视频(catEye video)&quot;</span>, frame)</span><br><span class="line">        except cv2.error as ce:</span><br><span class="line">            <span class="built_in">print</span>(ce)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;cv2.error 图片旋转错误&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(imgname)</span><br><span class="line"></span><br><span class="line">        time.sleep(0.02)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;saving video .....&#x27;</span>)</span><br><span class="line">        videoWriter.write(frame)</span><br><span class="line">        cv2.waitKey(1)</span><br><span class="line">    videoWriter.release()</span><br><span class="line">    readSql.catchVideo(video_src, <span class="string">&#x27;catEye01&#x27;</span> + <span class="built_in">date</span> + <span class="built_in">times</span>, 1000)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;saving video .....successful ,please close frame&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pic_save_video()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="人脸识别-2">人脸识别</h4><blockquote><p>移动侦测</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dlib  <span class="comment"># 人脸识别的库dlib</span></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 数据处理的库numpy</span></span><br><span class="line"><span class="keyword">import</span> cv2  <span class="comment"># 图像处理的库OpenCv</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  <span class="comment"># 数据处理的库Pandas</span></span><br><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> _thread</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Sub_Client</span><br><span class="line"><span class="keyword">import</span> readSql</span><br><span class="line"><span class="keyword">import</span> win32api,win32con</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">移动侦测 </span></span><br><span class="line"><span class="string">@author czq</span></span><br><span class="line"><span class="string">@date 2020 12 28</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># face recognition model, the object maps human faces into 128D vectors</span></span><br><span class="line">facerec = dlib.face_recognition_model_v1(<span class="string">&quot;model/dlib_face_recognition_resnet_model_v1.dat&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dlib 预测器</span></span><br><span class="line">detector = dlib.get_frontal_face_detector()</span><br><span class="line">predictor = dlib.shape_predictor(<span class="string">&#x27;model/shape_predictor_68_face_landmarks.dat&#x27;</span>)</span><br><span class="line"></span><br><span class="line">loading = <span class="string">&#x27;icon/loading.png&#x27;</span></span><br><span class="line">pun_fail = <span class="string">&#x27;icon/pun_fail.png&#x27;</span></span><br><span class="line">pun_repeat = <span class="string">&#x27;icon/pun_repeat.png&#x27;</span></span><br><span class="line">pun_success = <span class="string">&#x27;icon/pun_success.png&#x27;</span></span><br><span class="line"></span><br><span class="line">path_logcat_csv = <span class="string">&quot;data/logcat.csv&quot;</span></span><br><span class="line">user_flag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_csv_to_recoders</span>():</span><br><span class="line">    recodes = []</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path_logcat_csv):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path_logcat_csv, <span class="string">&quot;r&quot;</span>, newline=<span class="string">&quot;&quot;</span>) <span class="keyword">as</span> csvfiler:</span><br><span class="line">            reader = csv.reader(csvfiler)</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">                recodes.append(row)  <span class="comment"># 包括header</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path_logcat_csv, <span class="string">&quot;w&quot;</span>, newline=<span class="string">&quot;&quot;</span>) <span class="keyword">as</span> csvfilew:</span><br><span class="line">            writer = csv.writer(csvfilew)</span><br><span class="line">            header = [<span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;日期&quot;</span>, <span class="string">&quot;时间&quot;</span>]</span><br><span class="line">            writer.writerow(header)</span><br><span class="line">    <span class="keyword">return</span> recodes</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算两个向量间的欧式距离</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">return_euclidean_distance</span>(<span class="params">feature_1, feature_2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param feature_1: 向量一</span></span><br><span class="line"><span class="string">    :param feature_2: 向量二</span></span><br><span class="line"><span class="string">    :return: diff or same</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    feature_1 = np.array(feature_1)</span><br><span class="line">    feature_2 = np.array(feature_2)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        dist = np.sqrt(np.<span class="built_in">sum</span>(np.square(feature_1 - feature_2)))</span><br><span class="line">        <span class="keyword">if</span> dist &gt; <span class="number">0.4</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;diff&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;same&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;欧式距离: &quot;</span>, dist)</span><br><span class="line">    <span class="keyword">except</span> numpy.core._exceptions.UFuncTypeError <span class="keyword">as</span> ne:</span><br><span class="line">        <span class="built_in">print</span>(ne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理存放所有人脸特征的csv</span></span><br><span class="line">path_feature_known_csv = <span class="string">&quot;data/feature_all.csv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># path_features_known_csv= &quot;/media/con/data/code/python/P_dlib_face_reco/data/csvs/features_all.csv&quot;</span></span><br><span class="line">csv_rd = pd.read_csv(path_feature_known_csv, header=<span class="literal">None</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储的特征人脸个数</span></span><br><span class="line"><span class="comment"># print(csv_rd.shape)</span></span><br><span class="line"><span class="comment"># （2，129）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来存放所有录入人脸特征的数组</span></span><br><span class="line">features_known_arr = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;s0&quot;,csv_rd.shape[0],&quot;s1&quot;,csv_rd.shape[1])</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(csv_rd.shape[<span class="number">0</span>]):</span><br><span class="line">    features_someone_arr = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(csv_rd.iloc[i, :])):</span><br><span class="line">        features_someone_arr.append(csv_rd.iloc[i, :][j])</span><br><span class="line">    <span class="comment">#    print(features_someone_arr)</span></span><br><span class="line">    features_known_arr.append(features_someone_arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据库人脸数:&quot;</span>, <span class="built_in">len</span>(features_known_arr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回一张图像多张人脸的128D特征  只返回一张人脸</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_128d_features</span>(<span class="params">img_gray</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param img_gray: 灰度图</span></span><br><span class="line"><span class="string">    :return: 人脸</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    dets = detector(img_gray, <span class="number">1</span>)</span><br><span class="line">    shape = predictor(img_gray, dets[<span class="number">0</span>])</span><br><span class="line">    face_des = facerec.compute_face_descriptor(img_gray, shape)</span><br><span class="line">    <span class="keyword">return</span> face_des</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PunchcardUi</span>(wx.Frame):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">     移动侦测主界面</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, superion</span>):</span><br><span class="line">        wx.Frame.__init__(<span class="variable language_">self</span>, parent=superion, title=<span class="string">&quot;catEye&quot;</span>, size=(<span class="number">800</span>, <span class="number">590</span>),</span><br><span class="line">                          style=wx.DEFAULT_FRAME_STYLE | wx.STAY_ON_TOP)</span><br><span class="line">        <span class="variable language_">self</span>.SetBackgroundColour(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.Center()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.OpenCapButton = wx.Button(parent=<span class="variable language_">self</span>, pos=(<span class="number">50</span>, <span class="number">120</span>), size=(<span class="number">90</span>, <span class="number">60</span>), label=<span class="string">&#x27;开始检测&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.resultText = wx.StaticText(parent=<span class="variable language_">self</span>, style=wx.ALIGN_CENTER_VERTICAL, pos=(<span class="number">50</span>, <span class="number">320</span>), size=(<span class="number">90</span>, <span class="number">60</span>),</span><br><span class="line">                                        label=<span class="string">&quot;未知用户报警&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.resultText.SetBackgroundColour(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resultText.SetForegroundColour(<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">        font = wx.Font(<span class="number">14</span>, wx.DECORATIVE, wx.ITALIC, wx.NORMAL)</span><br><span class="line">        <span class="variable language_">self</span>.resultText.SetFont(font)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.pun_day_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 封面图片</span></span><br><span class="line">        <span class="variable language_">self</span>.image_loading = wx.Image(loading, wx.BITMAP_TYPE_ANY).Scale(<span class="number">600</span>, <span class="number">480</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.image_fail = wx.Image(pun_fail, wx.BITMAP_TYPE_ANY).Scale(<span class="number">600</span>, <span class="number">480</span>)</span><br><span class="line">        <span class="variable language_">self</span>.image_repeat = wx.Image(pun_repeat, wx.BITMAP_TYPE_ANY).Scale(<span class="number">600</span>, <span class="number">480</span>)</span><br><span class="line">        <span class="variable language_">self</span>.image_success = wx.Image(pun_success, wx.BITMAP_TYPE_ANY).Scale(<span class="number">600</span>, <span class="number">480</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 显示图片</span></span><br><span class="line">        <span class="variable language_">self</span>.bmp = wx.StaticBitmap(parent=<span class="variable language_">self</span>, pos=(<span class="number">180</span>, <span class="number">20</span>), bitmap=wx.Bitmap(<span class="variable language_">self</span>.image_loading))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.Bind(wx.EVT_BUTTON, <span class="variable language_">self</span>.OnOpenCapButtonClicked, <span class="variable language_">self</span>.OpenCapButton)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">OnOpenCapButtonClicked</span>(<span class="params">self, event</span>):</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用多线程，子线程运行后台的程序，主线程更新前台的UI，这样不会互相影响&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 创建子线程，按钮调用这个方法，</span></span><br><span class="line">        _thread.start_new_thread(<span class="variable language_">self</span>._open_cap, (event,))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_open_cap</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="comment"># 创建 cv2 摄像头对象</span></span><br><span class="line">        <span class="keyword">global</span> dets</span><br><span class="line">        urlc = <span class="string">&#x27;http://192.168.1.104:81/stream&#x27;</span></span><br><span class="line">        localtime = datetime.datetime.now()</span><br><span class="line">        date = <span class="built_in">str</span>(localtime.year) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(localtime.month) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(localtime.day)</span><br><span class="line">        time = <span class="built_in">str</span>(localtime.hour) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(localtime.minute) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(localtime.minute)</span><br><span class="line">        video_src = <span class="string">&#x27;E:/czq/personFile/catCamera/src/server/data/video/catEye&#x27;</span> + date + <span class="string">&#x27;.avi&#x27;</span></span><br><span class="line"></span><br><span class="line">        a = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.cap = cv2.VideoCapture(video_src)</span><br><span class="line">        <span class="comment"># cap.set(propId, value)</span></span><br><span class="line">        <span class="comment"># 设置视频参数，propId设置的视频参数，value设置的参数值</span></span><br><span class="line">        <span class="variable language_">self</span>.cap.<span class="built_in">set</span>(<span class="number">3</span>, <span class="number">480</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># cap是否初始化成功</span></span><br><span class="line">        <span class="keyword">while</span> <span class="variable language_">self</span>.cap.isOpened():</span><br><span class="line"></span><br><span class="line">            <span class="comment"># cap.read()</span></span><br><span class="line">            <span class="comment"># 返回两个值：</span></span><br><span class="line">            <span class="comment">#    一个布尔值true/false，用来判断读取视频是否成功/是否到视频末尾</span></span><br><span class="line">            <span class="comment">#    图像对象，图像的三维矩阵</span></span><br><span class="line">            flag, im_rd = <span class="variable language_">self</span>.cap.read()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 每帧数据延时1ms，延时为0读取的是静态帧</span></span><br><span class="line">            kk = cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 人脸数 dets</span></span><br><span class="line">                dets = detector(im_rd, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">except</span> TypeError <span class="keyword">as</span> te:</span><br><span class="line">                <span class="built_in">print</span>(te)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;人脸数目获取错误！&#x27;</span>)</span><br><span class="line">            <span class="comment"># 待会要写的字体</span></span><br><span class="line">            font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 存储人脸名字和位置的两个 list</span></span><br><span class="line">            <span class="comment"># list 1 (dets): store the name of faces                Jack    unknown unknown Mary</span></span><br><span class="line">            <span class="comment"># list 2 (pos_namelist): store the positions of faces   12,1    1,21    1,13    31,1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 人脸的名字</span></span><br><span class="line">            name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            pos = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="comment"># pos_namelist = []</span></span><br><span class="line">            <span class="comment"># name_namelist = []</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(dets) != <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 检测到人脸</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 获取当前捕获到的图像的所有人脸的特征，存储到 features_cap_arr</span></span><br><span class="line">                features_cap = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    shape = predictor(im_rd, dets[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">except</span> TypeError <span class="keyword">as</span> te:</span><br><span class="line">                    <span class="built_in">print</span>(te)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;error!&#x27;</span>)</span><br><span class="line">                features_cap = facerec.compute_face_descriptor(im_rd, shape)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 遍历捕获到的图像中所有的人脸</span></span><br><span class="line">                <span class="comment"># 让人名跟随在矩形框的下方</span></span><br><span class="line">                <span class="comment"># 确定人名的位置坐标</span></span><br><span class="line">                <span class="comment"># 先默认所有人不认识，是 unknown</span></span><br><span class="line">                name = <span class="string">&quot;unrecognized face&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 每个捕获人脸的名字坐标</span></span><br><span class="line">                pos = <span class="built_in">tuple</span>([(<span class="built_in">int</span>)((dets[<span class="number">0</span>].left() + dets[<span class="number">0</span>].right()) / <span class="number">2</span>) - <span class="number">50</span></span><br><span class="line">                                , dets[<span class="number">0</span>].bottom() + <span class="number">20</span>])</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 对于某张人脸，遍历所有存储的人脸特征</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(features_known_arr)):</span><br><span class="line">                    <span class="comment"># 将某张人脸与存储的所有人脸数据进行比对</span></span><br><span class="line">                    <span class="variable language_">self</span>.pun_day_num = <span class="number">0</span></span><br><span class="line">                    compare = return_euclidean_distance(features_cap, features_known_arr[i][<span class="number">0</span>:-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">if</span> compare == <span class="string">&quot;same&quot;</span>:  <span class="comment"># 找到了相似脸</span></span><br><span class="line">                        name = features_known_arr[i][-<span class="number">1</span>]</span><br><span class="line">                        recoder = []</span><br><span class="line">                        recoder.append(name)</span><br><span class="line">                        localtime = datetime.datetime.now()</span><br><span class="line">                        date = <span class="built_in">str</span>(localtime.year) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(localtime.month) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(localtime.day)+ <span class="string">&#x27; &#x27;</span></span><br><span class="line">                        time = <span class="built_in">str</span>(localtime.hour) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(localtime.minute) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(localtime.minute)</span><br><span class="line">                        recoder.append(date)</span><br><span class="line">                        recoder.append(time)</span><br><span class="line">                        recoders = read_csv_to_recoders()</span><br><span class="line">                        filename = <span class="string">&#x27;data/move_test_img/&#x27;</span> + name + date + time + <span class="string">&quot;.png&quot;</span></span><br><span class="line">                        <span class="built_in">print</span>(filename)</span><br><span class="line">                        cv2.imwrite(filename, im_rd)</span><br><span class="line">                        user_flag = <span class="number">1</span>  <span class="comment"># 已知人脸</span></span><br><span class="line">                        <span class="built_in">print</span>(recoders)</span><br><span class="line">                        Sub_Client.upload_image(filename, <span class="string">&#x27;faceImgRegister&#x27;</span>, <span class="string">&#x27;face image register successful&#x27;</span>)</span><br><span class="line">                        readSql.move_test_save_data(name, filename, user_flag)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 绘制矩形框</span></span><br><span class="line">                cv2.rectangle(im_rd, <span class="built_in">tuple</span>([dets[<span class="number">0</span>].left(), dets[<span class="number">0</span>].top()]), <span class="built_in">tuple</span>([dets[<span class="number">0</span>].right(), dets[<span class="number">0</span>].bottom()]),</span><br><span class="line">                              (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 写人脸名字</span></span><br><span class="line">                cv2.putText(im_rd, name, pos, font, <span class="number">0.8</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>, cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> name == <span class="string">&quot;unrecognized face&quot;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;danger\r\n&quot;</span>)</span><br><span class="line">                    <span class="keyword">import</span> time</span><br><span class="line">                    <span class="keyword">import</span> ctypes</span><br><span class="line">                    player = ctypes.windll.kernel32</span><br><span class="line">                    player.Beep(<span class="number">1000</span>, <span class="number">200</span>)</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                        time.sleep(<span class="number">1</span>)</span><br><span class="line">                        player.Beep(<span class="number">1000</span>, <span class="number">200</span>)</span><br><span class="line">                  <span class="comment">#  try:</span></span><br><span class="line">                       <span class="comment"># wx.MessageBox(message=&quot;有人入侵了&quot;, caption=&quot;可怕的消息&quot;)</span></span><br><span class="line">                        <span class="comment">#win32api.MessageBox(0, &quot;有人入侵了&quot;, &quot;warning&quot;, win32con.MB_ICONWARNING)</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&#x27;wx.MessageBox(message=&quot;有人入侵了&quot;, caption=&quot;可怕的消息&quot;)&#x27;</span>)</span><br><span class="line">                    <span class="comment"># except wx._core.PyNoAppError as wpnae:</span></span><br><span class="line">                    <span class="comment">#     print(wpnae)</span></span><br><span class="line">                    <span class="comment">#     print(&#x27;未知错误&#x27;)</span></span><br><span class="line">                    <span class="comment">#     print(&#x27;&#x27;)</span></span><br><span class="line">                    localtime = datetime.datetime.now()</span><br><span class="line">                    date = <span class="built_in">str</span>(localtime.year) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(localtime.month) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(localtime.day) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">                    time = <span class="built_in">str</span>(localtime.hour) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(localtime.minute) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(localtime.minute)</span><br><span class="line">                    user_flag = <span class="number">0</span>  <span class="comment"># 未知人脸</span></span><br><span class="line"></span><br><span class="line">                    filename = <span class="string">&#x27;data/move_test_img/&#x27;</span> + name + date + time + <span class="string">&quot;.png&quot;</span></span><br><span class="line">                    <span class="built_in">print</span>(filename)</span><br><span class="line">                    cv2.imwrite(filename, im_rd)</span><br><span class="line">                    <span class="comment"># print(recoders)</span></span><br><span class="line">                    Sub_Client.upload_image(filename, <span class="string">&#x27;faceRecognizeImage&#x27;</span>, <span class="string">&#x27;face recognize successful&#x27;</span>)</span><br><span class="line">                    readSql.move_test_save_data(name, filename, user_flag)</span><br><span class="line">                    <span class="comment"># _thread.exit()</span></span><br><span class="line"></span><br><span class="line">            cv2.putText(im_rd, <span class="string">&quot;Faces: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(dets)), (<span class="number">50</span>, <span class="number">80</span>), font, <span class="number">1</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>, cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                height, width = im_rd.shape[:<span class="number">2</span>]</span><br><span class="line">                image1 = cv2.cvtColor(im_rd, cv2.COLOR_BGR2RGB)</span><br><span class="line">                pic = wx.Bitmap.FromBuffer(width, height, image1)</span><br><span class="line">                <span class="comment"># 显示图片在panel上</span></span><br><span class="line">                <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                bug 001 </span></span><br><span class="line"><span class="string">                2020 01 16</span></span><br><span class="line"><span class="string">                &#x27;&#x27;&#x27;</span></span><br><span class="line">                <span class="variable language_">self</span>.bmp.SetBitmap(pic)</span><br><span class="line">            <span class="keyword">except</span> AttributeError <span class="keyword">as</span> ae:</span><br><span class="line">                <span class="built_in">print</span>(ae)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;人脸图片切割错误&#x27;</span>)</span><br><span class="line">            <span class="comment"># pic = None</span></span><br><span class="line">            <span class="keyword">except</span> cv2.error <span class="keyword">as</span> ce:</span><br><span class="line">                <span class="built_in">print</span>(ce)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;图片灰度化错误！&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> RuntimeError <span class="keyword">as</span> re:</span><br><span class="line">                <span class="built_in">print</span>(re)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;运行中程序出错&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="人脸注册">人脸注册</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 数据处理的库 Numpy</span></span><br><span class="line"><span class="keyword">import</span> cv2  <span class="comment"># 图像处理的库 OpenCv</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> _thread</span><br><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> importlib <span class="keyword">import</span> reload</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> io <span class="keyword">as</span> iio</span><br><span class="line"><span class="keyword">import</span> face_recognize_punchcard</span><br><span class="line"><span class="keyword">import</span> readSql</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> Checkbutton, IntVar</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> src.server.myapp <span class="keyword">import</span> MainApp</span><br><span class="line"><span class="keyword">import</span> Sub_Client</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@theme 人脸检测</span></span><br><span class="line"><span class="string">@author czq</span></span><br><span class="line"><span class="string">@date 2021 01 05</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 创建 cv2 摄像头对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line">path_make_dir = <span class="string">&quot;data/face_img_database/&quot;</span></span><br><span class="line"></span><br><span class="line">path_feature_all = <span class="string">&quot;data/feature_all.csv&quot;</span></span><br><span class="line"></span><br><span class="line">info = <span class="string">&#x27;icon/info.png&#x27;</span></span><br><span class="line">name = [<span class="number">10</span>]</span><br><span class="line">imgSrc = [<span class="number">10</span>]</span><br><span class="line">sex = [<span class="number">10</span>]</span><br><span class="line">user_id = [<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># register ui</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    @:param self</span></span><br><span class="line"><span class="string">    @:param event </span></span><br><span class="line"><span class="string">    按钮单击事件</span></span><br><span class="line"><span class="string">    创建文件夹按钮事件</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">OnNewButtonClicked</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        按钮单击事件</span></span><br><span class="line"><span class="string">        :param event:  录入人脸事件</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="variable language_">self</span>.name == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.name = wx.GetTextFromUser(message=<span class="string">&quot;请先输入录入者的姓名,用于创建姓名文件夹&quot;</span>, caption=<span class="string">&quot;温馨提示&quot;</span>,</span><br><span class="line">                                           default_value=<span class="string">&quot;&quot;</span>, parent=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 监测是否重名</span></span><br><span class="line">            <span class="keyword">for</span> exsit_name <span class="keyword">in</span> (os.listdir(path_make_dir)):</span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>.name == exsit_name:</span><br><span class="line">                    wx.MessageBox(message=<span class="string">&quot;姓名已存在，请重新输入&quot;</span>, caption=<span class="string">&quot;警告&quot;</span>)</span><br><span class="line">                    <span class="variable language_">self</span>.name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        os.makedirs(path_make_dir + <span class="variable language_">self</span>.name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;新建的人脸文件夹: &quot;</span>, path_make_dir + <span class="variable language_">self</span>.name)</span><br><span class="line">        name[<span class="number">0</span>] = <span class="variable language_">self</span>.name</span><br><span class="line">        user_id[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.NewButton.Enable(enable=<span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.ShortCutButton.Enable(enable=<span class="literal">True</span>)  <span class="comment"># 启用截图按钮</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用多线程，子线程运行后台的程序，主线程更新前台的UI，这样不会互相影响&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 创建子线程，按钮调用这个方法，</span></span><br><span class="line">        _thread.start_new_thread(<span class="variable language_">self</span>._open_cap, (event,))</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    截图按钮事件</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">OnShortCutButtonClicked</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param event: 截图事件</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.SaveButton.Enable(<span class="literal">True</span>)  <span class="comment"># 启用保存按钮</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.rects) != <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 计算矩形框大小,保证同步</span></span><br><span class="line">            height = <span class="variable language_">self</span>.rects[<span class="number">0</span>].bottom() - <span class="variable language_">self</span>.rects[<span class="number">0</span>].top()</span><br><span class="line">            width = <span class="variable language_">self</span>.rects[<span class="number">0</span>].right() - <span class="variable language_">self</span>.rects[<span class="number">0</span>].left()</span><br><span class="line">            <span class="variable language_">self</span>.sc_number += <span class="number">1</span></span><br><span class="line">            im_blank = np.zeros((height, width, <span class="number">3</span>), np.uint8)</span><br><span class="line">            <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">                <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">                    im_blank[ii][jj] = <span class="variable language_">self</span>.im_rd[<span class="variable language_">self</span>.rects[<span class="number">0</span>].top() + ii][<span class="variable language_">self</span>.rects[<span class="number">0</span>].left() + jj]</span><br><span class="line"></span><br><span class="line">            cv2.imencode(<span class="string">&#x27;.jpg&#x27;</span>, im_blank)[<span class="number">1</span>].tofile(</span><br><span class="line">                path_make_dir + <span class="variable language_">self</span>.name + <span class="string">&quot;/img_face_&quot;</span> + <span class="built_in">str</span>(<span class="variable language_">self</span>.sc_number) + <span class="string">&quot;.jpg&quot;</span>)  <span class="comment"># 正确方法</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;写入本地：&quot;</span>, <span class="built_in">str</span>(path_make_dir + <span class="variable language_">self</span>.name) + <span class="string">&quot;/img_face_&quot;</span> + <span class="built_in">str</span>(<span class="variable language_">self</span>.sc_number) + <span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">            imgSrc[<span class="number">0</span>] = <span class="built_in">str</span>(path_make_dir + <span class="variable language_">self</span>.name) + <span class="string">&quot;/img_face_&quot;</span> + <span class="built_in">str</span>(<span class="variable language_">self</span>.sc_number) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">            <span class="comment"># readSql.saveData(name, imgSrc, user_id, sex)</span></span><br><span class="line">            Sub_Client.upload_image(imgSrc[<span class="number">0</span>], <span class="string">&#x27;faceImgRegister&#x27;</span>, <span class="string">&#x27;face image register successful&#x27;</span>)</span><br><span class="line">            readSql.saveUserData(name, sex)</span><br><span class="line">            readSql.save_face_table(name, imgSrc[<span class="number">0</span>])</span><br><span class="line">            readSql.save_img_data(name, imgSrc[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;未检测到人脸，识别无效，未写入本地&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    保存图片按钮事件</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">OnSaveButtonClicked</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param event: 保存按钮事件</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.bmp.SetBitmap(wx.Bitmap(<span class="variable language_">self</span>.image_info))</span><br><span class="line">        <span class="variable language_">self</span>.NewButton.Enable(<span class="literal">True</span>)  <span class="comment"># 启用新建人脸事件</span></span><br><span class="line">        <span class="variable language_">self</span>.SaveButton.Enable(<span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.ShortCutButton.Enable(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 释放摄像头</span></span><br><span class="line">        <span class="variable language_">self</span>.cap.release()</span><br><span class="line">        <span class="comment"># 删除建立的窗口</span></span><br><span class="line">        <span class="comment"># cv2.destroyAllWindows()</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.register_flag == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(path_make_dir + <span class="variable language_">self</span>.name):</span><br><span class="line">                shutil.rmtree(path_make_dir + <span class="variable language_">self</span>.name)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;重复录入，已删除姓名文件夹&quot;</span>, path_make_dir + <span class="variable language_">self</span>.name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.sc_number == <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.name) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(path_make_dir + <span class="variable language_">self</span>.name):</span><br><span class="line">                shutil.rmtree(path_make_dir + <span class="variable language_">self</span>.name)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;您未保存截图，已删除姓名文件夹&quot;</span>, path_make_dir + <span class="variable language_">self</span>.name)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.register_flag == <span class="number">0</span> <span class="keyword">and</span> <span class="variable language_">self</span>.sc_number != <span class="number">0</span>:</span><br><span class="line">            pics = os.listdir(path_make_dir + <span class="variable language_">self</span>.name)</span><br><span class="line">            feature_list = []</span><br><span class="line">            feature_average = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pics)):</span><br><span class="line">                pic_path = path_make_dir + <span class="variable language_">self</span>.name + <span class="string">&quot;/&quot;</span> + pics[i]</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;正在读的人脸图像：&quot;</span>, pic_path)</span><br><span class="line">                img = iio.imread(pic_path)</span><br><span class="line">                img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line">                dets = face_recognize_punchcard.detector(img_gray, <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(dets) != <span class="number">0</span>:</span><br><span class="line">                    shape = face_recognize_punchcard.predictor(img_gray, dets[<span class="number">0</span>])</span><br><span class="line">                    face_descriptor = face_recognize_punchcard.facerec.compute_face_descriptor(img_gray, shape)</span><br><span class="line">                    feature_list.append(face_descriptor)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    face_descriptor = <span class="number">0</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;未在照片中识别到人脸&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(feature_list) &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">                    feature_average.append(<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(feature_list)):</span><br><span class="line">                        feature_average[j] += feature_list[i][j]</span><br><span class="line">                    feature_average[j] = (feature_average[j]) / <span class="built_in">len</span>(feature_list)</span><br><span class="line">                feature_average.append(<span class="variable language_">self</span>.name)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(path_feature_all, <span class="string">&quot;a+&quot;</span>, newline=<span class="string">&quot;&quot;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">                    writer = csv.writer(csvfile)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;写入一条特征人脸入库&#x27;</span>, feature_average)</span><br><span class="line">                    writer.writerow(feature_average)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.name = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.register_flag = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.sc_number = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    打开摄像头</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_open_cap</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="comment"># reload(facerec)</span></span><br><span class="line">        reload(face_recognize_punchcard)</span><br><span class="line">        <span class="comment"># reload(predictor)</span></span><br><span class="line">        <span class="comment"># reload(detector)</span></span><br><span class="line">        <span class="comment"># reload(return_euclidean_distance())</span></span><br><span class="line"></span><br><span class="line">        urlc = <span class="string">&#x27;http://192.168.1.104:81/stream&#x27;</span></span><br><span class="line">        a = <span class="number">0</span></span><br><span class="line">        localtime = datetime.datetime.now()</span><br><span class="line">        date = <span class="built_in">str</span>(localtime.year) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(localtime.month) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(localtime.day)</span><br><span class="line">        video_src = <span class="string">&#x27;E:/czq/personFile/catCamera/src/server/data/video/catEye&#x27;</span> + date + <span class="string">&#x27;.avi&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.cap = cv2.VideoCapture(video_src)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># cap.set(propId, value)</span></span><br><span class="line">        <span class="comment"># 设置视频参数，propId 设置的视频参数，value 设置的参数值</span></span><br><span class="line">        <span class="variable language_">self</span>.cap.<span class="built_in">set</span>(<span class="number">3</span>, <span class="number">480</span>)</span><br><span class="line">        <span class="comment"># self.cap.set(cv2.CAP_PROP_FPS,5)</span></span><br><span class="line">        <span class="keyword">while</span> <span class="variable language_">self</span>.cap.isOpened():</span><br><span class="line">            <span class="comment"># cap.read()</span></span><br><span class="line">            <span class="comment"># 返回两个值：</span></span><br><span class="line">            <span class="comment">#    一个布尔值 true/false，用来判断读取视频是否成功/是否到视频末尾</span></span><br><span class="line">            <span class="comment">#    图像对象，图像的三维矩阵q</span></span><br><span class="line">            flag, <span class="variable language_">self</span>.im_rd = <span class="variable language_">self</span>.cap.read()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 人脸数 rects</span></span><br><span class="line">                <span class="variable language_">self</span>.rects = face_recognize_punchcard.detector(<span class="variable language_">self</span>.im_rd, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">except</span> TypeError <span class="keyword">as</span> te:</span><br><span class="line">                <span class="built_in">print</span>(te)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;人脸未识别到 人脸识别失败！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            cv2.waitKey(<span class="number">1</span>)  <span class="comment"># 必不可少</span></span><br><span class="line">            <span class="comment"># 待会要写的字体</span></span><br><span class="line">            font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.rects) != <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 检测到人脸</span></span><br><span class="line">                <span class="comment"># 矩形框#d是人脸</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 查重</span></span><br><span class="line">                features_cap = face_recognize_punchcard.facerec.compute_face_descriptor(<span class="variable language_">self</span>.im_rd,</span><br><span class="line">                                                                                        face_recognize_punchcard.predictor(</span><br><span class="line">                                                                                            <span class="variable language_">self</span>.im_rd, <span class="variable language_">self</span>.rects[<span class="number">0</span>]))</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(face_recognize_punchcard.features_known_arr)):</span><br><span class="line">                    <span class="comment"># 将某张人脸与存储的所有人脸数据进行比对</span></span><br><span class="line">                    compare = face_recognize_punchcard.return_euclidean_distance(features_cap,</span><br><span class="line">                                                                                 face_recognize_punchcard.features_known_arr[</span><br><span class="line">                                                                                     i][<span class="number">0</span>:-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">if</span> compare == <span class="string">&quot;same&quot;</span>:  <span class="comment"># 找到了相似脸</span></span><br><span class="line">                        face_name = face_recognize_punchcard.features_known_arr[i][-<span class="number">1</span>]</span><br><span class="line">                        <span class="built_in">print</span>(face_name)</span><br><span class="line">                        wx.MessageBox(message=face_name + <span class="string">&quot;，您已录过人脸，清截图保存下一个人物&quot;</span>, caption=<span class="string">&quot;警告&quot;</span>)</span><br><span class="line">                        <span class="variable language_">self</span>.NewButton.Enable(<span class="literal">False</span>)</span><br><span class="line">                        <span class="variable language_">self</span>.ShortCutButton.Enable(<span class="literal">False</span>)</span><br><span class="line">                        <span class="variable language_">self</span>.SaveButton.Enable(<span class="literal">True</span>)</span><br><span class="line">                        <span class="variable language_">self</span>.register_flag = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> k, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.rects):</span><br><span class="line">                    <span class="comment"># 根据人脸大小生成空的图像</span></span><br><span class="line">                    <span class="comment"># 最后一个参数是线宽</span></span><br><span class="line">                    cv2.rectangle(<span class="variable language_">self</span>.im_rd, <span class="built_in">tuple</span>([d.left(), d.top()]), <span class="built_in">tuple</span>([d.right(), d.bottom()]), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">                                  <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 显示人脸数</span></span><br><span class="line">            cv2.putText(<span class="variable language_">self</span>.im_rd, <span class="string">&quot;Faces: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.rects)), (<span class="number">50</span>, <span class="number">80</span>), font, <span class="number">0.8</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>, cv2.LINE_AA)</span><br><span class="line">            cv2.putText(<span class="variable language_">self</span>.im_rd, <span class="string">&quot;Warning: please shortcut having rectangle&quot;</span>, (<span class="number">50</span>, <span class="number">140</span>), font, <span class="number">0.8</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>,</span><br><span class="line">                        cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># print(im_rd.shape)</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                height, width = <span class="variable language_">self</span>.im_rd.shape[:<span class="number">2</span>]</span><br><span class="line">            <span class="keyword">except</span> AttributeError <span class="keyword">as</span> ae:</span><br><span class="line">                <span class="built_in">print</span>(ae)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;人脸照片切割错误！&#x27;</span>)</span><br><span class="line">            image1 = cv2.cvtColor(<span class="variable language_">self</span>.im_rd, cv2.COLOR_BGR2RGB)</span><br><span class="line">            pic = wx.Bitmap.FromBuffer(width, height, image1)</span><br><span class="line">            <span class="comment"># 显示图片在panel上</span></span><br><span class="line">            <span class="variable language_">self</span>.bmp.SetBitmap(pic)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 直接在sbclicked里设置self.bmp.SetBitmap(wx.Bitmap(self.image_cover))，子线程还在运行</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.NewButton.IsEnabled() == <span class="literal">True</span> <span class="keyword">and</span> <span class="variable language_">self</span>.ShortCutButton.IsEnabled() == <span class="literal">False</span> <span class="keyword">and</span> <span class="variable language_">self</span>.SaveButton.IsEnabled() == <span class="literal">False</span>:</span><br><span class="line">                <span class="variable language_">self</span>.bmp.SetBitmap(wx.Bitmap(<span class="variable language_">self</span>.image_info))</span><br><span class="line">                _thread.exit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="相机截图">相机截图</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getTrainingData</span>(<span class="params">window_name, camera_id, path_name, max_num</span>): <span class="comment"># path_name是图片存储目录，max_num是需要捕捉的图片数量</span></span><br><span class="line">    cv2.namedWindow(window_name) <span class="comment"># 创建窗口</span></span><br><span class="line">    cap = cv2.VideoCapture(camera_id) <span class="comment"># 打开摄像头</span></span><br><span class="line">    classifier = cv2.CascadeClassifier(<span class="string">&#x27;haarcascade_frontalface_alt2.xml&#x27;</span>) <span class="comment"># 加载分类器</span></span><br><span class="line">    color = (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>) <span class="comment"># 人脸矩形框的颜色</span></span><br><span class="line">    num = <span class="number">0</span> <span class="comment"># 记录存储的图片数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">        ok, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) <span class="comment"># 灰度化</span></span><br><span class="line">        faceRects=classifier.detectMultiScale(gray,scaleFactor=<span class="number">1.2</span>,minNeighbors=<span class="number">3</span>,minSize=(<span class="number">32</span>,<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(faceRects) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> faceRect <span class="keyword">in</span> faceRects:</span><br><span class="line">                x,y,w,h = faceRect</span><br><span class="line">                <span class="comment"># 捕捉到的图片的名字，这里用到了格式化字符串的输出</span></span><br><span class="line">                image_name = <span class="string">&#x27;%s%d.jpg&#x27;</span> % (path_name, num) <span class="comment"># 注意这里图片名一定要加上扩展名，否则后面imwrite的时候会报错：could not find a writer for the specified extension in function cv::imwrite_ 参考：https://stackoverflow.com/questions/9868963/cvimwrite-could-not-find-a-writer-for-the-specified-extension</span></span><br><span class="line">                image = frame[y:y+h, x:x+w] <span class="comment"># 将当前帧含人脸部分保存为图片，注意这里存的还是彩色图片，前面检测时灰度化是为了降低计算量；这里访问的是从y位开始到y+h-1位</span></span><br><span class="line">                cv2.imwrite(image_name, image)</span><br><span class="line"></span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 超过指定最大保存数量则退出循环</span></span><br><span class="line">                <span class="keyword">if</span> num &gt; max_num:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                cv2.rectangle(frame, (x,y), (x+w,y+h), color, <span class="number">2</span>) <span class="comment"># 画出矩形框</span></span><br><span class="line">                font = cv2.FONT_HERSHEY_SIMPLEX <span class="comment"># 获取内置字体</span></span><br><span class="line">                cv2.putText(frame, (<span class="string">&#x27;%d&#x27;</span>%num), (x+<span class="number">30</span>, y+<span class="number">30</span>), font, <span class="number">1</span>, (<span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span>), <span class="number">4</span>) <span class="comment"># 调用函数，对人脸坐标位置，添加一个(x+30,y+30）的矩形框用于显示当前捕捉到了多少人脸图片</span></span><br><span class="line">        <span class="keyword">if</span> num &gt; max_num:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        cv2.imshow(window_name, frame)</span><br><span class="line">        c = cv2.waitKey(<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> c &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    cap.release()<span class="comment">#释放摄像头并销毁所有窗口</span></span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Finished.&#x27;</span>)</span><br><span class="line"><span class="comment">#主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;catching your face and writting into disk...&#x27;</span>)</span><br><span class="line">    getTrainingData(<span class="string">&#x27;getTrainData&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;training_data_me/&#x27;</span>,<span class="number">100</span>) <span class="comment"># 注意这里的training_data_xx 文件夹就在程序工作目录下</span></span><br></pre></td></tr></table></figure><h3 id="视频数据接受-socket-client">视频数据接受(socket client)</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">usoc = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  <span class="comment"># 建一个UDP socket</span></span><br><span class="line">usoc.bind((<span class="string">&#x27;&#x27;</span>, <span class="number">10000</span>))  <span class="comment"># 监听端口号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Start!&quot;</span>)</span><br><span class="line">frameIdNow = <span class="number">0</span>  <span class="comment"># 当前帧帧号</span></span><br><span class="line">frameSizeNow = <span class="number">0</span>  <span class="comment"># 当前接收到的帧体积</span></span><br><span class="line">packetIdNow = <span class="number">0</span>  <span class="comment"># 最新已接收的数据包号</span></span><br><span class="line">packetCount = <span class="number">0</span>  <span class="comment"># 当前帧包的数量</span></span><br><span class="line">packetLen = <span class="number">0</span>  <span class="comment"># 标准数据包大小</span></span><br><span class="line">frameSizeOk = <span class="number">0</span>  <span class="comment"># 当前帧已接收数据量</span></span><br><span class="line">jpgBuff = <span class="built_in">bytes</span>(<span class="string">&#x27;ix&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 图片数据缓存</span></span><br><span class="line"><span class="built_in">print</span>(usoc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    udpbuff, address = usoc.recvfrom(<span class="number">10240</span>)  <span class="comment"># 阻塞接收数据，最多一次接收10240字节</span></span><br><span class="line">    <span class="built_in">print</span>(address)</span><br><span class="line">    <span class="built_in">print</span>(udpbuff)</span><br><span class="line">    <span class="comment"># 解析数据</span></span><br><span class="line">    frameId = (udpbuff[<span class="number">1</span>] &lt;&lt; <span class="number">24</span>) + (udpbuff[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (udpbuff[<span class="number">3</span>] &lt;&lt; <span class="number">8</span>) + udpbuff[<span class="number">4</span>]  <span class="comment"># 获取帧号</span></span><br><span class="line">    frameSize = (udpbuff[<span class="number">5</span>] &lt;&lt; <span class="number">24</span>) + (udpbuff[<span class="number">6</span>] &lt;&lt; <span class="number">16</span>) + (udpbuff[<span class="number">7</span>] &lt;&lt; <span class="number">8</span>) + udpbuff[<span class="number">8</span>]  <span class="comment"># 获取帧体积</span></span><br><span class="line">    packetId = udpbuff[<span class="number">10</span>]  <span class="comment"># 获取包号</span></span><br><span class="line">    packetSize = (udpbuff[<span class="number">13</span>] &lt;&lt; <span class="number">8</span>) + udpbuff[<span class="number">14</span>]  <span class="comment"># 获取包体积</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> frameIdNow != frameId:  <span class="comment"># 换帧，记录新一帧的数据信息</span></span><br><span class="line">        frameIdNow = frameId  <span class="comment"># 更新帧号</span></span><br><span class="line">        frameSizeNow = frameSize  <span class="comment"># 更新帧体积</span></span><br><span class="line">        packetCount = udpbuff[<span class="number">9</span>]  <span class="comment"># 更新数据包数量</span></span><br><span class="line">        packetLen = (udpbuff[<span class="number">11</span>] &lt;&lt; <span class="number">8</span>) + udpbuff[<span class="number">12</span>]  <span class="comment"># 更新数据包长度</span></span><br><span class="line">        frameSizeOk = <span class="number">0</span>  <span class="comment"># 清除当前帧已接收数据量</span></span><br><span class="line">        packetIdNow = <span class="number">0</span>  <span class="comment"># 最新已接收数据包号清零</span></span><br><span class="line">        jpgBuff = <span class="built_in">bytes</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 清空图片数据缓存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 复制至缓冲区，并只接收安全范围内的数据包</span></span><br><span class="line">    <span class="keyword">if</span> (packetId &lt;= packetCount) <span class="keyword">and</span> (packetId &gt; packetIdNow):  <span class="comment"># 新数据包包号不超过总数据包数量，且包号刚好比前一包多1</span></span><br><span class="line">        <span class="keyword">if</span> packetSize == (<span class="built_in">len</span>(udpbuff) - <span class="number">15</span>):  <span class="comment"># 数据包减去包头等于包体积</span></span><br><span class="line">            <span class="keyword">if</span> (packetSize == packetLen) <span class="keyword">or</span> (packetId == packetCount):  <span class="comment"># 标准包或最后一包</span></span><br><span class="line">                jpgBuff = jpgBuff + udpbuff[<span class="number">15</span>:]  <span class="comment"># 拼接数据包</span></span><br><span class="line">                frameSizeOk = frameSizeOk + <span class="built_in">len</span>(udpbuff) - <span class="number">15</span>  <span class="comment"># 帧数据总量累加</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> frameSizeNow == frameSizeOk:  <span class="comment"># 当前帧接收完成</span></span><br><span class="line">        nparr = np.frombuffer(jpgBuff, dtype=np.uint8)  <span class="comment"># 将图片数组转为numpy数组</span></span><br><span class="line">        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)  <span class="comment"># 解码图片</span></span><br><span class="line">        cv2.imshow(<span class="string">&#x27;ESP&#x27;</span>, image)  <span class="comment"># 将图片显示出来</span></span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="number">27</span>:  <span class="comment"># 按下ESC键退出</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">usoc.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其他API调用">其他API调用</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@author czq</span></span><br><span class="line"><span class="string">@date 2020 12 23</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> cv2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> dlib  <span class="comment"># 人脸识别的库dlib</span></span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">img_src = <span class="string">&#x27;http://192.168.2.151/capture&#x27;</span></span><br><span class="line">video_src = <span class="string">&#x27;http://192.168.2.151:81/stream&#x27;</span></span><br><span class="line">CAM_SRC = <span class="string">&#x27;http://192.168.2.151&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############</span></span><br><span class="line"><span class="comment">#   opencv   #</span></span><br><span class="line"><span class="comment">#   loadimg  #</span></span><br><span class="line"><span class="comment">##############</span></span><br><span class="line"><span class="comment"># opencv不能直接从网络获取图片，但是opencv的VideoCapture类可以从url加载视频</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loadImg</span>():</span><br><span class="line">    cap = VideoCapture(img_src)</span><br><span class="line">    <span class="keyword">if</span> (cap.isOpened()):</span><br><span class="line">        ret, img = cap.read()</span><br><span class="line">    img = resize(img, (<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">    imshow(<span class="string">&quot;image&quot;</span>, img)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;load image successful&#x27;</span>, img)</span><br><span class="line">    waitKey(<span class="number">10</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line">    <span class="comment"># img = cv.imread(img_src,cv.IMREAD_COLOR )</span></span><br><span class="line">    <span class="built_in">print</span>(img)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        cv.imwrite(<span class="string">&#x27;./images/face_img/face&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;.png&#x27;</span>, img)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############</span></span><br><span class="line"><span class="comment">#   opencv   #</span></span><br><span class="line"><span class="comment">#   saveimg  #</span></span><br><span class="line"><span class="comment">##############</span></span><br><span class="line"><span class="comment"># 保存所获取的图片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">saveImg</span>():</span><br><span class="line">    cap = VideoCapture(img_src)</span><br><span class="line">    <span class="keyword">if</span> cap.isOpened():</span><br><span class="line">        ret, img = cap.read()</span><br><span class="line">    sav_img = resize(img, (<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">    height = <span class="number">800</span></span><br><span class="line">    width = <span class="number">600</span></span><br><span class="line">    top = <span class="number">10</span></span><br><span class="line">    left = <span class="number">10</span></span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line">    <span class="comment"># img = cv.imread(img_src,cv.IMREAD_COLOR )</span></span><br><span class="line">    <span class="built_in">print</span>(sav_img)</span><br><span class="line">    cv.imwrite(<span class="string">&#x27;./images/face_img/face.png&#x27;</span>, sav_img)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loadVideo</span>():</span><br><span class="line">    cap = VideoCapture(video_src)</span><br><span class="line">    <span class="keyword">if</span> cap.isOpened():</span><br><span class="line">        ret, img = cap.read()</span><br><span class="line">        img = resize(img, (<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">        imshow(<span class="string">&quot;image&quot;</span>, img)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;load image successful&#x27;</span>)</span><br><span class="line">        waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@methods</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call face recognized api</span></span><br><span class="line"><span class="string">@return null</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_face_api</span>():</span><br><span class="line">    r = re.get(<span class="string">&#x27;http://192.168.2.151/status&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line">    <span class="built_in">print</span>(r.status_code)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line">    user_dic = json.loads(r.text)</span><br><span class="line">    face_detect = user_dic[<span class="string">&#x27;face_detect&#x27;</span>]</span><br><span class="line">    face_enroll = user_dic[<span class="string">&#x27;face_enroll&#x27;</span>]</span><br><span class="line">    <span class="comment"># r = re.get(&#x27;http://192.168.2.151/control?var=face_detect&amp;val=1&#x27;)</span></span><br><span class="line">    <span class="keyword">if</span> face_enroll == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;人脸注册开始！&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> face_detect == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;人脸已注册！&#x27;</span>)</span><br><span class="line">            saveImg()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;还未注册人脸！&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请点击 enroll 开始人脸注册！&#x27;</span>)</span><br><span class="line">    face_recognize = user_dic[<span class="string">&#x27;face_recognize&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> face_recognize == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;人脸识别开始&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;点击face_recognize开始人脸识别&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CatchUsbVideo</span>(<span class="params">window_name, camera_idx</span>):</span><br><span class="line">    cv2.namedWindow(window_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 视频来源，可以来自一段已存好的视频，也可以直接来自USB摄像头</span></span><br><span class="line">    cap = cv2.VideoCapture(camera_idx)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">        ok, frame = cap.read()  <span class="comment"># 读取一帧数据</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 显示图像并等待10毫秒按键输入，输入‘q’退出程序</span></span><br><span class="line">        cv2.imshow(window_name, frame)</span><br><span class="line">        c = cv2.waitKey(<span class="number">100</span>)</span><br><span class="line">        <span class="keyword">if</span> c &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 释放摄像头并销毁所有窗口</span></span><br><span class="line">    cap.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_face_remove</span>(<span class="params">cam</span>):</span><br><span class="line">    <span class="comment"># 使用特征提取器get_frontal_face_detector</span></span><br><span class="line">    detector = dlib.get_frontal_face_detector()</span><br><span class="line">    <span class="comment"># 读入视频文件</span></span><br><span class="line">    <span class="comment"># cap = cv2.VideoCapture(&quot;row.MP4&quot;)</span></span><br><span class="line">    <span class="comment"># 建cv2摄像头对象，这里使用电脑自带摄像头，如果接了外部摄像头，则自动切换到外部摄像头</span></span><br><span class="line"></span><br><span class="line">    cap = cv2.VideoCapture(cam)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置视频参数，propId设置的视频参数，value设置的参数值</span></span><br><span class="line">    cap.<span class="built_in">set</span>(<span class="number">3</span>, <span class="number">480</span>)</span><br><span class="line">    <span class="comment"># 截图screenshoot的计数器</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 返回true/false 检查初始化是否成功</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># cap.read()</span></span><br><span class="line">        <span class="comment"># 返回两个值：</span></span><br><span class="line">        <span class="comment">#  一个布尔值true/false，用来判断读取视频是否成功/是否到视频末尾</span></span><br><span class="line">        <span class="comment">#  图像对象，图像的三维矩阵</span></span><br><span class="line">        flag, im_rd = cap.read()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每帧数据延时1ms，延时为0读取的是静态帧</span></span><br><span class="line">        cv2.waitKey(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 取灰度</span></span><br><span class="line">        img_gray = cv2.cvtColor(im_rd, cv2.COLOR_RGB2GRAY)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用人脸检测器检测每一帧图像中的人脸。并返回人脸数rects</span></span><br><span class="line">        faces = detector(img_gray, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 待会要显示在屏幕上的字体</span></span><br><span class="line">        font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果检测到人脸</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(faces) != <span class="number">0</span>):</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 对每个人脸都画出框框</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(faces)):</span><br><span class="line">                <span class="comment"># enumerate方法同时返回数据对象的索引和数据，k为索引，d为faces中的对象</span></span><br><span class="line">                <span class="keyword">for</span> k, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(faces):</span><br><span class="line">                    <span class="comment"># 用红色矩形框出人脸</span></span><br><span class="line">                    cv2.rectangle(im_rd, (d.left(), d.top()), (d.right(), d.bottom()), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">                    <span class="comment"># 计算人脸热别框边长</span></span><br><span class="line">                    face_width = d.right() - d.left()</span><br><span class="line">                    <span class="comment"># 在上方显示文字</span></span><br><span class="line">                    cv2.putText(im_rd, <span class="built_in">str</span>(face_width), (d.left(), d.top() - <span class="number">20</span>), font, <span class="number">0.5</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 标出人脸数</span></span><br><span class="line">            cv2.putText(im_rd, <span class="string">&quot;Faces: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(faces)), (<span class="number">20</span>, <span class="number">50</span>), font, <span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>, cv2.LINE_AA)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 没有检测到人脸</span></span><br><span class="line">            cv2.putText(im_rd, <span class="string">&quot;No Face&quot;</span>, (<span class="number">20</span>, <span class="number">50</span>), font, <span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>, cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加说明</span></span><br><span class="line">        im_rd = cv2.putText(im_rd, <span class="string">&quot;S: screenshot&quot;</span>, (<span class="number">20</span>, <span class="number">400</span>), font, <span class="number">0.8</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>, cv2.LINE_AA)</span><br><span class="line">        im_rd = cv2.putText(im_rd, <span class="string">&quot;Q: quit&quot;</span>, (<span class="number">20</span>, <span class="number">450</span>), font, <span class="number">0.8</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>, cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检测按键</span></span><br><span class="line">        k = cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 按下s键截图保存</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="built_in">ord</span>(<span class="string">&#x27;s&#x27;</span>)):</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            cv2.imwrite(<span class="string">&quot;screenshoot&quot;</span> + <span class="built_in">str</span>(cnt) + <span class="string">&quot;.jpg&quot;</span>, im_rd)</span><br><span class="line">        <span class="comment"># 按下q键退出</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>)):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 窗口显示</span></span><br><span class="line">        cv2.imshow(<span class="string">&quot;camera&quot;</span>, im_rd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 释放摄像头</span></span><br><span class="line">    cap.release()</span><br><span class="line">    <span class="comment"># 删除建立的窗口</span></span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># cam = urllib2.urlopen（video_src）.read（）</span></span><br><span class="line">    load_face_remove(video_src)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ESP-CAM-程序功能实现">ESP-CAM 程序功能实现</h2><h3 id="相机数据转发">相机数据转发</h3><h4 id="http服务器服务端">http服务器服务端</h4><blockquote><p>web服务端建立</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  Serial.setDebugOutput(<span class="literal">true</span>);</span><br><span class="line">  Serial.println();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//drop down frame size for higher initial frame rate</span></span><br><span class="line">  <span class="type">sensor_t</span> * s = esp_camera_sensor_get();</span><br><span class="line">  s-&gt;set_framesize(s, FRAMESIZE_QVGA);</span><br><span class="line"></span><br><span class="line">  WiFi.begin(ssid, password);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//ov2640.initialize();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;</span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">    Serial.print(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;WiFi connected&quot;</span>);</span><br><span class="line">  internet_connected = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  startCameraServer();</span><br><span class="line"> <span class="comment">// ov2640.startCameraServer();</span></span><br><span class="line">  Serial.print(<span class="string">&quot;Camera Ready! Use &#x27;http://&quot;</span>);</span><br><span class="line">  Serial.print(WiFi.localIP());</span><br><span class="line">  Serial.println(<span class="string">&quot;&#x27; to connect&quot;</span>);</span><br><span class="line"> <span class="comment">// server.begin();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="图片数据抓取">图片数据抓取</h4><blockquote><p>将图片数据推送至指定服务器，可推送至微信公众号</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CAMERA_MODEL_AI_THINKER</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid = <span class="string">&quot;TP-LINK_3551&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;H2503...&quot;</span>;</span><br><span class="line"></span><br><span class="line"> WiFiServer <span class="title function_">server</span><span class="params">(<span class="number">81</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// // OV2640 camera</span></span><br><span class="line"><span class="comment">// Camera ov2640;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//WIFI名称</span></span><br><span class="line"><span class="comment">//WIFI密码</span></span><br><span class="line"><span class="type">int</span> capture_interval = <span class="number">20</span> * <span class="number">1000</span>;      <span class="comment">// 默认20秒上传一次，可更改（本项目是自动上传，如需条件触发上传，在需要上传的时候，调用take_send_photo()即可）</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*  post_url = <span class="string">&quot;http://images.bemfa.com/upload/v1/upimages.php&quot;</span>; <span class="comment">// 默认上传地址</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*  uid = <span class="string">&quot;dbd6e715ad7ef039488b390a898a4221&quot;</span>;    <span class="comment">//用户私钥，巴法云控制台获取</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*  topic = <span class="string">&quot;mypicture&quot;</span>;     <span class="comment">//主题名字，可在控制台新建</span></span><br><span class="line"><span class="type">bool</span> sentWechat = <span class="literal">true</span>;               <span class="comment">//是否推送到微信，默认不推送，true 为推送。需要在控制台先绑定微信，不然推送不到</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*  wechatMsg = <span class="string">&quot;自定义消息 查看图片&quot;</span>;     <span class="comment">//推送到微信的消息，可随意修改，修改为自己需要发送的消息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/********推送图片*********/</span></span><br><span class="line"><span class="type">static</span> <span class="type">esp_err_t</span> <span class="title function_">take_send_photo</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//初始化相机并拍照</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Taking picture...&quot;</span>);</span><br><span class="line">  <span class="type">camera_fb_t</span> * fb = <span class="literal">NULL</span>;</span><br><span class="line">  fb = esp_camera_fb_get();</span><br><span class="line">  <span class="keyword">if</span> (!fb) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Camera capture failed&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ESP_FAIL;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  HTTPClient http;</span><br><span class="line">  <span class="comment">//设置请求url</span></span><br><span class="line">  http.begin(post_url);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置 http 请求头部信息</span></span><br><span class="line">  http.addHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;image/jpg&quot;</span>); <span class="comment">//设置传输类型为图片</span></span><br><span class="line">  http.addHeader(<span class="string">&quot;Authorization&quot;</span>, uid); <span class="comment">//设置用户UID私钥</span></span><br><span class="line">  http.addHeader(<span class="string">&quot;Authtopic&quot;</span>, topic);  <span class="comment">//设置主题名称</span></span><br><span class="line">  <span class="keyword">if</span> (sentWechat) &#123; <span class="comment">//判断是否需要推送到微信</span></span><br><span class="line">    http.addHeader(<span class="string">&quot;Wechatmsg&quot;</span>, wechatMsg);  <span class="comment">//设置 http 请求头部信息</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//发起请求，并获取状态码</span></span><br><span class="line">  <span class="type">int</span> httpResponseCode = http.POST((<span class="type">uint8_t</span> *)fb-&gt;buf, fb-&gt;len);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (httpResponseCode == <span class="number">200</span>) &#123;</span><br><span class="line">    String response = http.getString();  <span class="comment">//Get the response to the request</span></span><br><span class="line">    Serial.println(response);           <span class="comment">//Print request answer</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.print(<span class="string">&quot;Error on sending POST: &quot;</span>);</span><br><span class="line">    Serial.println(httpResponseCode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Serial.print(<span class="string">&quot;HTTP Response code: &quot;</span>);</span><br><span class="line">  Serial.println(httpResponseCode);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//清空数据</span></span><br><span class="line">  esp_camera_fb_return(fb);</span><br><span class="line">  <span class="comment">//回收下次再用</span></span><br><span class="line">  http.end();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="人脸识别-3">人脸识别</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">run_face_recognition</span><span class="params">(<span class="type">dl_matrix3du_t</span> *image_matrix, <span class="type">box_array_t</span> *net_boxes)</span>&#123;</span><br><span class="line">    <span class="type">dl_matrix3du_t</span> *aligned_face = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> matched_id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    aligned_face = dl_matrix3du_alloc(<span class="number">1</span>, FACE_WIDTH, FACE_HEIGHT, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span>(!aligned_face)&#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;Could not allocate face recognition buffer&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> matched_id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (align_face(net_boxes, image_matrix, aligned_face) == ESP_OK)&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_enrolling == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int8_t</span> left_sample_face = enroll_face(&amp;id_list, aligned_face);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(left_sample_face == (ENROLL_CONFIRM_TIMES - <span class="number">1</span>))&#123;</span><br><span class="line">                Serial.<span class="built_in">printf</span>(<span class="string">&quot;Enrolling Face ID: %d\n&quot;</span>, id_list.tail);</span><br><span class="line">            &#125;</span><br><span class="line">            Serial.<span class="built_in">printf</span>(<span class="string">&quot;Enrolling Face ID: %d sample %d\n&quot;</span>, id_list.tail, ENROLL_CONFIRM_TIMES - left_sample_face);</span><br><span class="line">            rgb_printf(image_matrix, FACE_COLOR_CYAN, <span class="string">&quot;ID[%u] Sample[%u]&quot;</span>, id_list.tail, ENROLL_CONFIRM_TIMES - left_sample_face);</span><br><span class="line">            <span class="keyword">if</span> (left_sample_face == <span class="number">0</span>)&#123;</span><br><span class="line">                is_enrolling = <span class="number">0</span>;</span><br><span class="line">                Serial.<span class="built_in">printf</span>(<span class="string">&quot;Enrolled Face ID: %d\n&quot;</span>, id_list.tail);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            matched_id = recognize_face(&amp;id_list, aligned_face);</span><br><span class="line">            <span class="keyword">if</span> (matched_id &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                Serial.<span class="built_in">printf</span>(<span class="string">&quot;Match Face ID: %u\n&quot;</span>, matched_id);</span><br><span class="line">                rgb_printf(image_matrix, FACE_COLOR_GREEN, <span class="string">&quot;Hello Subject %u&quot;</span>, matched_id);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Serial.println(<span class="string">&quot;No Match Found&quot;</span>);</span><br><span class="line">                rgb_print(image_matrix, FACE_COLOR_RED, <span class="string">&quot;Intruder Alert!&quot;</span>);</span><br><span class="line">                matched_id = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;Face Not Aligned&quot;</span>);</span><br><span class="line">        <span class="comment">//rgb_print(image_matrix, FACE_COLOR_YELLOW, &quot;Human Detected&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dl_matrix3du_free(aligned_face);</span><br><span class="line">    <span class="keyword">return</span> matched_id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="外部调用接口定义">外部调用接口定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">httpd_config_t</span> config = HTTPD_DEFAULT_CONFIG();</span><br><span class="line"></span><br><span class="line">    <span class="type">httpd_uri_t</span> index_uri = &#123;</span><br><span class="line">        .uri       = <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        .method    = HTTP_GET,</span><br><span class="line">        .handler   = index_handler,</span><br><span class="line">        .user_ctx  = <span class="literal">NULL</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">httpd_uri_t</span> status_uri = &#123;</span><br><span class="line">        .uri       = <span class="string">&quot;/status&quot;</span>,</span><br><span class="line">        .method    = HTTP_GET,</span><br><span class="line">        .handler   = status_handler,</span><br><span class="line">        .user_ctx  = <span class="literal">NULL</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">httpd_uri_t</span> cmd_uri = &#123;</span><br><span class="line">        .uri       = <span class="string">&quot;/control&quot;</span>,</span><br><span class="line">        .method    = HTTP_GET,</span><br><span class="line">        .handler   = cmd_handler,</span><br><span class="line">        .user_ctx  = <span class="literal">NULL</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">httpd_uri_t</span> capture_uri = &#123;</span><br><span class="line">        .uri       = <span class="string">&quot;/capture&quot;</span>,</span><br><span class="line">        .method    = HTTP_GET,</span><br><span class="line">        .handler   = capture_handler,</span><br><span class="line">        .user_ctx  = <span class="literal">NULL</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="type">httpd_uri_t</span> stream_uri = &#123;</span><br><span class="line">        .uri       = <span class="string">&quot;/stream&quot;</span>,</span><br><span class="line">        .method    = HTTP_GET,</span><br><span class="line">        .handler   = stream_handler,</span><br><span class="line">        .user_ctx  = <span class="literal">NULL</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ra_filter_init(&amp;ra_filter, <span class="number">20</span>);</span><br><span class="line">    </span><br><span class="line">    mtmn_config.min_face = <span class="number">80</span>;</span><br><span class="line">    mtmn_config.pyramid = <span class="number">0.7</span>;</span><br><span class="line">    mtmn_config.p_threshold.score = <span class="number">0.6</span>;</span><br><span class="line">    mtmn_config.p_threshold.nms = <span class="number">0.7</span>;</span><br><span class="line">    mtmn_config.r_threshold.score = <span class="number">0.7</span>;</span><br><span class="line">    mtmn_config.r_threshold.nms = <span class="number">0.7</span>;</span><br><span class="line">    mtmn_config.r_threshold.candidate_number = <span class="number">4</span>;</span><br><span class="line">    mtmn_config.o_threshold.score = <span class="number">0.7</span>;</span><br><span class="line">    mtmn_config.o_threshold.nms = <span class="number">0.4</span>;</span><br><span class="line">    mtmn_config.o_threshold.candidate_number = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    face_id_init(&amp;id_list, FACE_ID_SAVE_NUMBER, ENROLL_CONFIRM_TIMES);</span><br><span class="line">    </span><br><span class="line">    Serial.<span class="built_in">printf</span>(<span class="string">&quot;Starting web server on port: &#x27;%d&#x27;\n&quot;</span>, config.server_port);</span><br><span class="line">    <span class="keyword">if</span> (httpd_start(&amp;camera_httpd, &amp;config) == ESP_OK) &#123;</span><br><span class="line">        httpd_register_uri_handler(camera_httpd, &amp;index_uri);</span><br><span class="line">        httpd_register_uri_handler(camera_httpd, &amp;cmd_uri);</span><br><span class="line">        httpd_register_uri_handler(camera_httpd, &amp;status_uri);</span><br><span class="line">        httpd_register_uri_handler(camera_httpd, &amp;capture_uri);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    config.server_port += <span class="number">1</span>;</span><br><span class="line">    config.ctrl_port += <span class="number">1</span>;</span><br><span class="line">    Serial.<span class="built_in">printf</span>(<span class="string">&quot;Starting stream server on port: &#x27;%d&#x27;\n&quot;</span>, config.server_port);</span><br><span class="line">    <span class="keyword">if</span> (httpd_start(&amp;stream_httpd, &amp;config) == ESP_OK) &#123;</span><br><span class="line">        httpd_register_uri_handler(stream_httpd, &amp;stream_uri);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="web界面定义">web界面定义</h3><blockquote><p>页面定义与渲染 举例 状态页面</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="type">static</span> <span class="type">esp_err_t</span> <span class="title function_">status_handler</span><span class="params">(<span class="type">httpd_req_t</span> *req)</span>&#123;</span><br><span class="line"> <span class="type">static</span> <span class="type">char</span> json_response[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">sensor_t</span> * s = esp_camera_sensor_get();</span><br><span class="line">    <span class="type">char</span> * p = json_response;</span><br><span class="line">    *p++ = <span class="string">&#x27;&#123;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;framesize\&quot;:%u,&quot;</span>, s-&gt;status.framesize);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;quality\&quot;:%u,&quot;</span>, s-&gt;status.quality);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;brightness\&quot;:%d,&quot;</span>, s-&gt;status.brightness);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;contrast\&quot;:%d,&quot;</span>, s-&gt;status.contrast);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;saturation\&quot;:%d,&quot;</span>, s-&gt;status.saturation);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;special_effect\&quot;:%u,&quot;</span>, s-&gt;status.special_effect);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;wb_mode\&quot;:%u,&quot;</span>, s-&gt;status.wb_mode);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;awb\&quot;:%u,&quot;</span>, s-&gt;status.awb);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;awb_gain\&quot;:%u,&quot;</span>, s-&gt;status.awb_gain);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;aec\&quot;:%u,&quot;</span>, s-&gt;status.aec);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;aec2\&quot;:%u,&quot;</span>, s-&gt;status.aec2);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;ae_level\&quot;:%d,&quot;</span>, s-&gt;status.ae_level);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;aec_value\&quot;:%u,&quot;</span>, s-&gt;status.aec_value);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;agc\&quot;:%u,&quot;</span>, s-&gt;status.agc);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;agc_gain\&quot;:%u,&quot;</span>, s-&gt;status.agc_gain);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;gainceiling\&quot;:%u,&quot;</span>, s-&gt;status.gainceiling);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;bpc\&quot;:%u,&quot;</span>, s-&gt;status.bpc);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;wpc\&quot;:%u,&quot;</span>, s-&gt;status.wpc);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;raw_gma\&quot;:%u,&quot;</span>, s-&gt;status.raw_gma);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;lenc\&quot;:%u,&quot;</span>, s-&gt;status.lenc);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;vflip\&quot;:%u,&quot;</span>, s-&gt;status.vflip);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;hmirror\&quot;:%u,&quot;</span>, s-&gt;status.hmirror);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;dcw\&quot;:%u,&quot;</span>, s-&gt;status.dcw);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;colorbar\&quot;:%u,&quot;</span>, s-&gt;status.colorbar);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;face_detect\&quot;:%u,&quot;</span>, detection_enabled);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;face_enroll\&quot;:%u,&quot;</span>, is_enrolling);</span><br><span class="line">    p+=<span class="built_in">sprintf</span>(p, <span class="string">&quot;\&quot;face_recognize\&quot;:%u&quot;</span>, recognition_enabled);</span><br><span class="line">    *p++ = <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    *p++ = <span class="number">0</span>;</span><br><span class="line">    httpd_resp_set_type(req, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    httpd_resp_set_hdr(req, <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> httpd_resp_send(req, json_response, <span class="built_in">strlen</span>(json_response));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line"><span class="type">static</span> <span class="type">esp_err_t</span> <span class="title function_">index_handler</span><span class="params">(<span class="type">httpd_req_t</span> *req)</span>&#123;</span><br><span class="line">    httpd_resp_set_type(req, <span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    httpd_resp_set_hdr(req, <span class="string">&quot;Content-Encoding&quot;</span>, <span class="string">&quot;gzip&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> httpd_resp_send(req, (<span class="type">const</span> <span class="type">char</span> *)index_html_gz, index_html_gz_len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终效果">最终效果</h2><h3 id="esp32-cam-web界面显示">esp32-cam web界面显示</h3><blockquote><p>如图</p></blockquote><p><img src="/2024/10/27/cat-camera/cateye.png" class="lazyload placeholder" data-srcset="/2024/10/27/cat-camera/cateye.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="py识别效果">py识别效果</h3><blockquote><p>效果如以下链接</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://v.youku.com/v_show/id_XNTE2MTUwNjA1Ng==.html</span><br></pre></td></tr></table></figure><h2 id="See">See</h2><ul><li>1.<a href="https://github.com/espressif/arduino-esp32">https://github.com/espressif/arduino-esp32</a></li><li>2.<a href="https://makeradvisor.com/tools/esp32-cam/">https://makeradvisor.com/tools/esp32-cam/</a></li><li>3.<a href="https://randomnerdtutorials.com/esp32-cam-video-streaming-face-recognition-arduino-ide/">https://randomnerdtutorials.com/esp32-cam-video-streaming-face-recognition-arduino-ide/</a></li><li>4.<a href="http://pepy.tech/badge/opencv-python">http://pepy.tech/badge/opencv-python</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> esp32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于HarmonyOS Next(5.0.0) 简单demo app实现</title>
      <link href="/2024/10/25/ohos-pixiv-image/"/>
      <url>/2024/10/25/ohos-pixiv-image/</url>
      
        <content type="html"><![CDATA[<h1>基于HarmonyOS Next(5.0.0) 简单demo app实现</h1><h2 id="简介">简介</h2><h3 id="OpenHarmony：（开源）">OpenHarmony：（开源）</h3><p>鸿蒙底层内核系统，集成Linux内核+LiteOS，具备底层通信能力，属于鸿蒙底层的架构层。</p><h3 id="HarmonyOS：（闭源）">HarmonyOS：（闭源）</h3><blockquote><p>基于OpenHarmony和安卓（AOSP）打造的手机系统，包含UI界面，应用生态绑定安卓，这是目前鸿蒙的主形态。</p></blockquote><h3 id="Harmony-OS-NEXT：（闭源）">Harmony OS NEXT：（闭源）</h3><blockquote><p>在HarmonyOS基础上剔除安卓（AOSP）后的产品，属于全新的手机系统，是鸿蒙系统的未来形态。<br>Harmony OS NEXT，也被称为纯血鸿蒙。这个系统就不再兼容安卓生态。</p></blockquote><h2 id="开发简述">开发简述</h2><blockquote><p>!!!部分网站需登录华为开发者账号查看!!!</p></blockquote><h3 id="IDE-下载链接">IDE 下载链接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://developer.huawei.com/consumer/cn/deveco-studio/</span><br></pre></td></tr></table></figure><h3 id="ArkTS学习文档">ArkTS学习文档</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-commonlibrary-overview-V5</span><br></pre></td></tr></table></figure><h3 id="HarmonyOS-NEXT-开发文档">HarmonyOS NEXT 开发文档</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ARKUI</span></span><br><span class="line">https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkui-V5</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">API</span></span><br><span class="line">https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/arkui-api-V5?catalogVersion=V5</span><br></pre></td></tr></table></figure><h3 id="基础概念">基础概念</h3><h4 id="应用模型">应用模型</h4><blockquote><p>应用模型是HarmonyOS为开发者提供的应用程序所需能力的抽象提炼，它提供了应用程序必备的组件和运行机制。有了应用模型，开发者可以基于一套统一的模型进行应用开发，使应用开发更简单、高效。<br>随着系统的演进发展，HarmonyOS先后提供了两种应用模型：</p></blockquote><blockquote><p>FA（Feature Ability）模型： HarmonyOS API 7开始支持的模型，已经不再主推。</p></blockquote><blockquote><p>Stage模型： HarmonyOS API 9开始新增的模型，是目前主推且会长期演进的模型。在该模型中，由于提供了AbilityStage、WindowStage等类作为应用组件和Window窗口的“舞台”，因此称这种应用模型为Stage模型。Stage模型开发可见Stage模型开发概述。快速入门以此为例提供开发指导。</p></blockquote><blockquote><p>项目基本框架如下</p></blockquote><p><img src="/2024/10/25/ohos-pixiv-image/prj_struct.png" class="lazyload placeholder" data-srcset="/2024/10/25/ohos-pixiv-image/prj_struct.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="入门指导链接">入门指导链接</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/start-with-ets-stage-V5</span><br></pre></td></tr></table></figure><h3 id="hdc工具（类别adb）">hdc工具（类别adb）</h3><blockquote><p>通过HarmonyOS SDK获取，在SDK的toolchains目录, 直接使用hdc安装、更新HAP。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 安装、更新，多HAP可以指定多个文件路径</span><br><span class="line">hdc install entry.hap feature.hap</span><br><span class="line">// 执行结果</span><br><span class="line">install bundle successfully.</span><br><span class="line">// 卸载</span><br><span class="line">hdc uninstall com.example.myapplication</span><br><span class="line">// 执行结果</span><br><span class="line">uninstall bundle successfully.</span><br></pre></td></tr></table></figure><h2 id="开发流程">开发流程</h2><ul><li>注册成为开发者</li></ul><blockquote><p>在华为开发者联盟网站（<a href="https://developer.huawei.com/consumer/cn/%EF%BC%89%E4%B8%8A%EF%BC%8C%E6%B3%A8%E5%86%8C%E6%88%90%E4%B8%BA%E5%BC%80%E5%8F%91%E8%80%85%EF%BC%8C%E5%B9%B6%E5%AE%8C%E6%88%90%E5%AE%9E%E5%90%8D%E8%AE%A4%E8%AF%81%EF%BC%8C%E4%BB%8E%E8%80%8C%E4%BA%AB%E5%8F%97%E8%81%94%E7%9B%9F%E5%BC%80%E6%94%BE%E7%9A%84%E5%90%84%E7%B1%BB%E8%83%BD%E5%8A%9B%E5%92%8C%E6%9C%8D%E5%8A%A1%E3%80%82">https://developer.huawei.com/consumer/cn/）上，注册成为开发者，并完成实名认证，从而享受联盟开放的各类能力和服务。</a></p></blockquote><ul><li>创建应用</li></ul><blockquote><p>在AppGallery Connect（简称AGC）上，参考创建项目和创建应用完成HarmonyOS应用的创建，从而使用各类服务。</p></blockquote><ul><li>配置安装DevEco Studio</li></ul><blockquote><p>安装最新版DevEco Studio。<a href="https://developer.huawei.com/consumer/cn/deveco-studio/">https://developer.huawei.com/consumer/cn/deveco-studio/</a></p></blockquote><ul><li><p>使用DevEco Studio创建应用工程</p></li><li><p>配置签名信息</p></li></ul><blockquote><p>使用模拟器和预览器调试无需配置签名信息，使用真机设备调试则需要对HAP进行签名。</p></blockquote><h2 id="实现功能">实现功能</h2><h3 id="基本功能">基本功能</h3><ul><li><p>基础页面展示</p></li><li><p>基础组件使用</p></li><li><p>网络请求与处理</p></li><li><p>log处理</p></li></ul><h3 id="使用技术">使用技术</h3><ul><li><p>axio</p></li><li><p>log4a(<a href="https://ericple.atomgit.net/log4a-docs/guide/getting-started">https://ericple.atomgit.net/log4a-docs/guide/getting-started</a>)</p></li><li><p>ArkUI</p></li><li><p>ArkTs</p></li><li><p>PreferencesManager</p></li></ul><h2 id="实现过程">实现过程</h2><h3 id="page-页面代码编写">page 页面代码编写</h3><h4 id="main-page-ets">main page.ets</h4><blockquote><p>以下页面定义了文本显示、文本输入、单选框、按钮等组件；用户输入指定信息，通过PreferencesManager保存数据，待需要时重新读取；定义按钮跳转至下一个页面。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PageClass</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../model/PageModel&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BusinessError</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.BasicServicesKit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PreferencesManager</span> <span class="keyword">from</span> <span class="string">&#x27;../data/PreferencesManager&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Logger</span>, <span class="title class_">LogManager</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@pie/log4a&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fileAppender_a &#125; <span class="keyword">from</span> <span class="string">&#x27;../logs/log_const&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">IndexBuilder</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">param</span>: <span class="title class_">Object</span></span>) &#123;</span><br><span class="line">  <span class="title class_">Index</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Index</span> &#123;</span><br><span class="line">  <span class="comment">// @State logger: Logger = LogManager.getLogger(this);// 此处直接获取Logger即可</span></span><br><span class="line">  <span class="meta">@State</span> <span class="attr">logger</span>: <span class="title class_">Logger</span> = <span class="title class_">LogManager</span>.<span class="title function_">getLogger</span>(<span class="variable language_">this</span>)</span><br><span class="line">    .<span class="title function_">bindAppender</span>(fileAppender_a)</span><br><span class="line">  <span class="comment">// .bindAppender(socketAppender);</span></span><br><span class="line">  <span class="meta">@State</span> <span class="attr">text</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="meta">@State</span> <span class="attr">positionInfo</span>: <span class="title class_">CaretOffset</span> = &#123; <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</span><br><span class="line">  <span class="meta">@State</span> <span class="attr">passwordState</span>: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line">  <span class="attr">controller</span>: <span class="title class_">TextInputController</span> = <span class="keyword">new</span> <span class="title class_">TextInputController</span>()</span><br><span class="line">  <span class="attr">pageInfos</span>: <span class="title class_">NavPathStack</span> = <span class="keyword">new</span> <span class="title class_">NavPathStack</span>()</span><br><span class="line">  tmp = <span class="keyword">new</span> <span class="title class_">PageClass</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">build</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Navigation</span>(<span class="variable language_">this</span>.<span class="property">pageInfos</span>) &#123;</span><br><span class="line">      <span class="title class_">Column</span>(&#123; <span class="attr">space</span>: <span class="number">5</span> &#125;) &#123;</span><br><span class="line">        <span class="title class_">Row</span>(&#123; <span class="attr">space</span>: <span class="number">5</span> &#125;) &#123;</span><br><span class="line">          <span class="title class_">Text</span>(<span class="string">&quot;链接: &quot;</span>)</span><br><span class="line">            .<span class="title function_">fontSize</span>(<span class="number">10</span>)</span><br><span class="line">            .<span class="title function_">fontColor</span>(<span class="title class_">Color</span>.<span class="property">Blue</span>)</span><br><span class="line">          <span class="title class_">TextInput</span>(&#123; <span class="attr">text</span>: <span class="string">&quot;https://image.anosu.top/pixiv/&quot;</span>, <span class="attr">placeholder</span>: <span class="string">&#x27;input your link...&#x27;</span>, <span class="attr">controller</span>: <span class="variable language_">this</span>.<span class="property">controller</span> &#125;)</span><br><span class="line">            .<span class="title function_">placeholderColor</span>(<span class="title class_">Color</span>.<span class="property">Grey</span>)</span><br><span class="line">            .<span class="title function_">placeholderFont</span>(&#123; <span class="attr">size</span>: <span class="number">14</span>, <span class="attr">weight</span>: <span class="number">400</span> &#125;)</span><br><span class="line">            .<span class="title function_">caretColor</span>(<span class="title class_">Color</span>.<span class="property">Blue</span>)</span><br><span class="line">            .<span class="title function_">width</span>(<span class="string">&#x27;95%&#x27;</span>)</span><br><span class="line">            .<span class="title function_">height</span>(<span class="number">40</span>)</span><br><span class="line">            .<span class="title function_">margin</span>(<span class="number">20</span>)</span><br><span class="line">            .<span class="title function_">fontSize</span>(<span class="number">14</span>)</span><br><span class="line">            .<span class="title function_">fontColor</span>(<span class="title class_">Color</span>.<span class="property">Black</span>)<span class="comment">// .inputFilter(&#x27;[a-z]&#x27;, (e) =&gt; &#123;</span></span><br><span class="line">              <span class="comment">//    this.logger.info(JSON.stringify(e))</span></span><br><span class="line">              <span class="comment">// &#125;)</span></span><br><span class="line">            .<span class="title function_">onChange</span>(<span class="function">(<span class="params"><span class="attr">value</span>: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">tmp</span>.<span class="property">link</span> = value</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;.<span class="title function_">margin</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Row</span>(&#123; <span class="attr">space</span>: <span class="number">5</span> &#125;) &#123;</span><br><span class="line">          <span class="title class_">Text</span>(<span class="string">&quot;关键字: &quot;</span>)</span><br><span class="line">            .<span class="title function_">fontSize</span>(<span class="number">10</span>)</span><br><span class="line">            .<span class="title function_">fontColor</span>(<span class="title class_">Color</span>.<span class="property">Blue</span>)</span><br><span class="line">          <span class="title class_">TextInput</span>(&#123; <span class="attr">text</span>: <span class="variable language_">this</span>.<span class="property">text</span>, <span class="attr">placeholder</span>: <span class="string">&#x27;input your keyword...&#x27;</span>, <span class="attr">controller</span>: <span class="variable language_">this</span>.<span class="property">controller</span> &#125;)</span><br><span class="line">            .<span class="title function_">placeholderColor</span>(<span class="title class_">Color</span>.<span class="property">Grey</span>)</span><br><span class="line">            .<span class="title function_">placeholderFont</span>(&#123; <span class="attr">size</span>: <span class="number">14</span>, <span class="attr">weight</span>: <span class="number">400</span> &#125;)</span><br><span class="line">            .<span class="title function_">caretColor</span>(<span class="title class_">Color</span>.<span class="property">Blue</span>)</span><br><span class="line">            .<span class="title function_">width</span>(<span class="string">&#x27;95%&#x27;</span>)</span><br><span class="line">            .<span class="title function_">height</span>(<span class="number">40</span>)</span><br><span class="line">            .<span class="title function_">margin</span>(<span class="number">20</span>)</span><br><span class="line">            .<span class="title function_">fontSize</span>(<span class="number">14</span>)</span><br><span class="line">            .<span class="title function_">fontColor</span>(<span class="title class_">Color</span>.<span class="property">Black</span>)<span class="comment">// .inputFilter(&#x27;[a-z]&#x27;, (e) =&gt; &#123;</span></span><br><span class="line">              <span class="comment">//    this.logger.info(JSON.stringify(e))</span></span><br><span class="line">              <span class="comment">// &#125;)</span></span><br><span class="line">            .<span class="title function_">onChange</span>(<span class="function">(<span class="params"><span class="attr">value</span>: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">tmp</span>.<span class="property">keyword</span> = value</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;.<span class="title function_">margin</span>(<span class="number">5</span>)</span><br><span class="line">        <span class="title class_">Row</span>(&#123; <span class="attr">space</span>: <span class="number">12</span> &#125;) &#123;</span><br><span class="line">          <span class="title class_">Button</span>(<span class="string">&#x27;start explore&#x27;</span>)</span><br><span class="line">            .<span class="title function_">onClick</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">              <span class="title class_">PreferencesManager</span>.<span class="property">shared</span>.<span class="title function_">set</span>(<span class="string">&quot;keyword&quot;</span>, <span class="variable language_">this</span>.<span class="property">tmp</span>.<span class="property">keyword</span>)<span class="comment">//保存数据</span></span><br><span class="line">              <span class="title class_">PreferencesManager</span>.<span class="property">shared</span>.<span class="title function_">set</span>(<span class="string">&quot;link&quot;</span>, <span class="variable language_">this</span>.<span class="property">tmp</span>.<span class="property">link</span>)</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">pageInfos</span>.<span class="title function_">pushPathByName</span>(<span class="string">&#x27;PixivImage&#x27;</span>, <span class="string">&quot;this.tmp&quot;</span>)</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">logger</span>.<span class="title function_">info</span>(<span class="string">&quot;jump next page&quot;</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;.<span class="title function_">margin</span>(<span class="number">5</span>)</span><br><span class="line">      &#125;.<span class="title function_">width</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">      .<span class="title function_">margin</span>(<span class="number">5</span>)</span><br><span class="line">    &#125;.<span class="title function_">title</span>(<span class="string">&#x27;首页&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PixivImage-ets">PixivImage.ets</h4><blockquote><p>本页面通过PreferencesManager获取上个页面用户输入数据通过axio（或系统网络API）发起http请求并获取结果，最终将结果渲染至页面，展示为轮播图中Image。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; hilog &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.PerformanceAnalysisKit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> getHttpData, &#123; httpRequestGet &#125; <span class="keyword">from</span> <span class="string">&#x27;../http/HttpRequest&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">JSON</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.ArkTS&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ListDataSource</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../model/ImagegModel&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promptAction &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.ArkUI&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PageClass</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../model/PageModel&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PreferencesManager</span> <span class="keyword">from</span> <span class="string">&#x27;../data/PreferencesManager&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Logger</span>, <span class="title class_">LogManager</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@pie/log4a&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fileAppender_a, socketAppender &#125; <span class="keyword">from</span> <span class="string">&#x27;../logs/log_const&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">PixivImageBuilder</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">param</span>: <span class="title class_">Object</span></span>) &#123;</span><br><span class="line">  <span class="title class_">PixivImage</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">PixivImage</span> &#123;</span><br><span class="line">  <span class="meta">@State</span> <span class="attr">logger</span>: <span class="title class_">Logger</span> = <span class="title class_">LogManager</span>.<span class="title function_">getLogger</span>(<span class="variable language_">this</span>)</span><br><span class="line">    .<span class="title function_">bindAppender</span>(fileAppender_a)</span><br><span class="line">  <span class="attr">swiperController</span>: <span class="title class_">SwiperController</span> = <span class="keyword">new</span> <span class="title class_">SwiperController</span>();</span><br><span class="line">  <span class="meta">@State</span> <span class="attr">pixelMapImg</span>: <span class="title class_">PixelMap</span> | <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="meta">@State</span> <span class="attr">data</span>: <span class="title class_">ListDataSource</span>&lt;<span class="built_in">string</span>&gt; = <span class="keyword">new</span> <span class="title class_">ListDataSource</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">  tmp = <span class="keyword">new</span> <span class="title class_">PageClass</span>();</span><br><span class="line">  <span class="attr">keyword</span>: <span class="built_in">string</span> = <span class="string">&quot;klee&quot;</span> ;</span><br><span class="line">  <span class="attr">link</span>: <span class="built_in">string</span> = <span class="string">&#x27;https://image.anosu.top/pixiv/&#x27;</span>;</span><br><span class="line">  <span class="comment">// pathStack: NavPathStack = new NavPathStack()</span></span><br><span class="line">  <span class="meta">@Provide</span>(<span class="string">&#x27;NavPathStack&#x27;</span>) <span class="attr">pageStack</span>: <span class="title class_">NavPathStack</span> = <span class="keyword">new</span> <span class="title class_">NavPathStack</span>()</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Builder</span></span><br><span class="line">  <span class="title class_">PagesMap</span>(<span class="attr">name</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;PixivImage&#x27;</span>) &#123;</span><br><span class="line">      <span class="title class_">PixivImage</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">menuItems</span>: <span class="title class_">Array</span>&lt;<span class="title class_">NavigationMenuItem</span>&gt; = [</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">aboutToAppear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// this.requestImageUrl(this.src_pix);// 请填写一个具体的网络图片地址</span></span><br><span class="line">    hilog.<span class="title function_">warn</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;start load image&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">keyword</span> = <span class="title class_">PreferencesManager</span>.<span class="property">shared</span>.<span class="title function_">get</span>(<span class="string">&quot;keyword&quot;</span>)?.<span class="title function_">toString</span>() || <span class="string">&quot;klee&quot;</span>;<span class="comment">//读取存储数据</span></span><br><span class="line">    <span class="comment">// 如果结果为falsy值（包括null、undefined、&#x27;&#x27;、0、NaN、false），则默认为空字符串</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">link</span> = <span class="title class_">PreferencesManager</span>.<span class="property">shared</span>.<span class="title function_">get</span>(<span class="string">&quot;link&quot;</span>)?.<span class="title function_">toString</span>() || <span class="string">&quot;https://image.anosu.top/pixiv/&quot;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">logger</span>.<span class="title function_">info</span>(<span class="string">&quot;result get page :  &quot;</span> + <span class="variable language_">this</span>.<span class="property">keyword</span> +<span class="string">&quot; , link &quot;</span> + <span class="variable language_">this</span>.<span class="property">link</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">pushData</span>(<span class="keyword">await</span> <span class="title function_">getHttpData</span>(<span class="variable language_">this</span>.<span class="property">keyword</span>, <span class="variable language_">this</span>.<span class="property">link</span>))</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">logger</span>.<span class="title function_">info</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">getData</span>(<span class="number">0</span>))</span><br><span class="line">    promptAction.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;load result: &quot;</span> + <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">getData</span>(<span class="number">0</span>),</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">2000</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">// this.list.push(await getHttpData());</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">build</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">NavDestination</span>() &#123;</span><br><span class="line">      <span class="title class_">Column</span>(&#123; <span class="attr">space</span>: <span class="number">5</span> &#125;) &#123;</span><br><span class="line">        <span class="title class_">Swiper</span>(<span class="variable language_">this</span>.<span class="property">swiperController</span>) &#123;</span><br><span class="line">          <span class="title class_">LazyForEach</span>(<span class="variable language_">this</span>.<span class="property">data</span>, <span class="function">(<span class="params"><span class="attr">item</span>: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title class_">Image</span>(item)</span><br><span class="line">              .<span class="title function_">alt</span>($r(<span class="string">&#x27;app.media.startIcon&#x27;</span>))</span><br><span class="line">              .<span class="title function_">objectFit</span>(<span class="title class_">ImageFit</span>.<span class="property">None</span>)</span><br><span class="line">              .<span class="title function_">width</span>(<span class="string">&#x27;95%&#x27;</span>)</span><br><span class="line">              .<span class="title function_">height</span>(<span class="string">&#x27;95%&#x27;</span>)</span><br><span class="line"></span><br><span class="line">          &#125;, <span class="function">(<span class="params"><span class="attr">item</span>: <span class="built_in">string</span></span>) =&gt;</span> item)</span><br><span class="line">        &#125;</span><br><span class="line">        .<span class="title function_">indicator</span>(<span class="literal">true</span>)</span><br><span class="line">        .<span class="title function_">autoPlay</span>(<span class="literal">true</span>)</span><br><span class="line">        .<span class="title function_">loop</span>(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Row</span>(&#123; <span class="attr">space</span>: <span class="number">12</span> &#125;) &#123;</span><br><span class="line">          <span class="title class_">Button</span>(<span class="string">&#x27;show next&#x27;</span>)</span><br><span class="line">            .<span class="title function_">onClick</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">              <span class="comment">// this.data.pushData()</span></span><br><span class="line">              <span class="comment">// this.aboutToAppear();</span></span><br><span class="line">              <span class="comment">// this.list.push(await getHttpData());</span></span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">pushData</span>(<span class="keyword">await</span> <span class="title function_">getHttpData</span>(<span class="variable language_">this</span>.<span class="property">keyword</span>, <span class="variable language_">this</span>.<span class="property">link</span>))</span><br><span class="line"></span><br><span class="line">              <span class="comment">//  this.logger.info(&quot;list  msg length: &quot; + this.list.length)</span></span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">logger</span>.<span class="title function_">info</span>(<span class="string">&quot;data  msg length: &quot;</span> + <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">totalCount</span>())</span><br><span class="line">              promptAction.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                <span class="attr">message</span>: <span class="string">&quot;load result: &quot;</span> + <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">getData</span>(<span class="number">0</span>),</span><br><span class="line">                <span class="attr">duration</span>: <span class="number">2000</span></span><br><span class="line">              &#125;);</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;.<span class="title function_">margin</span>(<span class="number">5</span>)</span><br><span class="line">      &#125;.<span class="title function_">width</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">      .<span class="title function_">margin</span>(&#123; <span class="attr">top</span>: <span class="number">5</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    .<span class="title function_">title</span>(<span class="string">&#x27;PixivImage&#x27;</span>)</span><br><span class="line">    .<span class="title function_">menus</span>(<span class="variable language_">this</span>.<span class="property">menuItems</span>)</span><br><span class="line">    .<span class="title function_">onBackPressed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pageStack</span>.<span class="title function_">pop</span>()</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">onReady</span>(<span class="function">(<span class="params"><span class="attr">context</span>: <span class="title class_">NavDestinationContext</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pageStack</span> = context.<span class="property">pathStack</span>;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">logger</span>.<span class="title function_">info</span>(<span class="string">&quot;current page config info is &quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(context.<span class="title function_">getConfigInRouteMap</span>()))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="http请求发起">http请求发起</h4><blockquote><p>以下方法使用系统@kit.NetworkKit发起http get 请求</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; http &#125; <span class="keyword">from</span> <span class="string">&quot;@kit.NetworkKit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">JSON</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@kit.ArkTS&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getHttpData</span>(<span class="params"> <span class="attr">keyword</span>: <span class="built_in">string</span>, <span class="attr">link</span>: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> httpRequest = http.<span class="title function_">createHttp</span>();</span><br><span class="line">  <span class="keyword">if</span> (link) &#123;</span><br><span class="line">    <span class="variable constant_">BASE_URL</span> = link;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;BASE_URL &quot;</span> + <span class="variable constant_">BASE_URL</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> response = httpRequest.<span class="title function_">request</span>(</span><br><span class="line">    <span class="comment">// 填写HTTP请求的URL地址，可以带参数也可以不带参数。URL地址需要开发者自定义。请求的参数可以在extraData中指定</span></span><br><span class="line">    <span class="variable constant_">BASE_URL</span> + <span class="string">&quot;direct&quot;</span> +<span class="string">&quot;&amp;keyword=&quot;</span> + keyword,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">method</span>: http.<span class="property">RequestMethod</span>.<span class="property">GET</span>, <span class="comment">// 可选，默认为http.RequestMethod.GET</span></span><br><span class="line">      <span class="comment">// 开发者根据自身业务需要添加header字段</span></span><br><span class="line">      <span class="attr">header</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">expectDataType</span>: http.<span class="property">HttpDataType</span>.<span class="property">STRING</span>, <span class="comment">// 可选，指定返回数据的类型</span></span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 使用await和async，等待请求完成处理数据后返回</span></span><br><span class="line">  <span class="keyword">await</span> response.<span class="title function_">then</span>(<span class="function">(<span class="params"><span class="attr">data</span>: <span class="built_in">object</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (data[<span class="string">&quot;responseCode&quot;</span>] = <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="comment">// 处理返回结果</span></span><br><span class="line">      res = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data[<span class="string">&quot;header&quot;</span>][<span class="string">&quot;location&quot;</span>]);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;output image src: &quot;</span> + res);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// todo 请求失败，进行失败逻辑处理</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params"><span class="attr">err</span>: <span class="built_in">object</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// todo 请求失败，进行失败逻辑处理</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;error:&#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(err));</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">replace</span>(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="log处理">log处理</h3><h4 id="log初始化">log初始化</h4><blockquote><p>在EntryAbility中onCreate()周期函数编写以下代码</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onCreate</span>(<span class="attr">want</span>: <span class="title class_">Want</span>, <span class="attr">launchParam</span>: <span class="title class_">AbilityConstant</span>.<span class="property">LaunchParam</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Ability onCreate&#x27;</span>);</span><br><span class="line">  <span class="title class_">LogManager</span>.<span class="title function_">setLogFilePath</span>(<span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">filesDir</span>);</span><br><span class="line">  <span class="title class_">LogManager</span>.<span class="title function_">interceptConsole</span>(); <span class="comment">//开启console拦截</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="log-基础定义">log 基础定义</h4><blockquote><p>以下代码定义了log基础信息：文件名，多线程日志记录，单个log最大大小，log缓存数目，log上报信息</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AbstractAppender</span>, <span class="title class_">FileAppender</span>, <span class="title class_">Level</span>, <span class="title class_">TCPSocketAppender</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@pie/log4a&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; systemDateTime &#125; <span class="keyword">from</span> <span class="string">&quot;@kit.BasicServicesKit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getSysTime, getTimeToYYYYDDMMHHMMSS &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/time&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">socketAppender</span>: <span class="title class_">AbstractAppender</span> = <span class="keyword">new</span> <span class="title class_">TCPSocketAppender</span>(&#123;</span><br><span class="line">  <span class="attr">address</span>: <span class="string">&#x27;114.xxx.xxx.xxx&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">1234</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;socket&#x27;</span>,</span><br><span class="line">  <span class="attr">level</span>: <span class="title class_">Level</span>.<span class="property">ALL</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">fileAppender_a</span>: <span class="title class_">AbstractAppender</span> =</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">FileAppender</span>(<span class="string">&#x27;OHOS_PIXIV_log_&#x27;</span> + <span class="title function_">getSysTime</span>()+ <span class="string">&#x27;.log&#x27;</span>, <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">    <span class="title class_">Level</span>.<span class="property">ALL</span>, &#123;</span><br><span class="line">      <span class="attr">useWorker</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">maxFileSize</span>: <span class="number">1024</span> * <span class="number">20</span>, <span class="comment">//kb 存储单个文件大小 超过会存入缓存</span></span><br><span class="line">      <span class="attr">maxCacheCount</span>: <span class="number">10</span> <span class="comment">//日志文件缓存数量</span></span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h4 id="log-使用">log 使用</h4><blockquote><p>在page页面使用如下</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@State</span> <span class="attr">logger</span>: <span class="title class_">Logger</span> = <span class="title class_">LogManager</span>.<span class="title function_">getLogger</span>(<span class="variable language_">this</span>)</span><br><span class="line">    .<span class="title function_">bindAppender</span>(fileAppender_a)</span><br><span class="line">  <span class="comment">// .bindAppender(socketAppender); //日志上报append</span></span><br><span class="line"><span class="comment">// 打印log</span></span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">logger</span>.<span class="title function_">info</span>(<span class="string">&#x27;Radio1 status is &#x27;</span> + isChecked)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>log 输出示例</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10-25 21:41:55.491   2317-2317     A03d00/JSAPP                    com.examp...lication  I     [INFO ]2024-10-25 21:41:55,488[PixivImage:2]current page config info is &#123;&quot;name&quot;:&quot;PixivImage&quot;,&quot;pageSourceFile&quot;:&quot;src/main/ets/pages/PixivImage.ets&quot;,&quot;data&quot;:&#123;&quot;description&quot;:&quot;this is PixivImage&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="数据存储">数据存储</h3><ul><li>工具类定义</li></ul><blockquote><p>使用PreferencesManager保存读取数据，示例如下</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入包</span></span><br><span class="line"><span class="keyword">import</span> dataPreferences <span class="keyword">from</span> <span class="string">&#x27;@ohos.data.preferences&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取context</span></span><br><span class="line"><span class="keyword">let</span> context = <span class="title function_">getContext</span>(<span class="variable language_">this</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">PreferencesManager</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> shared = <span class="keyword">new</span> <span class="title class_">PreferencesManager</span>();</span><br><span class="line">  preferences?: dataPreferences.<span class="property">Preferences</span>;</span><br><span class="line">  <span class="attr">preferencesName</span>: <span class="built_in">string</span> = <span class="string">&#x27;CommonPreferences&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化preferences实例</span></span><br><span class="line">  <span class="title function_">initPreferences</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">preferences</span> = dataPreferences.<span class="title function_">getPreferencesSync</span>(context, &#123; <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">preferencesName</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置数据</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params"><span class="attr">key</span>: <span class="built_in">string</span>, <span class="attr">value</span>: dataPreferences.<span class="title class_">ValueType</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">preferences</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">initPreferences</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">preferences</span>?.<span class="title function_">putSync</span>(key, value);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">preferences</span>?.<span class="title function_">flush</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取数据</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="attr">key</span>: <span class="built_in">string</span>): dataPreferences.<span class="property">ValueType</span> | <span class="literal">null</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">preferences</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">initPreferences</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="property">preferences</span>?.<span class="title function_">getSync</span>(key, <span class="literal">null</span>);;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除数据</span></span><br><span class="line">  <span class="title function_">delete</span>(<span class="params"><span class="attr">key</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">preferences</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">initPreferences</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">preferences</span>?.<span class="title function_">hasSync</span>(key)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">preferences</span>.<span class="title function_">deleteSync</span>(key);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">preferences</span>.<span class="title function_">flush</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>工具类使用</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入数据</span></span><br><span class="line">      <span class="title class_">PreferencesManager</span>.<span class="property">shared</span>.<span class="title function_">set</span>(<span class="string">&quot;keyword&quot;</span>, <span class="variable language_">this</span>.<span class="property">tmp</span>.<span class="property">keyword</span>)</span><br><span class="line">    <span class="comment">//   读取数据</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">keyword</span> = <span class="title class_">PreferencesManager</span>.<span class="property">shared</span>.<span class="title function_">get</span>(<span class="string">&quot;keyword&quot;</span>)?.<span class="title function_">toString</span>() || <span class="string">&quot;klee&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="轮播图数据处理">轮播图数据处理</h3><blockquote><p>基础数据类的定义</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic implementation of IDataSource to handle data listener</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">BasicDataSource</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">IDataSource</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">listeners</span>: <span class="title class_">DataChangeListener</span>[] = [];</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">originDataArray</span>: T[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">totalCount</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">getData</span>(<span class="attr">index</span>: <span class="built_in">number</span>): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">originDataArray</span>[index];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 该方法为框架侧调用，为LazyForEach组件向其数据源处添加listener监听</span></span><br><span class="line">  <span class="title function_">registerDataChangeListener</span>(<span class="attr">listener</span>: <span class="title class_">DataChangeListener</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">indexOf</span>(listener) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;add listener&#x27;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">push</span>(listener);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 该方法为框架侧调用，为对应的LazyForEach组件在数据源处去除listener监听</span></span><br><span class="line">  <span class="title function_">unregisterDataChangeListener</span>(<span class="attr">listener</span>: <span class="title class_">DataChangeListener</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> pos = <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">indexOf</span>(listener);</span><br><span class="line">    <span class="keyword">if</span> (pos &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;remove listener&#x27;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">splice</span>(pos, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通知LazyForEach组件需要重载所有子组件</span></span><br><span class="line">  <span class="title function_">notifyDataReload</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">listener</span> =&gt;</span> &#123;</span><br><span class="line">      listener.<span class="title function_">onDataReloaded</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通知LazyForEach组件需要在index对应索引处添加子组件</span></span><br><span class="line">  <span class="title function_">notifyDataAdd</span>(<span class="attr">index</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">listener</span> =&gt;</span> &#123;</span><br><span class="line">      listener.<span class="title function_">onDataAdd</span>(index);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通知LazyForEach组件在index对应索引处数据有变化，需要重建该子组件</span></span><br><span class="line">  <span class="title function_">notifyDataChange</span>(<span class="attr">index</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">listener</span> =&gt;</span> &#123;</span><br><span class="line">      listener.<span class="title function_">onDataChange</span>(index);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通知LazyForEach组件需要在index对应索引处删除该子组件</span></span><br><span class="line">  <span class="title function_">notifyDataDelete</span>(<span class="attr">index</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">listener</span> =&gt;</span> &#123;</span><br><span class="line">      listener.<span class="title function_">onDataDelete</span>(index);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通知LazyForEach组件将from索引和to索引处的子组件进行交换</span></span><br><span class="line">  <span class="title function_">notifyDataMove</span>(<span class="attr">from</span>: <span class="built_in">number</span>, <span class="attr">to</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">listener</span> =&gt;</span> &#123;</span><br><span class="line">      listener.<span class="title function_">onDataMove</span>(<span class="keyword">from</span>, to);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>数据模型类</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BasicDataSource</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./BasicDataSource&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ListDataSource</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">BasicDataSource</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">dataArray</span>: T[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">totalCount</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">dataArray</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">getData</span>(<span class="attr">index</span>: <span class="built_in">number</span>): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">dataArray</span>[index];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">addData</span>(<span class="attr">index</span>: <span class="built_in">number</span>, <span class="attr">data</span>: T): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dataArray</span>.<span class="title function_">splice</span>(index, <span class="number">0</span>, data);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">notifyDataAdd</span>(index);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">pushData</span>(<span class="attr">data</span>: T): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dataArray</span>.<span class="title function_">push</span>(data);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">notifyDataAdd</span>(<span class="variable language_">this</span>.<span class="property">dataArray</span>.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>通过以下方法使用</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据初始化</span></span><br><span class="line">  <span class="meta">@State</span> <span class="attr">data</span>: <span class="title class_">ListDataSource</span>&lt;<span class="built_in">string</span>&gt; = <span class="keyword">new</span> <span class="title class_">ListDataSource</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"><span class="comment">//  数据存储</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">pushData</span>(<span class="keyword">await</span> <span class="title function_">getHttpData</span>(<span class="variable language_">this</span>.<span class="property">keyword</span>, <span class="variable language_">this</span>.<span class="property">link</span>))</span><br><span class="line"><span class="comment">//  数据获取</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">getData</span>(index)</span><br></pre></td></tr></table></figure><h3 id="其他">其他</h3><h4 id="toast">toast</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promptAction.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">           <span class="attr">message</span>: <span class="string">&quot;load result: &quot;</span> + <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">getData</span>(<span class="number">0</span>),</span><br><span class="line">           <span class="attr">duration</span>: <span class="number">2000</span></span><br><span class="line">         &#125;);</span><br></pre></td></tr></table></figure><h4 id="页面跳转">页面跳转</h4><blockquote><p>配置问价module.json5更改</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;entry&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;entry&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$string:module_desc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mainElement&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EntryAbility&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;routerMap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$profile:route_map&quot;</span><span class="punctuation">,</span><span class="comment">//路由更改</span></span><br><span class="line">    <span class="attr">&quot;deviceTypes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;phone&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;tablet&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;2in1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;car&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;requestPermissions&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ohos.permission.INTERNET&quot;</span><span class="punctuation">,</span><span class="comment">//网络权限申请</span></span><br><span class="line">        <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$string:permission_reason&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;usedScene&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;abilities&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;FormAbility&quot;</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;when&quot;</span><span class="punctuation">:</span><span class="string">&quot;inuse&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deliveryWithInstall&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;installationFree&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$profile:main_pages&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;abilities&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EntryAbility&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;srcEntry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./ets/entryability/EntryAbility.ets&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$string:EntryAbility_desc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$media:layered_image&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$string:EntryAbility_label&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;startWindowIcon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$media:startIcon&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;startWindowBackground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$color:start_window_background&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;exported&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;skills&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;entities&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;entity.system.home&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;actions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;action.system.home&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;extensionAbilities&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EntryBackupAbility&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;srcEntry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./ets/entrybackupability/EntryBackupAbility.ets&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;backup&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;exported&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ohos.extension.backup&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$profile:backup_config&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>在entry/src/main/resources/base/profile处新建route_map.json并写入以下代码</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;routerMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pageSourceFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/main/ets/pages/Index.ets&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;buildFunction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IndexBuilder&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;this is Index&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PixivImage&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pageSourceFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/main/ets/pages/PixivImage.ets&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;buildFunction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PixivImageBuilder&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;this is PixivImage&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SaveImagge&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pageSourceFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/main/ets/pages/SaveImagge.ets&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;buildFunction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SaveAlbumBuilder&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;this is Save Image page&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>跳转代码</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">pageInfos</span>.<span class="title function_">pushPathByName</span>(<span class="string">&#x27;PixivImage&#x27;</span>, <span class="string">&quot;this.tmp&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="测试效果">测试效果</h2><blockquote><p>安装后效果如下：</p></blockquote><p><img src="/2024/10/25/ohos-pixiv-image/emluator.png" class="lazyload placeholder" data-srcset="/2024/10/25/ohos-pixiv-image/emluator.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><blockquote><p>log生成路径如下：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/app/el2/100/base/com.example.myapplication/haps/entry/files</span><br></pre></td></tr></table></figure><p><img src="/2024/10/25/ohos-pixiv-image/log.png" class="lazyload placeholder" data-srcset="/2024/10/25/ohos-pixiv-image/log.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="See">See</h2><h3 id="demo-地址">demo 地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/caozhaoqi/ohos_-pixiv_-image</span><br></pre></td></tr></table></figure><h3 id="参考网址">参考网址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5</span><br></pre></td></tr></table></figure><h3 id="blog">blog</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://caozhaoqi.github.io/</span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> harmonyos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyqt5信号槽机制应用</title>
      <link href="/2024/08/21/pyqt5-singal-thread/"/>
      <url>/2024/08/21/pyqt5-singal-thread/</url>
      
        <content type="html"><![CDATA[<h1>pyqt5信号槽机制应用</h1><h2 id="简介">简介</h2><blockquote><p>PyQt5中的信号和槽是用于对象之间的事件处理和通信的一种机制。信号在某个特定事件发生时发出，槽是用来响应这些信号的函数。信号(Signal)与槽(Slot)是Qt中的核心机制，也是在PyQt编程中对象之间进行通信的机制; 在Qt中，每一个QObject对象和PyQt中所有继承自QWidget的控件（这些都是QObject的子对象）都支持信号与槽机制。当信号发射时，连接的槽函数将会自动执行。在PyQt 5中信号与槽通过object.signal.connect()方法连接。</p></blockquote><ul><li>类图</li></ul><p><img src="/2024/08/21/pyqt5-singal-thread/pyqt5-signal.png" class="lazyload placeholder" data-srcset="/2024/08/21/pyqt5-singal-thread/pyqt5-signal.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="简易说明demo">简易说明demo</h3><blockquote><p>通过按钮触发事件，按钮连接槽函数，当按钮点击时触发事件，事件发送信号；槽函数收到信号时输出信息。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QPushButton</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QObject, pyqtSlot</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyButton</span>(<span class="title class_ inherited__">QPushButton</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(text)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseReleaseEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="variable language_">self</span>.clicked.emit()  <span class="comment"># 发射信号</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWindow</span>(<span class="title class_ inherited__">QObject</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.button = MyButton(<span class="string">&quot;Click Me&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button.clicked.connect(<span class="variable language_">self</span>.on_button_clicked)  <span class="comment"># 连接信号槽</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_button_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Button clicked!&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = MyWindow()</span><br><span class="line">    window.button.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="信号与槽的特点">信号与槽的特点</h3><ul><li>一个信号可以连接多个槽。</li><li>一个信号可以连接另一个信号。</li><li>信号参数可以使任何Python类型。</li><li>一个槽可以连接到多个信号。</li><li>信号与槽的连接方式可以是同步连接，也可以是异步连接。</li><li>信号与槽的连接可能会跨线程。</li><li>信号可以断开连接。</li></ul><h2 id="机制使用">机制使用</h2><h3 id="自定义信号与槽">自定义信号与槽</h3><ul><li>自定义信号</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyWidget</span>(<span class="title class_ inherited__">QWidget</span>): </span><br><span class="line">  <span class="comment"># 无参数的信号</span></span><br><span class="line">  Signal_NoParameters = pyqtSignal()   </span><br><span class="line">  <span class="comment"># 带一个参数(整数)的信号   </span></span><br><span class="line">  Signal_OneParameter = pyqtSignal(<span class="built_in">int</span>)     </span><br><span class="line">  <span class="comment"># 带一个参数(整数或者字符串)的重载版本的信号    </span></span><br><span class="line">  Signal_OneParameter_Overload = pyqtSignal([<span class="built_in">int</span>],[<span class="built_in">str</span>]) </span><br><span class="line">  <span class="comment"># 带两个参数(整数,字符串)的信号   </span></span><br><span class="line">  Signal_TwoParameters = pyqtSignal(<span class="built_in">int</span>,<span class="built_in">str</span>)  </span><br><span class="line">  <span class="comment"># 带两个参数([整数,整数]或者[整数,字符串])的重载版本的信号   </span></span><br><span class="line">  Signal_TwoParameters_Overload = pyqtSignal([<span class="built_in">int</span>,<span class="built_in">int</span>],[<span class="built_in">int</span>,<span class="built_in">str</span>]) </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>自定义槽函数</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyWidget</span>(<span class="title class_ inherited__">QWidget</span>): </span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">setValue_NoParameters</span>(<span class="params">self</span>):  </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;无参数的槽函数&#x27;&#x27;&#x27;</span> </span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">setValue_OneParameter</span>(<span class="params">self,nIndex</span>):  </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;带一个参数(整数)的槽函数&#x27;&#x27;&#x27;</span> </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setValue_OneParameter_String</span>(<span class="params">self,szIndex</span>):  </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;带一个参数(字符串)的槽函数&#x27;&#x27;&#x27;</span> </span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">setValue_TwoParameters</span>(<span class="params">self,x,y</span>):  </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;带两个参数(整数,整数)的槽函数&#x27;&#x27;&#x27;</span> </span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">setValue_TwoParameters_String</span>(<span class="params">self,x,szY</span>):  </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;带两个参数(整数,字符串)槽函数&#x27;&#x27;&#x27;</span> </span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>信号槽与槽函数连接</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">app = QApplication(sys.argv)  </span><br><span class="line">widget = MyWidget()  </span><br><span class="line"><span class="comment"># 连接无参数的信号</span></span><br><span class="line">widget.Signal_NoParameters.connect(<span class="variable language_">self</span>.setValue_NoParameters )                     </span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接带一个整数参数的信号</span></span><br><span class="line">widget.Signal_OneParameter.connect(<span class="variable language_">self</span>.setValue_OneParameter)                     </span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接带一个整数参数，经过重载的信号</span></span><br><span class="line">widget.Signal_OneParameter_Overload[<span class="built_in">int</span>].</span><br><span class="line">  connect(<span class="variable language_">self</span>.setValue_OneParameter)               </span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接带一个整数参数，经过重载的信号</span></span><br><span class="line">widget.Signal_OneParameter_Overload[<span class="built_in">str</span>].</span><br><span class="line">  connect(<span class="variable language_">self</span>.setValue_OneParameter_String )           </span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接一个信号，它有两个整数参数</span></span><br><span class="line">widget.Signal_TwoParameters.connect(<span class="variable language_">self</span>.setValue_TwoParameters )                    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接带两个参数(整数,整数)的重载版本的信号</span></span><br><span class="line">widget.Signal_TwoParameters_Overload[<span class="built_in">int</span>,<span class="built_in">int</span>].</span><br><span class="line">  connect(<span class="variable language_">self</span>.setValue_TwoParameters )           </span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接带两个参数(整数,字符串)的重载版本的信号</span></span><br><span class="line">widget.Signal_TwoParameters_Overload[<span class="built_in">int</span>,<span class="built_in">str</span>].</span><br><span class="line">  connect(<span class="variable language_">self</span>.setValue_TwoParameters_String )       </span><br><span class="line">widget.show() </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>信号发送</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyWidget</span>(<span class="title class_ inherited__">QWidget</span>): </span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, event</span>): </span><br><span class="line">    <span class="comment"># 发射无参数的信号</span></span><br><span class="line">    <span class="variable language_">self</span>.Signal_NoParameters.emit() </span><br><span class="line">    <span class="comment"># 发射带一个参数(整数)的信号</span></span><br><span class="line">    <span class="variable language_">self</span>.Signal_OneParameter.emit(<span class="number">1</span>) </span><br><span class="line">    <span class="comment"># 发射带一个参数(整数)的重载版本的信号</span></span><br><span class="line">    <span class="variable language_">self</span>.Signal_OneParameter_Overload.emit(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 发射带一个参数(字符串)的重载版本的信号</span></span><br><span class="line">    <span class="variable language_">self</span>.Signal_OneParameter_Overload.emit(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">    <span class="comment"># 发射带两个参数(整数,字符串)的信号</span></span><br><span class="line">    <span class="variable language_">self</span>.Signal_TwoParameters.emit(<span class="number">1</span>,<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">    <span class="comment"># 发射带两个参数(整数,整数)的重载版本的信号</span></span><br><span class="line">    <span class="variable language_">self</span>.Signal_TwoParameters_Overload.emit(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 发射带两个参数(整数,字符串)的重载版本的信号</span></span><br><span class="line">    <span class="variable language_">self</span>.Signal_TwoParameters_Overload.emit (<span class="number">1</span>,<span class="string">&quot;abc&quot;</span>) </span><br></pre></td></tr></table></figure><ul><li>all code</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QObject , pyqtSignal</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustSignal</span>(<span class="title class_ inherited__">QObject</span>):</span><br><span class="line"></span><br><span class="line">  <span class="comment">#声明无参数的信号</span></span><br><span class="line">  signal1 = pyqtSignal()</span><br><span class="line"></span><br><span class="line">  <span class="comment">#声明带一个int类型参数的信号</span></span><br><span class="line">  signal2 = pyqtSignal(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#声明带int和str类型参数的信号</span></span><br><span class="line">  signal3 = pyqtSignal(<span class="built_in">int</span>,<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#声明带一个列表类型参数的信号</span></span><br><span class="line">  signal4 = pyqtSignal(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#声明带一个字典类型参数的信号</span></span><br><span class="line">  signal5 = pyqtSignal(<span class="built_in">dict</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#声明一个多重载版本的信号，包括带int和str类型参数的信号和带str类型参数的信号</span></span><br><span class="line">  signal6 = pyqtSignal([<span class="built_in">int</span>,<span class="built_in">str</span>], [<span class="built_in">str</span>])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,parent=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="built_in">super</span>(CustSignal,<span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将信号连接到指定槽函数</span></span><br><span class="line">    <span class="variable language_">self</span>.signal1.connect(<span class="variable language_">self</span>.signalCall1)</span><br><span class="line">    <span class="variable language_">self</span>.signal2.connect(<span class="variable language_">self</span>.signalCall2)</span><br><span class="line">    <span class="variable language_">self</span>.signal3.connect(<span class="variable language_">self</span>.signalCall3)</span><br><span class="line">    <span class="variable language_">self</span>.signal4.connect(<span class="variable language_">self</span>.signalCall4)</span><br><span class="line">    <span class="variable language_">self</span>.signal5.connect(<span class="variable language_">self</span>.signalCall5)</span><br><span class="line">    <span class="variable language_">self</span>.signal6[<span class="built_in">int</span>,<span class="built_in">str</span>].connect(<span class="variable language_">self</span>.signalCall6)</span><br><span class="line">    <span class="variable language_">self</span>.signal6[<span class="built_in">str</span>].connect(<span class="variable language_">self</span>.signalCall6OverLoad)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#发射信号</span></span><br><span class="line">    <span class="variable language_">self</span>.signal1.emit()</span><br><span class="line">    <span class="variable language_">self</span>.signal2.emit(<span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">self</span>.signal3.emit(<span class="number">1</span>,<span class="string">&quot;text&quot;</span>)</span><br><span class="line">    <span class="variable language_">self</span>.signal4.emit([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">    <span class="variable language_">self</span>.signal5.emit(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;wangwu&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;25&quot;</span>&#125;)</span><br><span class="line">    <span class="variable language_">self</span>.signal6[<span class="built_in">int</span>,<span class="built_in">str</span>].emit(<span class="number">1</span>,<span class="string">&quot;text&quot;</span>)</span><br><span class="line">    <span class="variable language_">self</span>.signal6[<span class="built_in">str</span>].emit(<span class="string">&quot;text&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">signalCall1</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;signal1 emit&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">signalCall2</span>(<span class="params">self,val</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;signal2 emit,value:&quot;</span>,val)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">signalCall3</span>(<span class="params">self,val,text</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;signal3 emit,value:&quot;</span>,val,text)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">signalCall4</span>(<span class="params">self,val</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;signal4 emit,value:&quot;</span>,val)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">signalCall5</span>(<span class="params">self,val</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;signal5 emit,value:&quot;</span>,val)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">signalCall6</span>(<span class="params">self,val,text</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;signal6 emit,value:&quot;</span>,val,text)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">signalCall6OverLoad</span>(<span class="params">self,val</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;signal6 overload emit,value:&quot;</span>,val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">  custSignal = CustSignal()</span><br></pre></td></tr></table></figure><ul><li>信号与槽传递自定义参数</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QPushButton , QWidget , QMessageBox, QApplication, QHBoxLayout</span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WinForm</span>(<span class="title class_ inherited__">QMainWindow</span>): </span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>): </span><br><span class="line">    <span class="built_in">super</span>(WinForm, <span class="variable language_">self</span>).__init__(parent) </span><br><span class="line">    button1 = QPushButton(<span class="string">&#x27;Button 1&#x27;</span>) </span><br><span class="line">    button2 = QPushButton(<span class="string">&#x27;Button 2&#x27;</span>) </span><br><span class="line"></span><br><span class="line">    button1.clicked.connect(<span class="keyword">lambda</span>: <span class="variable language_">self</span>.onButtonClick(<span class="number">1</span>)) </span><br><span class="line">    button2.clicked.connect(<span class="keyword">lambda</span>: <span class="variable language_">self</span>.onButtonClick(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    layout = QHBoxLayout() </span><br><span class="line">    layout.addWidget(button1) </span><br><span class="line">    layout.addWidget(button2) </span><br><span class="line"></span><br><span class="line">    main_frame = QWidget() </span><br><span class="line">    main_frame.setLayout(layout)    </span><br><span class="line">    <span class="variable language_">self</span>.setCentralWidget(main_frame) </span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">onButtonClick</span>(<span class="params">self, n</span>): </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Button &#123;0&#125; 被按下了&#x27;</span>.<span class="built_in">format</span>(n)) </span><br><span class="line">    QMessageBox.information(<span class="variable language_">self</span>, <span class="string">&quot;信息提示框&quot;</span>, <span class="string">&#x27;Button &#123;0&#125; clicked&#x27;</span>.<span class="built_in">format</span>(n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>: </span><br><span class="line">  app = QApplication(sys.argv) </span><br><span class="line">  form = WinForm() </span><br><span class="line">  form.show() </span><br><span class="line">  sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="装饰器定义信号与槽">装饰器定义信号与槽</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore </span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication ,QWidget ,QHBoxLayout , QPushButton</span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustWidget</span>( <span class="title class_ inherited__">QWidget</span> ):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="built_in">super</span>(CustWidget, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">self</span>.okButton = QPushButton(<span class="string">&quot;OK&quot;</span>, <span class="variable language_">self</span>)</span><br><span class="line">    <span class="comment">#使用setObjectName设置对象名称</span></span><br><span class="line">    <span class="variable language_">self</span>.okButton.setObjectName(<span class="string">&quot;okButton&quot;</span>)</span><br><span class="line">    layout = QHBoxLayout()</span><br><span class="line">    layout.addWidget(<span class="variable language_">self</span>.okButton)</span><br><span class="line">    <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line">    QtCore.QMetaObject.connectSlotsByName(<span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">  @QtCore.pyqtSlot()  </span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">on_okButton_clicked</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;单击了OK按钮&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:    </span><br><span class="line">  app = QApplication(sys.argv)</span><br><span class="line">  win = CustWidget()</span><br><span class="line">  win.show()</span><br><span class="line">  app.exec_()</span><br></pre></td></tr></table></figure><h3 id="信号与槽的断开连接">信号与槽的断开连接</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QObject , pyqtSignal</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SignalClass</span>(<span class="title class_ inherited__">QObject</span>):</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 声明无参数的信号</span></span><br><span class="line">  signal1 = pyqtSignal()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 声明带一个int类型参数的信号</span></span><br><span class="line">  signal2 = pyqtSignal(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,parent=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="built_in">super</span>(SignalClass,<span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将信号signal1连接到sin1Call和sin2Call这两个槽函数</span></span><br><span class="line">    <span class="variable language_">self</span>.signal1.connect(<span class="variable language_">self</span>.sin1Call)</span><br><span class="line">    <span class="variable language_">self</span>.signal1.connect(<span class="variable language_">self</span>.sin2Call)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将信号signal2连接到信号signal1</span></span><br><span class="line">    <span class="variable language_">self</span>.signal2.connect(<span class="variable language_">self</span>.signal1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发射信号</span></span><br><span class="line">    <span class="variable language_">self</span>.signal1.emit()</span><br><span class="line">    <span class="variable language_">self</span>.signal2.emit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 断开signal1、signal2信号与各槽函数的连接</span></span><br><span class="line">    <span class="variable language_">self</span>.signal1.disconnect(<span class="variable language_">self</span>.sin1Call)</span><br><span class="line">    <span class="variable language_">self</span>.signal1.disconnect(<span class="variable language_">self</span>.sin2Call)</span><br><span class="line">    <span class="variable language_">self</span>.signal2.disconnect(<span class="variable language_">self</span>.signal1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将信号signal1和signal2连接到同一个槽函数sin1Call</span></span><br><span class="line">    <span class="variable language_">self</span>.signal1.connect(<span class="variable language_">self</span>.sin1Call)</span><br><span class="line">    <span class="variable language_">self</span>.signal2.connect(<span class="variable language_">self</span>.sin1Call)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 再次发射信号</span></span><br><span class="line">    <span class="variable language_">self</span>.signal1.emit()</span><br><span class="line">    <span class="variable language_">self</span>.signal2.emit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">sin1Call</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;signal-1 emit&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">sin2Call</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;signal-2 emit&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">  signal = SignalClass()</span><br></pre></td></tr></table></figure><h3 id="多线程使用">多线程使用</h3><ul><li>QThread函数和信号与槽简单的结合</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication ,QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QThread , pyqtSignal</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="built_in">super</span>(Main,<span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个线程实例并设置名称、变量、信号与槽</span></span><br><span class="line">    <span class="variable language_">self</span>.thread = MyThread()</span><br><span class="line">    <span class="variable language_">self</span>.thread.setIdentity(<span class="string">&quot;thread1&quot;</span>)</span><br><span class="line">    <span class="variable language_">self</span>.thread.sinOut.connect(<span class="variable language_">self</span>.outText)</span><br><span class="line">    <span class="variable language_">self</span>.thread.setVal(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">outText</span>(<span class="params">self,text</span>):</span><br><span class="line">    <span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(<span class="title class_ inherited__">QThread</span>):</span><br><span class="line">  sinOut = pyqtSignal(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,parent=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="built_in">super</span>(MyThread,<span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">    <span class="variable language_">self</span>.identity = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">setIdentity</span>(<span class="params">self,text</span>):</span><br><span class="line">    <span class="variable language_">self</span>.identity = text</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">setVal</span>(<span class="params">self,val</span>):</span><br><span class="line">    <span class="variable language_">self</span>.times = <span class="built_in">int</span>(val)</span><br><span class="line">    <span class="comment"># 执行线程的run方法</span></span><br><span class="line">    <span class="variable language_">self</span>.start()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="variable language_">self</span>.times   <span class="number">0</span> <span class="keyword">and</span> <span class="variable language_">self</span>.identity:</span><br><span class="line">      <span class="comment"># 发射信号</span></span><br><span class="line">      <span class="variable language_">self</span>.sinOut.emit(<span class="variable language_">self</span>.identity+<span class="string">&quot;== &quot;</span>+<span class="built_in">str</span>(<span class="variable language_">self</span>.times))</span><br><span class="line">      <span class="variable language_">self</span>.times -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">  app = QApplication(sys.argv)</span><br><span class="line">  main = Main()</span><br><span class="line">  main.show()</span><br><span class="line">  sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><ul><li>后台线程内容实时更新到UI线程</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QThread , pyqtSignal, QDateTime </span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QDialog, QLineEdit</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BackendThread</span>(<span class="title class_ inherited__">QThread</span>):</span><br><span class="line">  <span class="comment"># 通过类成员对象定义信号</span></span><br><span class="line">  update_date = pyqtSignal(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 处理业务逻辑</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">      data = QDateTime.currentDateTime()</span><br><span class="line">      currTime = data.toString(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>)</span><br><span class="line">      <span class="variable language_">self</span>.update_date.emit( <span class="built_in">str</span>(currTime) )</span><br><span class="line">      time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span>(<span class="title class_ inherited__">QDialog</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    QDialog.__init__(<span class="variable language_">self</span>)</span><br><span class="line">    <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;PyQt5界面实时更新例子&#x27;</span>)</span><br><span class="line">    <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="variable language_">self</span>.<span class="built_in">input</span> = QLineEdit(<span class="variable language_">self</span>)</span><br><span class="line">    <span class="variable language_">self</span>.<span class="built_in">input</span>.resize(<span class="number">400</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 创建线程</span></span><br><span class="line">    <span class="variable language_">self</span>.backend = BackendThread()</span><br><span class="line">    <span class="comment"># 连接信号</span></span><br><span class="line">    <span class="variable language_">self</span>.backend.update_date.connect(<span class="variable language_">self</span>.handleDisplay)</span><br><span class="line">    <span class="comment"># 开始线程</span></span><br><span class="line">    <span class="variable language_">self</span>.backend.start()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 将当前时间输出到文本框</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">handleDisplay</span>(<span class="params">self, data</span>):</span><br><span class="line">    <span class="variable language_">self</span>.<span class="built_in">input</span>.setText(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  app = QApplication(sys.argv)</span><br><span class="line">  win = Window()</span><br><span class="line">  win.show() </span><br><span class="line">  sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="案例">案例</h2><blockquote><p>机制回顾</p></blockquote><p><img src="/2024/08/21/pyqt5-singal-thread/pyqt5-slot.png" class="lazyload placeholder" data-srcset="/2024/08/21/pyqt5-singal-thread/pyqt5-slot.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="跨线程信号与槽应用">跨线程信号与槽应用</h3><ul><li>定义信号与槽函数类</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QLineEdit, QPushButton</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QThread, pyqtSignal, pyqtSlot, QObject, QRunnable</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">pyqt5 信号槽</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkerSignals</span>(<span class="title class_ inherited__">QObject</span>):</span><br><span class="line">    finished = pyqtSignal(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span>(<span class="title class_ inherited__">QRunnable</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="built_in">super</span>(Worker, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.text = text</span><br><span class="line">        <span class="variable language_">self</span>.signals = WorkerSignals()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 模拟长时间运行的任务</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="comment"># 完成任务后发出信号</span></span><br><span class="line">        <span class="variable language_">self</span>.signals.finished.emit(<span class="variable language_">self</span>.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>信号绑定与事件触发</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line">    worker = Worker(constants.detect_dsa_version_msg)</span><br><span class="line">    worker.signals.finished.connect(<span class="variable language_">self</span>.on_hex_changed)</span><br><span class="line">    QThreadPool.globalInstance().start(worker)</span><br><span class="line">    worker.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>事件处理</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_hex_changed</span>(<span class="params">self, msg=<span class="literal">None</span>, _=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param text:</span></span><br><span class="line"><span class="string">    :param _:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># bool</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> msg:</span><br><span class="line">            logger.debug(<span class="string">f&quot;detect signal to msg: <span class="subst">&#123;msg&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.input_box_hex.setPlaceholderText(msg)</span><br><span class="line">            input_str = msg.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="See">See</h2><ul><li>1.<a href="https://cloud.tencent.com/developer/article/1742531">https://cloud.tencent.com/developer/article/1742531</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 使用tesseract实现实时监控桌面</title>
      <link href="/2024/08/21/pytesseract-ocr-demo/"/>
      <url>/2024/08/21/pytesseract-ocr-demo/</url>
      
        <content type="html"><![CDATA[<h1>python 使用tesseract实现实时监控桌面</h1><h2 id="技术介绍">技术介绍</h2><blockquote><p>Tesseract是一个 由HP实验室开发 由Google维护的开源的光学字符识别（OCR）引擎，可以在 Apache 2.0 许可下获得。它可以直接使用，或者（对于程序员）使用 API​​ 从图像中提取输入，包括手写的或打印的文本。与Microsoft Office Document Imaging（MODI）相比，我们可以不断的训练语言，提高图像转换文本的能力</p></blockquote><h2 id="下载地址">下载地址</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://digi.bib.uni-mannheim.de/tesseract/</span><br></pre></td></tr></table></figure><h2 id="第三方库安装">第三方库安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install pytesseract -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install pillow -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install pywin32 PyAutoGUI pygetwindow loguru</span><br></pre></td></tr></table></figure><h2 id="demo">demo</h2><h3 id="测试代码">测试代码</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保Tesseract的路径已添加到环境变量或在此处指定</span></span><br><span class="line">pytesseract.pytesseract.tesseract_cmd = <span class="string">r&#x27;C:\Program Files\Tesseract-OCR\tesseract.exe&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 识别固定图片内文字</span></span><br><span class="line">img_path = <span class="string">&quot;../chi.PNG&quot;</span></span><br><span class="line">result = pytesseract.image_to_string(image=img_path, lang=<span class="string">&quot;chi_sim&quot;</span>, config=<span class="string">&quot;--psm 1&quot;</span>)   <span class="comment">#路径；语言；配置</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="案例">案例</h2><h3 id="实现思路">实现思路</h3><blockquote><p>通过pillow动态抓取屏幕截图，tesseract动态识别图片内容，过滤所需信息，即可实现对桌面（主屏）的动态监控</p></blockquote><h3 id="demo-代码">demo 代码</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygetwindow <span class="keyword">as</span> gw</span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取窗口句柄</span></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> run <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab, Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保Tesseract的路径已添加到环境变量或在此处指定</span></span><br><span class="line">pytesseract.pytesseract.tesseract_cmd = <span class="string">r&#x27;C:\Program Files\Tesseract-OCR\tesseract.exe&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># tesseract_cmd = r&#x27;D:\Program Files\tesseract\tesseract.exe&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ocr_screenshot</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 捕获全屏截图</span></span><br><span class="line">    screenshot = ImageGrab.grab()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存到临时文件（或直接在内存中处理，但pytesseract可能需要文件路径）</span></span><br><span class="line">    temp_file = <span class="string">&quot;screenshot.png&quot;</span></span><br><span class="line">    screenshot.save(temp_file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用Tesseract进行OCR</span></span><br><span class="line">    text = pytesseract.image_to_string(Image.<span class="built_in">open</span>(temp_file))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除临时文件（如果需要）</span></span><br><span class="line">    os.remove(temp_file)</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_msg</span>(<span class="params">process_result</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param process_result:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    result_list = []</span><br><span class="line">    <span class="keyword">for</span> version_msg <span class="keyword">in</span> version_pre_list:</span><br><span class="line">        complete_str = success_result_pre + ecu_head + version_msg</span><br><span class="line">        <span class="comment"># logger.debug(complete_str)</span></span><br><span class="line">        ret = extract_after_string(process_result, complete_str)</span><br><span class="line">        <span class="comment"># replace ocr error detect code</span></span><br><span class="line">        ret = ret.replace(<span class="string">&quot;S&quot;</span>, <span class="string">&quot;5&quot;</span>).replace(<span class="string">&quot;o&quot;</span>, <span class="string">&quot;0&quot;</span>).replace(<span class="string">&quot;l&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> ret != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            logger.success(<span class="string">f&quot;find version msg: <span class="subst">&#123;ret&#125;</span>&quot;</span>)</span><br><span class="line">            result_list.append(ret)</span><br><span class="line">    <span class="keyword">return</span> result_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_after_string</span>(<span class="params">source_str, search_str</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    提取source_str中search_str之后的内容，‌直到遇到换行符为止。‌</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param source_str: 原始字符串</span></span><br><span class="line"><span class="string">    :param search_str: 要搜索的子字符串</span></span><br><span class="line"><span class="string">    :return: search_str之后的内容，‌直到换行符为止</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    index = source_str.find(search_str)</span><br><span class="line">    <span class="keyword">if</span> index != -<span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 从search_str之后开始，‌直到遇到换行符</span></span><br><span class="line">        end_index = source_str.find(<span class="string">&#x27;\n&#x27;</span>, index + <span class="built_in">len</span>(search_str))</span><br><span class="line">        <span class="keyword">if</span> end_index != -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> source_str[index + <span class="built_in">len</span>(search_str):end_index]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果没有找到换行符，‌则返回search_str之后的所有内容</span></span><br><span class="line">            <span class="keyword">return</span> source_str[index + <span class="built_in">len</span>(search_str):]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_status_dsa</span>(<span class="params">ocr_result</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param ocr_result:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> test_pre <span class="keyword">in</span> ocr_result:</span><br><span class="line">            <span class="comment"># logger.debug(&quot;test ing...&quot;)</span></span><br><span class="line">            <span class="keyword">if</span> fail_msg_head <span class="keyword">in</span> ocr_result:</span><br><span class="line">                fail_result = extract_after_string(ocr_result, fail_msg_head)</span><br><span class="line">                logger.warning(<span class="string">f&quot;catch error: <span class="subst">&#123;fail_result&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> success_result_pre <span class="keyword">in</span> ocr_result:</span><br><span class="line">                <span class="comment"># logger.success(&quot;success catch result&quot;)</span></span><br><span class="line">                process_msg(ocr_result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            no_result = extract_after_string(ocr_result, test_pre)</span><br><span class="line">            logger.debug(<span class="string">f&quot;current not found result: <span class="subst">&#123;no_result&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;Unknown error, detail:<span class="subst">&#123;e&#125;</span>]&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    constants.detect_dsa_flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> constants.detect_dsa_flag:</span><br><span class="line">        time.sleep(<span class="number">1</span> / <span class="number">10</span>)</span><br><span class="line">        result = ocr_screenshot()</span><br><span class="line">        <span class="comment"># logger.debug(result)</span></span><br><span class="line">        detect_ret_list = detect_status_dsa(result)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> detect_ret_list:</span><br><span class="line">            logger.warning(<span class="string">&quot;no result, start next loop detect.&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            constants.detect_dsa_version_msg = <span class="string">&quot;\n&quot;</span>.join(detect_ret_list)</span><br><span class="line">            logger.debug(<span class="string">f&quot;result: <span class="subst">&#123;constants.detect_dsa_version_msg&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="实现效果">实现效果</h3><ul><li>如图<br><img src="/2024/08/21/pytesseract-ocr-demo/ocr_result.png" class="lazyload placeholder" data-srcset="/2024/08/21/pytesseract-ocr-demo/ocr_result.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> tesseract </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python实现简易截图功能</title>
      <link href="/2024/08/19/py-screenshot-demo/"/>
      <url>/2024/08/19/py-screenshot-demo/</url>
      
        <content type="html"><![CDATA[<h1>使用python实现简易截图功能</h1><h2 id="技术方案">技术方案</h2><h3 id="pyautogui">pyautogui</h3><blockquote><p>pyautogui 模块，使用screenshot() 函数和save() 函数实现</p></blockquote><h4 id="基础demo">基础demo</h4><ul><li>需要先安装pyautogui库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyautogui</span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取截图</span></span><br><span class="line">image = pyautogui.screenshot()</span><br><span class="line"><span class="comment">#保存图片</span></span><br><span class="line">image.save(<span class="string">&quot;test.jpg&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pyautogui和opencv">pyautogui和opencv</h3><h4 id="基础demo-2">基础demo</h4><blockquote><p>pyautogui截取图片，opencv保存图片</p></blockquote><ul><li>需要先安装pyautogui、opencv库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pyautogui </span><br><span class="line">pip install opencv-python</span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取屏幕截图</span></span><br><span class="line">image = pyautogui.screenshot()</span><br><span class="line"><span class="comment"># 转换图片</span></span><br><span class="line">image = cv2.cvtColor(x.array(demo_image),cv2.COLOG_RGB2BGR)</span><br><span class="line"><span class="comment"># 写入图片</span></span><br><span class="line">cv2.imwrite(<span class="string">&quot;test.png&quot;</span>, image)</span><br><span class="line"><span class="comment"># 显示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;test&quot;</span>, image)</span><br></pre></td></tr></table></figure><h3 id="pillow">pillow</h3><blockquote><p>使用ImageGrap捕获捕捉屏幕的一部分</p></blockquote><h4 id="基础demo-3">基础demo</h4><ul><li>需要先安装pillow库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置获取的截图坐标</span></span><br><span class="line">location = (<span class="number">60</span>,<span class="number">60</span>,<span class="number">60</span>,<span class="number">60</span>)</span><br><span class="line"><span class="comment"># 获取截图</span></span><br><span class="line">screenshot = ImageGrab.grab(location)</span><br><span class="line"><span class="comment"># 保存图片到本地</span></span><br><span class="line">screenshot.save(<span class="string">&quot;result.png&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="pyscreenshot">pyscreenshot</h3><blockquote><p>较少使用</p></blockquote><h4 id="基础demo-4">基础demo</h4><ul><li>需要先安装pyscreenshot库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyscreenshot</span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyscreenshot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取截图</span></span><br><span class="line">demo = pyscreen.grab(location)</span><br><span class="line"><span class="comment"># 保存图片到本地</span></span><br><span class="line">demo.save(<span class="string">&quot;result.png&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="图片数据转移到剪贴板">图片数据转移到剪贴板</h3><blockquote><p>使用windows系统API pywin32库</p></blockquote><h2 id="实现方法">实现方法</h2><h3 id="安装pywin32库">安装pywin32库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pywin32</span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> win32clipboard <span class="keyword">as</span> w</span><br><span class="line"><span class="keyword">import</span> win32con</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开剪贴</span></span><br><span class="line">w.OpenClipboard()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空剪切板</span></span><br><span class="line">w.EmptyClipboard()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图片数据设置到剪贴板</span></span><br><span class="line">w.SetClipboardData(win32con.CF_DIB, data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取剪贴板内容</span></span><br><span class="line">result = w.GetClipboardData(win32con.CF_TEXT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码数据</span></span><br><span class="line">clipboard_content = d.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭剪贴板</span></span><br><span class="line">w.CloseClipboard()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实际应用">实际应用</h2><h3 id="简介">简介</h3><blockquote><p>本案例通过按钮截取指定窗口内容并写入剪贴板，通过快捷键ctrl+v可粘贴到微信、qq、office等软件中。</p></blockquote><h3 id="代码">代码</h3><ul><li>截图至剪贴板功能实现</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygetwindow <span class="keyword">as</span> gw</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab</span><br><span class="line"><span class="keyword">import</span> win32clipboard <span class="keyword">as</span> w</span><br><span class="line"><span class="keyword">import</span> win32con</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_win_screenshot</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    get screenshot</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取当前激活的窗口</span></span><br><span class="line">        active_window = gw.getActiveWindow()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取窗口的边界框</span></span><br><span class="line">        box = active_window._getWindowRect()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据边界框截取屏幕截图</span></span><br><span class="line">        screenshot = ImageGrab.grab(box)</span><br><span class="line"></span><br><span class="line">        size = screenshot.size</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将Image转换为字节流，以便存储到剪贴板</span></span><br><span class="line">        img_bytes = io.BytesIO()</span><br><span class="line">        screenshot.convert(<span class="string">&quot;RGB&quot;</span>).save(img_bytes, <span class="string">&quot;BMP&quot;</span>)</span><br><span class="line">        <span class="comment"># image.convert(&quot;RGB&quot;).save(output_buffer, &#x27;BMP&#x27;)</span></span><br><span class="line">        data = img_bytes.getvalue()[<span class="number">14</span>:]</span><br><span class="line">        img_bytes.seek(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打开剪贴</span></span><br><span class="line">        w.OpenClipboard()</span><br><span class="line">        w.EmptyClipboard()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将图片数据设置到剪贴板</span></span><br><span class="line">        w.SetClipboardData(win32con.CF_DIB, data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭剪贴板</span></span><br><span class="line">        w.CloseClipboard()</span><br><span class="line">        logger.success(<span class="string">f&quot;Screenshot success, image size: <span class="subst">&#123;size&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;Screen shot error, detail: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>按钮触发事件</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QVBoxLayout, QLineEdit, QTextEdit, QPushButton, QMenu, \</span><br><span class="line">    QMenuBar, QTabWidget, QMainWindow, QAction, QHBoxLayout, QLabel</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ui_init</span>(<span class="params">self, _=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param self:</span></span><br><span class="line"><span class="string">    :param _:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    layout_main = QVBoxLayout()</span><br><span class="line">    layout_hon = QHBoxLayout()</span><br><span class="line">    <span class="variable language_">self</span>.screenshot_btn = QPushButton(<span class="string">&quot;screenshot&quot;</span>, <span class="variable language_">self</span>)</span><br><span class="line">    layout_hon.addWidget(<span class="variable language_">self</span>.screenshot_btn)</span><br><span class="line">    <span class="variable language_">self</span>.screenshot_btn.clicked.connect(<span class="variable language_">self</span>.screenshot_method)</span><br></pre></td></tr></table></figure><h2 id="进阶使用-自由选择截图区域">进阶使用-自由选择截图区域</h2><h3 id="简述">简述</h3><blockquote><p>通过结合pyqt5与pillow可实现自由选择截图区域，选择完成后通过enter键保存图片至剪贴板，抑或使用esc键取消截图，自由度较高</p></blockquote><h3 id="实现">实现</h3><ul><li>code</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># import keyboard</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> win32con</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QDialog</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, qAbs, QRect</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPen, QPainter, QColor, QGuiApplication</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">import</span> win32clipboard <span class="keyword">as</span> w</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> run <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># from utils.image_process import screenshot_img_save</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CaptureScreen</span>(<span class="title class_ inherited__">QDialog</span>):</span><br><span class="line">    <span class="comment"># 初始化变量</span></span><br><span class="line">    beginPosition = <span class="literal">None</span></span><br><span class="line">    endPosition = <span class="literal">None</span></span><br><span class="line">    fullScreenImage = <span class="literal">None</span></span><br><span class="line">    captureImage = <span class="literal">None</span></span><br><span class="line">    isMousePressLeft = <span class="literal">None</span></span><br><span class="line">    painter = QPainter()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QWidget, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initWindow()  <span class="comment"># 初始化窗口</span></span><br><span class="line">        <span class="variable language_">self</span>.captureFullScreen()  <span class="comment"># 获取全屏</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initWindow</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setMouseTracking(<span class="literal">True</span>)  <span class="comment"># 鼠标追踪</span></span><br><span class="line">        <span class="variable language_">self</span>.setCursor(Qt.CrossCursor)  <span class="comment"># 设置光标</span></span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlag(Qt.FramelessWindowHint)  <span class="comment"># 窗口无边框</span></span><br><span class="line">        <span class="variable language_">self</span>.setWindowState(Qt.WindowFullScreen)  <span class="comment"># 窗口全屏</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">captureFullScreen</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.fullScreenImage = QGuiApplication.primaryScreen().grabWindow(QApplication.desktop().winId())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="keyword">if</span> event.button() == Qt.LeftButton:</span><br><span class="line">            <span class="variable language_">self</span>.beginPosition = event.pos()</span><br><span class="line">            <span class="variable language_">self</span>.isMousePressLeft = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> event.button() == Qt.RightButton:</span><br><span class="line">            <span class="comment"># 如果选取了图片,则按一次右键开始重新截图</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.captureImage <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="variable language_">self</span>.captureImage = <span class="literal">None</span></span><br><span class="line">                <span class="variable language_">self</span>.paintBackgroundImage()</span><br><span class="line">                <span class="variable language_">self</span>.update()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseMoveEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.isMousePressLeft <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="variable language_">self</span>.endPosition = event.pos()</span><br><span class="line">            <span class="variable language_">self</span>.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseReleaseEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="variable language_">self</span>.endPosition = event.pos()</span><br><span class="line">        <span class="variable language_">self</span>.isMousePressLeft = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseDoubleClickEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.captureImage <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.saveImage()</span><br><span class="line">            <span class="variable language_">self</span>.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">keyPressEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="keyword">if</span> event.key() == Qt.Key_Escape:</span><br><span class="line">            constants.select_screenshot_flag = <span class="literal">False</span></span><br><span class="line">            logger.debug(<span class="string">&quot;Screenshot cancel.&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.close()</span><br><span class="line">        <span class="keyword">if</span> event.key() == Qt.Key_Enter <span class="keyword">or</span> event.key() == Qt.Key_Return:</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.captureImage <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="variable language_">self</span>.saveImage()</span><br><span class="line">                <span class="variable language_">self</span>.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paintBackgroundImage</span>(<span class="params">self</span>):</span><br><span class="line">        shadowColor = QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>)  <span class="comment"># 黑色半透明</span></span><br><span class="line">        <span class="variable language_">self</span>.painter.drawPixmap(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">self</span>.fullScreenImage)</span><br><span class="line">        <span class="variable language_">self</span>.painter.fillRect(<span class="variable language_">self</span>.fullScreenImage.rect(), shadowColor)  <span class="comment"># 填充矩形阴影</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="variable language_">self</span>.painter.begin(<span class="variable language_">self</span>)  <span class="comment"># 开始重绘</span></span><br><span class="line">        <span class="variable language_">self</span>.paintBackgroundImage()</span><br><span class="line">        penColor = QColor(<span class="number">30</span>, <span class="number">144</span>, <span class="number">245</span>)  <span class="comment"># 画笔颜色</span></span><br><span class="line">        <span class="variable language_">self</span>.painter.setPen(QPen(penColor, <span class="number">1</span>, Qt.SolidLine, Qt.RoundCap))  <span class="comment"># 设置画笔,蓝色,1px大小,实线,圆形笔帽</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.isMousePressLeft <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            pickRect = <span class="variable language_">self</span>.getRectangle(<span class="variable language_">self</span>.beginPosition, <span class="variable language_">self</span>.endPosition)  <span class="comment"># 获得要截图的矩形框</span></span><br><span class="line">            <span class="variable language_">self</span>.captureImage = <span class="variable language_">self</span>.fullScreenImage.copy(pickRect)  <span class="comment"># 捕获截图矩形框内的图片</span></span><br><span class="line">            <span class="variable language_">self</span>.painter.drawPixmap(pickRect.topLeft(), <span class="variable language_">self</span>.captureImage)  <span class="comment"># 填充截图的图片</span></span><br><span class="line">            <span class="variable language_">self</span>.painter.drawRect(pickRect)  <span class="comment"># 画矩形边框</span></span><br><span class="line">        <span class="variable language_">self</span>.painter.end()  <span class="comment"># 结束重绘</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getRectangle</span>(<span class="params">self, beginPoint, endPoint</span>):</span><br><span class="line">        pickRectWidth = <span class="built_in">int</span>(qAbs(beginPoint.x() - endPoint.x()))</span><br><span class="line">        pickRectHeight = <span class="built_in">int</span>(qAbs(beginPoint.y() - endPoint.y()))</span><br><span class="line">        pickRectTop = beginPoint.x() <span class="keyword">if</span> beginPoint.x() &lt; endPoint.x() <span class="keyword">else</span> endPoint.x()</span><br><span class="line">        pickRectLeft = beginPoint.y() <span class="keyword">if</span> beginPoint.y() &lt; endPoint.y() <span class="keyword">else</span> endPoint.y()</span><br><span class="line">        pickRect = QRect(pickRectTop, pickRectLeft, pickRectWidth, pickRectHeight)</span><br><span class="line">        <span class="comment"># 避免高度宽度为0时候报错</span></span><br><span class="line">        <span class="keyword">if</span> pickRectWidth == <span class="number">0</span>:</span><br><span class="line">            pickRect.setWidth(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> pickRectHeight == <span class="number">0</span>:</span><br><span class="line">            pickRect.setHeight(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pickRect</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">saveImage</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># self.captureImage.save(&#x27;picture.png&#x27;, quality=95)  # 保存图片到当前文件夹中</span></span><br><span class="line">        <span class="comment"># self.captureImage.save</span></span><br><span class="line">        <span class="keyword">if</span> constants.select_screenshot_flag:</span><br><span class="line">            <span class="comment"># constants.select_screenshot_flag = True</span></span><br><span class="line">            save_img_threading_obj = threading.Thread(</span><br><span class="line">                target=screenshot_img_save,</span><br><span class="line">                args=(<span class="variable language_">self</span>,))</span><br><span class="line">            save_img_threading_obj.start()</span><br><span class="line">            <span class="comment"># logger.info(f&quot;Start save screenshot, &#123;constants.select_screenshot_flag&#125;&quot;)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.error(<span class="string">&quot;save screenshot ing, please wait.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">screenshot_img_save</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param self:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># logger.debug(&quot;3424234&quot;)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.beginPosition.x() &lt; <span class="variable language_">self</span>.endPosition.x():</span><br><span class="line">            x1 = <span class="variable language_">self</span>.beginPosition.x()</span><br><span class="line">            x2 = <span class="variable language_">self</span>.endPosition.x()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x2 = <span class="variable language_">self</span>.beginPosition.x() + <span class="number">2</span></span><br><span class="line">            x1 = <span class="variable language_">self</span>.endPosition.x()</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.beginPosition.y() &lt; <span class="variable language_">self</span>.endPosition.y():</span><br><span class="line">            y1 = <span class="variable language_">self</span>.beginPosition.y()</span><br><span class="line">            y2 = <span class="variable language_">self</span>.endPosition.y()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            y2 = <span class="variable language_">self</span>.beginPosition.y() + <span class="number">2</span></span><br><span class="line">            y1 = <span class="variable language_">self</span>.endPosition.y()</span><br><span class="line">        box = [x1, y1, x2, y2]</span><br><span class="line">        screenshot = ImageGrab.grab(box)</span><br><span class="line">        <span class="comment"># size = screenshot.size</span></span><br><span class="line"></span><br><span class="line">        img_bytes = io.BytesIO()</span><br><span class="line">        screenshot.convert(<span class="string">&quot;RGB&quot;</span>).save(img_bytes, <span class="string">&quot;BMP&quot;</span>)</span><br><span class="line">        <span class="comment"># image.convert(&quot;RGB&quot;).save(output_buffer, &#x27;BMP&#x27;)</span></span><br><span class="line">        data = img_bytes.getvalue()[<span class="number">14</span>:]</span><br><span class="line">        img_bytes.seek(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># logger.debug(&quot;3133131&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打开剪贴</span></span><br><span class="line">        w.OpenClipboard()</span><br><span class="line">        w.EmptyClipboard()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将图片数据设置到剪贴板</span></span><br><span class="line">        w.SetClipboardData(win32con.CF_DIB, data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭剪贴板</span></span><br><span class="line">        w.CloseClipboard()</span><br><span class="line">        logger.success(<span class="string">f&quot;Screenshot success, image select region: <span class="subst">&#123;self.beginPosition&#125;</span> : <span class="subst">&#123;self.endPosition&#125;</span>&quot;</span>)</span><br><span class="line">        constants.select_screenshot_flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;Unknown error, detail: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        constants.select_screenshot_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">screenshot_select</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># keyboard.wait(hotkey=&#x27;f4&#x27;)  # 按F4开始截图</span></span><br><span class="line">    <span class="comment"># app = QApplication(sys.argv)</span></span><br><span class="line">    windows = CaptureScreen()</span><br><span class="line">    windows.show()</span><br><span class="line">    windows.<span class="built_in">exec</span>()</span><br><span class="line">    <span class="comment"># sys.exit(app.exec_())</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="效果如下图所示：">效果如下图所示：</h3><ul><li>效果图</li></ul><p><img src="/2024/08/19/py-screenshot-demo/select_region_shot_img.jpg" class="lazyload placeholder" data-srcset="/2024/08/19/py-screenshot-demo/select_region_shot_img.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用clion工具编写cpp qt demo程序</title>
      <link href="/2024/08/09/cpp-qt-demo/"/>
      <url>/2024/08/09/cpp-qt-demo/</url>
      
        <content type="html"><![CDATA[<h1>使用clion工具编写cpp qt demo程序</h1><h2 id="qt-install-windows-平台">qt install (windows 平台)</h2><ul><li>website</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://doc.qt.io/qt-5/windows.html</span><br></pre></td></tr></table></figure><ul><li>mirror config</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/online_installers/</span><br></pre></td></tr></table></figure><blockquote><p>use tools install all components</p></blockquote><h2 id="配置文件">配置文件</h2><h3 id="CmakeList-txt">CmakeList.txt</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.26)</span><br><span class="line">project(untitled2)</span><br><span class="line"></span><br><span class="line">set(CMAKE_CXX_STANDARD 17)</span><br><span class="line">set(CMAKE_AUTOMOC ON)</span><br><span class="line">set(CMAKE_AUTORCC ON)</span><br><span class="line">set(CMAKE_AUTOUIC ON)</span><br><span class="line"></span><br><span class="line">set(CMAKE_PREFIX_PATH &quot;C:/Qt/6.7.2/mingw_64/lib/cmake&quot;)</span><br><span class="line"></span><br><span class="line">find_package(Qt6 COMPONENTS</span><br><span class="line">        Core</span><br><span class="line">        Gui</span><br><span class="line">        Widgets</span><br><span class="line">        REQUIRED)</span><br><span class="line"></span><br><span class="line">add_executable(untitled2 main.cpp)</span><br><span class="line">target_link_libraries(untitled2</span><br><span class="line">        Qt::Core</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">if (WIN32 AND NOT DEFINED CMAKE_TOOLCHAIN_FILE)</span><br><span class="line">    set(DEBUG_SUFFIX)</span><br><span class="line">    if (MSVC AND CMAKE_BUILD_TYPE MATCHES &quot;Debug&quot;)</span><br><span class="line">        set(DEBUG_SUFFIX &quot;d&quot;)</span><br><span class="line">    endif ()</span><br><span class="line">    set(QT_INSTALL_PATH &quot;$&#123;CMAKE_PREFIX_PATH&#125;&quot;)</span><br><span class="line">    if (NOT EXISTS &quot;$&#123;QT_INSTALL_PATH&#125;/bin&quot;)</span><br><span class="line">        set(QT_INSTALL_PATH &quot;$&#123;QT_INSTALL_PATH&#125;/..&quot;)</span><br><span class="line">        if (NOT EXISTS &quot;$&#123;QT_INSTALL_PATH&#125;/bin&quot;)</span><br><span class="line">            set(QT_INSTALL_PATH &quot;$&#123;QT_INSTALL_PATH&#125;/..&quot;)</span><br><span class="line">        endif ()</span><br><span class="line">    endif ()</span><br><span class="line">    if (EXISTS &quot;$&#123;QT_INSTALL_PATH&#125;/plugins/platforms/qwindows$&#123;DEBUG_SUFFIX&#125;.dll&quot;)</span><br><span class="line">        add_custom_command(TARGET $&#123;PROJECT_NAME&#125; POST_BUILD</span><br><span class="line">                COMMAND $&#123;CMAKE_COMMAND&#125; -E make_directory</span><br><span class="line">                &quot;$&lt;TARGET_FILE_DIR:$&#123;PROJECT_NAME&#125;&gt;/plugins/platforms/&quot;)</span><br><span class="line">        add_custom_command(TARGET $&#123;PROJECT_NAME&#125; POST_BUILD</span><br><span class="line">                COMMAND $&#123;CMAKE_COMMAND&#125; -E copy</span><br><span class="line">                &quot;$&#123;QT_INSTALL_PATH&#125;/plugins/platforms/qwindows$&#123;DEBUG_SUFFIX&#125;.dll&quot;</span><br><span class="line">                &quot;$&lt;TARGET_FILE_DIR:$&#123;PROJECT_NAME&#125;&gt;/plugins/platforms/&quot;)</span><br><span class="line">    endif ()</span><br><span class="line">    foreach (QT_LIB Core)</span><br><span class="line">        add_custom_command(TARGET $&#123;PROJECT_NAME&#125; POST_BUILD</span><br><span class="line">                COMMAND $&#123;CMAKE_COMMAND&#125; -E copy</span><br><span class="line">                &quot;$&#123;QT_INSTALL_PATH&#125;/bin/Qt6$&#123;QT_LIB&#125;$&#123;DEBUG_SUFFIX&#125;.dll&quot;</span><br><span class="line">                &quot;$&lt;TARGET_FILE_DIR:$&#123;PROJECT_NAME&#125;&gt;&quot;)</span><br><span class="line">    endforeach (QT_LIB)</span><br><span class="line">endif ()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="cpp-code">cpp code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="function">QCoreApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> QCoreApplication::<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>If exists problem, add follow environment to path</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Qt\6.7.2\mingw_64</span><br><span class="line">C:\Qt\Tools\QtCreator\bin</span><br></pre></td></tr></table></figure><h2 id="other-demo">other demo</h2><h3 id="clion-create-cpp-qt-demo">clion create cpp qt demo</h3><blockquote><p>follow pic<br><img src="/2024/08/09/cpp-qt-demo/clion-qt-create.png" class="lazyload placeholder" data-srcset="/2024/08/09/cpp-qt-demo/clion-qt-create.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p></blockquote><ul><li>通过uic创建ui_file.h头文件, 配置如图<br><img src="/2024/08/09/cpp-qt-demo/uic_demo_cliion.png" class="lazyload placeholder" data-srcset="/2024/08/09/cpp-qt-demo/uic_demo_cliion.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ul><h3 id="qt-ui-cpp-demo">qt ui cpp demo</h3><ul><li>cpp ui(main_ui.cpp)</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Administrator on 2024/8/16 0016.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// You may need to build the project (run Qt uic code generator) to get &quot;ui_main_ui.h&quot; resolved</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main_ui.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_main_ui.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main_ui::<span class="built_in">main_ui</span>(QWidget *parent) :</span><br><span class="line">        <span class="built_in">QMainWindow</span>(parent), <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::main_ui) &#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main_ui::~<span class="built_in">main_ui</span>() &#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>main_ui.h</li></ul><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Administrator on 2024/8/16 0016.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CPP_SOCKET_SERVE_MAIN_UI_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CPP_SOCKET_SERVE_MAIN_UI_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line">namespace Ui &#123; <span class="class"><span class="keyword">class</span> <span class="title">main_ui</span>;</span> &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">main_ui</span> :</span> public QMainWindow &#123;</span><br><span class="line"><span class="comment">//Q_OBJECT 如果注释会报错</span></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    explicit <span class="title function_">main_ui</span><span class="params">(QWidget *parent = nullptr)</span>;</span><br><span class="line"></span><br><span class="line">    ~main_ui() override;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    Ui::main_ui *ui;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//CPP_SOCKET_SERVE_MAIN_UI_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>main_ui.ui (qt ui)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ui</span> <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">author</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">comment</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exportmacro</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span>&gt;</span>main_ui<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QMainWindow&quot;</span> <span class="attr">name</span>=<span class="string">&quot;main_ui&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">x</span>&gt;</span>0<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">y</span>&gt;</span>0<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">width</span>&gt;</span>400<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">height</span>&gt;</span>300<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;windowTitle&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>main_ui<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;centralwidget&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QMenuBar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;menubar&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">x</span>&gt;</span>0<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">y</span>&gt;</span>0<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">width</span>&gt;</span>400<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">height</span>&gt;</span>17<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QStatusBar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;statusbar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pixmapfunction</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connections</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ui</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>uic generate code (ui_main_ui.h)</li></ul><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************************************************************</span></span><br><span class="line"><span class="comment">** Form generated from reading UI file &#x27;main_ui.ui&#x27;</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">** Created by: Qt User Interface Compiler version 6.7.2</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">** WARNING! All changes made in this file will be lost when recompiling UI file!</span></span><br><span class="line"><span class="comment">********************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> UI_MAIN_UI_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UI_MAIN_UI_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtCore/QVariant&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtWidgets/QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtWidgets/QMainWindow&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtWidgets/QMenuBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtWidgets/QStatusBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtWidgets/QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_main_ui</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">    QWidget *centralwidget;</span><br><span class="line">    QMenuBar *menubar;</span><br><span class="line">    QStatusBar *statusbar;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">setupUi</span><span class="params">(QMainWindow *main_ui)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (main_ui-&gt;objectName().isEmpty())</span><br><span class="line">            main_ui-&gt;setObjectName(<span class="string">&quot;main_ui&quot;</span>);</span><br><span class="line">        main_ui-&gt;resize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        centralwidget = new QWidget(main_ui);</span><br><span class="line">        centralwidget-&gt;setObjectName(<span class="string">&quot;centralwidget&quot;</span>);</span><br><span class="line">        main_ui-&gt;setCentralWidget(centralwidget);</span><br><span class="line">        menubar = new QMenuBar(main_ui);</span><br><span class="line">        menubar-&gt;setObjectName(<span class="string">&quot;menubar&quot;</span>);</span><br><span class="line">        menubar-&gt;setGeometry(QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">17</span>));</span><br><span class="line">        main_ui-&gt;setMenuBar(menubar);</span><br><span class="line">        statusbar = new QStatusBar(main_ui);</span><br><span class="line">        statusbar-&gt;setObjectName(<span class="string">&quot;statusbar&quot;</span>);</span><br><span class="line">        main_ui-&gt;setStatusBar(statusbar);</span><br><span class="line"></span><br><span class="line">        retranslateUi(main_ui);</span><br><span class="line"></span><br><span class="line">        QMetaObject::connectSlotsByName(main_ui);</span><br><span class="line">    &#125; <span class="comment">// setupUi</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">retranslateUi</span><span class="params">(QMainWindow *main_ui)</span></span><br><span class="line">    &#123;</span><br><span class="line">        main_ui-&gt;setWindowTitle(QCoreApplication::translate(<span class="string">&quot;main_ui&quot;</span>, <span class="string">&quot;main_ui&quot;</span>, nullptr));</span><br><span class="line">    &#125; <span class="comment">// retranslateUi</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">namespace Ui &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">main_ui</span>:</span> public Ui_main_ui &#123;&#125;;</span><br><span class="line">&#125; <span class="comment">// namespace Ui</span></span><br><span class="line"></span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// UI_MAIN_UI_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV build and install on ubuntu</title>
      <link href="/2024/07/09/opencv-build-use/"/>
      <url>/2024/07/09/opencv-build-use/</url>
      
        <content type="html"><![CDATA[<h2 id="下载所需库">下载所需库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载依赖库</span></span><br><span class="line"><span class="built_in">sudo</span> apt install -y build-essential cmake libopencv-dev git-lfs clang-format</span><br><span class="line"><span class="built_in">sudo</span> apt install g++ vim</span><br><span class="line"><span class="built_in">sudo</span> apt  install make unzip wget </span><br><span class="line">git lfs install</span><br><span class="line"><span class="built_in">sudo</span> apt-get install build-essential libgtk2.0-dev libgtk-3devlibavcodec-dev libavformat-dev libjpeg-dev libswscale-dev libtiff5-dev</span><br><span class="line"><span class="built_in">sudo</span> apt install git</span><br><span class="line"><span class="built_in">sudo</span> apt install libgtk2.0-dev  pkg-config</span><br><span class="line"><span class="built_in">sudo</span> apt install libcanberra-gtk-module</span><br></pre></td></tr></table></figure><h2 id="make-gui">make gui</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install cmake-qt-gui</span><br><span class="line">cmake-gui ..</span><br></pre></td></tr></table></figure><h2 id="下载opencv安装包">下载opencv安装包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> git <span class="built_in">clone</span> https://codeload.github.com/opencv/opencv</span><br><span class="line">unzip opencv-4.10.0</span><br><span class="line"><span class="built_in">mkdir</span> build </span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="comment"># remove old file</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf ./*</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 -R ./*</span><br><span class="line"><span class="comment"># 打开opencv_contrib-3.4\modules\xfeatures2d \include\opencv2</span></span><br><span class="line"><span class="comment">#  将此处文件复制到opencv的安装位置opencv\build\include\opencv2</span></span><br><span class="line"><span class="comment">#  在此处创建文件夹xfeatures2d，将xfeatures2d.hpp和xfeatures2d里的两个文件都复制过去，避免以后因没有nonfree.hpp文件出现错误。</span></span><br><span class="line"><span class="comment"># mkdir ./opencv/build/include/opencv2/xfeatures2d</span></span><br><span class="line"><span class="comment"># cp ./opencv-contrib-3.4.16/modules/xfeatures2d/include/opencv2 ./build/include/opencv/</span></span><br><span class="line"><span class="comment">#   引用#include&lt;opencv2/xfeatures2d/xfeatures2d.hpp&gt; 如果没有创建文件夹，将xfeatures2d.hpp直接放在opencv2下，引用时直接写为#include&lt;opencv2/xfeatures2.hpp&gt;</span></span><br><span class="line"><span class="comment"># sudo cp -r ./* /usr/local/include/opencv2/</span></span><br><span class="line"><span class="built_in">cd</span> ~/Desktop/calib/calib/third_party/opencv/include/opencv2/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -r ./xfeatures2d.hpp /usr/local/include/opencv2/</span><br></pre></td></tr></table></figure><h2 id="编译">编译</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmake ../opencv-4.10.0 -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local <span class="comment"># new</span></span><br><span class="line">make </span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"><span class="comment"># cmake ../opencv-version -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local </span></span><br></pre></td></tr></table></figure><h2 id="build-success">build success</h2><p><img src="/2024/07/09/opencv-build-use/opencv-build-success.png" class="lazyload placeholder" data-srcset="/2024/07/09/opencv-build-use/opencv-build-success.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="安装">安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  编译安装</span></span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make -j</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测opencv是否安装 以及查询对应版本号</span></span><br><span class="line"><span class="comment"># 查看版本,有输出4.5.2就成功</span></span><br><span class="line">pkg-config --modversion opencv4</span><br><span class="line"><span class="comment"># 查看库</span></span><br><span class="line">pkg-config --libs opencv4</span><br></pre></td></tr></table></figure><h2 id="成功效果">成功效果</h2><p><img src="/2024/07/09/opencv-build-use/opencv-install-success.png" class="lazyload placeholder" data-srcset="/2024/07/09/opencv-build-use/opencv-install-success.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="other">other</h2><ul><li>1.cmake</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https://cmake.org/files/v3.22/cmake-3.22.1.tar.gz</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libssl-dev</span><br><span class="line">tar -xvzf cmake-3.22.1.tar.gz</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 ./configure</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --install /usr/bin/cmake cmake /usr/local/bin/cmake 1 --force</span><br><span class="line">cmake --version</span><br></pre></td></tr></table></figure><ul><li>2.Eigen3</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitlab.com/libeigen/eigen/-/releases/3.4.0</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 -R ./*</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libeigen3-dev</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ../</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure><ul><li>3.Sophus</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> git <span class="built_in">clone</span> https://github.com/strasdat/Sophus.git</span><br><span class="line"><span class="comment"># https://gitee.com/SimonLeung/Sophus</span></span><br><span class="line">unzip Sophus.zip</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 -R ./*</span><br><span class="line"><span class="built_in">cd</span> Sophus</span><br><span class="line">git checkout a621ff    <span class="comment">#切换为非模板类的历史版本</span></span><br><span class="line"><span class="comment"># git config --global --add safe.directory /home/czq/Desktop/calib/lib/Sophus</span></span><br><span class="line"><span class="built_in">cd</span> Sophus</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">vim ../sophus/so2.cpp</span><br><span class="line"><span class="comment"># unit_complex_.real() = 1.; -&gt; unit_complex_.real(1.);</span></span><br><span class="line"><span class="comment"># unit_complex_.imag() = 0.; -&gt; unit_complex_.imag(0.);</span></span><br><span class="line">cmake ..  </span><br><span class="line">make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li>g2o</li></ol></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> git <span class="built_in">clone</span> https://github.com/RainerKuemmerle/g2o/archive/refs/tags/20230223_git.zip</span><br><span class="line">unzip 20230223_git.zip</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 -R ./*</span><br><span class="line"><span class="built_in">cd</span> 20230223_git</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..  </span><br><span class="line">make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure><h2 id="other-2">other</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vim ./include/file.cpp</span></span><br><span class="line"><span class="comment">// from:</span></span><br><span class="line">  cv::Ptr&lt;cv::FeatureDetector&gt;     pDetector   = cv::xfeatures2d::SIFT::<span class="built_in">create</span>();</span><br><span class="line">  cv::Ptr&lt;cv::DescriptorExtractor&gt; pDescriptor = cv::xfeatures2d::SIFT::<span class="built_in">create</span>();</span><br><span class="line"><span class="comment">// to:</span></span><br><span class="line">  cv::Ptr&lt;cv::FeatureDetector&gt;     pDetector   = cv::SIFT::<span class="built_in">create</span>();</span><br><span class="line">  cv::Ptr&lt;cv::DescriptorExtractor&gt; pDescriptor = cv::SIFT::<span class="built_in">create</span>();</span><br></pre></td></tr></table></figure><h2 id="debug-model-lib">debug model lib</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install libgtk2.0-dev  pkg-config</span><br><span class="line"><span class="comment"># rebuild opencv</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libgoogle-glog-dev</span><br></pre></td></tr></table></figure><h2 id="build-win-exe-on-unbuntu">build win exe on unbuntu</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># CMake</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install cmake</span><br><span class="line"><span class="comment"># google-glog + gflags</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libgoogle-glog-dev libgflags-dev</span><br><span class="line"><span class="comment"># Use ATLAS for BLAS &amp; LAPACK</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libatlas-base-dev</span><br><span class="line"><span class="comment"># Eigen3</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libeigen3-dev</span><br><span class="line"><span class="comment"># SuiteSparse (optional)</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libsuitesparse-dev</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/include/eigen3/Eigen /usr/include/Eigen</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -r /usr/include/eigen3/Eigen /usr/include</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -r /usr/include/eigen3/signature_of_eigen3_matrix_library /usr/include</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -r /usr/include/eigen3/unsupported /usr/include</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt install liblapack-dev libsuitesparse-dev libcxsparse3 libgflags-dev libgoogle-glog-dev libgtest-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># ceres</span></span><br><span class="line"><span class="built_in">sudo</span> git <span class="built_in">clone</span> https://github.com/ceres-solver/ceres-solver</span><br><span class="line"><span class="comment"># use follow link tag or release package</span></span><br><span class="line"><span class="comment"># https://github.com/ceres-solver/ceres-solver/archive/refs/tags/2.2.0.zip</span></span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make -j8</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure><h1>open gui on ubuntu</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nautilus /path/to/directory</span><br></pre></td></tr></table></figure><h2 id="See">See</h2><ul><li><ol><li><a href="https://blog.csdn.net/weixin_40649372/article/details/124979958">https://blog.csdn.net/weixin_40649372/article/details/124979958</a></li></ol></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm安装时出现拉取git仓库错误问题修复措施研究</title>
      <link href="/2024/07/05/git-respority-error/"/>
      <url>/2024/07/05/git-respority-error/</url>
      
        <content type="html"><![CDATA[<h1>错误内容</h1><h2 id="错误详情">错误详情</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">czq@czq-virtual-machine:~/Desktop/blog/hexo-bamboo-blog$ sudo npm install</span><br><span class="line">npm error code 128</span><br><span class="line">npm error An unknown git error occurred</span><br><span class="line">npm error command git --no-replace-objects ls-remote ssh://git@github.com/CodeFalling/hexo-asset-image.git</span><br><span class="line">npm error git@github.com: Permission denied (publickey).</span><br><span class="line">npm error fatal: Could not read from remote repository.</span><br><span class="line">npm error</span><br><span class="line">npm error Please make sure you have the correct access rights</span><br><span class="line">npm error and the repository exists.</span><br><span class="line"></span><br><span class="line">npm error A complete log of this run can be found in: /root/.npm/_logs/2024-07-05T01_37_00_386Z-debug-0.log</span><br></pre></td></tr></table></figure><h2 id="How-to-fix-the-prolem">How to fix the prolem</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C mail@qq.com</span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_res.pub</span><br><span class="line"><span class="comment"># add rsa to github.com </span></span><br></pre></td></tr></table></figure><h2 id="switch-node-version-to-point">switch node version to point</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install npm</span><br><span class="line"><span class="built_in">sudo</span> npm install n -g</span><br><span class="line"><span class="built_in">sudo</span> n lts</span><br><span class="line"><span class="built_in">sudo</span> node -v</span><br></pre></td></tr></table></figure><h2 id="switch-mirror-to-tb-mirror">switch mirror to tb mirror</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业设计预览</title>
      <link href="/2024/06/25/graduate-design/"/>
      <url>/2024/06/25/graduate-design/</url>
      
        <content type="html"><![CDATA[<h2 id="原文如下">原文如下:</h2><br><!-- <div class="row">    <embed src="https://caozhaoqi.github.io/2024/06/25/graduate-design/gd_final.pdf" width="100%" height="550" type="application/pdf"></div> -->暂时失效，停止访问！！！<br>---2024/08/21---<br><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> doc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试报告</title>
      <link href="/2024/06/25/test-case-result/"/>
      <url>/2024/06/25/test-case-result/</url>
      
        <content type="html"><![CDATA[<h2 id="用户">用户</h2><p>本文档用于测试、开发人员填写测试过程结果。</p><h2 id="定义">定义</h2><blockquote><p>软件测试：在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程</p></blockquote><h2 id="测试对象">测试对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">功能点子功能内容描述</span><br><span class="line">物料维护物料清单物料清单的管理</span><br></pre></td></tr></table></figure><h2 id="测试阶段">测试阶段</h2><ul><li>单元测试</li><li>集成测试</li><li>系统测试</li><li>回归测试</li></ul><h2 id="测试工具">测试工具</h2><p>基于用友yonBuilder平台进行测试。</p><h1>测试概要</h1><h2 id="进度回顾">进度回顾</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">测试项目测试内容成功次数测试次数测试时间回归测试是否正常是否符合预期备注</span><br><span class="line">原料数据管理功能数据插入352021/8/25是是引用错误</span><br></pre></td></tr></table></figure><h2 id="测试执行">测试执行</h2><blockquote><p>此次测试严格按照项目计划和测试计划执行，按时完成了测试计划规定的测试对象的测试。针对测试计划规定的测试策略，在测试执行中都有体现，在测试执行过程中，依据测试计划和测试用例，对系统进行了完整的测试</p></blockquote><h2 id="测试用例">测试用例</h2><h3 id="功能性">功能性</h3><blockquote><p>测试系统中每个功能，确保系统功能运行完整，界面显示无误，数据操作正常。</p></blockquote><h3 id="易用性">易用性</h3><blockquote><p>操作按钮提示信息正确性，一致性，可理解性</p></blockquote><h2 id="测试环境">测试环境</h2><h3 id="软硬件环境">软硬件环境</h3><h4 id="软件环境">软件环境</h4><blockquote><p>基于yonBuilder平台手动测试。</p></blockquote><h4 id="硬件环境">硬件环境</h4><p>pc×1</p><h2 id="测试结果">测试结果</h2><h3 id="Bug趋势图">Bug趋势图</h3><blockquote><p>如图所示</p></blockquote><p><img src="/2024/06/25/test-case-result/a.png" class="lazyload placeholder" data-srcset="/2024/06/25/test-case-result/a.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="Bug优先级分布">Bug优先级分布</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">测试项目测试内容备注优先级具体描述</span><br><span class="line">原料数据管理功能数据插入引用错误P0功能实现错误</span><br><span class="line">母件结构管理功能数据插入引用错误P0功能实现错误</span><br><span class="line">数据查询数据格式显示异常P1未达到预期目的</span><br><span class="line">订单管理功能数据插入日期无法插入P0功能实现错误</span><br><span class="line">数据查询日期显示异常P2需求不符</span><br><span class="line">计划评估功能数据插入时间无法插入P0功能实现错误</span><br><span class="line">数据查询列表页面和主页面数据未关联P0功能问题</span><br><span class="line">物料清单管理功能数据插入参考配置错误P0功能实现错误</span><br><span class="line">数据查询移动端显示错误P1未达到预期目的</span><br></pre></td></tr></table></figure><h2 id="问题类型分布">问题类型分布</h2><blockquote><p>问题类型分布如下所示：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">时间项目bug数目</span><br><span class="line">8月25日原料管理1</span><br><span class="line">8月25日母件结构管理2</span><br><span class="line">8月25日需求管理0</span><br><span class="line">8月26日订单管理3</span><br><span class="line">8月26日组织信息管理0</span><br><span class="line">8月26日计划评估2</span><br><span class="line">8月26日计划方案0</span><br><span class="line">8月26日计划策略1</span><br><span class="line">8月27日物料清单2</span><br><span class="line">8月27日子件用途2</span><br><span class="line">8月27日客户信息管理0</span><br></pre></td></tr></table></figure><h2 id="测试结论">测试结论</h2><h3 id="功能性-2">功能性</h3><blockquote><p>测试的软件功能基本符合预期。</p></blockquote><h3 id="易用性-2">易用性</h3><blockquote><p>软件操作逻辑符合普遍用户直觉，具有简单、易用等特点。</p></blockquote><h3 id="可靠性">可靠性</h3><blockquote><p>暂无</p></blockquote><h3 id="兼容性">兼容性</h3><blockquote><p>软件适配多个平台，包括app，web具有一定兼容性。</p></blockquote><h3 id="安全性">安全性</h3><blockquote><p>对于用户信息进行加密存储，具有一定安全性。</p></blockquote><h2 id="测试分析">测试分析</h2><h3 id="覆盖率">覆盖率</h3><blockquote><p>本软件测试包含已实现的所有功能。</p></blockquote><h3 id="遗留缺陷的影响">遗留缺陷的影响</h3><blockquote><p>遗留bug基本为P4级别的影响，不影响用户的基本使用。</p></blockquote><h3 id="建议">建议</h3><blockquote><p>增加新的功能，完善软件。</p></blockquote><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> doc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试用例</title>
      <link href="/2024/06/25/test-case/"/>
      <url>/2024/06/25/test-case/</url>
      
        <content type="html"><![CDATA[<h2 id="定义">定义</h2><blockquote><p>测试用例：指对一项特定的软件产品进行测试任务的描述，体现测试方案、方法、技术和策略。其内容包括测试目标、测试环境、输入数据、测试步骤、预期结果、测试脚本等，最终形成文档。</p></blockquote><h2 id="测试分类">测试分类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主要分为：</span><br><span class="line">测试方法分类：白盒测试、黑盒测试。</span><br><span class="line">测试过程：</span><br></pre></td></tr></table></figure><ul><li>单元测试</li><li>集成测试</li><li>系统测试</li><li>回归测试</li></ul><h3 id="测试用例分类">测试用例分类</h3><blockquote><p>包括以下部分：</p></blockquote><ul><li>有效等价类</li><li>无效等价类</li></ul><h3 id="测试用例编写方案">测试用例编写方案</h3><h4 id="编写原则">编写原则</h4><blockquote><p>必须具有以下属性</p></blockquote><ul><li>测试项描述</li><li>输入值</li><li>输出值</li></ul><h4 id="注意问题">注意问题</h4><blockquote><p>注意以下问题：</p></blockquote><ul><li>对于一个功能点执行多个测试用例；</li><li>及时总结存在的问题。</li></ul><h2 id="测试用例">测试用例</h2><h3 id="功能测试用例">功能测试用例</h3><blockquote><p>功能测试负责本系统所有功能的测试。</p></blockquote><h4 id="被测单元介绍">被测单元介绍</h4><blockquote><p>主要测试单元如下所示。</p></blockquote><p>功能点子功能内容描述<br>物料维护物料清单物料清单的管理</p><h3 id="测试范围与目的">测试范围与目的</h3><ul><li>测试范围：包括但不限于表所示的功能点；</li><li>测试目的：确保软件运行更加稳健，最终符合客户要求。</li></ul><h4 id="测试环境及工具描述">测试环境及工具描述</h4><blockquote><p>本软件基于用友yonBuilder平台测试，采取手工点击输入数据方式进行测试。</p></blockquote><h4 id="测试驱动程序设计">测试驱动程序设计</h4><blockquote><p>postman、apifox等</p></blockquote><h2 id="性能测试用例">性能测试用例</h2><blockquote><p>性能测试，主要用于测试软件性能是否达到预定要求。</p></blockquote><h2 id="并发测试用例">并发测试用例</h2><h3 id="被测单元介绍-2">被测单元介绍</h3><blockquote><p>对于功能的每个页面进行并发性测试，确保系统不崩溃。</p></blockquote><h4 id="测试范围与目的-2">测试范围与目的</h4><ul><li>测试范围：包括表2-1所示所有内容。</li><li>测试目的：确保多个用户访问时系统不崩溃。</li></ul><h4 id="测试环境及工具描述-2">测试环境及工具描述</h4><blockquote><p>通过多个账号同时访问一个页面测试系统并发性</p></blockquote><h4 id="测试驱动程序设计-2">测试驱动程序设计</h4><h2 id="集成测试用例">集成测试用例</h2><blockquote><p>系统功能测试</p></blockquote><h2 id="测试总结">测试总结</h2><h3 id="测试结论">测试结论</h3><p>测试达到了预期目的，同时软件也暴露出了一些问题。</p><h3 id="遗留问题">遗留问题</h3><blockquote><p>总结暂时未解决问题</p></blockquote><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> doc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概要设计</title>
      <link href="/2024/06/25/Conceptual-design/"/>
      <url>/2024/06/25/Conceptual-design/</url>
      
        <content type="html"><![CDATA[<h2 id="基础定义">基础定义</h2><ul><li>数据结构：特指结构性数据元素的集合；</li><li>逻辑结构：特指数据的逻辑结构在计算机存储空间的存储形式，如：链式存储、哈希存储；</li><li>物理结构：特指数据结构中的物理结构，其过程为将概念模型转换为数据库支持的数据模型；</li></ul><h2 id="总体设计">总体设计</h2><h3 id="需求规定">需求规定</h3><p>需满足以下需求：</p><ul><li>页面响应时间小于5秒；</li><li>数据存储安全、系统可靠性高。</li></ul><h3 id="运行环境">运行环境</h3><blockquote><p>系统运行环境如下所示：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">操作系统Android 6.0及以上或IOS 9及以上</span><br><span class="line">CPU主频2.0GHz</span><br><span class="line">内存大于2GB</span><br><span class="line">浏览器Chrome、Edge等</span><br><span class="line">外部存储剩余空间大于1GB</span><br></pre></td></tr></table></figure><h3 id="处理流程">处理流程</h3><blockquote><p>本系统大致处理流程如图所示</p></blockquote><p><img src="/2024/06/25/Conceptual-design/lc.png" class="lazyload placeholder" data-srcset="/2024/06/25/Conceptual-design/lc.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="系统结构">系统结构</h3><p>本系统结构如图所示。</p><p><img src="/2024/06/25/Conceptual-design/struct.png" class="lazyload placeholder" data-srcset="/2024/06/25/Conceptual-design/struct.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="功能需求与模块划分">功能需求与模块划分</h3><blockquote><p>模块划分如下所示</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">功能点子功能需求编号</span><br><span class="line">物料维护物料清单3.2.1.1</span><br></pre></td></tr></table></figure><h2 id="接口设计">接口设计</h2><h3 id="用户接口">用户接口</h3><blockquote><p>用户接口如下所示</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">模块名称输入信息界面操作输出信息</span><br><span class="line">物料维护物流清单查询/保存/修改/删除显示操作是否成功信息</span><br></pre></td></tr></table></figure><h3 id="外部接口">外部接口</h3><h3 id="内部接口">内部接口</h3><h2 id="逻辑结构设计">逻辑结构设计</h2><h3 id="E-R图">E-R图</h3><blockquote><p>具体如图所示</p></blockquote><p><img src="/2024/06/25/Conceptual-design/er.png" class="lazyload placeholder" data-srcset="/2024/06/25/Conceptual-design/er.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="表定义">表定义</h2><blockquote><p>表结构如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">名称描述类型长度小数点非空主键</span><br><span class="line">id物料idvarchar320√√</span><br><span class="line">name物料名varchar320√×</span><br><span class="line">category物料种类varchar320××</span><br><span class="line">source原料名varchar320××</span><br><span class="line">semi-finished_product半成品名varchar320××</span><br><span class="line">son-product子件idvarchar320√×</span><br><span class="line">mother-product母件idvarchar320√×</span><br><span class="line">stage所属阶段varchar320××</span><br><span class="line">save_time保存时间time10××</span><br><span class="line">update_time修改时间time 10××</span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> doc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详细设计说明</title>
      <link href="/2024/06/25/Detail-designed/"/>
      <url>/2024/06/25/Detail-designed/</url>
      
        <content type="html"><![CDATA[<h1>详细设计</h1><h2 id="总体设计">总体设计</h2><h3 id="需求概述">需求概述</h3><blockquote><p>主要包含两方面需求</p></blockquote><ul><li>1.功能需求：</li><li>2.非功能性需求<br>性能需求：数据准确、响应时间小、兼容性强；<br>安全需求：数据存储安全、数据完整；<br>可恢复性：遭遇故障时快速可恢复；</li></ul><h4 id="软件结构">软件结构</h4><blockquote><p>绘制软件主要结构（模块）</p></blockquote><p><img src="/2024/06/25/Detail-designed/struct.png" class="lazyload placeholder" data-srcset="/2024/06/25/Detail-designed/struct.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="模块描述">模块描述</h3><ul><li>模块基本信息</li></ul><blockquote><p>描述模块基本功能<br>功能点子功能</p></blockquote><h3 id="模块功能概述">模块功能概述</h3><blockquote><p>简述模块基本功能</p></blockquote><h2 id="算法">算法</h2><h3 id="数据加密算法">数据加密算法</h3><blockquote><p>AES算法具体流程如图</p></blockquote><p><img src="/2024/06/25/Detail-designed/decode.png" class="lazyload placeholder" data-srcset="/2024/06/25/Detail-designed/decode.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h4 id="模块处理逻辑">模块处理逻辑</h4><blockquote><p>阐述模块处理基本逻辑与流程，举例：</p></blockquote><p><img src="/2024/06/25/Detail-designed/example.png" class="lazyload placeholder" data-srcset="/2024/06/25/Detail-designed/example.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="接口">接口</h2><p>接口如下所示：<br>模块名称输入信息界面操作输出信息</p><h2 id="性能">性能</h2><ul><li>1、数据准确：用户使用软件展现的效果符合基本预期，运行不出错；</li><li>2、响应时间：数据获取、页面请求的响应时间在一定范围内，不让用户等待时间过长；</li><li>3、兼容性：网站兼容多个主流浏览器。</li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> doc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>需求分析说明</title>
      <link href="/2024/06/25/requirements-analysis/"/>
      <url>/2024/06/25/requirements-analysis/</url>
      
        <content type="html"><![CDATA[<h1>需求描述约定</h1><h2 id="需求层次划分">需求层次划分</h2><blockquote><p>软件需求主要划分为以下三个层次：业务需求、用户需求、功能需求。还包括功能性需求、非功能性需求等。</p></blockquote><h3 id="需求跟踪粒度">需求跟踪粒度</h3><blockquote><p>此处粒度特指需求分解粒度，本系统跟踪至系统功能性需求。</p></blockquote><h3 id="功能描述方法">功能描述方法</h3><blockquote><p>从以下方面论述系统需求：</p></blockquote><ul><li>业务描述</li><li>用户输入</li><li>用户输出</li><li>业务流程</li></ul><h3 id="业务描述">业务描述</h3><blockquote><p>主要解决的问题(举例)</p></blockquote><ul><li>1 软件工程方面<ul><li>业务设计<br>以APP背景为前提，对业务需求进行调用、设计分析</li><li>应用设计<br>在业务分析基础上，对业务对象、页面、流程等通用业务APP功能进行应用设计</li><li>开发实现<br>在应用设计基础上，以工业场景应用为案例，开发现实完整的、可发布的工业APP</li><li>运维实施<br>支撑工业APP运行环境、进行编译部署，对在线运行的APP进行日志采集、监控、行为分析</li></ul></li><li>2 技术体系方面<ul><li>基础共性<br>对各行业共同需要的共性知识和经验进行软件化</li><li>行业通用<br>对特定行业需要的共性知识和经验进行软件化</li><li>工程专用<br>对特定的行业的特定工程需要的共性知识和经验进行软件化</li></ul></li><li>3 工业场景方面<ul><li>研发设计<br>服务于工业产品研发涉及领域的业务场景</li><li>生产制造<br>服务于工业产品生产制造领域的业务场景</li><li>运营维护<br>服务于工业产品运营维护领域的业务场景</li><li>经营管理<br>服务于工业产品经营管理领域的业务场景</li></ul></li></ul><h1>用户特点</h1><ul><li>系统管理员：后台维护人员</li><li>用户：对数据的管理</li></ul><h1>运行环境</h1><h2 id="开发环境">开发环境</h2><p>设备名称数量配置、型号备注<br>pc         x1       …</p><h2 id="系统功能需求">系统功能需求</h2><blockquote><p>具体业务描述与流程如下：</p></blockquote><p><img src="/2024/06/25/requirements-analysis/struct.png" class="lazyload placeholder" data-srcset="/2024/06/25/requirements-analysis/struct.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="总体功能需求">总体功能需求</h3><blockquote><p>举例</p></blockquote><ul><li>物料管理：负责完成工程数据功能的开发；</li><li>计划管理：完成对于计划策略、计划方案、长周期计划功能；</li><li>生产订单管理：完成订单维护、订单变更等生产过程管理。</li></ul><h3 id="各个模块功能需求">各个模块功能需求</h3><blockquote><p>举例</p></blockquote><ul><li>物料管理模块</li></ul><blockquote><p>此模块主要功能包括以下几部分：<br>1.物料清单全阶维护：在此功能中物料清单的维护包括但不限于：子装配件、中间件、零件、原材料等清单的仓库发料、车间生产、采购数量种类的维护；<br>2.母件结构查询：负责查询母件结构；<br>3.子件用途查询：负责查询子件具体用途。</p></blockquote><ul><li>计划管理功能</li></ul><blockquote><p>此模块主要分为以下功能<br>1. 计划策略：主要包括两个方面：成品策略和资源策略。其中成品策略是指面对产品需求时是采用自己制造还是外包；资源策略分为产能策略和原料策略，产能策略是指为某种生产所分配产能策略，原料策略是按照原料情况对采购、备库存等操作进行安排。本文主要实现上述策略；<br>2. 计划方案：包括计划方案的添加、修改、删除等操作；<br>3. 计划结果评估：对于计划方案的执行结果进行评估；<br>4. 需求管理：对用户需求的增删改查；<br>5. 物料需求计划：对物料需求做出合理计划，在计划改变时可以修改或者删除；<br>6. 长周期计划：通过此功能可以进行长周期的需求计划的发布，变更等操作；<br>7. 批次需求计划：对于某一批次产品需求计划进行管理。</p></blockquote><ul><li>订单管理功能</li></ul><blockquote><p>此模块主要分为以下功能：<br>1.订单维护：负责用户订单的日常维护；<br>2.订单变更：负责订单内容的修改操作；<br>3.领料退料：负责记录原料的使用明细；<br>4.完工入库：在产品完工后，对入库产品进行记录；<br>5.跨组织领料入库：负责在不同部门间记录原料的入库详情；<br>6.在库品改制返修：对于需要返修的商品进行记录；<br>7.缺料分析：记录未完成订单的材料缺失进行分析；<br>8.完工齐套检查：对于完工后的物料清单进行检查。</p></blockquote><h2 id="非功能性需求">非功能性需求</h2><h3 id="系统性能要求">系统性能要求</h3><blockquote><p>本软件对性能的要求主要包括以下几个方面：</p></blockquote><ul><li>1、数据准确：用户使用软件展现的效果符合基本预期，运行不出错；</li><li>2、响应时间：数据获取、页面请求的响应时间在一定范围内，不让用户等待时间过长；</li><li>3、兼容性：网站兼容多个主流浏览器。</li></ul><h3 id="系统安全需求">系统安全需求</h3><ul><li>1、身份验证：对于访问的用户进行身份验证；</li><li>2、授权访问：对于每个页面/功能进行细粒度化管理，通过授予权限进行访问；</li><li>3、信息加密存储：对于用户信息进行加密存储，确保存储安全；</li><li>4、数据完整性：对于上传文件完整性进行校验，对于数据传输完整性进行检验。</li></ul><h3 id="系统可恢复性需求">系统可恢复性需求</h3><blockquote><p>系统可恢复性是指在系统发生故障时可以快速恢复至故障发生前水平的能力。本系统的可恢复性要求必须下在指定时间内恢复系统性能水平。</p></blockquote><h1>系统接口</h1><h2 id="用户接口">用户接口</h2><blockquote><p>本软件采用Web和App端界面化操作方式控制数据的录入、存储操作。具体接口如表5-1所示。<br>表5-1 接口表</p></blockquote><h2 id="外部接口">外部接口</h2><blockquote><p>一般为restful api格式，通过http调用</p></blockquote><h2 id="内部接口">内部接口</h2><blockquote><p>controller api</p></blockquote><h1>功能列表</h1><blockquote><p>列举系统功能要点</p></blockquote><ul><li>功能点子功能需求编号优先级内容描述</li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> doc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LCD（Low-Code Development）Overview 低代码开发概述</title>
      <link href="/2024/06/25/LCD-Overview/"/>
      <url>/2024/06/25/LCD-Overview/</url>
      
        <content type="html"><![CDATA[<h1>低代码开发平台介绍</h1><blockquote><p>一种应用程序开发方法，允许开发者通过图形化用户界面，使用预构建的模块和配置选项，而不是传统的手动编码，来创建应用程序。这种方法可以显著提高开发速度，降低技术门槛，使更多的非专业开发者也能参与到应用开发中。</p></blockquote><h2 id="简介">简介</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">低代码开发是指开发人员通过无代码或是少量代码开发的形式。</span><br><span class="line">目前国内主要是两种：一种是无代码开发，即通过简单的拖拽形式，实现系统的搭建。但这样搭建出现的系统功能简单，不适合企业的面全运营。另一种是低代码开发，大部分功能可以通过无代码式的拖拽形式搭建好，另外一些核心的特殊功能需要通过少量代码才能开发完成。这种模式开发出现的系统比代码码模式开发出来的系统功能更为强大，也更全面些，比较适合企业的整体数字化运营。算是无代码平台发展的延深品。在这种方式中第二种方式应用较多，其中用友yonBuilder平台使用人数较多。</span><br></pre></td></tr></table></figure><h2 id="相关平台介绍">相关平台介绍</h2><h3 id="用友YonBuilder平台">用友YonBuilder平台</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 用友YonBuilder平台是用友针对低代码企业开发趋势打造的一款高水平的低代码开发平台。集成了全生命周期管理、应用模型、部署/集成/交付、AI与智能应用、社交与协作等诸多模块，可为非专业开发人员、IT人员和业务人员带来轻松便捷的专业化企业应用开发体验。</span></span><br><span class="line"><span class="bullet">-</span> YouBuilder不仅支持公民开发者无代码可视化应用构建，也支持专业开发人员低代码高效率应用开发：</span><br><span class="line"><span class="bullet">-</span> 对于不懂编程的业务人员，YonBuilder支持零代码拖拽式应用开发。</span><br><span class="line"><span class="bullet">-</span> 对于有经验的开发工程师，YonBuilder的全组件功能和可视化应用构建极大提升了功能调整、代码维护和开发的效率，云原生开发支持资源管理、部署运维一站式服务。</span><br><span class="line"><span class="bullet">-</span> 对于企业来说，YonBuilder的低代码高效开发可提升团队成员参与度、简化项目管理工作，其云原生架构更能大幅降低硬件投入和运维成本。</span><br><span class="line"><span class="bullet">-</span> YonBuilder提供了超过1000个企业级API供用户任意调用，可与用友产品深度融合。</span><br><span class="line"><span class="bullet">-</span> YouBuilder更是沉淀了用友长达32年的企业软件技术经验，可适用于多种多样的应用场景，帮助企业在数字化时代破浪前行。</span><br><span class="line"><span class="code">```markdown</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">### 混合开发介绍</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure><p>云时代的来临正在改变App和运营团队之间的关系，一场不能避免的变革正在进行。鉴于移动终端的局限性，移动终端上的APP由本地化应用(Native App)，到基于WEB的应用Web App，再到混合型应用（Hybrid APP），这一连串的变化都源于技术的更新和市场的需要。<br>Hybrid App是指介于web-app、native-app这两者之间的app,它虽然看上去是一个Native App，但只有一个UI WebView，里面访问的是一个Web App，比如街旁网最开始的应用就是包了个客户端的壳，其实里面是HTML5的网页，后来才推出真正的原生应用。再彻底一点的，如掌上百度和淘宝客户端Android版，走的也是Hybrid App的路线，不过掌上百度里面封装的不是WebView，而是自己的浏览内核，所以体验上更像客户端，更高效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">### 工业微服务</span><br><span class="line"></span><br><span class="line">```markdown</span><br><span class="line"> 微服务是系统架构上的一种设计风格， 它的主旨是将一个原本独立的系统拆分成多个小型服务，这些小型服务都在各自独立的进程中运行，服务之间通过基于HTTP的RESTful API进行通信协作。被拆分成的每一个小型服务都围绕着系统中的某一项或一些耦合度较高的业务功能进行构建， 并且每个服务都维护着自身的数据存储、业务开发、自动化测试案例以及独立部署机制。</span><br></pre></td></tr></table></figure><h2 id="盈利模式">盈利模式</h2><h3 id="营销模式">营销模式</h3><p>不同的应用类别需要不同的模式，主要的营销模式有植入广告模式、用户参与模式和购物app移植模式。</p><ul><li>1）植入广告模式</li></ul><blockquote><p>只要将广告投放到那些热门的、与自己产品受众相关的应用上就能达到良好的传播效果。</p></blockquote><ul><li>1、推广目标：提高品牌知名度和吸引更多用户注册</li><li>2、流程：</li></ul><ul><li>a、获取受众，采用“铺面”+“打点”的形式，通过内容定向“铺面”和机型定向“打点”来进行受众定位。</li><li>b、吸引受众，手机上的“震撼”，高冲击动态广告栏，吸引受众眼球，引起受众好奇心理。</li><li>c、转化受众，“即点击，即注册”，用户点击广告栏，进入广告了解详情，注册参与活动，广告主实时手机用户数据。</li><li>2）用户参与模式<br>这种营销模式是主要的应用类型是app移植类和品牌应用类，企业把符合自己定位的应用发布到应用商店内，供智能手机用户下载，特定用户利用这种应用可以很直观的了解企业的信息，用户是应用的使用者，手机应用成为用户的一种工具，能够为用户的生活提供便利性。在给目标客户提供有用的资讯的同时，渗透自身的商品信息。</li></ul><h3 id="推广策略：">推广策略：</h3><blockquote><p>针对中国用户APP下载碎片化的特点，整合移动互联网和PC互联网四大渠道，覆盖手机用户下载APP的主要通道，高效推广APP。</p></blockquote><ul><li>1.移动互联网：利用优质手机WAP和APP媒体资源直接推广APP下载。</li><li>2.PC互联网：整合互联网ITapp下载频道和iPhone、android应用商店，覆盖主流下载渠道，硬性广告和软性推荐结合推广APP。<br>从web端的各个与智能制造这个关键词有关的网站以及推送下，进行本产品的推广，还可以通过平台合作推广。包括内置付费推广、按量付费、广告联盟付费推广等模式。</li><li>3.线下推广</li></ul><blockquote><p>主要分为地推以及线下广告投放，线下推广非常适合O2O类需要学习成本的APP推广，在如今线上流量成本越来越高、真实性难以保障的情况下，线下推广不失为一个合理的选项。</p></blockquote><blockquote><p>地推对项目落地的执行力有比较高的要求，在阶段性的短期尝试阶段，我们自己进行推广，相对而言成本不会太高。把地推当成长期的核心竞争力，和第三方地推公司合作，他们会比较专业、有规划性。<br>线下广告投放场景主要集中在人流量大的地区，比如地铁、公交、电梯、高铁等，我们地推的主要方向就是向工厂等各个企业，以及向工厂内的工人群体进行推广，通过本产品对工人进行的智能化管理，使得公认的工作效率也能够不断的上升，实现双方的共赢。</p></blockquote><h3 id="业务体系">业务体系</h3><blockquote><p>基础体系如图</p></blockquote><p><img src="/2024/06/25/LCD-Overview/p1.png" class="lazyload placeholder" data-srcset="/2024/06/25/LCD-Overview/p1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="See">See</h2><ul><li>1.<a href="https://baike.baidu.com/item/YonBuilder/61310931?fr=ge_ala">https://baike.baidu.com/item/YonBuilder/61310931?fr=ge_ala</a></li><li>2.<a href="https://developer.yonyou.com/product/appdevelopment/appdriven">https://developer.yonyou.com/product/appdevelopment/appdriven</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> LCD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nsfw模型在python、nodejs、java等平台的AI鉴图应用</title>
      <link href="/2024/06/05/nsfw-model-use/"/>
      <url>/2024/06/05/nsfw-model-use/</url>
      
        <content type="html"><![CDATA[<h1>简介</h1><blockquote><p>Detecting Not-Suitable-For-Work (NSFW) content is a high demand task in computer vision. While there are many types of NSFW content, here we focus on the pornographic images and videos.</p></blockquote><blockquote><p>The Yahoo Open-NSFW model originally developed with the Caffe framework has been a favourite choice, but the work is now discontinued and Caffe is also becoming less popular. Please see the description on the Yahoo project page for the context, definitions, and model training details.</p></blockquote><blockquote><p>This Open-NSFW 2 project provides a Keras implementation of the Yahoo model, with references to its previous third-party TensorFlow 1 implementation. Note that Keras 3 is compatible with TensorFlow, JAX, and PyTorch. However, currently this model is only guaranteed to work with TensorFlow and JAX.</p></blockquote><blockquote><p>A simple API is provided for making predictions on images and videos.</p></blockquote><h1>相关技术</h1><ul><li>TensorFlow</li><li>fastapi</li><li>loguru</li><li>pillow</li><li>requests</li><li>nodejs</li><li>express</li><li>tfjs-node</li><li>body-parser</li><li>multiparty</li><li>nsfwjs</li></ul><h2 id="python版本">python版本</h2><h3 id="usage-模型使用">usage(模型使用)</h3><h4 id="load-image">load image</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_image</span>(<span class="params">image_path</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    img = img.resize((_IMAGE_SIZE, _IMAGE_SIZE))</span><br><span class="line">    img.load()</span><br><span class="line">    data = np.asarray(img, dtype=<span class="string">&quot;float32&quot;</span>)</span><br><span class="line">    data = standardize(data)</span><br><span class="line">    data = data.astype(np.float16, copy=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><h4 id="predict-image">predict image</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">image_path</span>):</span><br><span class="line">    <span class="keyword">with</span> tf.compat.v1.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        <span class="comment"># type</span></span><br><span class="line">        graph = tf.compat.v1.get_default_graph()</span><br><span class="line">        <span class="comment"># 获取默认的 TensorFlow 图，加载一个预先保存的模型</span></span><br><span class="line">        tf.compat.v1.saved_model.loader.load(sess, [tf.compat.v1.saved_model.tag_constants.SERVING], _MODEL_DIR)</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        inputs：模型的输入张量，用于接收图像数据。</span></span><br><span class="line"><span class="string">        probabilities_op：经过 softmax 函数后的输出张量，包含每个类别的概率。</span></span><br><span class="line"><span class="string">        class_index_op：通过 ArgMax 操作得到的最大概率对应的类别索引。</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        inputs = graph.get_tensor_by_name(<span class="string">&quot;input_tensor:0&quot;</span>)</span><br><span class="line">        probabilities_op = graph.get_tensor_by_name(<span class="string">&#x27;softmax_tensor:0&#x27;</span>)</span><br><span class="line">        class_index_op = graph.get_tensor_by_name(<span class="string">&#x27;ArgMax:0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        image_data = load_image(image_path)</span><br><span class="line">        probabilities, class_index = sess.run([probabilities_op, class_index_op],</span><br><span class="line">                                              feed_dict=&#123;inputs: [image_data] * _BATCH_SIZE&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        * `probabilities_dict`：将概率数组转换为一个字典，其中键是类别的标签（通过 `_LABEL_MAP` 映射），值是对应的概率。</span></span><br><span class="line"><span class="string">        * `pre_label`：获取最大概率对应的类别标签。</span></span><br><span class="line"><span class="string">        * `result`：将预测结果组织成一个字典，包含预测的类别标签和每个类别的概率。</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        probabilities_dict = &#123;_LABEL_MAP.get(i): l <span class="keyword">for</span> i, l <span class="keyword">in</span> <span class="built_in">enumerate</span>(probabilities[<span class="number">0</span>])&#125;</span><br><span class="line">        pre_label = _LABEL_MAP.get(class_index[<span class="number">0</span>])</span><br><span class="line">        result = &#123;<span class="string">&quot;class&quot;</span>: pre_label, <span class="string">&quot;probability&quot;</span>: probabilities_dict&#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><blockquote><p>上述代码主要用于预测给定图像路径对应的图像的分类标签及其概率。</p></blockquote><h2 id="js版本">js版本</h2><h3 id="导入lib">导入lib</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入experss模块</span></span><br><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建服务器对象</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 导入body-parser插件</span></span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);;</span><br><span class="line"> <span class="comment">// 配置body-parser模块</span></span><br><span class="line"> app.<span class="title function_">use</span>(bodyparser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;));</span><br><span class="line"> app.<span class="title function_">use</span>(bodyparser.<span class="title function_">json</span>());</span><br><span class="line"><span class="comment">// 导入系统模块path</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> afs = <span class="built_in">require</span>(<span class="string">&#x27;fs-extra&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> multiparty = <span class="built_in">require</span>(<span class="string">&#x27;multiparty&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> imgJS = <span class="built_in">require</span>(<span class="string">&quot;image-js&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> nsfw = <span class="built_in">require</span>(<span class="string">&#x27;nsfwjs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> tf = <span class="built_in">require</span>(<span class="string">&#x27;@tensorflow/tfjs-node&#x27;</span>);</span><br><span class="line"><span class="comment">// const tf = require(&#x27;@tensorflow/tfjs&#x27;);</span></span><br><span class="line"><span class="comment">// require(&#x27;@tensorflow/tfjs-node&#x27;);</span></span><br><span class="line"><span class="keyword">const</span> safeContent = [<span class="string">&#x27;Drawing&#x27;</span>, <span class="string">&#x27;Neutral&#x27;</span>]; <span class="comment">// 设置图片内容安全的类型</span></span><br><span class="line"><span class="comment">// const baseUrl = path.join(__dirname, &#x27;./model/&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="通过接口接收数据">通过接口接收数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/checkImg&#x27;</span>,<span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> form = <span class="keyword">new</span> multiparty.<span class="title class_">Form</span>();</span><br><span class="line">        <span class="comment">// 设置文件存储路径，以当前编辑的文件为相对路径</span></span><br><span class="line">        form.<span class="property">uploadDir</span> = <span class="string">&#x27;./tempImgs&#x27;</span>;</span><br><span class="line">        form.<span class="title function_">parse</span>(req, <span class="title function_">async</span> (err, fields, files) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!files || !files.<span class="property">file</span>[<span class="number">0</span>]) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(files)</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(fields)</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                    <span class="attr">code</span>: -<span class="number">1</span>,</span><br><span class="line">                    <span class="attr">msg</span>: <span class="string">&#x27;请上传file图片资源(form-data格式)&#x27;</span>,</span><br><span class="line">                    <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;files.file[0]:&#x27;</span>, files.<span class="property">file</span>[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">// 图片最大尺寸</span></span><br><span class="line">            <span class="keyword">if</span> (files.<span class="property">file</span>[<span class="number">0</span>].<span class="property">size</span> &gt; <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                    <span class="attr">code</span>: -<span class="number">2</span>,</span><br><span class="line">                    <span class="attr">msg</span>: <span class="string">&#x27;被检测图片最大3M&#x27;</span>,</span><br><span class="line">                    <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 支持的图片类型</span></span><br><span class="line">            <span class="keyword">let</span> imgReg = <span class="regexp">/\S+\.(png|jpeg|jpg)$/g</span>;</span><br><span class="line">            <span class="keyword">let</span> originImgName = files.<span class="property">file</span>[<span class="number">0</span>].<span class="property">originalFilename</span> || files.<span class="property">file</span>[<span class="number">0</span>].<span class="property">path</span>;</span><br><span class="line">            <span class="keyword">if</span> (!imgReg.<span class="title function_">test</span>(originImgName)) &#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                    <span class="attr">code</span>: -<span class="number">3</span>,</span><br><span class="line">                    <span class="attr">msg</span>: <span class="string">&#x27;仅仅支持（png、jpeg、jpg）类型图片检测&#x27;</span>,</span><br><span class="line">                    <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> img = <span class="keyword">await</span> <span class="title function_">convert</span>(files.<span class="property">file</span>[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">let</span> model;</span><br><span class="line">            <span class="comment">// 加载模型 传入模型路径</span></span><br><span class="line">            model_fp = <span class="string">&#x27;file://&#x27;</span> + path.<span class="title function_">join</span>(<span class="string">&quot;./&quot;</span>, <span class="string">&#x27;model/model.json&#x27;</span>);</span><br><span class="line">            tf.<span class="title function_">loadGraphModel</span>(model_fp</span><br><span class="line">            ).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">loadedModel</span>) &#123;</span><br><span class="line">                model = loadedModel;</span><br><span class="line">                <span class="keyword">let</span> img =  <span class="title function_">convert</span>(files.<span class="property">file</span>[<span class="number">0</span>]);</span><br><span class="line">                nsfw1 = <span class="keyword">new</span> nsfw.<span class="title function_">NSFWJS</span>(<span class="number">0</span>, &#123;</span><br><span class="line">                  <span class="attr">size</span>: <span class="number">224</span></span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(nsfw1.<span class="property">classify</span>);                </span><br><span class="line">                <span class="keyword">let</span> predictions =  nsfw1.<span class="title function_">classify</span>(img);</span><br><span class="line">                <span class="keyword">const</span> &#123;isSafe, imgType&#125; = <span class="title function_">isSafeContent</span>(predictions);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;是否安全：&#x27;</span>, predictions, isSafe);</span><br><span class="line">                res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                    <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">msg</span>: isSafe ? <span class="string">&#x27;图片合规&#x27;</span> : <span class="string">&#x27;图片可能存在不合规的风险,请核查&#x27;</span>,</span><br><span class="line">                    <span class="attr">data</span>: &#123;</span><br><span class="line">                        isSafe,</span><br><span class="line">                        imgType,</span><br><span class="line">                        predictions,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;加载模型时出错：&#x27;</span>, error);</span><br><span class="line">            &#125;);</span><br><span class="line">           </span><br><span class="line">        &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>: -<span class="number">9</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;图片核查失败，请重试&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3006</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;图片鉴黄服务器启动成功！port：3006&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="图片数据归一化">图片数据归一化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imgTypeoObj = &#123;</span><br><span class="line">    <span class="title class_">Drawing</span>: <span class="string">&#x27;艺术性的&#x27;</span>,</span><br><span class="line">    <span class="title class_">Neutral</span>: <span class="string">&#x27;中性的&#x27;</span>,</span><br><span class="line">    <span class="title class_">Sexy</span>: <span class="string">&#x27;性感的&#x27;</span>,</span><br><span class="line">    <span class="title class_">Porn</span>: <span class="string">&#x27;色情的&#x27;</span>,</span><br><span class="line">    <span class="title class_">Hentai</span>: <span class="string">&#x27;变态的&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换图片格式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">convert</span> = <span class="keyword">async</span> file =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> image = <span class="keyword">await</span> imgJS.<span class="property">Image</span>.<span class="title function_">load</span>(file.<span class="property">path</span>);</span><br><span class="line">  <span class="keyword">const</span> numChannels = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">const</span> numPixels = image.<span class="property">width</span> * image.<span class="property">height</span>;</span><br><span class="line">  <span class="keyword">const</span> values = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(numPixels * numChannels);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numPixels; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> c = <span class="number">0</span>; c &lt; numChannels; ++c) &#123;</span><br><span class="line">      values[i * numChannels + c] = image.<span class="property">data</span>[i * <span class="number">4</span> + c];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tf.<span class="title function_">tensor3d</span>(values, [image.<span class="property">height</span>, image.<span class="property">width</span>, numChannels], <span class="string">&#x27;int32&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="废弃数据清空">废弃数据清空</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归删除目录中的文件和子目录</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">emptyDirSync</span>(<span class="params">dirPath</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(dirPath)) &#123;</span><br><span class="line">    <span class="comment">// 如果目录不存在，则直接返回</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读取目录中的文件和子目录</span></span><br><span class="line">  fs.<span class="title function_">readdirSync</span>(dirPath).<span class="title function_">forEach</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> curPath = path.<span class="title function_">join</span>(dirPath, file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是文件还是目录</span></span><br><span class="line">    <span class="keyword">const</span> stats = fs.<span class="title function_">lstatSync</span>(curPath);</span><br><span class="line">    <span class="keyword">if</span> (stats.<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line">      <span class="comment">// 如果是目录，递归删除</span></span><br><span class="line">      <span class="title function_">emptyDirSync</span>(curPath);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果是文件，直接删除</span></span><br><span class="line">      fs.<span class="title function_">unlinkSync</span>(curPath);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 尝试删除空目录</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    fs.<span class="title function_">rmdirSync</span>(dirPath);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// 如果目录不为空（例如有其他进程正在写入），则忽略错误</span></span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">code</span> !== <span class="string">&#x27;ENOTEMPTY&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内容检测">内容检测</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isSafeContent</span> = predictions =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> safeProbability = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> imgTypeValArr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; predictions.<span class="property">length</span>; index++) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = predictions[index];</span><br><span class="line">    <span class="keyword">const</span> className = item.<span class="property">className</span>;</span><br><span class="line">    <span class="keyword">const</span> probability = item.<span class="property">probability</span>;</span><br><span class="line">    <span class="keyword">if</span> (safeContent.<span class="title function_">includes</span>(className)) &#123;</span><br><span class="line">      safeProbability += probability;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  imgTypeValArr = predictions.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b.<span class="property">probability</span> - a.<span class="property">probability</span>);</span><br><span class="line"><span class="comment">//   console.log(&#x27;imgTypeValArr:&#x27;, imgTypeValArr);</span></span><br><span class="line">  <span class="keyword">let</span> myimgType = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (imgTypeValArr.<span class="property">length</span> &amp;&amp; imgTypeValArr[<span class="number">0</span>]) &#123;</span><br><span class="line">    myimgType = imgTypeoObj[imgTypeValArr[<span class="number">0</span>].<span class="property">className</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">isSafe</span>: safeProbability &gt; <span class="number">0.5</span>,</span><br><span class="line">    <span class="attr">imgType</span>: myimgType</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用库">使用库</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node app.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@tensorflow/tfjs-node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body-parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.20.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.18.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fs-extra&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image-js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.35.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;multiparty&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.2.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nsfwjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.4.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="程序使用">程序使用</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install nodejs</span></span><br><span class="line">npm install <span class="comment"># yarn install</span></span><br><span class="line">npm run start <span class="comment"># yarn run start</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    // 查询源</span></span><br><span class="line">    yarn config get registry</span><br><span class="line"></span><br><span class="line"><span class="comment">#    // 更换国内源</span></span><br><span class="line">    yarn config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#    // 恢复官方源</span></span><br><span class="line">    yarn config <span class="built_in">set</span> registry https://registry.yarnpkg.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#    // 删除注册表</span></span><br><span class="line">    yarn config delete registry</span><br><span class="line"><span class="comment">#最新地址 淘宝 NPM 镜像站喊你切换新域名啦!</span></span><br><span class="line">    npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br><span class="line">    </span><br><span class="line">    npm install -g cnpm --registry=https://registry.npmmirror.com</span><br><span class="line">     </span><br><span class="line">     <span class="comment"># 注册模块镜像</span></span><br><span class="line">    npm <span class="built_in">set</span> registry https://registry.npmmirror.com  </span><br><span class="line">     </span><br><span class="line">     // node-gyp 编译依赖的 node 源码镜像  </span><br><span class="line">    npm <span class="built_in">set</span> disturl https://npmmirror.com/dist </span><br><span class="line">     </span><br><span class="line">     // 清空缓存  </span><br><span class="line">    npm cache clean --force  </span><br><span class="line">     </span><br><span class="line">     // 安装cnpm  </span><br><span class="line">    npm install -g cnpm --registry=https://registry.npmmirror.com  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment"># mirror config</span></span><br><span class="line">    sharp_binary_host = https://npmmirror.com/mirrors/sharp</span><br><span class="line">    sharp_libvips_binary_host = https://npmmirror.com/mirrors/sharp-libvips</span><br><span class="line">    profiler_binary_host_mirror = https://npmmirror.com/mirrors/node-inspector/</span><br><span class="line">    fse_binary_host_mirror = https://npmmirror.com/mirrors/fsevents</span><br><span class="line">    node_sqlite3_binary_host_mirror = https://npmmirror.com/mirrors</span><br><span class="line">    sqlite3_binary_host_mirror = https://npmmirror.com/mirrors</span><br><span class="line">    sqlite3_binary_site = https://npmmirror.com/mirrors/sqlite3</span><br><span class="line">    sass_binary_site = https://npmmirror.com/mirrors/node-sass</span><br><span class="line">    electron_mirror = https://npmmirror.com/mirrors/electron/</span><br><span class="line">    puppeteer_download_host = https://npmmirror.com/mirrors</span><br><span class="line">    chromedriver_cdnurl = https://npmmirror.com/mirrors/chromedriver</span><br><span class="line">    operadriver_cdnurl = https://npmmirror.com/mirrors/operadriver</span><br><span class="line">    phantomjs_cdnurl = https://npmmirror.com/mirrors/phantomjs</span><br><span class="line">    python_mirror = https://npmmirror.com/mirrors/python</span><br><span class="line">    registry = https://registry.npmmirror.com</span><br><span class="line">    disturl = https://npmmirror.com/dist</span><br><span class="line"><span class="comment">#  关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="java版本">java版本</h2><h3 id="基础软件安装">基础软件安装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm install</span><br><span class="line">nvm clean</span><br></pre></td></tr></table></figure><ul><li>pom.xml引入库</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hserver-nsfw<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hserver-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hserver<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    核心依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hserver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hserver<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    web框架 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hserver-plugin-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hserver<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.tensorflow<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tensorflow-core-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.tensorflow<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tensorflow-core-platform<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    打包jar --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置打包插件（设置主类，并打包成胖包） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">appendAssemblyId</span>&gt;</span>false<span class="tag">&lt;/<span class="name">appendAssemblyId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 此处，要改成自己的程序入口（即 main 函数类） --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>net.hserver.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实体类定义">实体类定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> net.hserver.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NsfwRes</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> drawings;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> hentai;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> neutral;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> porn;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> sexy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NsfwRes</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NsfwRes</span><span class="params">(<span class="type">float</span>[] all)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.drawings = all[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">this</span>.hentai = all[<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">this</span>.neutral = all[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">this</span>.porn = all[<span class="number">3</span>];</span><br><span class="line">        <span class="built_in">this</span>.sexy = all[<span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        stringBuilder.append(<span class="string">&quot;Drawings-绘画:&quot;</span>).append(String.format(<span class="string">&quot;%.2f&quot;</span>, <span class="built_in">this</span>.drawings * <span class="number">100</span>)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        stringBuilder.append(<span class="string">&quot;Hentai-18禁:&quot;</span>).append(String.format(<span class="string">&quot;%.2f&quot;</span>, <span class="built_in">this</span>.hentai * <span class="number">100</span>)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        stringBuilder.append(<span class="string">&quot;Neutral-中性:&quot;</span>).append(String.format(<span class="string">&quot;%.2f&quot;</span>, <span class="built_in">this</span>.neutral * <span class="number">100</span>)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        stringBuilder.append(<span class="string">&quot;Porn-色情:&quot;</span>).append(String.format(<span class="string">&quot;%.2f&quot;</span>, <span class="built_in">this</span>.porn * <span class="number">100</span>)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        stringBuilder.append(<span class="string">&quot;Sexy-性感:&quot;</span>).append(String.format(<span class="string">&quot;%.2f&quot;</span>, <span class="built_in">this</span>.sexy * <span class="number">100</span>));</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getDrawings</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> drawings;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDrawings</span><span class="params">(<span class="type">float</span> drawings)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.drawings = drawings;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getHentai</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hentai;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHentai</span><span class="params">(<span class="type">float</span> hentai)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hentai = hentai;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getNeutral</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> neutral;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNeutral</span><span class="params">(<span class="type">float</span> neutral)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.neutral = neutral;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getPorn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> porn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPorn</span><span class="params">(<span class="type">float</span> porn)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.porn = porn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getSexy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sexy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSexy</span><span class="params">(<span class="type">float</span> sexy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sexy = sexy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Controller定义">Controller定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.hserver.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hserver.core.ioc.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> cn.hserver.core.server.util.JsonResult;</span><br><span class="line"><span class="keyword">import</span> cn.hserver.plugin.web.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> cn.hserver.plugin.web.annotation.POST;</span><br><span class="line"><span class="keyword">import</span> cn.hserver.plugin.web.context.PartFile;</span><br><span class="line"><span class="keyword">import</span> cn.hserver.plugin.web.interfaces.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> net.hserver.bean.NsfwRes;</span><br><span class="line"><span class="keyword">import</span> net.hserver.service.Nsfw;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@POST(&quot;/check&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">check</span><span class="params">(HttpRequest request)</span> &#123;</span><br><span class="line">        <span class="type">PartFile</span> <span class="variable">file</span> <span class="operator">=</span> request.queryFile(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        <span class="type">Nsfw</span> <span class="variable">instance</span> <span class="operator">=</span> Nsfw.getInstance();</span><br><span class="line">        <span class="type">NsfwRes</span> <span class="variable">score</span> <span class="operator">=</span> instance.getScore(file.getData());</span><br><span class="line">        file.deleteTempCacheFile();</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok().put(<span class="string">&quot;score&quot;</span>, score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输入图片处理与模型调用">输入图片处理与模型调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.hserver.service;</span><br><span class="line"><span class="keyword">import</span> org.tensorflow.ndarray.Shape;</span><br><span class="line"><span class="keyword">import</span> org.tensorflow.ndarray.buffer.DataBuffers;</span><br><span class="line"><span class="keyword">import</span> org.tensorflow.types.TFloat32;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImagePreprocessingHelper</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TFloat32 <span class="title function_">preprocessImage</span><span class="params">(BufferedImage image)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">H</span> <span class="operator">=</span> <span class="number">224</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">W</span> <span class="operator">=</span> <span class="number">224</span>;</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">bufferedImage</span> <span class="operator">=</span> resizeImage(image, H, W);</span><br><span class="line">        org.tensorflow.ndarray.<span class="type">Shape</span> <span class="variable">shape</span> <span class="operator">=</span> Shape.of(<span class="number">1</span>, H, W, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> TFloat32.tensorOf(shape, DataBuffers.of(imageToFloatArray(bufferedImage, H, W)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BufferedImage <span class="title function_">resizeImage</span><span class="params">(BufferedImage originalImage, <span class="type">int</span> targetWidth, <span class="type">int</span> targetHeight)</span> &#123;</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">resizedImg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(targetWidth, targetHeight, BufferedImage.TRANSLUCENT);</span><br><span class="line">        <span class="type">Graphics2D</span> <span class="variable">g2</span> <span class="operator">=</span> resizedImg.createGraphics();</span><br><span class="line">        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,</span><br><span class="line">                RenderingHints.VALUE_INTERPOLATION_BILINEAR);</span><br><span class="line">        g2.drawImage(originalImage, <span class="number">0</span>, <span class="number">0</span>, targetWidth, targetHeight, <span class="literal">null</span>);</span><br><span class="line">        g2.dispose();</span><br><span class="line">        originalImage.flush();</span><br><span class="line">        <span class="keyword">return</span> resizedImg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">float</span>[] imageToFloatArray(BufferedImage image, <span class="type">int</span> H, <span class="type">int</span> W) &#123;</span><br><span class="line">        <span class="keyword">if</span> (image == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Input image is null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">float</span>[] floatArray = <span class="keyword">new</span> <span class="title class_">float</span>[H * W * <span class="number">3</span>]; <span class="comment">// 3 channels: R, G, B</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>; y &lt; H; y++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; W; x++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">rgb</span> <span class="operator">=</span> image.getRGB(x, y);</span><br><span class="line">                <span class="comment">// 提取RGB通道的值</span></span><br><span class="line">                <span class="type">float</span> <span class="variable">r</span> <span class="operator">=</span> (rgb &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">                <span class="type">float</span> <span class="variable">g</span> <span class="operator">=</span> (rgb &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">                <span class="type">float</span> <span class="variable">b</span> <span class="operator">=</span> rgb &amp; <span class="number">0xFF</span>;</span><br><span class="line">                <span class="comment">// 将RGB通道的值归一化到[0, 1]范围内</span></span><br><span class="line">                floatArray[index++] = r / <span class="number">255.0f</span>;</span><br><span class="line">                floatArray[index++] = g / <span class="number">255.0f</span>;</span><br><span class="line">                floatArray[index++] = b / <span class="number">255.0f</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        image.flush();</span><br><span class="line">        <span class="keyword">return</span> floatArray;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="nsfw模型输出检测结果">nsfw模型输出检测结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.hserver.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hserver.HServerApplication;</span><br><span class="line"><span class="keyword">import</span> net.hserver.bean.NsfwRes;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.tensorflow.*;</span><br><span class="line"><span class="keyword">import</span> org.tensorflow.ndarray.buffer.DataBuffers;</span><br><span class="line"><span class="keyword">import</span> org.tensorflow.ndarray.buffer.FloatDataBuffer;</span><br><span class="line"><span class="keyword">import</span> org.tensorflow.types.TFloat32;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Nsfw</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(Nsfw.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Nsfw</span> <span class="variable">nsfw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Nsfw</span>();</span><br><span class="line">    <span class="keyword">private</span> SavedModelBundle model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> NsfwRes <span class="title function_">getScore</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getScore(<span class="keyword">new</span> <span class="title class_">File</span>(path));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> NsfwRes <span class="title function_">getScore</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> ImageIO.read(file);</span><br><span class="line">            <span class="keyword">return</span> getScore(image);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> NsfwRes <span class="title function_">getScore</span><span class="params">(<span class="type">byte</span>[] file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(file);</span><br><span class="line">            <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> ImageIO.read(bis);</span><br><span class="line">            bis.close();</span><br><span class="line">            <span class="keyword">return</span> getScore(image);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> NsfwRes <span class="title function_">getScore</span><span class="params">(BufferedImage file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">TFloat32</span> <span class="variable">tFloat32</span> <span class="operator">=</span> ImagePreprocessingHelper.preprocessImage(file)) &#123;</span><br><span class="line">                Map&lt;String, Tensor&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                data.put(<span class="string">&quot;input&quot;</span>, tFloat32);</span><br><span class="line">                Map&lt;String, Tensor&gt; call = model.call(data);</span><br><span class="line">                <span class="type">float</span>[] embeddingArray = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">5</span>];</span><br><span class="line">                <span class="type">FloatDataBuffer</span> <span class="variable">floatBuffer</span> <span class="operator">=</span> DataBuffers.of(embeddingArray);</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">TFloat32</span> <span class="variable">prediction</span> <span class="operator">=</span> (TFloat32) call.get(<span class="string">&quot;prediction&quot;</span>)) &#123;</span><br><span class="line">                    prediction.read(floatBuffer);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NsfwRes</span>(embeddingArray);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Nsfw <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nsfw.model == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//注意配置自己模型文件位置,可以自己放Resource为zip，启动时解压到某个路径在加载。</span></span><br><span class="line">            <span class="comment">//开源地址：https://github.com/gantman/nsfw_model</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">linux_path</span> <span class="operator">=</span> <span class="string">&quot;./mobilenet_v2_140_224/&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">win_path</span> <span class="operator">=</span><span class="string">&quot;C:\\Users\\rces\\mobilenet_v2_140_224\\&quot;</span>;</span><br><span class="line">            nsfw.model = SavedModelBundle.load(linux_path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nsfw;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试结果">测试结果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2023-04-21 15:54:54.312 DEBUG --- [server_business@1] c.h.p.web.handlers.DispatcherHandler     [ 390] [c0a80107-lgq9ak0z-9143-1] : 地址：/check 方法：POST 耗时：1294/ms 来源:127.0.0.1</span><br><span class="line">2023-04-21 16:01:43.481  INFO --- [server_business@2] net.hserver.service.NsfwServiceImpl      [  39] [c0a80107-lgq9jc0r-9143-2] : time-consuming : 915 ms</span><br><span class="line">2023-04-21 16:01:43.483 DEBUG --- [server_business@2] c.h.p.web.handlers.DispatcherHandler     [ 390] [c0a80107-lgq9jc0r-9143-2] : 地址：/check 方法：POST 耗时：928/ms 来源:127.0.0.1</span><br></pre></td></tr></table></figure><ul><li>result json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>&#x27;msg&#x27;<span class="punctuation">:</span> &#x27;操作成功&#x27;<span class="punctuation">,</span> &#x27;score&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span>&#x27;drawings&#x27;<span class="punctuation">:</span> <span class="number">0.86819315</span><span class="punctuation">,</span> &#x27;hentai&#x27;<span class="punctuation">:</span> <span class="number">0.13177933</span><span class="punctuation">,</span> &#x27;neutral&#x27;<span class="punctuation">:</span> <span class="number">1.712211e-06</span><span class="punctuation">,</span> &#x27;porn&#x27;<span class="punctuation">:</span> <span class="number">1.654509e-05</span><span class="punctuation">,</span> &#x27;sexy&#x27;<span class="punctuation">:</span> <span class="number">9.231081e-06</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> &#x27;code&#x27;<span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Python中使用loguru库捕获异常出现bug的修正方法</title>
      <link href="/2024/05/16/loguru-catch-bug-fix/"/>
      <url>/2024/05/16/loguru-catch-bug-fix/</url>
      
        <content type="html"><![CDATA[<h1>在Python中使用loguru库捕获异常出现bug的修正方法</h1><h2 id="背景">背景</h2><blockquote><p>Loguru is a library which aims to bring enjoyable logging in Python.</p></blockquote><blockquote><p>Did you ever feel lazy about configuring a logger and used print() instead?… I did, yet logging is fundamental to every application and eases the process of debugging. Using Loguru you have no excuse not to use logging from the start, this is as simple as from loguru import logger.</p></blockquote><blockquote><p>Also, this library is intended to make Python logging less painful by adding a bunch of useful functionalities that solve caveats of the standard loggers. Using logs in your application should be an automatism, Loguru tries to make it both pleasant and powerful.</p></blockquote><h2 id="bug描述">bug描述</h2><ul><li>当使用qt5槽函数调用某类中被@logger.catch包裹的方法时报如下异常:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">2024-05-16 11:17:09.406 | ERROR    | __main__:ui_paint:27 - An error has been caught in function &#x27;ui_paint&#x27;, process &#x27;MainProcess&#x27; (9856), thread &#x27;MainThread&#x27; (9108):</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line">  File &quot;C:\Users\Administrator\PycharmProjects\ss\src\run\ui_main.py&quot;, line 54, in &lt;module&gt;</span><br><span class="line">    run_main_py()</span><br><span class="line">    └ &lt;function run_main_py at 0x0000027A3F4E9A60&gt;</span><br><span class="line"></span><br><span class="line">  File &quot;C:\Users\Administrator\PycharmProjects\ss\src\run\ui_main.py&quot;, line 50, in run_main_py</span><br><span class="line">    ui_paint()</span><br><span class="line">    └ &lt;function ui_paint at 0x0000027A3F4A09D0&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">File <span class="string">&quot;C:\Users\Administrator\PycharmProjects\ss\src\run\ui_main.py&quot;</span>, line 27, <span class="keyword">in</span> ui_paint</span></span><br><span class="line">    app.exec_()</span><br><span class="line">    │   └ &lt;built-in method exec_&gt;</span><br><span class="line">    └ &lt;PyQt5.QtWidgets.QApplication object at 0x0000027A3F4F3E50&gt;</span><br><span class="line"></span><br><span class="line">TypeError: next_img() takes 1 positional argument but 2 were given</span><br></pre></td></tr></table></figure><h2 id="bug复现">bug复现</h2><ul><li>代码如下：</li></ul><blockquote><p>class code</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>(<span class="title class_ inherited__">QWidget</span>): </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(MyClass, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="meta">    @logger.catch()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next_img</span>(<span class="params">self</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        跳转下一页</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 你的代码逻辑</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>调用代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">self</span>.next_button.clicked.connect(<span class="variable language_">self</span>.next_img)</span><br></pre></td></tr></table></figure><blockquote><p>运行上述代码，即可出现上述bug</p></blockquote><h2 id="解决方案">解决方案</h2><blockquote><p>Qt (或者 PyQt、PySide 等 Qt 的 Python 绑定) 中，当你使用信号和槽机制（即 clicked.connect()）时，槽函数（即你连接到的函数或方法）通常会接收一个额外的参数，这个参数代表了触发信号的发送者（sender）。因此，即使你的 next_img 方法在类定义中只接受一个参数（self），当它被用作一个槽时，Qt 会自动传递一个额外的参数，通常是发出信号的对象的引用。 为了解决这个 TypeError，你需要修改你的 next_img 方法，让它能够接受这个额外的参数。</p></blockquote><h3 id="修正代码">修正代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>(<span class="title class_ inherited__">QWidget</span>):  <span class="comment"># 假设 MyClass 继承自 QWidget 或其他 Qt 控件</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(MyClass, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">        <span class="comment"># 假设 next_button 是一个 QPushButton 的实例</span></span><br><span class="line">        <span class="variable language_">self</span>.next_button = QPushButton(<span class="string">&#x27;Next&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.next_button.clicked.connect(<span class="variable language_">self</span>.next_img)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @logger.catch()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next_img</span>(<span class="params">self, _=<span class="literal">None</span></span>):  <span class="comment"># 添加一个额外的参数 _ 来接收发送者</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        跳转下一页</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 你的代码逻辑</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="修正思路">修正思路</h3><blockquote><p>在这个例子中，next_img 方法现在接受一个额外的参数 _。这个参数名 _ 是一个常见的约定，用于表示这个参数在方法体内不会被使用。当然，你可以选择其他名称，但 _ 是一个通用的占位符，表明这个参数是“不需要的”。</p></blockquote><blockquote><p>现在，当 next_button 被点击时，next_img 方法会被调用，并且 Qt 会自动传递一个参数（通常是 next_button 的引用）给这个方法。由于我们已经在方法定义中包含了这个额外的参数，所以不会再出现 TypeError。</p></blockquote><blockquote><p>如果你确实需要在方法体内使用这个发送者对象（比如检查是哪个按钮被点击了），你可以给这个参数一个更有意义的名称，并在方法体内使用它。但在这个例子中，看起来我们并不需要这个发送者对象，所以使用 _ 作为参数名是一个合适的解决方案。</p></blockquote><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中使用自定义线程</title>
      <link href="/2024/05/07/self-threading-use/"/>
      <url>/2024/05/07/self-threading-use/</url>
      
        <content type="html"><![CDATA[<h1>python中使用自定义线程</h1><h2 id="背景">背景</h2><blockquote><p>Python中的多线程是一种编程模型，它允许在单个进程中同时执行多个线程。线程是程序执行流的最小单元，是进程内的一条执行路径。Python中的多线程主要是利用threading模块来实现的。</p></blockquote><blockquote><p>全局解释器锁（GIL）：这是Python多线程模型中最重要的一部分。由于Python的设计，同一时间只能有一个线程在执行Python字节码。这意味着即使使用多线程，CPU密集型任务的执行速度也可能不会显著提高。但是，多线程在进行I/O密集型操作时（如文件读写、网络通信等）仍然非常有用，因为它们可以在一个线程等待I/O操作完成时让另一个线程继续执行。<br>线程创建与销毁：在Python中，创建和销毁线程的开销相对较小，因此可以创建大量的线程来处理并发任务。<br>线程同步：为了协调多个线程的执行，Python提供了几种线程同步机制，包括锁（Lock）、条件变量（Condition）、信号量（Semaphore）等。</p></blockquote><blockquote><p>守护线程（Daemon Threads）：Python中的线程可以被设置为守护线程。当主线程结束时，守护线程也会随之结束，即使它们还没有完成执行。</p></blockquote><h2 id="自定义python线程">自定义python线程</h2><ul><li>代码示例如下：</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> run <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SISThreading</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, target, args=(<span class="params"></span>), kwargs=<span class="literal">None</span>, *args_thread, **kwargs_thread</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param target:</span></span><br><span class="line"><span class="string">        :param args:</span></span><br><span class="line"><span class="string">        :param kwargs:</span></span><br><span class="line"><span class="string">        :param args_thread:</span></span><br><span class="line"><span class="string">        :param kwargs_thread:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(SISThreading, <span class="variable language_">self</span>).__init__(*args_thread, **kwargs_thread)</span><br><span class="line">        <span class="keyword">if</span> kwargs <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            kwargs = &#123;&#125;</span><br><span class="line">        <span class="variable language_">self</span>.target = target  <span class="comment"># 存储目标函数</span></span><br><span class="line">        <span class="variable language_">self</span>.args = args  <span class="comment"># 存储位置参数</span></span><br><span class="line">        <span class="variable language_">self</span>.kwargs = kwargs  <span class="comment"># 存储关键字参数</span></span><br><span class="line">        <span class="variable language_">self</span>.__flag = threading.Event()  <span class="comment"># 用于暂停线程的标识</span></span><br><span class="line">        <span class="variable language_">self</span>.__flag.<span class="built_in">set</span>()  <span class="comment"># 设置为True</span></span><br><span class="line">        <span class="variable language_">self</span>.__running = threading.Event()  <span class="comment"># 用于停止线程的标识</span></span><br><span class="line">        <span class="variable language_">self</span>.__running.<span class="built_in">set</span>()  <span class="comment"># 将running设置为True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="variable language_">self</span>.__running.is_set():</span><br><span class="line">            <span class="keyword">if</span> constants.stop_spider_url_flag:</span><br><span class="line">                logger.warning(<span class="string">&quot;stop spider url in threading run.&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            logger.info(<span class="string">&quot;thread is running!&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.__flag.wait()  <span class="comment"># 为True时立即返回, 为False时阻塞直到self.__flag为True后返回</span></span><br><span class="line">            <span class="comment"># logger.debug(&quot;run = &quot;, time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span></span><br><span class="line">            <span class="comment"># 调用目标函数并传递参数</span></span><br><span class="line">            <span class="variable language_">self</span>.target(*<span class="variable language_">self</span>.args, **<span class="variable language_">self</span>.kwargs)</span><br><span class="line">            time.sleep(constants.search_delta_time)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pause</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        logger.error(<span class="string">&quot;thread is pause&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__flag.clear()  <span class="comment"># 设置为False, 让线程阻塞</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">resume</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        logger.warning(<span class="string">&quot;thread is resume&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__flag.<span class="built_in">set</span>()  <span class="comment"># 设置为True, 让线程停止阻塞</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        logger.error(<span class="string">&quot;thread is stop&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__flag.<span class="built_in">set</span>()  <span class="comment"># 将线程从暂停状态恢复, 如果已经暂停的话</span></span><br><span class="line">        <span class="variable language_">self</span>.__running.clear()  <span class="comment"># 设置为False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_running</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查线程是否正在运行&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__running.is_set()</span><br></pre></td></tr></table></figure><ul><li>调用实现线程暂停，恢复运行</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>:</span><br><span class="line">    log_mon_war_thread_obj = threading.Thread(</span><br><span class="line">            target=log_mon_war,</span><br><span class="line">            args=(spider_thread_obj,))</span><br><span class="line">    log_mon_war_thread_obj.start()</span><br><span class="line">    spider_thread_obj.pause()</span><br><span class="line">    spider_thread_obj.resume()</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h2 id="线程间通信">线程间通信</h2><ul><li>通过队列实现</li></ul><blockquote><p>demo</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个队列</span></span><br><span class="line">q = queue.Queue()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产者线程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">producer</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生产者生产了 <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        q.put(i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费者线程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        item = q.get()</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;消费者消费了 <span class="subst">&#123;item&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程</span></span><br><span class="line">t1 = threading.Thread(target=producer)</span><br><span class="line">t2 = threading.Thread(target=consumer)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程</span></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待线程结束</span></span><br><span class="line">t1.join()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向队列中添加一个 None，表示结束信号</span></span><br><span class="line">q.put(<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">t2.join()</span><br></pre></td></tr></table></figure><ul><li>test result</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">./test/multi_threading_queue.py</span><br><span class="line">2024-05-07 15:47:04: 生产者生产了 0</span><br><span class="line">2024-05-07 15:47:04: 消费者消费了 0</span><br><span class="line">2024-05-07 15:47:05: 生产者生产了 1</span><br><span class="line">2024-05-07 15:47:06: 消费者消费了 1</span><br><span class="line">2024-05-07 15:47:06: 生产者生产了 2</span><br><span class="line">2024-05-07 15:47:07: 生产者生产了 3</span><br><span class="line">2024-05-07 15:47:08: 消费者消费了 2</span><br><span class="line">2024-05-07 15:47:08: 生产者生产了 4</span><br><span class="line">2024-05-07 15:47:10: 消费者消费了 3</span><br><span class="line">2024-05-07 15:47:12: 消费者消费了 4</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python使用setuptools和nsis工具打包nuitka工程</title>
      <link href="/2024/04/10/setup-tools-python/"/>
      <url>/2024/04/10/setup-tools-python/</url>
      
        <content type="html"><![CDATA[<h1>python使用setuptools和nsis工具打包nuitka工程</h1><h2 id="简介">简介</h2><blockquote><p>setuptools 是官方提供的一个专业用于包分发的工具，若只从安装的角度来看，它的功能确实简单。它更大的意义是对包的分发很有用，定制化程序非常高，可用它进行版本包的发布。</p></blockquote><blockquote><p>Egg 格式是由 setuptools 在 2004 年引入，而 Wheel 格式是由 PEP427 在 2012 年定义。Wheel 的出现是为了替代 Egg，它的本质是一个zip包，其现在被认为是 Python 的二进制包的标准格式。</p></blockquote><blockquote><p>应用程序发布的时候，具备以下两种方式：</p></blockquote><blockquote><p>静态编译：把相关联的库一并引入可执行程序，虽然发布简单，编译出来只有一个exe文件。（特别注意：编译时，其依赖的库也需要使用静态包）。<br>动态编译：把相关联的库以dll的形式提供（<a href="http://xn--linux-gi1h455l.so">linux下是.so</a>）引入,不被包含进可执行程序，发布不方便，但可执行程序较小。</p></blockquote><h2 id="setuptools方式">setuptools方式</h2><h3 id="1-使用以下代码">1.使用以下代码</h3><ul><li>在项目根目录运行</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span>  setup,find_packages</span><br><span class="line">setup(</span><br><span class="line">    name= <span class="string">&quot;packageName&quot;</span>,   <span class="comment">#你的python项目包名</span></span><br><span class="line">    version = <span class="string">&#x27;1.0.0&#x27;</span>,      </span><br><span class="line">    description=<span class="string">&#x27;No description&#x27;</span>,</span><br><span class="line">    author=<span class="string">&quot;daimashiren&quot;</span>,</span><br><span class="line">    author_email=<span class="string">&#x27;123456@gmail.com&#x27;</span>,</span><br><span class="line">    url=<span class="string">&#x27;xxx.com&#x27;</span>,</span><br><span class="line">    packages = find_packages(),<span class="comment">#find_packages()方法会自动寻找当前目录下名为packageName的包</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="2-运行以下命令：">2. 运行以下命令：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py install </span><br></pre></td></tr></table></figure><h3 id="测试">测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmd命令行输入以下命令尝试导入你的自定义包，看看能否成功被导入，如果，没有报说明No module named XXX 错误则说明python项目打包成功，否则则需要重新尝试以上步骤，重新打包直到能够导入为止。下图中自定义的&quot;courseHelper_dev&quot;包导入成功而自定义的&quot;packageName&quot;包则导入失败!</span></span><br><span class="line">python</span><br><span class="line">import packageName</span><br></pre></td></tr></table></figure><blockquote><p>检查easy_install.pth文件中有没有你的项目包名，pth后缀的文件记录的是python导入包时会检索的路径或包名，</p></blockquote><h2 id="NSIS软件">NSIS软件</h2><blockquote><p>Nsis其实是使用一种脚本语言了，学习成本肯定是不低的。<br>采用NSIS + QT 制作安装程序实际上就是使用QT制作安装程序，而NSIS仅仅将制作的安装程序打包成一个exe。</p></blockquote><h3 id="下载安装">下载安装</h3><ul><li>下载地址</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://nsis.sourceforge.io/Download</span><br></pre></td></tr></table></figure><h3 id="使用-method-1">使用 method 1</h3><blockquote><p>如图,启动nsis软件<br><img src="/2024/04/10/setup-tools-python/start.png" class="lazyload placeholder" data-srcset="/2024/04/10/setup-tools-python/start.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"><br>选择打包zip，选择选项点击generate生成安装包<br><img src="/2024/04/10/setup-tools-python/generate.png" class="lazyload placeholder" data-srcset="/2024/04/10/setup-tools-python/generate.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"><br>根据提示操作，结果如下：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">MakeNSIS v3.10 - Copyright 1999-2023 Contributors</span><br><span class="line">See the file COPYING <span class="keyword">for</span> license details.</span><br><span class="line">Credits can be found <span class="keyword">in</span> the Users Manual.</span><br><span class="line"></span><br><span class="line">Processing config: C:\Program Files (x86)\NSIS\nsisconf.nsh</span><br><span class="line">Processing script file: <span class="string">&quot;C:\Users\ADMINI~1\AppData\Local\Temp\zne7EA0.tmp&quot;</span> (UTF16LE)</span><br><span class="line"></span><br><span class="line">Processed 1 file, writing output (x86-unicode):</span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;C:\Users\Administrator\PycharmProjects\spider_image_system\src\out\ui_main.dist.exe&quot;</span></span><br><span class="line">Install: 2 pages (128 bytes), 1 section (1 required) (2072 bytes), 181 instructions (5068 bytes), 210 strings (6906 bytes), 1 language table (262 bytes).</span><br><span class="line"></span><br><span class="line">Using lzma compression.</span><br><span class="line"></span><br><span class="line">EXE header size:               51200 / 38400 bytes</span><br><span class="line">Install code:                   2779 / 14900 bytes</span><br><span class="line">Install data:               50727899 / 226716719 bytes</span><br><span class="line">CRC (0xE230FDF8):                  4 / 4 bytes</span><br><span class="line"></span><br><span class="line">Total size:                 50781882 / 226770023 bytes (22.3%)</span><br><span class="line">(<span class="built_in">source</span> ZIP size was 75374073 bytes)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用-method-2">使用 method 2</h3><h4 id="VNISEdit-可视化制作安装包向导使用">VNISEdit 可视化制作安装包向导使用</h4><ul><li>下载地址</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://hmne.sourceforge.net</span><br></pre></td></tr></table></figure><ul><li>按照提示操作，生成代码如下：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line">; Script generated by the HM NIS Edit Script Wizard.</span><br><span class="line"></span><br><span class="line">; HM NIS Edit Wizard helper defines</span><br><span class="line">!define PRODUCT_NAME <span class="string">&quot;spider image system&quot;</span></span><br><span class="line">!define PRODUCT_VERSION <span class="string">&quot;1.0&quot;</span></span><br><span class="line">!define PRODUCT_PUBLISHER <span class="string">&quot;zhaoqi.cao&quot;</span></span><br><span class="line">!define PRODUCT_WEB_SITE <span class="string">&quot;http://caozhaoqi.github.io&quot;</span></span><br><span class="line">!define PRODUCT_DIR_REGKEY <span class="string">&quot;Software\Microsoft\Windows\CurrentVersion\App Paths\ui_main.exe&quot;</span></span><br><span class="line">!define PRODUCT_UNINST_KEY <span class="string">&quot;Software\Microsoft\Windows\CurrentVersion\Uninstall\$&#123;PRODUCT_NAME&#125;&quot;</span></span><br><span class="line">!define PRODUCT_UNINST_ROOT_KEY <span class="string">&quot;HKLM&quot;</span></span><br><span class="line">!define PRODUCT_STARTMENU_REGVAL <span class="string">&quot;NSIS:StartMenuDir&quot;</span></span><br><span class="line"></span><br><span class="line">; MUI 1.67 compatible ------</span><br><span class="line">!include <span class="string">&quot;MUI.nsh&quot;</span></span><br><span class="line"></span><br><span class="line">; MUI Settings</span><br><span class="line">!define MUI_ABORTWARNING</span><br><span class="line">!define MUI_ICON <span class="string">&quot;<span class="variable">$&#123;NSISDIR&#125;</span>\Contrib\Graphics\Icons\modern-install.ico&quot;</span></span><br><span class="line">!define MUI_UNICON <span class="string">&quot;<span class="variable">$&#123;NSISDIR&#125;</span>\Contrib\Graphics\Icons\modern-uninstall.ico&quot;</span></span><br><span class="line"></span><br><span class="line">; Welcome page</span><br><span class="line">!insertmacro MUI_PAGE_WELCOME</span><br><span class="line">; License page</span><br><span class="line">!define MUI_LICENSEPAGE_CHECKBOX</span><br><span class="line">!insertmacro MUI_PAGE_LICENSE <span class="string">&quot;C:\Users\Administrator\PycharmProjects\spider_image_system\src\out\ui_main.dist\SISSoftwareLicence.txt&quot;</span></span><br><span class="line">; Directory page</span><br><span class="line">!insertmacro MUI_PAGE_DIRECTORY</span><br><span class="line">; Start menu page</span><br><span class="line">var ICONS_GROUP</span><br><span class="line">!define MUI_STARTMENUPAGE_NODISABLE</span><br><span class="line">!define MUI_STARTMENUPAGE_DEFAULTFOLDER <span class="string">&quot;spider image system&quot;</span></span><br><span class="line">!define MUI_STARTMENUPAGE_REGISTRY_ROOT <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_ROOT_KEY&#125;</span>&quot;</span></span><br><span class="line">!define MUI_STARTMENUPAGE_REGISTRY_KEY <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_KEY&#125;</span>&quot;</span></span><br><span class="line">!define MUI_STARTMENUPAGE_REGISTRY_VALUENAME <span class="string">&quot;<span class="variable">$&#123;PRODUCT_STARTMENU_REGVAL&#125;</span>&quot;</span></span><br><span class="line">!insertmacro MUI_PAGE_STARTMENU Application <span class="variable">$ICONS_GROUP</span></span><br><span class="line">; Instfiles page</span><br><span class="line">!insertmacro MUI_PAGE_INSTFILES</span><br><span class="line">; Finish page</span><br><span class="line">!define MUI_FINISHPAGE_RUN <span class="string">&quot;<span class="variable">$INSTDIR</span>\ui_main.exe&quot;</span></span><br><span class="line">!insertmacro MUI_PAGE_FINISH</span><br><span class="line"></span><br><span class="line">; Uninstaller pages</span><br><span class="line">!insertmacro MUI_UNPAGE_INSTFILES</span><br><span class="line"></span><br><span class="line">; Language files</span><br><span class="line">!insertmacro MUI_LANGUAGE <span class="string">&quot;English&quot;</span></span><br><span class="line"></span><br><span class="line">; MUI end ------</span><br><span class="line"></span><br><span class="line">Name <span class="string">&quot;<span class="variable">$&#123;PRODUCT_NAME&#125;</span> <span class="variable">$&#123;PRODUCT_VERSION&#125;</span>&quot;</span></span><br><span class="line">OutFile <span class="string">&quot;Setup.exe&quot;</span></span><br><span class="line">InstallDir <span class="string">&quot;<span class="variable">$PROGRAMFILES</span>\spider image system&quot;</span></span><br><span class="line">InstallDirRegKey HKLM <span class="string">&quot;<span class="variable">$&#123;PRODUCT_DIR_REGKEY&#125;</span>&quot;</span> <span class="string">&quot;&quot;</span></span><br><span class="line">ShowInstDetails show</span><br><span class="line">ShowUnInstDetails show</span><br><span class="line"></span><br><span class="line">Section <span class="string">&quot;MainSection&quot;</span> SEC01</span><br><span class="line">  SetOutPath <span class="string">&quot;<span class="variable">$INSTDIR</span>&quot;</span></span><br><span class="line">  SetOverwrite ifnewer</span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\vcruntime140_1.dll&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\vcruntime140.dll&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\unicodedata.pyd&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\ui_main.exe&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\select.pyd&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\qt5widgets.dll&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\qt5svg.dll&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\qt5gui.dll&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\qt5core.dll&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\qt5charts.dll&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\python39.dll&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\python3.dll&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\pyexpat.pyd&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\msvcp140_1.dll&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\msvcp140.dll&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\libssl-1_1.dll&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\libffi-7.dll&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\libcrypto-1_1.dll&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\_uuid.pyd&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\_ssl.pyd&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\_socket.pyd&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\_queue.pyd&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\_overlapped.pyd&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\_lzma.pyd&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\_hashlib.pyd&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\_elementtree.pyd&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\_decimal.pyd&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\_ctypes.pyd&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\_cffi_backend.pyd&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\_bz2.pyd&quot;</span></span><br><span class="line">  File <span class="string">&quot;..\PycharmProjects\spider_image_system\src\out\ui_main.dist\_asyncio.pyd&quot;</span></span><br><span class="line"></span><br><span class="line">; Shortcuts</span><br><span class="line">  !insertmacro MUI_STARTMENU_WRITE_BEGIN Application</span><br><span class="line">  CreateDirectory <span class="string">&quot;<span class="variable">$SMPROGRAMS</span>\$ICONS_GROUP&quot;</span></span><br><span class="line">  CreateShortCut <span class="string">&quot;<span class="variable">$SMPROGRAMS</span>\$ICONS_GROUP\spider image system.lnk&quot;</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\ui_main.exe&quot;</span></span><br><span class="line">  CreateShortCut <span class="string">&quot;<span class="variable">$DESKTOP</span>\spider image system.lnk&quot;</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\ui_main.exe&quot;</span></span><br><span class="line">  !insertmacro MUI_STARTMENU_WRITE_END</span><br><span class="line">SectionEnd</span><br><span class="line"></span><br><span class="line">Section <span class="string">&quot;RegComOcx&quot;</span> SEC02</span><br><span class="line"></span><br><span class="line">   SetOutPath <span class="string">&quot;<span class="variable">$INSTDIR</span>&quot;</span></span><br><span class="line"></span><br><span class="line">   RegDLL <span class="string">&quot;<span class="variable">$INSTDIR</span>\laoheitanActiveX.ocx&quot;</span></span><br><span class="line"></span><br><span class="line">SectionEnd</span><br><span class="line"></span><br><span class="line">Section -AdditionalIcons</span><br><span class="line">  !insertmacro MUI_STARTMENU_WRITE_BEGIN Application</span><br><span class="line">  WriteIniStr <span class="string">&quot;<span class="variable">$INSTDIR</span>\$&#123;PRODUCT_NAME&#125;.url&quot;</span> <span class="string">&quot;InternetShortcut&quot;</span> <span class="string">&quot;URL&quot;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_WEB_SITE&#125;</span>&quot;</span></span><br><span class="line">  CreateShortCut <span class="string">&quot;<span class="variable">$SMPROGRAMS</span>\$ICONS_GROUP\Website.lnk&quot;</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\$&#123;PRODUCT_NAME&#125;.url&quot;</span></span><br><span class="line">  CreateShortCut <span class="string">&quot;<span class="variable">$SMPROGRAMS</span>\$ICONS_GROUP\Uninstall.lnk&quot;</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\uninst.exe&quot;</span></span><br><span class="line">  !insertmacro MUI_STARTMENU_WRITE_END</span><br><span class="line">SectionEnd</span><br><span class="line"></span><br><span class="line">Section -Post</span><br><span class="line">  WriteUninstaller <span class="string">&quot;<span class="variable">$INSTDIR</span>\uninst.exe&quot;</span></span><br><span class="line">  WriteRegStr HKLM <span class="string">&quot;<span class="variable">$&#123;PRODUCT_DIR_REGKEY&#125;</span>&quot;</span> <span class="string">&quot;&quot;</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\ui_main.exe&quot;</span></span><br><span class="line">  WriteRegStr <span class="variable">$&#123;PRODUCT_UNINST_ROOT_KEY&#125;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_KEY&#125;</span>&quot;</span> <span class="string">&quot;DisplayName&quot;</span> <span class="string">&quot;<span class="subst">$(^Name)</span>&quot;</span></span><br><span class="line">  WriteRegStr <span class="variable">$&#123;PRODUCT_UNINST_ROOT_KEY&#125;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_KEY&#125;</span>&quot;</span> <span class="string">&quot;UninstallString&quot;</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\uninst.exe&quot;</span></span><br><span class="line">  WriteRegStr <span class="variable">$&#123;PRODUCT_UNINST_ROOT_KEY&#125;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_KEY&#125;</span>&quot;</span> <span class="string">&quot;DisplayIcon&quot;</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\ui_main.exe&quot;</span></span><br><span class="line">  WriteRegStr <span class="variable">$&#123;PRODUCT_UNINST_ROOT_KEY&#125;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_KEY&#125;</span>&quot;</span> <span class="string">&quot;DisplayVersion&quot;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_VERSION&#125;</span>&quot;</span></span><br><span class="line">  WriteRegStr <span class="variable">$&#123;PRODUCT_UNINST_ROOT_KEY&#125;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_KEY&#125;</span>&quot;</span> <span class="string">&quot;URLInfoAbout&quot;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_WEB_SITE&#125;</span>&quot;</span></span><br><span class="line">  WriteRegStr <span class="variable">$&#123;PRODUCT_UNINST_ROOT_KEY&#125;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_KEY&#125;</span>&quot;</span> <span class="string">&quot;Publisher&quot;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_PUBLISHER&#125;</span>&quot;</span></span><br><span class="line">SectionEnd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Function un.onUninstSuccess</span><br><span class="line">  HideWindow</span><br><span class="line">  MessageBox MB_ICONINFORMATION|MB_OK <span class="string">&quot;<span class="subst">$(^Name)</span> 已成功地从你的计算机移除。&quot;</span></span><br><span class="line">FunctionEnd</span><br><span class="line"></span><br><span class="line">Function un.onInit</span><br><span class="line">  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 <span class="string">&quot;你确实要完全移除 <span class="subst">$(^Name)</span> ，其及所有的组件？&quot;</span> IDYES +2</span><br><span class="line">  Abort</span><br><span class="line">FunctionEnd</span><br><span class="line"></span><br><span class="line">Section Uninstall</span><br><span class="line">  !insertmacro MUI_STARTMENU_GETFOLDER <span class="string">&quot;Application&quot;</span> <span class="variable">$ICONS_GROUP</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\$&#123;PRODUCT_NAME&#125;.url&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\uninst.exe&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\_asyncio.pyd&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\_bz2.pyd&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\_cffi_backend.pyd&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\_ctypes.pyd&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\_decimal.pyd&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\_elementtree.pyd&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\_hashlib.pyd&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\_lzma.pyd&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\_overlapped.pyd&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\_queue.pyd&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\_socket.pyd&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\_ssl.pyd&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\_uuid.pyd&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\libcrypto-1_1.dll&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\libffi-7.dll&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\libssl-1_1.dll&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\msvcp140.dll&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\msvcp140_1.dll&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\pyexpat.pyd&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\python3.dll&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\python39.dll&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\qt5charts.dll&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\qt5core.dll&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\qt5gui.dll&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\qt5svg.dll&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\qt5widgets.dll&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\select.pyd&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\ui_main.exe&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\unicodedata.pyd&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\vcruntime140.dll&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$INSTDIR</span>\vcruntime140_1.dll&quot;</span></span><br><span class="line"></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$SMPROGRAMS</span>\$ICONS_GROUP\Uninstall.lnk&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$SMPROGRAMS</span>\$ICONS_GROUP\Website.lnk&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$DESKTOP</span>\spider image system.lnk&quot;</span></span><br><span class="line">  Delete <span class="string">&quot;<span class="variable">$SMPROGRAMS</span>\$ICONS_GROUP\spider image system.lnk&quot;</span></span><br><span class="line"></span><br><span class="line">  RMDir <span class="string">&quot;<span class="variable">$SMPROGRAMS</span>\$ICONS_GROUP&quot;</span></span><br><span class="line">  RMDir <span class="string">&quot;<span class="variable">$INSTDIR</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  DeleteRegKey <span class="variable">$&#123;PRODUCT_UNINST_ROOT_KEY&#125;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_KEY&#125;</span>&quot;</span></span><br><span class="line">  DeleteRegKey HKLM <span class="string">&quot;<span class="variable">$&#123;PRODUCT_DIR_REGKEY&#125;</span>&quot;</span></span><br><span class="line">  SetAutoClose <span class="literal">true</span></span><br><span class="line">SectionEnd</span><br></pre></td></tr></table></figure><h4 id="编译并运行生成exe">编译并运行生成exe</h4><ul><li>点击如下<br><img src="/2024/04/10/setup-tools-python/complier.png" class="lazyload placeholder" data-srcset="/2024/04/10/setup-tools-python/complier.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li><li>生成完成后，在脚本同目录点击setup.exe即可安装</li></ul><h2 id="See">See</h2><ul><li>[1].<a href="https://blog.csdn.net/daimashiren/article/details/115067313">https://blog.csdn.net/daimashiren/article/details/115067313</a></li><li>[2].<a href="https://www.cnblogs.com/qq21497936/p/14738082.html">https://www.cnblogs.com/qq21497936/p/14738082.html</a></li><li>[3].<a href="https://blog.csdn.net/technologyleader/article/details/125283717">https://blog.csdn.net/technologyleader/article/details/125283717</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用pyinstaller打包python程序并发布</title>
      <link href="/2024/04/09/pyinstaller-publish-python/"/>
      <url>/2024/04/09/pyinstaller-publish-python/</url>
      
        <content type="html"><![CDATA[<h1>使用pyinstaller打包python程序并发布</h1><h2 id="简介">简介</h2><blockquote><p>PyInstaller 将 Python 应用程序及其所有依赖项捆绑到单个软件包中。用户无需安装 Python 解释器或任何模块，即可运行打包后的应用程序。PyInstaller 支持 Python 3.8 及其更新版本，并能正确捆绑 numpy、matplotlib、PyQt、wxPython 等许多主流 Python 包。</p></blockquote><blockquote><p>PyInstaller 已经过 Windows、MacOS X 和 Linux 测试。不过，它并不是一个交叉编译器；要制作 Windows 应用程序就需要在 Windows 上运行 PyInstaller，要制作 Linux 应用程序就需要在 Linux 上运行它，依此类推。PyInstaller 已经成功地在 AIX、Solaris、FreeBSD 和 OpenBSD 上使用，但针对这些平台的测试并不是我们持续集成测试的一部分，开发团队也不能保证（这些平台的所有代码都来自外部贡献）PyInstaller 将能够在这些平台上运行，或得到持续支持。</p></blockquote><ul><li>upx</li></ul><blockquote><p>UPX 是一款用于压缩可执行文件和库的免费工具。它适用于大多数操作系统，可用压缩大量可执行文件格式。</p></blockquote><blockquote><p>当 UPX 可用时，PyInstaller 会用它来单独压缩每个收集的二进制文件（可执行文件、共享库或 Python 扩展）以减小冻结应用程序（单文件夹捆绑的目录或单文件可执行文件）的整体大小。冻结应用程序的可执行文件本身并没有经过 UPX 压缩（不管是单文件夹模式还是单文件模式），因为其文件大小中的大部分都已经是由包含单独压缩文件的嵌入式压缩包构成。</p></blockquote><blockquote><p>PyInstaller 会在标准可执行路径（由 PATH 环境变量定义）或通过 --upx-dir 命令行选项指定的路径中查找 UPX。如果找到，就会自动使用。使用 --noupx 命令行选项可用完全禁用 UPX。</p></blockquote><h2 id="安装">安装</h2><ul><li>使用以下命令安装</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><ul><li>版本升级</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pyinstaller</span><br></pre></td></tr></table></figure><ul><li>常用command  option</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">参数说明</span><br><span class="line">-F<span class="comment"># 产生单个的可执行文件</span></span><br><span class="line">-D<span class="comment"># 产生一个目录（包含多个文件）作为可执行程序</span></span><br><span class="line">-a<span class="comment"># 不包含 Unicode 字符集支持</span></span><br><span class="line">-d<span class="comment"># debug 版本的可执行文件</span></span><br><span class="line">-w<span class="comment"># 指定程序运行时不显示命令行窗口（仅对 Windows 有效）</span></span><br><span class="line">-c<span class="comment"># 指定使用命令行窗口运行程序（仅对 Windows 有效）</span></span><br><span class="line">-o<span class="comment"># 指定 spec 文件的生成目录。如果没有指定，则默认使用当前目录来生成 spec 文件</span></span><br><span class="line">-p<span class="comment"># 设置 Python 导入模块的路径（和设置 PYTHONPATH 环境变量的作用相似）。也可使用路径分隔符（Windows 使用分号，Linux 使用冒号）来分隔多个路径</span></span><br><span class="line">-n<span class="comment"># 指定项目（产生的 spec）名字。如果省略该选项，那么第一个脚本的主文件名将作为 spec 的名字</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="发布">发布</h2><h3 id="举例-1">举例 1</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F -w -i favicon.ico test.py</span><br></pre></td></tr></table></figure><h3 id="举例-2-利用spec配置文件打包">举例 2(利用spec配置文件打包)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: python ; coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># test.spec</span></span><br><span class="line"></span><br><span class="line">block_cipher = None</span><br><span class="line"></span><br><span class="line">a = Analysis([<span class="string">&#x27;test.py&#x27;</span>],</span><br><span class="line">             pathex=[<span class="string">&#x27;F:\\PythonCool\\pyinstaller&#x27;</span>],</span><br><span class="line">             binaries=[],</span><br><span class="line">             datas=[], <span class="comment"># 这里带上资源文件地址</span></span><br><span class="line">            <span class="comment">#  datas=[(&#x27;C:\\Users\\Gdc\\anaconda3\\envs\\env_test\\Lib\\site-packages\\data\\data&#x27;,&#x27;data&#x27;)], # 这里带上资源文件地址</span></span><br><span class="line">             hiddenimports=[], <span class="comment"># 动态引入的库或模块</span></span><br><span class="line">            <span class="comment">#  hiddenimports=[&#x27;palettable&#x27;], # 动态引入的库或模块</span></span><br><span class="line">             hookspath=[],</span><br><span class="line">             runtime_hooks=[],</span><br><span class="line">             excludes=[],</span><br><span class="line">             win_no_prefer_redirects=False,</span><br><span class="line">             win_private_assemblies=False,</span><br><span class="line">             cipher=block_cipher,</span><br><span class="line">             noarchive=False)</span><br><span class="line">pyz = PYZ(a.pure, a.zipped_data,</span><br><span class="line">             cipher=block_cipher)</span><br><span class="line">exe = EXE(pyz,</span><br><span class="line">          a.scripts,</span><br><span class="line">          a.binaries,</span><br><span class="line">          a.zipfiles,</span><br><span class="line">          a.datas,</span><br><span class="line">          [],</span><br><span class="line">          name=<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">          debug=False,</span><br><span class="line">          bootloader_ignore_signals=False,</span><br><span class="line">          strip=False,</span><br><span class="line">          upx=True,</span><br><span class="line">          upx_exclude=[],</span><br><span class="line">          runtime_tmpdir=None,</span><br><span class="line">          console=True , icon=<span class="string">&#x27;icon.ico&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>编写上述配置文件后，命名为test.spec,使用以下命令打包：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -D test.spec  </span><br></pre></td></tr></table></figure><h2 id="应用">应用</h2><h3 id="demo举例">demo举例</h3><ul><li>spec文件举例</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: python ; coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">block_cipher = None</span><br><span class="line"></span><br><span class="line">a = Analysis(</span><br><span class="line">    [<span class="string">&#x27;ui_main.py&#x27;</span>],</span><br><span class="line">    pathex=[],</span><br><span class="line">    binaries=[],</span><br><span class="line">    datas=[</span><br><span class="line">    (<span class="string">&#x27;C:\\Users\\ad\\PycharmProjects\\pro\\src\\file&#x27;</span>,<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">    ],</span><br><span class="line">    hiddenimports=[],</span><br><span class="line">    hookspath=[],</span><br><span class="line">    hooksconfig=&#123;&#125;,</span><br><span class="line">    runtime_hooks=[],</span><br><span class="line">    excludes=[],</span><br><span class="line">    win_no_prefer_redirects=False,</span><br><span class="line">    win_private_assemblies=False,</span><br><span class="line">    cipher=block_cipher,</span><br><span class="line">    noarchive=False,</span><br><span class="line">)</span><br><span class="line">pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)</span><br><span class="line"></span><br><span class="line">exe = EXE(</span><br><span class="line">    pyz,</span><br><span class="line">    a.scripts,</span><br><span class="line">    a.binaries,</span><br><span class="line">    a.zipfiles,</span><br><span class="line">    a.datas,</span><br><span class="line">    [],</span><br><span class="line">    name=<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    debug=False,</span><br><span class="line">    bootloader_ignore_signals=False,</span><br><span class="line">    strip=False,</span><br><span class="line">    upx=True,</span><br><span class="line">    upx_exclude=[],</span><br><span class="line">    runtime_tmpdir=None,</span><br><span class="line">    console=True,</span><br><span class="line">    disable_windowed_traceback=False,</span><br><span class="line">    argv_emulation=False,</span><br><span class="line">    target_arch=None,</span><br><span class="line">    codesign_identity=None,</span><br><span class="line">    entitlements_file=None,</span><br><span class="line">    icon=<span class="string">&#x27;test.ico&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="扩展">扩展</h3><ul><li>可通过bat或sh脚本执行打包，举例如下:</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">setlocal</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 删除dist和build目录</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exist</span> &quot;dist&quot; (</span><br><span class="line">    <span class="built_in">rmdir</span> /s /q &quot;dist&quot;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exist</span> &quot;build&quot; (</span><br><span class="line">    <span class="built_in">rmdir</span> /s /q &quot;build&quot;</span><br><span class="line">)</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 运行pyinstaller main_sis.spec进行打包</span></span><br><span class="line">pyinstaller main_sis.spec</span><br><span class="line"></span><br><span class="line"><span class="built_in">endlocal</span></span><br></pre></td></tr></table></figure><ul><li>sh</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller main_sis.spec</span><br></pre></td></tr></table></figure><h2 id="spec解析">spec解析</h2><h3 id="详细如下">详细如下</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: python ; coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># script： 写所有的py文件</span></span><br><span class="line"><span class="comment"># pathex：写项目的地址，以及自定义库的地址</span></span><br><span class="line"><span class="comment"># datas：静态文件数据的地址</span></span><br><span class="line"><span class="comment"># binaries：二进制文件地址，如果有报错，或者，需要用的时候再添加</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">block_cipher = None</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这一部分负责收集你的脚本需要的所有模块和文件。的；hiddenimports 参数可以指定一些 PyInstaller 无法自动检测到的模块。</span></span><br><span class="line">a = Analysis(</span><br><span class="line">    [<span class="string">&#x27;hello.py&#x27;</span>],       <span class="comment"># 指定要打包的 Python 脚本的路径（可以是相对路径）</span></span><br><span class="line">    pathex=[],          <span class="comment"># 用来指定模块搜索路径</span></span><br><span class="line">    binaries=[],        <span class="comment"># 包含了动态链接库或共享对象文件，会在运行之后自动更新，加入依赖的二进制文件</span></span><br><span class="line">    datas=[],           <span class="comment"># 列表，用于指定需要包含的额外文件。每个元素都是一个元组：（文件的源路径, 在打包文件中的路径)</span></span><br><span class="line">    hiddenimports=[],   <span class="comment"># 用于指定一些 PyInstaller 无法自动检测到的模块</span></span><br><span class="line">    hookspath=[],       <span class="comment"># 指定查找 PyInstaller 钩子的路径</span></span><br><span class="line">    hooksconfig=&#123;&#125;,     <span class="comment"># 自定义 hook 配置，这是一个字典，一行注释写不下，此处先不讲</span></span><br><span class="line">    runtime_hooks=[],   <span class="comment"># 指定运行时 hook，本质是一个 Python 脚本，hook 会在你的脚本运行前运行，可用于准备环境</span></span><br><span class="line">    excludes=[],        <span class="comment"># 用于指定需要排除的模块</span></span><br><span class="line">    win_no_prefer_redirects=False,</span><br><span class="line">    win_private_assemblies=False,</span><br><span class="line">    cipher=block_cipher,</span><br><span class="line">    noarchive=False,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 除此之外，a 还有一些没有列出的属性：</span></span><br><span class="line"><span class="comment">#   pure 是一个列表，包含了所有纯 Python 模块的信息，每个元素是一个元组，包含了：模块名, pyc路径, py 路径，这些模块会被打包到一个 .pyz 文件中。</span></span><br><span class="line"><span class="comment">#   scripts 是一个列表，包含了你的 Python 脚本的信息。每个元素是一个元组，其中包含了脚本的内部名，脚本的源路径，以及一些元数据。这些脚本会被打包到一个可执行文件中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pyz 是指生成的可执行文件的名称。它是由 PyInstaller 用来打包 Python 程序和依赖项的主要文件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 pyz 文件，它在运行时会被解压缩到临时目录中，然后被加载和执行。它会被打包进 exe 文件</span></span><br><span class="line">pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 exe 文件</span></span><br><span class="line">exe = EXE(</span><br><span class="line">    pyz,            <span class="comment"># 包含了所有纯 Python 模块</span></span><br><span class="line">    a.scripts,      <span class="comment"># 包含了主脚本及其依赖</span></span><br><span class="line">    [],             <span class="comment"># 所有需要打包到 exe 文件内的二进制文件</span></span><br><span class="line">    exclude_binaries=True,  <span class="comment"># 若为 True，所有的二进制文件将被排除在 exe 之外，转而被 COLLECT 函数收集</span></span><br><span class="line">    name=<span class="string">&#x27;hello&#x27;</span>,   <span class="comment"># 生成的 exe 文件的名字。</span></span><br><span class="line">    debug=False,    <span class="comment"># 打包过程中是否打印调试信息？</span></span><br><span class="line">    bootloader_ignore_signals=False,</span><br><span class="line">    strip=False,    <span class="comment"># 是否移除所有的符号信息，使打包出的 exe 文件更小</span></span><br><span class="line">    upx=True,       <span class="comment"># 是否用 upx 压缩 exe 文件</span></span><br><span class="line">    console=True,   <span class="comment"># 若为 True 则在控制台窗口中运行，否则作为后台进程运行</span></span><br><span class="line">    disable_windowed_traceback=False,</span><br><span class="line">    argv_emulation=False,</span><br><span class="line">    target_arch=None,</span><br><span class="line">    codesign_identity=None,</span><br><span class="line">    entitlements_file=None,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个对象包含了所有需要分发的文件</span></span><br><span class="line"><span class="comment"># 包括 EXE 函数创建的 exe 文件、所有的二进制文件、zip 文件（如果有的话）和数据文件</span></span><br><span class="line">coll = COLLECT(</span><br><span class="line">    exe,</span><br><span class="line">    a.binaries,</span><br><span class="line">    a.zipfiles,</span><br><span class="line">    a.datas,</span><br><span class="line">    strip=False,</span><br><span class="line">    upx=True,</span><br><span class="line">    upx_exclude=[],</span><br><span class="line">    name=<span class="string">&#x27;hello&#x27;</span>,   <span class="comment"># 生成的文件夹的名字</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="问题">问题</h3><h4 id="1-pyinstaller-打包后无法通过反射访问py文件">1.pyinstaller 打包后无法通过反射访问py文件</h4><ul><li>解决方法</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> crawlers.base <span class="keyword">import</span> BaseCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.daili66 <span class="keyword">import</span> Daili66Crawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.data5u <span class="keyword">import</span> Data5UCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.docip <span class="keyword">import</span> DocipCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.fatezero <span class="keyword">import</span> FatezeroCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.geonodedaili <span class="keyword">import</span> GeonodeCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.goubanjia <span class="keyword">import</span> GoubanjiaCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.ihuan <span class="keyword">import</span> IhuanCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.ip3366 <span class="keyword">import</span> IP3366Crawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.iphai <span class="keyword">import</span> IPHaiCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.jiangxianli <span class="keyword">import</span> JiangxianliCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.kuaidaili <span class="keyword">import</span> KuaidailiCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.seofangfa <span class="keyword">import</span> SeoFangFaCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.taiyangdaili <span class="keyword">import</span> TaiyangdailiCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.uqidata <span class="keyword">import</span> UqidataCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.xiaoshudaili <span class="keyword">import</span> XiaoShuCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.xicidaili <span class="keyword">import</span> XicidailiCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.xiladaili <span class="keyword">import</span> XiladailiCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.yqie <span class="keyword">import</span> YqIeCrawler</span><br><span class="line"><span class="keyword">from</span> crawlers.public.zhandaye <span class="keyword">import</span> ZhandayeCrawler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取模块中所有的类</span></span><br><span class="line">crawlers_cls = [</span><br><span class="line">    base,</span><br><span class="line">    Ip89Crawler,</span><br><span class="line">    Daili66Crawler,</span><br><span class="line">    Data5UCrawler,</span><br><span class="line">    DocipCrawler,</span><br><span class="line">    FatezeroCrawler,</span><br><span class="line">    GeonodeCrawler,</span><br><span class="line">    GoubanjiaCrawler,</span><br><span class="line">    IhuanCrawler,</span><br><span class="line">    IP3366Crawler,</span><br><span class="line">    IPHaiCrawler,</span><br><span class="line">    JiangxianliCrawler,</span><br><span class="line">    KuaidailiCrawler,</span><br><span class="line">    SeoFangFaCrawler,</span><br><span class="line">    TaiyangdailiCrawler,</span><br><span class="line">    UqidataCrawler,</span><br><span class="line">    XiaoShuCrawler,</span><br><span class="line">    XicidailiCrawler,</span><br><span class="line">    XiladailiCrawler,</span><br><span class="line">    YqIeCrawler,</span><br><span class="line">    ZhandayeCrawler</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">crawlers_cls = [cls <span class="keyword">for</span> cls <span class="keyword">in</span> crawlers_cls</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(cls, <span class="built_in">type</span>) <span class="keyword">and</span> <span class="built_in">issubclass</span>(cls, BaseCrawler) <span class="keyword">and</span> cls <span class="keyword">is</span> <span class="keyword">not</span> BaseCrawler</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">getattr</span>(cls, <span class="string">&#x27;ignore&#x27;</span>, <span class="literal">False</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="variable language_">self</span>.crawlers = [crawler_cls() <span class="keyword">for</span> crawler_cls <span class="keyword">in</span> <span class="variable language_">self</span>.crawlers_cls]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-打包后无法访问指定数据">2.打包后无法访问指定数据</h4><ul><li>解决办法</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    获取数据文件的路径，无论是直接运行还是通过 PyInstaller 打包 抑或nuitka打包</span></span><br><span class="line"><span class="string">    :param filename</span></span><br><span class="line"><span class="string">    :return</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># pyinstaller 打包</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">getattr</span>(sys, <span class="string">&#x27;frozen&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">        <span class="comment"># 如果程序是“冷冻的”，即打包后的 exe</span></span><br><span class="line">        <span class="comment"># nuitka 打包</span></span><br><span class="line">        <span class="keyword">if</span> run.__compiled__:</span><br><span class="line">            basedir = os.getcwd()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            basedir = sys._MEIPASS</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 如果程序是直接运行的，即没有打包</span></span><br><span class="line">        basedir = os.path.dirname(__file__)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> os.path.join(basedir, filename)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="See">See</h2><ul><li>[1].<a href="https://www.cnblogs.com/haujet/p/PyInstaller-Perfect-Build.html">https://www.cnblogs.com/haujet/p/PyInstaller-Perfect-Build.html</a></li><li>[2].<a href="https://www.cnblogs.com/bbiu/p/13209612.html">https://www.cnblogs.com/bbiu/p/13209612.html</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用nuitka打包python为exe并发布</title>
      <link href="/2024/04/09/nuitka-publish-python/"/>
      <url>/2024/04/09/nuitka-publish-python/</url>
      
        <content type="html"><![CDATA[<h1>使用nuitka打包python为exe并发布</h1><h2 id="简介">简介</h2><blockquote><p>Nuitka is the optimizing Python compiler written in Python that creates executables that run without an need for a separate installer. Data files can both be included or put alongside.</p></blockquote><blockquote><p>Nuitka is fully compatible with Python 3 (3.4 — 3.11) and Python 2 (2.6, 2.7), works on Windows, macOS, Linux and more, basically where Python works for you already.</p></blockquote><ul><li>使用此库可达到以下目的：</li><li>隐藏源码。这里的pyinstaller是通过设置key来对源码进行加密的；而nuitka则是将python源码转成C++（这里得到的是二进制的pyd文件，防止了反编译），然后再编译成可执行文件。</li><li>方便移植：跨平台，可多平台使用：win、mac、linux等</li></ul><h3 id="优势">优势</h3><ul><li>小体积</li><li>启动快速</li><li>不易逆向解析</li></ul><h3 id="缺点">缺点</h3><ul><li>打包较为缓慢</li><li>仅提供命令行式打包（无配置文件）</li></ul><h2 id="安装">安装</h2><ul><li>nuitka主要通过pip命令安装，具体如下：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install Nuitka</span><br><span class="line">pip install ordered-set</span><br><span class="line">pip install zstandard</span><br></pre></td></tr></table></figure><ul><li>如果上述命令执行较慢，可使用镜像源安装：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple Nuitka</span><br></pre></td></tr></table></figure><h2 id="打包发布">打包发布</h2><ul><li>命令举例如下：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --follow-import-to为需要打包的模块名 </span></span><br><span class="line"><span class="comment"># --output-dir=out 为打包完成后输出的exe地址</span></span><br><span class="line"><span class="comment"># --show-progress 显示打包进度</span></span><br><span class="line"><span class="comment"># ./run/run_py.py 程序入口</span></span><br><span class="line"><span class="comment"># --standalone 跨平台和不同计算机运行exe必选option</span></span><br><span class="line"><span class="comment"># --mingw64  使用mingw64 打包</span></span><br><span class="line">python -m nuitka --mingw64 --standalone --follow-import-to=utils,api,<span class="built_in">log</span>,run --output-dir=out --show-progress ./run/run_py.py</span><br></pre></td></tr></table></figure><h2 id="常见command-option-解析">常见command option 解析</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">–mingw64 <span class="comment">#默认为已经安装的vs2017去编译，否则就按指定的比如mingw(官方建议)</span></span><br><span class="line">–standalone <span class="comment">#独立环境，这是必须的(否则拷给别人无法使用)</span></span><br><span class="line">–windows-disable-console <span class="comment">#没有CMD控制窗口</span></span><br><span class="line">–output-dir=out <span class="comment">#生成exe到out文件夹下面去</span></span><br><span class="line">–show-progress <span class="comment">#显示编译的进度，很直观</span></span><br><span class="line">–show-memory <span class="comment">#显示内存的占用</span></span><br><span class="line">–enable-plugin=pyside6 <span class="comment">#打包pyside6模块的刚需</span></span><br><span class="line">–plugin-enable=tk-inter <span class="comment">#打包tkinter模块的刚需</span></span><br><span class="line">–plugin-enable=numpy <span class="comment">#打包numpy,pandas,matplotlib模块的刚需</span></span><br><span class="line">–plugin-enable=torch <span class="comment">#打包pytorch的刚需</span></span><br><span class="line">–plugin-enable=tensorflow <span class="comment">#打包tensorflow的刚需</span></span><br><span class="line">–windows-icon-from-ico=你的.ico <span class="comment">#软件的图标</span></span><br><span class="line">–windows-company-name=Windows下软件公司信息</span><br><span class="line">–windows-product-name=Windows下软件名称</span><br><span class="line">–windows-file-version=Windows下软件的信息</span><br><span class="line">–windows-product-version=Windows下软件的产品信息</span><br><span class="line">–windows-file-description=Windows下软件的作用描述</span><br><span class="line">–windows-uac-admin=Windows下用户可以使用管理员权限来安装</span><br><span class="line">–linux-onefile-icon=Linux下的图标位置</span><br><span class="line">–onefile <span class="comment">#像pyinstaller打包成单个exe文件</span></span><br><span class="line">–include-package=复制比如numpy,PyQt5 <span class="comment">#这些带文件夹的叫包或者轮子</span></span><br><span class="line">–include-module=复制比如when.py <span class="comment">#这些以.py结尾的叫模块</span></span><br><span class="line">–-include-package-data=包含给定软件包名称中的数据文件，等号后软件包名称。 <span class="comment">#有的时候Nuitka并不能正确分析出一些Python软件包所需要使用的数据文件，在运行程序时提示FileNotFoundError等错误，此时就需要使用该选项。如：</span></span><br><span class="line">–include-package-data=ultralytics</span><br><span class="line">–-include-data-files= 按文件名包含数据文件， <span class="comment">#等号后的格式为&lt;SRC=DEST&gt;。SRC指的是文件夹的路径，DEST指的是文件夹相对于打包结果的路径，其中DEST只能使用相对路径。如：–include-data-files=/Users/admin/Downloads/yolov5n.pt=./yolov5n.pt</span></span><br><span class="line">-–include-data-dir= 包含文件夹中的数据文件， <span class="comment">#等号后的格式为&lt;SRC=DEST&gt;。使用方法与–include-data-files=相同。</span></span><br><span class="line">–follow-import-to=MODULE/PACKAGE <span class="comment">#如果使用该模块，请遵循该模块；如果是一个包，请遵循整个包。可以多次给定。默认为空。</span></span><br><span class="line"><span class="comment"># 提示：首次打包建议去掉–windows-disable-console，以保留控制台便于排查问题。</span></span><br><span class="line">--enable-plugin<span class="comment">#指定需要加载的插件，比如说tk-inter、pyqt5等</span></span><br><span class="line">--plugin-list<span class="comment">#查看支持的插件</span></span><br><span class="line">--remove-output<span class="comment">#打包结束之后自动清理build文件夹</span></span><br><span class="line">--windows-icon-from-ico<span class="comment">#指定程序图标（针对Windows系统）</span></span><br><span class="line">--msvc<span class="comment">#指定使用MSVC的版本，不指定则使用系统默认版本</span></span><br><span class="line">--company-name<span class="comment">#公司名</span></span><br><span class="line">--product-name<span class="comment">#产品名</span></span><br><span class="line">--file-version<span class="comment">#文件版本，最多4个数字序列，例如1.0、1.0.0.0</span></span><br><span class="line">--product-version<span class="comment">#产品版本，规则与–file-version相同</span></span><br><span class="line">--file-description<span class="comment">#文件描述</span></span><br></pre></td></tr></table></figure><h3 id="mingw64下载缓慢">mingw64下载缓慢</h3><ul><li>在以下目录放置手动下载的mingw安装包</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.mingw-w64.org/downloads/</span><br></pre></td></tr></table></figure><blockquote><p>文件名如下</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winlibs-x86_64-posix-seh-gcc-13.2.0-llvm-16.0.6-mingw-w64msvcrt-11.0.1-r1.zip</span><br></pre></td></tr></table></figure><ul><li>需要手动移动至以下目录(无法自定义目录，只能使用默认路径)</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\AppData\Local\Nuitka\Nuitka\Cache\downloads</span><br></pre></td></tr></table></figure><blockquote><p>放置完成后，重新运行上述命令即可打包成功！<br>当控制台询问是否安装gcc时， 输入yes进行安装</p></blockquote><h3 id="打包完成后，效果如下：">打包完成后，效果如下：</h3><ul><li>如题<br><img src="/2024/04/09/nuitka-publish-python/zip_file.png" class="lazyload placeholder" data-srcset="/2024/04/09/nuitka-publish-python/zip_file.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ul><h2 id="pyinstaller-与-nukia打包结果对比">pyinstaller 与 nukia打包结果对比</h2><h3 id="大小对比">大小对比</h3><ul><li>如图<br><img src="/2024/04/09/nuitka-publish-python/size_compare.png" class="lazyload placeholder" data-srcset="/2024/04/09/nuitka-publish-python/size_compare.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ul><h3 id="启动速度对比">启动速度对比</h3><ul><li>nuitkia比pyinstaller打包exe启动同一程序快66%</li></ul><h3 id="特殊库引入">特殊库引入</h3><ul><li>举例：pyqt5</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用pyqt5插件</span></span><br><span class="line">--plugin-enable=pyqt5</span><br><span class="line"><span class="comment"># 禁用控制台窗口</span></span><br><span class="line">--windows-disable-console</span><br><span class="line"><span class="comment"># 启用图标</span></span><br><span class="line">--windows-icon-from-ico=favicon.ico </span><br></pre></td></tr></table></figure><ul><li>例如执行以下命令：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuitka --mingw64 --standalone --show-progress --show-memory --output-dir=out   --plugin-enable=pyqt5 --windows-disable-console  --windows-icon-from-ico=favicon.ico xxx.py</span><br></pre></td></tr></table></figure><h2 id="See">See</h2><ul><li>[1]. <a href="https://daobook.github.io/nuitka-doc/zh_CN/developer-manual.html">https://daobook.github.io/nuitka-doc/zh_CN/developer-manual.html</a></li><li>[2]. <a href="https://nuitka.net/">https://nuitka.net/</a></li><li>[3]. <a href="https://blog.csdn.net/a1397852386/article/details/134344107">https://blog.csdn.net/a1397852386/article/details/134344107</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于opencv使用python实现人脸识别与视频生成</title>
      <link href="/2024/03/25/opencv-image-video/"/>
      <url>/2024/03/25/opencv-image-video/</url>
      
        <content type="html"><![CDATA[<h1>基于opencv使用python实现人脸识别与视频生成</h1><h2 id="概述">概述</h2><blockquote><p>OpenCV是一个基于Apache2.0许可（开源）发行的跨平台计算机视觉和机器学习软件库，可以运行在Linux、Windows、Android和Mac OS操作系统上。</p></blockquote><blockquote><p>OpenCV由一系列C函数和少量C++类构成，同时提供了Python、Ruby、MATLAB等语言的接口，实现了图像处理和计算机视觉方面的很多通用算法，主要倾向于实时视觉应用。</p></blockquote><h2 id="基础用法">基础用法</h2><ul><li><strong>cv2.imread()</strong>：读入图像。第一个参数为图像路径，第二个参数指定读入图像的颜色，例如cv2.IMREAD_COLOR表示读入彩色图像，cv2.IMREAD_GRAYSCALE表示读入灰度图像。</li><li><strong>cv2.imshow()</strong>：显示图像。第一个参数是窗口的名字，第二个参数是要显示的图像。</li><li><strong>cv2.VideoCapture()</strong>：获取摄像头视频或者读取视频文件。参数可以是设备的索引号，也可以是视频文件的路径。</li><li><strong>cv2.imwrite()</strong>：保存图像。第一个参数是文件名，包括文件路径和文件扩展名，第二个参数是要保存的图像。</li><li><strong>cv2.cvtColor()</strong>：转换图像颜色空间。例如将彩色图像转换为灰度图像。</li></ul><h2 id="实际案例">实际案例</h2><h3 id="图像转视频">图像转视频</h3><h4 id="图像尺寸统一化">图像尺寸统一化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image_fill_black</span>(<span class="params">target_dir, image_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    循环处理输入图像：如果输入尺寸大于输出尺寸则：缩小；如果输入尺寸小于输出尺寸，则用黑边填充。尺寸相等 输出图像</span></span><br><span class="line"><span class="string">    :param target_dir:输出图像路径</span></span><br><span class="line"><span class="string">    :param image_path:输入图像路径</span></span><br><span class="line"><span class="string">    :return:是否转换成功</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Step 1： import opencv lib</span></span><br><span class="line">    <span class="keyword">import</span> cv2</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Step 2: Define the target size</span></span><br><span class="line">        target_size = (output_video_width, output_video_height)</span><br><span class="line">        <span class="comment"># 读取图片</span></span><br><span class="line">        img = cv2.imread(image_path)</span><br><span class="line">        <span class="comment"># 检查图片尺寸</span></span><br><span class="line">        height, width = img.shape[:<span class="number">2</span>]</span><br><span class="line">        border_width = <span class="number">0</span></span><br><span class="line">        border_height = <span class="number">0</span></span><br><span class="line">        grap_width = <span class="number">0</span></span><br><span class="line">        grap_height = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> width &lt; target_size[<span class="number">0</span>] <span class="keyword">and</span> height &lt; target_size[<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">if</span> width &lt; target_size[<span class="number">0</span>]:</span><br><span class="line">                    border_width = <span class="built_in">abs</span>(target_size[<span class="number">0</span>] - width) // <span class="number">2</span></span><br><span class="line">                    grap_width = output_video_width - (border_width * <span class="number">2</span>) - width</span><br><span class="line">                <span class="keyword">elif</span> width == target_size[<span class="number">0</span>]:</span><br><span class="line">                    border_width = <span class="number">0</span></span><br><span class="line">                    grap_width = <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> height &lt; target_size[<span class="number">1</span>]:</span><br><span class="line">                    border_height = <span class="built_in">abs</span>(target_size[<span class="number">1</span>] - height) // <span class="number">2</span></span><br><span class="line">                    grap_height = output_video_height - (border_height * <span class="number">2</span>) - height</span><br><span class="line">                <span class="keyword">elif</span> height == target_size[<span class="number">1</span>]:</span><br><span class="line">                    border_height = <span class="number">0</span></span><br><span class="line">                    grap_height = <span class="number">0</span></span><br><span class="line">                border = border_width, border_height</span><br><span class="line">                img = cv2.copyMakeBorder(img, border[<span class="number">1</span>], border[<span class="number">1</span>] + grap_height, border[<span class="number">0</span>], border[<span class="number">0</span>] + grap_width,</span><br><span class="line">                                         cv2.BORDER_CONSTANT, value=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">                out_height, out_width = img.shape[:<span class="number">2</span>]</span><br><span class="line">                <span class="keyword">if</span> out_height == output_video_height <span class="keyword">and</span> out_width == output_video_width:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> width &gt; target_size[<span class="number">0</span>] <span class="keyword">or</span> height &gt; target_size[<span class="number">1</span>]:</span><br><span class="line">                img = cv2.resize(img, target_size, interpolation=cv2.INTER_LINEAR)</span><br><span class="line">                out_height, out_width = img.shape[:<span class="number">2</span>]</span><br><span class="line">                <span class="keyword">if</span> out_height == output_video_height <span class="keyword">and</span> out_width == output_video_width:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logger.info(<span class="string">f&quot;Image size matches the target size: <span class="subst">&#123;image_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        file_path, file_name = os.path.split(image_path)</span><br><span class="line">        cv2.imwrite(os.path.join(target_dir, <span class="string">&quot;result_&quot;</span> + file_name), img)</span><br><span class="line">        cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">        cv2.destroyAllWindows()</span><br><span class="line">    <span class="keyword">except</span> AttributeError <span class="keyword">as</span> uie:</span><br><span class="line">        logger.error(<span class="string">&quot;error, AttributeError: &#x27;NoneType&#x27; object has no attribute &#x27;shape&#x27;! detail: &quot;</span> + <span class="built_in">str</span>(uie) +</span><br><span class="line">                     <span class="string">&quot;, &quot;</span><span class="string">&quot;file_name or path: &quot;</span> + <span class="built_in">str</span>(image_path))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">&quot;error, unknown error! detail: &quot;</span> + <span class="built_in">str</span>(e) + <span class="string">&quot;, file_name or path: &quot;</span> + <span class="built_in">str</span>(image_path))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>上述代码讲不同尺寸图像转换为统一目标尺寸，过小用黑边填充，过大进行缩放。</p></blockquote><h4 id="图像转为视频">图像转为视频</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_video_from_images</span>(<span class="params">images_input_path, video_out_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    generate video from images list</span></span><br><span class="line"><span class="string">    :param images_input_path:</span></span><br><span class="line"><span class="string">    :param video_out_path:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    image_paths = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(images_input_path):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;square&quot;</span> <span class="keyword">in</span> file <span class="keyword">or</span> <span class="string">&quot;custom&quot;</span> <span class="keyword">in</span> file <span class="keyword">or</span> <span class="string">&quot;error_images&quot;</span> <span class="keyword">in</span> root <span class="keyword">or</span> <span class="string">&quot;small_images&quot;</span> <span class="keyword">in</span> root \</span><br><span class="line">                    <span class="keyword">or</span> <span class="string">&quot;gif_unzip&quot;</span> <span class="keyword">in</span> root:</span><br><span class="line">                logger.warning(<span class="string">f&quot;skip file, because images error or small, name: <span class="subst">&#123;file&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> file.endswith(<span class="string">&#x27;.jpg&#x27;</span>) <span class="keyword">or</span> file.endswith(<span class="string">&#x27;.png&#x27;</span>):  <span class="comment"># 仅处理jpg和png图片文件</span></span><br><span class="line">                image_paths.append(os.path.join(root, file))</span><br><span class="line">    logger.debug(</span><br><span class="line">        <span class="string">&quot;scan image coule use image length: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(image_paths)) + <span class="string">&quot;, scan dir: &quot;</span> + <span class="built_in">str</span>(constants.data_path))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(image_paths) &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    width = <span class="number">0</span></span><br><span class="line">    height = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> image_path <span class="keyword">in</span> image_paths:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            image = cv2.imread(image_path)</span><br><span class="line">            <span class="keyword">if</span> width == <span class="number">0</span>:</span><br><span class="line">                width = image.shape[<span class="number">1</span>]</span><br><span class="line">            height = image.shape[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(<span class="string">&quot;error! detail: &quot;</span> + <span class="string">&quot;file name or path: &quot;</span> + image_path + <span class="string">&quot;, error detail: &quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查输出路径是否存在，如果不存在则创建目录</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(video_out_path):</span><br><span class="line">        os.makedirs(video_out_path)</span><br><span class="line"></span><br><span class="line">    fourcc = cv2.VideoWriter.fourcc(*<span class="string">&#x27;MJPG&#x27;</span>)</span><br><span class="line">    <span class="comment"># 创建VideoWriter对象</span></span><br><span class="line">    video_name = video_out_path + id_generate_time() + <span class="string">&quot;test.mp4&quot;</span></span><br><span class="line">    video = cv2.VideoWriter(video_name, fourcc, <span class="built_in">int</span>(output_video_fps), (width, height))  <span class="comment"># 设置视频帧率、输出视频大小</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> video.isOpened():</span><br><span class="line">        logger.error(<span class="string">&quot;not open video watch!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        export_index = <span class="number">0</span></span><br><span class="line">        image_size_len = <span class="built_in">len</span>(image_paths)</span><br><span class="line">        <span class="keyword">for</span> image_path <span class="keyword">in</span> os.listdir(images_input_path):</span><br><span class="line">            export_index += <span class="number">1</span></span><br><span class="line">            percent_cur = <span class="built_in">int</span>((export_index / image_size_len) * <span class="number">100</span>)</span><br><span class="line">            image = cv2.imread(os.path.join(images_input_path, image_path))</span><br><span class="line">            <span class="keyword">if</span> image <span class="keyword">is</span> <span class="literal">None</span>:  <span class="comment"># 增加对图像是否正确读取的检查</span></span><br><span class="line">                logger.error(<span class="string">&quot;Image not loaded: &quot;</span> + image_path)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            resized_image = cv2.resize(image, (width, height))  <span class="comment"># 将图像的宽度和高度设置为适合MPEG-4的尺寸</span></span><br><span class="line">            <span class="keyword">if</span> image <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                video.write(resized_image)</span><br><span class="line">            <span class="keyword">if</span> percent_cur % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                logger.info(<span class="string">f&quot;export process to export_index / image_size_len: <span class="subst">&#123;export_index&#125;</span> / <span class="subst">&#123;image_size_len&#125;</span> * &quot;</span></span><br><span class="line">                            <span class="string">f&quot;100%100: <span class="subst">&#123;percent_cur&#125;</span>%&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        video.release()</span><br><span class="line">    <span class="keyword">return</span> video_name</span><br></pre></td></tr></table></figure><blockquote><p>上述代码从list中读取图像，使用<code>width = image.shape[1]</code>获取图像宽度或高度；使用 <code> fourcc = cv2.VideoWriter.fourcc(*'MJPG')     # 创建VideoWriter对象     video_name = video_out_path + id_generate_time() + &quot;test.mp4&quot;     video = cv2.VideoWriter(video_name, fourcc, int(output_video_fps), (width, height))</code>创建videowriter对象,其中output_video_fps规定了视频输出帧率，(width, height)规定了视频输出宽高度；后边使用<code> image = cv2.imread(os.path.join(images_input_path, image_path))</code>读取传入图片对象；使用<code>resized_image = cv2.resize(image, (width, height))</code>再次调整图片大小至合适尺寸；最后使用<code>video.write(resized_image)</code>写入图像到视频中。写入完成后，使用<code>video.release()</code>释放对象。</p></blockquote><h3 id="人脸特征检测">人脸特征检测</h3><h4 id="分类器下载与使用">分类器下载与使用</h4><ul><li>下载地址</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/opencv/opencv/tree/master/data/haarcascades。</span><br></pre></td></tr></table></figure><ul><li>读取与使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    获取数据文件的路径，无论是直接运行还是通过 PyInstaller 打包</span></span><br><span class="line"><span class="string">    :param filename</span></span><br><span class="line"><span class="string">    :return</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">getattr</span>(sys, <span class="string">&#x27;frozen&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">        <span class="comment"># 如果程序是“冷冻的”，即打包后的 exe</span></span><br><span class="line">        basedir = sys._MEIPASS</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 如果程序是直接运行的，即没有打包</span></span><br><span class="line">        basedir = os.path.dirname(__file__)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> os.path.join(basedir, filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    face_xml_path = get_data_file(<span class="string">&quot;xml_data/haarcascade_frontalface_default.xml&quot;</span>)</span><br><span class="line">    eye_xml_path = get_data_file(<span class="string">&#x27;xml_data/haarcascade_eye.xml&#x27;</span>)</span><br><span class="line">    <span class="comment"># 加载分类器</span></span><br><span class="line">    face_cascade = cv2.CascadeClassifier(face_xml_path)</span><br><span class="line">    eye_cascade = cv2.CascadeClassifier(eye_xml_path)</span><br></pre></td></tr></table></figure><h4 id="实际案例-2">实际案例</h4><ul><li>图像读取与人脸特征分割</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">face_detect</span>(<span class="params">path, image_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用OpenCV进行人脸和眼睛检测。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param path:</span></span><br><span class="line"><span class="string">    :param image_path: 图像文件的路径。</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    file_path, file_name = os.path.split(image_path)</span><br><span class="line">    folder_name = find_img_result(image_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> folder_name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        folder_name = <span class="string">&#x27;unknown_name&#x27;</span></span><br><span class="line">        logger.warning(<span class="string">&#x27;folder_name is None, default use unknown_name.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    base_path = os.path.join(path, <span class="string">&quot;face_detect_result&quot;</span>)</span><br><span class="line">    base_path = os.path.join(base_path, folder_name)</span><br><span class="line">    img_file_path = os.path.join(base_path, <span class="string">&quot;split_face&quot;</span>)</span><br><span class="line">    img_file_path_line = os.path.join(base_path, <span class="string">&quot;red_line&quot;</span>)</span><br><span class="line">    img_file_name = os.path.join(img_file_path, file_name)</span><br><span class="line">    img_file_name_line = os.path.join(img_file_path_line, file_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_file_path):</span><br><span class="line">        os.makedirs(img_file_path)</span><br><span class="line">        logger.warning(<span class="string">&quot;face detect split_face dir not exists, create it.&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_file_path_line):</span><br><span class="line">        os.makedirs(img_file_path_line)</span><br><span class="line">        logger.warning(<span class="string">f&quot;face detect red_line dir not exists, create it: <span class="subst">&#123;img_file_path&#125;</span>.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 只生成没有的</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(img_file_name) <span class="keyword">or</span> os.path.exists(img_file_name_line):</span><br><span class="line">        logger.warning(<span class="string">f&quot;<span class="subst">&#123;img_file_name&#125;</span> already exists, will skip!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        face_xml_path = get_data_file(<span class="string">&quot;xml_data/haarcascade_frontalface_default.xml&quot;</span>)</span><br><span class="line">        eye_xml_path = get_data_file(<span class="string">&#x27;xml_data/haarcascade_eye.xml&#x27;</span>)</span><br><span class="line">        <span class="comment"># 加载分类器</span></span><br><span class="line">        face_cascade = cv2.CascadeClassifier(face_xml_path)</span><br><span class="line">        eye_cascade = cv2.CascadeClassifier(eye_xml_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取图像</span></span><br><span class="line">        img = cv2.imread(image_path)</span><br><span class="line">        <span class="keyword">if</span> img <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            logger.error(<span class="string">f&quot;Error: Unable to load image at <span class="subst">&#123;image_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转换为灰度图像</span></span><br><span class="line">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检测人脸</span></span><br><span class="line">        faces = face_cascade.detectMultiScale(gray, <span class="number">1.1</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment"># eye_cascade.detectMultiScale(gray, 1.1, 5)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(faces) == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># logger.warning(f&quot;No faces detected:&#123;image_path&#125;&quot;)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            save_face(img_file_name, img_file_name_line, img, faces, gray, eye_cascade)</span><br><span class="line">        <span class="comment"># 显示结果</span></span><br><span class="line">        cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">        cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;An error occurred: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>识别结果保存</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_face</span>(<span class="params">img_file_name, img_file_name_line, img, faces, gray, eye_cascade</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param eye_cascade:</span></span><br><span class="line"><span class="string">    :param gray:</span></span><br><span class="line"><span class="string">    :param img_file_name_line:</span></span><br><span class="line"><span class="string">    :param img_file_name:</span></span><br><span class="line"><span class="string">    :param img:</span></span><br><span class="line"><span class="string">    :param faces:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    target_size = (<span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calculate the dimensions of the faces_image based on the number of faces and target size</span></span><br><span class="line">    num_faces = <span class="built_in">len</span>(faces)</span><br><span class="line">    faces_image_height = num_faces * target_size[<span class="number">0</span>]</span><br><span class="line">    faces_image_width = target_size[<span class="number">1</span>]  <span class="comment"># Assuming we want to fit only one face horizontally for simplicity</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Create a blank image to hold the resized faces</span></span><br><span class="line">        faces_image = np.zeros((faces_image_height, faces_image_width, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> faces:</span><br><span class="line">            cv2.rectangle(img, (x, y), (x + w, y + h), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">            roi_gray = gray[y:y + h, x:x + w]</span><br><span class="line">            roi_color = img[y:y + h, x:x + w]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 在人脸区域内检测眼睛</span></span><br><span class="line">            eyes = eye_cascade.detectMultiScale(roi_gray)</span><br><span class="line">            <span class="keyword">for</span> (ex, ey, ew, eh) <span class="keyword">in</span> eyes:</span><br><span class="line">                cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将绘制了眼睛矩形框的人脸区域放回原图的正确位置</span></span><br><span class="line">            img[y:y + h, x:x + w] = roi_color</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Iterate over the detected faces</span></span><br><span class="line">        <span class="keyword">for</span> i, (x, y, w, h) <span class="keyword">in</span> <span class="built_in">enumerate</span>(faces):</span><br><span class="line">            <span class="comment"># Resize the face to the target size</span></span><br><span class="line">            face_resized = cv2.resize(img[y:y + h, x:x + w], target_size)</span><br><span class="line"></span><br><span class="line">            row = i</span><br><span class="line">            col = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Place the resized face in the faces_image array</span></span><br><span class="line">            faces_image[row * target_size[<span class="number">0</span>]:(row + <span class="number">1</span>) * target_size[<span class="number">0</span>],</span><br><span class="line">            col * target_size[<span class="number">1</span>]:(col + <span class="number">1</span>) * target_size[<span class="number">1</span>]] = face_resized</span><br><span class="line"></span><br><span class="line">        cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">        cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line">        cv2.imwrite(img_file_name, faces_image)</span><br><span class="line">        cv2.imwrite(img_file_name_line, img)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;unknown error, detail: <span class="subst">&#123;e&#125;</span>, name: <span class="subst">&#123;img_file_name[-<span class="number">27</span>:]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    logger.success(<span class="string">f&quot;save success, name: <span class="subst">&#123;img_file_name[-<span class="number">27</span>:]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>上述代码，在人脸中检测了眼睛、脸部特征点，并使用对应颜色框框选出来，最终保存至目标路径。</p></blockquote><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python_proxy_server</title>
      <link href="/2024/03/22/python-proxy-server/"/>
      <url>/2024/03/22/python-proxy-server/</url>
      
        <content type="html"><![CDATA[<h1>使用python创建一个高效、可用的代理池服务</h1><h2 id="代理">代理</h2><blockquote><p>向目标网站或服务器隐藏IP,利用代理我们可以解决目标网站封 IP 的问题</p></blockquote><ul><li>由代理服务器自己去访问你的目标网站，并加载它的内容，然后再把这些加载过的内容传递到你的窗口上。目标网站就无法获取你的IP地址，取而代之获取的是代理服务器的IP地址。</li></ul><h2 id="设计思路">设计思路</h2><ul><li>系统分为四块，获取模块、存储模块、检查模块、接口模块</li><li>获取模块需要定时去各大代理网站抓取代理，代理可以是免费公开代理也可以是付费代理，代理的形式都是 IP 加端口，尽量从不同来源获取，尽量抓取高匿代理，抓取完之后将可用代理保存到数据库中。</li><li>存储模块负责存储抓取下来的代理。首先我们需要保证代理不重复，另外我们还需要标识代理的可用情况，而且需要动态实时处理每个代理，所以说，一种比较高效和方便的存储方式就是使用 Redis 的 Sorted Set，也就是有序集合。</li><li>检测模块需要定时将数据库中的代理进行检测，在这里我们需要设置一个检测链接，最好是爬取哪个网站就检测哪个网站，这样更加有针对性，如果要做一个通用型的代理，那可以设置百度等链接来检测。另外我们需要标识每一个代理的状态，如设置分数标识，100 分代表可用，分数越少代表越不可用，检测一次如果可用，我们可以将其立即设置为 100 满分，也可以在原基础上加 1 分，当不可用，可以将其减 1 分，当减到一定阈值后就直接从数据库移除。通过这样的标识分数，我们就可以区分出代理的可用情况，选用的时候会更有针对性。</li><li>接口模块需要用 API 来提供对外服务的接口，其实我们可以直接连数据库来取，但是这样就需要知道数据库的连接信息，不太安全，而且需要配置连接，所以一个比较安全和方便的方式就是提供一个 Web API 接口，通过访问接口即可拿到可用代理。另外由于可用代理可能有多个，我们可以提供随机返回一个可用代理的接口，这样保证每个可用代理都可以取到，实现负载均衡。</li></ul><h2 id="实现思路">实现思路</h2><ul><li>基于上述分析：</li><li>存储模块使用 Redis 的有序集合，用以代理的去重和状态标识，同时它也是中心模块和基础模块，将其他模块串联起来。</li><li>获取模块定时从代理网站获取代理，将获取的代理传递给存储模块，保存到数据库。</li><li>检测模块定时通过存储模块获取所有代理，并对其进行检测，根据不同的检测结果对代理设置不同的标识。</li><li>接口模块通过 Web API 提供服务接口，其内部还是连接存储模块，获取可用的代理</li></ul><h2 id="模块实现">模块实现</h2><h3 id="代理存储">代理存储</h3><ul><li><p>使用 Redis 的有序集合，集合的每一个元素都是不重复的，对于代理代理池来说，集合的元素就变成了一个个代理，也就是 IP 加端口的形式，如 60.207.237.111:8888，这样的一个代理就是集合的一个元素。另外有序集合的每一个元素还都有一个分数字段，分数是可以重复的，是一个浮点数类型，也可以是整数类型。该集合会根据每一个元素的分数对集合进行降序排序。 对于代理池来说，这个分数可以作为我们判断一个代理可用不可用的标志，我们将 100 设为最高分，代表可用，0 设为最低分，代表不可用。从代理池中获取代理的时候会随机获取分数最高的代理，注意这里是随机获取高分代理，这样可以保证每个可用代理都会被调用到。 分数是我们判断代理稳定性的重要标准，在这里我们设置分数规则如下：</p></li><li><p>分数 100 为可用，检测器会定时循环检测每个代理可用情况，一旦检测到有可用的代理就立即置为 100，检测到不可用就将分数减 1，减至 0 后移除。</p></li><li><p>新获取的代理添加时将分数置为 10，当测试可行立即置 100，不可行分数减 1，减至 0 后移除。</p></li></ul><h4 id="实现代码">实现代码</h4><ul><li>存储代码示例如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">MAX_SCORE = <span class="number">100</span></span><br><span class="line">MIN_SCORE = <span class="number">0</span></span><br><span class="line">INITIAL_SCORE = <span class="number">10</span></span><br><span class="line">REDIS_HOST = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br><span class="line">REDIS_PASSWORD = <span class="literal">None</span></span><br><span class="line">REDIS_KEY = <span class="string">&#x27;proxies&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisClient</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, host=REDIS_HOST, port=REDIS_PORT, password=REDIS_PASSWORD</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化</span></span><br><span class="line"><span class="string">        :param host: Redis 地址</span></span><br><span class="line"><span class="string">        :param port: Redis 端口</span></span><br><span class="line"><span class="string">        :param password: Redis密码</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.db = redis.StrictRedis(host=host, port=port, password=password, decode_responses=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, proxy, score=INITIAL_SCORE</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        添加代理，设置分数为最高</span></span><br><span class="line"><span class="string">        :param proxy: 代理</span></span><br><span class="line"><span class="string">        :param score: 分数</span></span><br><span class="line"><span class="string">        :return: 添加结果</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.db.zscore(REDIS_KEY, proxy):</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.db.zadd(REDIS_KEY, score, proxy)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">random</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        随机获取有效代理，首先尝试获取最高分数代理，如果不存在，按照排名获取，否则异常</span></span><br><span class="line"><span class="string">        :return: 随机代理</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        result = <span class="variable language_">self</span>.db.zrangebyscore(REDIS_KEY, MAX_SCORE, MAX_SCORE)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(result):</span><br><span class="line">            <span class="keyword">return</span> choice(result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="variable language_">self</span>.db.zrevrange(REDIS_KEY, <span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(result):</span><br><span class="line">                <span class="keyword">return</span> choice(result)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> PoolEmptyError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrease</span>(<span class="params">self, proxy</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        代理值减一分，小于最小值则删除</span></span><br><span class="line"><span class="string">        :param proxy: 代理</span></span><br><span class="line"><span class="string">        :return: 修改后的代理分数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        score = <span class="variable language_">self</span>.db.zscore(REDIS_KEY, proxy)</span><br><span class="line">        <span class="keyword">if</span> score <span class="keyword">and</span> score &gt; MIN_SCORE:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;代理&#x27;</span>, proxy, <span class="string">&#x27;当前分数&#x27;</span>, score, <span class="string">&#x27;减1&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.db.zincrby(REDIS_KEY, proxy, -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;代理&#x27;</span>, proxy, <span class="string">&#x27;当前分数&#x27;</span>, score, <span class="string">&#x27;移除&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.db.zrem(REDIS_KEY, proxy)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exists</span>(<span class="params">self, proxy</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        判断是否存在</span></span><br><span class="line"><span class="string">        :param proxy: 代理</span></span><br><span class="line"><span class="string">        :return: 是否存在</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> <span class="variable language_">self</span>.db.zscore(REDIS_KEY, proxy) == <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">self, proxy</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将代理设置为MAX_SCORE</span></span><br><span class="line"><span class="string">        :param proxy: 代理</span></span><br><span class="line"><span class="string">        :return: 设置结果</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;代理&#x27;</span>, proxy, <span class="string">&#x27;可用，设置为&#x27;</span>, MAX_SCORE)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.db.zadd(REDIS_KEY, MAX_SCORE, proxy)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取数量</span></span><br><span class="line"><span class="string">        :return: 数量</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.db.zcard(REDIS_KEY)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">all</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取全部代理</span></span><br><span class="line"><span class="string">        :return: 全部代理列表</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.db.zrangebyscore(REDIS_KEY, MIN_SCORE, MAX_SCORE)</span><br></pre></td></tr></table></figure><blockquote><p>上述代码中MAX_SCORE、MIN_SCORE、INITIAL_SCORE 分别代表最大分数、最小分数、初始分数。REDIS_HOST、REDIS_PORT、REDIS_PASSWORD 分别代表了 Redis 的连接信息，即地址、端口、密码。REDIS_KEY 是有序集合的键名</p></blockquote><h3 id="获取代理">获取代理</h3><ul><li>定义一个 Crawler 来从各大网站抓取代理,代理网站类代码如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> .utils <span class="keyword">import</span> get_page</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyMetaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        attrs[<span class="string">&#x27;__CrawlFunc__&#x27;</span>] = []</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;crawl_&#x27;</span> <span class="keyword">in</span> k:</span><br><span class="line">                attrs[<span class="string">&#x27;__CrawlFunc__&#x27;</span>].append(k)</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">        attrs[<span class="string">&#x27;__CrawlFuncCount__&#x27;</span>] = count</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Crawler</span>(<span class="built_in">object</span>, metaclass=ProxyMetaclass):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_proxies</span>(<span class="params">self, callback</span>):</span><br><span class="line">        proxies = []</span><br><span class="line">        <span class="keyword">for</span> proxy <span class="keyword">in</span> <span class="built_in">eval</span>(<span class="string">&quot;self.&#123;&#125;()&quot;</span>.<span class="built_in">format</span>(callback)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;成功获取到代理&#x27;</span>, proxy)</span><br><span class="line">            proxies.append(proxy)</span><br><span class="line">        <span class="keyword">return</span> proxies</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">crawl_daili66</span>(<span class="params">self, page_count=<span class="number">4</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取代理66</span></span><br><span class="line"><span class="string">        :param page_count: 页码</span></span><br><span class="line"><span class="string">        :return: 代理</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        start_url = <span class="string">&#x27;http://www.66ip.cn/&#123;&#125;.html&#x27;</span></span><br><span class="line">        urls = [start_url.<span class="built_in">format</span>(page) <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, page_count + <span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Crawling&#x27;</span>, url)</span><br><span class="line">            html = get_page(url)</span><br><span class="line">            <span class="keyword">if</span> html:</span><br><span class="line">                doc = pq(html)</span><br><span class="line">                trs = doc(<span class="string">&#x27;.containerbox table tr:gt(0)&#x27;</span>).items()</span><br><span class="line">                <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">                    ip = tr.find(<span class="string">&#x27;td:nth-child(1)&#x27;</span>).text()</span><br><span class="line">                    port = tr.find(<span class="string">&#x27;td:nth-child(2)&#x27;</span>).text()</span><br><span class="line">                    <span class="keyword">yield</span> <span class="string">&#x27;:&#x27;</span>.join([ip, port])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">crawl_proxy360</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取Proxy360</span></span><br><span class="line"><span class="string">        :return: 代理</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        start_url = <span class="string">&#x27;http://www.proxy360.cn/Region/China&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Crawling&#x27;</span>, start_url)</span><br><span class="line">        html = get_page(start_url)</span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            doc = pq(html)</span><br><span class="line">            lines = doc(<span class="string">&#x27;div[name=&quot;list_proxy_ip&quot;]&#x27;</span>).items()</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">                ip = line.find(<span class="string">&#x27;.tbBottomLine:nth-child(1)&#x27;</span>).text()</span><br><span class="line">                port = line.find(<span class="string">&#x27;.tbBottomLine:nth-child(2)&#x27;</span>).text()</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&#x27;:&#x27;</span>.join([ip, port])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">crawl_goubanjia</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取Goubanjia</span></span><br><span class="line"><span class="string">        :return: 代理</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        start_url = <span class="string">&#x27;http://www.goubanjia.com/free/gngn/index.shtml&#x27;</span></span><br><span class="line">        html = get_page(start_url)</span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            doc = pq(html)</span><br><span class="line">            tds = doc(<span class="string">&#x27;td.ip&#x27;</span>).items()</span><br><span class="line">            <span class="keyword">for</span> td <span class="keyword">in</span> tds:</span><br><span class="line">                td.find(<span class="string">&#x27;p&#x27;</span>).remove()</span><br><span class="line">                <span class="keyword">yield</span> td.text().replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>上述代码通过：统一定义以 crawl 开头，抓取代理 66、Proxy360、Goubanjia 三个免费代理网站，根据yield 返回一个个代理。首先将网页获取，然后用 PyQuery 解析，解析出 IP 加端口的形式的代理然后返回。 然后定义了一个 get_proxies () 方法，将所有以 crawl 开头的方法调用一遍，获取每个方法返回的代理并组合成列表形式返回，通过此方法，我们可以只需要添加一个以 crawl 开头的方法，例如抓取快代理，在 Crawler 类中增加 crawl_kuaidaili () 方法，仿照其他的几个方法将其定义成生成器，抓取其网站的代理，然后通过 yield 返回代理即可。</p></blockquote><ul><li>然后，定义一个 Getter 类，动态地调用所有以 crawl 开头的方法，然后获取抓取到的代理，将其加入到数据库存储起来</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> RedisClient</span><br><span class="line"><span class="keyword">from</span> crawler <span class="keyword">import</span> Crawler</span><br><span class="line"></span><br><span class="line">POOL_UPPER_THRESHOLD = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取模块中所有的类</span></span><br><span class="line">crawlers_cls = [</span><br><span class="line">    base,</span><br><span class="line">    Ip89Crawler,</span><br><span class="line">    Daili66Crawler,</span><br><span class="line">    Data5UCrawler,</span><br><span class="line">    DocipCrawler,</span><br><span class="line">    FatezeroCrawler,</span><br><span class="line">    GeonodeCrawler,</span><br><span class="line">    GoubanjiaCrawler,</span><br><span class="line">    IhuanCrawler,</span><br><span class="line">    IP3366Crawler,</span><br><span class="line">    IPHaiCrawler,</span><br><span class="line">    JiangxianliCrawler,</span><br><span class="line">    KuaidailiCrawler,</span><br><span class="line">    SeoFangFaCrawler,</span><br><span class="line">    TaiyangdailiCrawler,</span><br><span class="line">    UqidataCrawler,</span><br><span class="line">    XiaoShuCrawler,</span><br><span class="line">    XicidailiCrawler,</span><br><span class="line">    XiladailiCrawler,</span><br><span class="line">    YqIeCrawler,</span><br><span class="line">    ZhandayeCrawler</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">crawlers_cls = [cls <span class="keyword">for</span> cls <span class="keyword">in</span> crawlers_cls</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(cls, <span class="built_in">type</span>) <span class="keyword">and</span> <span class="built_in">issubclass</span>(cls, BaseCrawler) <span class="keyword">and</span> cls <span class="keyword">is</span> <span class="keyword">not</span> BaseCrawler</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">getattr</span>(cls, <span class="string">&#x27;ignore&#x27;</span>, <span class="literal">False</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Getter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    getter of src</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        init db and crawlers</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.redis = RedisClient()</span><br><span class="line">        <span class="variable language_">self</span>.crawlers_cls = crawlers_cls</span><br><span class="line">        <span class="variable language_">self</span>.crawlers = [crawler_cls() <span class="keyword">for</span> crawler_cls <span class="keyword">in</span> <span class="variable language_">self</span>.crawlers_cls]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_full</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        if src if full</span></span><br><span class="line"><span class="string">        return: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.redis.count() &gt;= PROXY_NUMBER_MAX</span><br><span class="line"></span><br><span class="line"><span class="meta">    @logger.catch</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        run crawlers to get proxy</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        logger.info(<span class="string">&#x27;stating getter...&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_full():</span><br><span class="line">            logger.error(<span class="string">&quot;crawler is full!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> crawler <span class="keyword">in</span> <span class="variable language_">self</span>.crawlers:</span><br><span class="line">            logger.info(<span class="string">f&#x27;crawler <span class="subst">&#123;crawler&#125;</span> to get proxy&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> proxy <span class="keyword">in</span> crawler.crawl():</span><br><span class="line">                <span class="variable language_">self</span>.redis.add(proxy)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.crawlers:</span><br><span class="line">            logger.error(<span class="string">&quot;import crawler error! please check crawler import.&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Getter 类就是获取器类，这其中定义了一个变量 POOL_UPPER_THRESHOLD 表示代理池的最大数量，然后定义了 is_over_threshold () 方法判断代理池是否已经达到了容量阈值，它就是调用了 RedisClient 的 count () 方法获取代理的数量，然后加以判断，如果数量达到阈值则返回 True，否则 False。如果不想加这个限制可以将此方法永久返回 True。 接下来定义了 run () 方法，首先判断了代理池是否达到阈值，然后在这里就调用了 Crawler 类的 CrawlFunc 属性，获取到所有以 crawl 开头的方法列表，依次通过 get_proxies () 方法调用，得到各个方法抓取到的代理，然后再利用 RedisClient 的 add () 方法加入数据库.</p></blockquote><h3 id="检测代理">检测代理</h3><blockquote><p>由于代理的数量非常多，为了提高代理的检测效率，我们在这里使用异步请求库 Aiohttp 来进行检测.</p></blockquote><ul><li>检测代码如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">VALID_STATUS_CODES = [<span class="number">200</span>]</span><br><span class="line">TEST_URL = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">BATCH_TEST_SIZE = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tester</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.redis = RedisClient()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">test_single_proxy</span>(<span class="params">self, proxy</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        测试单个代理</span></span><br><span class="line"><span class="string">        :param proxy: 单个代理</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        conn = aiohttp.TCPConnector(verify_ssl=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(connector=conn) <span class="keyword">as</span> session:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(proxy, <span class="built_in">bytes</span>):</span><br><span class="line">                    proxy = proxy.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                real_proxy = <span class="string">&#x27;http://&#x27;</span> + proxy</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;正在测试&#x27;</span>, proxy)</span><br><span class="line">                <span class="keyword">async</span> <span class="keyword">with</span> session.get(TEST_URL, proxy=real_proxy, timeout=<span class="number">15</span>) <span class="keyword">as</span> response:</span><br><span class="line">                    <span class="keyword">if</span> response.status <span class="keyword">in</span> VALID_STATUS_CODES:</span><br><span class="line">                        <span class="variable language_">self</span>.redis.<span class="built_in">max</span>(proxy)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&#x27;代理可用&#x27;</span>, proxy)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="variable language_">self</span>.redis.decrease(proxy)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&#x27;请求响应码不合法&#x27;</span>, proxy)</span><br><span class="line">            <span class="keyword">except</span> (ClientError, ClientConnectorError, TimeoutError, AttributeError):</span><br><span class="line">                <span class="variable language_">self</span>.redis.decrease(proxy)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;代理请求失败&#x27;</span>, proxy)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        测试主函数</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试器开始运行&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            proxies = <span class="variable language_">self</span>.redis.<span class="built_in">all</span>()</span><br><span class="line">            loop = asyncio.get_event_loop()</span><br><span class="line">            <span class="comment"># 批量测试</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(proxies), BATCH_TEST_SIZE):</span><br><span class="line">                test_proxies = proxies[i:i + BATCH_TEST_SIZE]</span><br><span class="line">                tasks = [<span class="variable language_">self</span>.test_single_proxy(proxy) <span class="keyword">for</span> proxy <span class="keyword">in</span> test_proxies]</span><br><span class="line">                loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">                time.sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;测试器发生错误&#x27;</span>, e.args)</span><br></pre></td></tr></table></figure><blockquote><p>上述代码：异步test_single_proxy () 方法，用来检测单个代理的可用情况，其参数就是被检测的代理；批量测试的最大值 BATCH_TEST_SIZE 为 100,避免当代理池过大时全部测试导致内存开销过大的问题, run () 方法里面获取了所有的代理列表，使用 Aiohttp 分配任务，启动运行</p></blockquote><h3 id="接口封装">接口封装</h3><ul><li>以 Web API 的形式暴露可用代理，使用一个比较轻量级的库 Flask 来实现这个接口模块：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, g</span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> RedisClient</span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">&#x27;app&#x27;</span>]</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_conn</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(g, <span class="string">&#x27;redis&#x27;</span>):</span><br><span class="line">        g.redis = RedisClient()</span><br><span class="line">    <span class="keyword">return</span> g.redis</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h2&gt;Welcome to Proxy Pool System&lt;/h2&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/random&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_proxy</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取随机可用代理</span></span><br><span class="line"><span class="string">    :return: 随机代理</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    conn = get_conn()</span><br><span class="line">    <span class="keyword">return</span> conn.random()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/count&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_counts</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取代理池总量</span></span><br><span class="line"><span class="string">    :return: 代理池总量</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    conn = get_conn()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(conn.count())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="资源调度模块">资源调度模块</h3><ul><li>调用以上所定义的三个模块，将以上三个模块通过多进程的形式运行，高效利用资源</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">TESTER_CYCLE = <span class="number">20</span></span><br><span class="line">GETTER_CYCLE = <span class="number">20</span></span><br><span class="line">TESTER_ENABLED = <span class="literal">True</span></span><br><span class="line">GETTER_ENABLED = <span class="literal">True</span></span><br><span class="line">API_ENABLED = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> getter <span class="keyword">import</span> Getter</span><br><span class="line"><span class="keyword">from</span> tester <span class="keyword">import</span> Tester</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Scheduler</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">schedule_tester</span>(<span class="params">self, cycle=TESTER_CYCLE</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        定时测试代理</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        tester = Tester()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;测试器开始运行&#x27;</span>)</span><br><span class="line">            tester.run()</span><br><span class="line">            time.sleep(cycle)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">schedule_getter</span>(<span class="params">self, cycle=GETTER_CYCLE</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        定时获取代理</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        getter = Getter()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;开始抓取代理&#x27;</span>)</span><br><span class="line">            getter.run()</span><br><span class="line">            time.sleep(cycle)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">schedule_api</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        开启API</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        app.run(API_HOST, API_PORT)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;代理池开始运行&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> TESTER_ENABLED:</span><br><span class="line">            tester_process = Process(target=<span class="variable language_">self</span>.schedule_tester)</span><br><span class="line">            tester_process.start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> GETTER_ENABLED:</span><br><span class="line">            getter_process = Process(target=<span class="variable language_">self</span>.schedule_getter)</span><br><span class="line">            getter_process.start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> API_ENABLED:</span><br><span class="line">            api_process = Process(target=<span class="variable language_">self</span>.schedule_api)</span><br><span class="line">            api_process.start()</span><br></pre></td></tr></table></figure><ul><li>以下版本兼容win平台打包exe：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> processors.server <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> processors.getter <span class="keyword">import</span> Getter</span><br><span class="line"><span class="keyword">from</span> processors.tester <span class="keyword">import</span> Tester</span><br><span class="line"><span class="keyword">from</span> run.setting <span class="keyword">import</span> APP_PROD_METHOD_GEVENT, APP_PROD_METHOD_MEINHELD, APP_PROD_METHOD_TORNADO, CYCLE_GETTER, CYCLE_TESTER, API_HOST, \</span><br><span class="line">    API_THREADED, API_PORT, ENABLE_SERVER, IS_PROD, APP_PROD_METHOD, \</span><br><span class="line">    ENABLE_GETTER, ENABLE_TESTER, IS_WINDOWS</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">tester_process, getter_process, server_process = <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Scheduler</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    scheduler</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_tester</span>(<span class="params">self, cycle=CYCLE_TESTER</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        run tester</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ENABLE_TESTER:</span><br><span class="line">            logger.info(<span class="string">&#x27;tester not enabled, exit&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        loop = asyncio.new_event_loop()</span><br><span class="line">        asyncio.set_event_loop(loop)</span><br><span class="line">        tester = Tester()</span><br><span class="line">        loop = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            logger.debug(<span class="string">f&#x27;tester loop <span class="subst">&#123;loop&#125;</span> start...&#x27;</span>)</span><br><span class="line">            tester.run()</span><br><span class="line"></span><br><span class="line">            loop += <span class="number">1</span></span><br><span class="line">            time.sleep(cycle)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_getter</span>(<span class="params">self, cycle=CYCLE_GETTER</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        run getter</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ENABLE_GETTER:</span><br><span class="line">            logger.info(<span class="string">&#x27;getter not enabled, exit&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        loop = asyncio.new_event_loop()</span><br><span class="line">        asyncio.set_event_loop(loop)</span><br><span class="line">        getter = Getter()</span><br><span class="line">        loop = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            logger.debug(<span class="string">f&#x27;getter loop <span class="subst">&#123;loop&#125;</span> start...&#x27;</span>)</span><br><span class="line">            getter.run()</span><br><span class="line">            loop += <span class="number">1</span></span><br><span class="line">            time.sleep(cycle)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_server</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        run server for api</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ENABLE_SERVER:</span><br><span class="line">            logger.info(<span class="string">&#x27;server not enabled, exit&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> IS_PROD:</span><br><span class="line">            <span class="keyword">if</span> APP_PROD_METHOD == APP_PROD_METHOD_GEVENT:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">from</span> gevent.pywsgi <span class="keyword">import</span> WSGIServer</span><br><span class="line">                <span class="keyword">except</span> ImportError <span class="keyword">as</span> e:</span><br><span class="line">                    logger.exception(e)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    http_server = WSGIServer((API_HOST, API_PORT), app)</span><br><span class="line">                    http_server.serve_forever()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> APP_PROD_METHOD == APP_PROD_METHOD_TORNADO:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">from</span> tornado.wsgi <span class="keyword">import</span> WSGIContainer</span><br><span class="line">                    <span class="keyword">from</span> tornado.httpserver <span class="keyword">import</span> HTTPServer</span><br><span class="line">                    <span class="keyword">from</span> tornado.ioloop <span class="keyword">import</span> IOLoop</span><br><span class="line">                <span class="keyword">except</span> ImportError <span class="keyword">as</span> e:</span><br><span class="line">                    logger.exception(e)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    http_server = HTTPServer(WSGIContainer(app))</span><br><span class="line">                    http_server.listen(API_PORT)</span><br><span class="line">                    IOLoop.instance().start()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> APP_PROD_METHOD == APP_PROD_METHOD_MEINHELD:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">import</span> meinheld</span><br><span class="line">                <span class="keyword">except</span> ImportError <span class="keyword">as</span> e:</span><br><span class="line">                    logger.exception(e)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    meinheld.listen((API_HOST, API_PORT))</span><br><span class="line">                    meinheld.run(app)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logger.error(<span class="string">&quot;unsupported APP_PROD_METHOD&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            app.run(host=API_HOST, port=API_PORT, threaded=API_THREADED, use_reloader=<span class="literal">False</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">global</span> tester_process, getter_process, server_process</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            logger.info(<span class="string">&#x27;starting ..&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> ENABLE_TESTER:</span><br><span class="line">                tester_process = threading.Thread(</span><br><span class="line">                    target=<span class="variable language_">self</span>.run_tester)</span><br><span class="line">                logger.info(<span class="string">f&#x27;starting tester, pid <span class="subst">&#123;tester_process.name&#125;</span>...&#x27;</span>)</span><br><span class="line">                tester_process.start()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ENABLE_GETTER:</span><br><span class="line">                getter_process = threading.Thread(</span><br><span class="line">                    target=<span class="variable language_">self</span>.run_getter)</span><br><span class="line">                logger.info(<span class="string">f&#x27;starting getter, pid <span class="subst">&#123;getter_process.name&#125;</span>...&#x27;</span>)</span><br><span class="line">                getter_process.start()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ENABLE_SERVER:</span><br><span class="line">                server_process = threading.Thread(</span><br><span class="line">                    target=<span class="variable language_">self</span>.run_server)</span><br><span class="line">                logger.info(<span class="string">f&#x27;starting server, pid <span class="subst">&#123;server_process.name&#125;</span>...&#x27;</span>)</span><br><span class="line">                server_process.start()</span><br><span class="line"></span><br><span class="line">            tester_process <span class="keyword">and</span> tester_process.join()</span><br><span class="line">            getter_process <span class="keyword">and</span> getter_process.join()</span><br><span class="line">            server_process <span class="keyword">and</span> server_process.join()</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            logger.info(<span class="string">&#x27;received keyboard interrupt signal&#x27;</span>)</span><br><span class="line">            <span class="comment"># tester_process and tester_process()</span></span><br><span class="line">            <span class="comment"># getter_process and getter_process.stop()</span></span><br><span class="line">            <span class="comment"># server_process and server_process.terminate()</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># must call join method before calling is_alive</span></span><br><span class="line">            tester_process <span class="keyword">and</span> tester_process.join()</span><br><span class="line">            getter_process <span class="keyword">and</span> getter_process.join()</span><br><span class="line">            server_process <span class="keyword">and</span> server_process.join()</span><br><span class="line">            logger.info(</span><br><span class="line">                <span class="string">f&#x27;tester is <span class="subst">&#123;<span class="string">&quot;alive&quot;</span> <span class="keyword">if</span> tester_process.is_alive() <span class="keyword">else</span> <span class="string">&quot;dead&quot;</span>&#125;</span>&#x27;</span>)</span><br><span class="line">            logger.info(</span><br><span class="line">                <span class="string">f&#x27;getter is <span class="subst">&#123;<span class="string">&quot;alive&quot;</span> <span class="keyword">if</span> getter_process.is_alive() <span class="keyword">else</span> <span class="string">&quot;dead&quot;</span>&#125;</span>&#x27;</span>)</span><br><span class="line">            logger.info(</span><br><span class="line">                <span class="string">f&#x27;server is <span class="subst">&#123;<span class="string">&quot;alive&quot;</span> <span class="keyword">if</span> server_process.is_alive() <span class="keyword">else</span> <span class="string">&quot;dead&quot;</span>&#125;</span>&#x27;</span>)</span><br><span class="line">            logger.info(<span class="string">&#x27;proxy terminated&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    scheduler = Scheduler()</span><br><span class="line">    scheduler.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>三个常量，TESTER_ENABLED、GETTER_ENABLED、API_ENABLED 都是布尔类型，True 或者 False。标明了测试模块、获取模块、接口模块的开关，如果为 True，则代表模块开启。 启动入口是 run () 方法，其分别判断了三个模块的开关，如果开启的话，就新建一个 Process 进程，设置好启动目标，然后调用 start () 方法运行.</p></blockquote><h2 id="运行与测试">运行与测试</h2><h3 id="运行代码">运行代码</h3><ul><li>采用如下形式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> run.scheduler <span class="keyword">import</span> Scheduler</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;ProxyPool&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--processor&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;processor to run&#x27;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># if processor set, just run it</span></span><br><span class="line">    <span class="keyword">if</span> args.processor:</span><br><span class="line">        <span class="built_in">getattr</span>(Scheduler(), <span class="string">f&#x27;run_<span class="subst">&#123;args.processor&#125;</span>&#x27;</span>)()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Scheduler().run()</span><br></pre></td></tr></table></figure><h3 id="编写测试代码">编写测试代码</h3><ul><li>request请求测试</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">PROXY_POOL_URL = <span class="string">&#x27;http://localhost:5555/random&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_proxy</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(PROXY_POOL_URL)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">    <span class="keyword">except</span> ConnectionError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="代理使用">代理使用</h2><ul><li>具体用法不一，举例如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy = get_proxy()</span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://&#x27;</span> + proxy,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;https://&#x27;</span> + proxy,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, proxies=proxies)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Error&#x27;</span>, e.args)</span><br></pre></td></tr></table></figure><ul><li>抑或</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&quot;proxyType&quot;</span>: <span class="string">&quot;manual&quot;</span>,</span><br><span class="line">    <span class="string">&quot;httpProxy&quot;</span>: <span class="string">&quot;http://&quot;</span> + constants.proxy_server_ip + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(constants.proxy_server_port),  <span class="comment"># 代理服务器地址和端口</span></span><br><span class="line">    <span class="string">&quot;ftpProxy&quot;</span>: <span class="string">&quot;ftp://&quot;</span> + constants.proxy_server_ip + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(constants.proxy_server_port),</span><br><span class="line">    <span class="string">&quot;sslProxy&quot;</span>: <span class="string">&quot;https://&quot;</span> + constants.proxy_server_ip + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(constants.proxy_server_port),</span><br><span class="line">    <span class="string">&quot;noProxy&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;proxyAutoconfigUrl&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"><span class="keyword">if</span> constants.spider_mode == <span class="string">&#x27;auto&#x27;</span>:</span><br><span class="line">    options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&#x27;--disable-dev-shm-usage&#x27;</span>)</span><br><span class="line">    logger.warning(<span class="string">&quot;current spider mode: auto spider image mode!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># open dev tools</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--auto-open-devtools-for-tabs&quot;</span>)</span><br><span class="line"><span class="comment"># 接受不安全证书</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--ignore-certificate-errors&quot;</span>)</span><br><span class="line"><span class="comment"># 设置日志偏好，禁用所有日志</span></span><br><span class="line">options = disabled_log_browser(options)</span><br><span class="line"><span class="comment"># 去除 “Chrome正受到自动化测试软件的控制”</span></span><br><span class="line">options.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line"><span class="comment"># 添加浏览器特征</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--disable-blink-features=AutomationControlled&quot;</span>)</span><br><span class="line"><span class="comment"># 模拟不同浏览器访问页面 减少被封风险</span></span><br><span class="line">user_agents = read_user_agent()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> user_agents:</span><br><span class="line">    <span class="comment"># 没有txt 使用default value</span></span><br><span class="line">    user_agents = [</span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 &#x27;</span></span><br><span class="line">        <span class="string">&#x27;Safari/537.36 &#x27;</span></span><br><span class="line">    ]</span><br><span class="line">    logger.warning(<span class="string">f&quot;not user-agent, use default user-agent: <span class="subst">&#123;user_agents[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 随机添加user-agent</span></span><br><span class="line">cur_user_agents = random.choice(user_agents).strip()</span><br><span class="line"><span class="comment"># add user-agent</span></span><br><span class="line"><span class="keyword">if</span> cur_user_agents:</span><br><span class="line">    options.add_argument(</span><br><span class="line">        <span class="string">f&quot;user-agent=<span class="subst">&#123;cur_user_agents&#125;</span>&quot;</span>)</span><br><span class="line">    logger.info(<span class="string">f&quot;current use user-agent: <span class="subst">&#123;cur_user_agents&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> proxy_flag == <span class="string">&#x27;True&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> constants.proxy_mode == <span class="string">&#x27;auto&#x27;</span>:</span><br><span class="line">        logger.info(<span class="string">&quot;cur spider use proxy is auto select proxy model.&quot;</span>)</span><br><span class="line">        proxy_item = get_proxy_item() <span class="comment"># 直接调用查询proxy接口即可</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> proxy_item:</span><br><span class="line">            logger.error(<span class="string">&quot;proxy_item None, will quit spider image!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">        logger.debug(<span class="string">f&quot;use proxy: <span class="subst">&#123;proxy_item&#125;</span>&quot;</span>)</span><br><span class="line">        proxy = &#123;</span><br><span class="line">            <span class="string">&quot;proxyType&quot;</span>: <span class="string">&quot;manual&quot;</span>,</span><br><span class="line">            <span class="string">&quot;httpProxy&quot;</span>: <span class="string">&quot;http://&quot;</span> + proxy_item,  <span class="comment"># 代理服务器地址和端口</span></span><br><span class="line">            <span class="string">&quot;ftpProxy&quot;</span>: <span class="string">&quot;ftp://&quot;</span> + proxy_item,</span><br><span class="line">            <span class="string">&quot;sslProxy&quot;</span>: <span class="string">&quot;https://&quot;</span> + proxy_item,</span><br><span class="line">            <span class="string">&quot;noProxy&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;proxyAutoconfigUrl&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment"># options.set_capability(&quot;proxy&quot;, proxy)</span></span><br><span class="line">    options.add_argument(<span class="string">&quot;--proxy-server=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(proxy[<span class="string">&quot;httpProxy&quot;</span>]))</span><br><span class="line">    logger.info(<span class="string">&quot;current use internal proxy, proxy content: &quot;</span> + <span class="built_in">str</span>(proxy[<span class="string">&#x27;httpProxy&#x27;</span>]))</span><br><span class="line">    <span class="keyword">if</span> constants.chrome_path != <span class="string">&#x27;None&#x27;</span>:</span><br><span class="line">        ser = Service()</span><br><span class="line">        ser.path = constants.chrome_path</span><br><span class="line">        <span class="comment"># 连接Edge浏览器</span></span><br><span class="line">        driver = webdriver.Chrome(service=ser, options=options)</span><br><span class="line">        logger.warning(<span class="string">&quot;user self define chrome driver exe!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        driver = webdriver.Chrome(options=options)</span><br><span class="line">        logger.info(<span class="string">&quot;use system default web driver!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="补充">补充</h2><h3 id="random-获取代理机制">random 获取代理机制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_best_proxy</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param data:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># same_max_value = []</span></span><br><span class="line">    block_split_num = <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> block_split_num &lt; <span class="built_in">len</span>(data) - <span class="number">1</span>:</span><br><span class="line">        length_data = <span class="built_in">int</span>(<span class="built_in">len</span>(data) / block_split_num)</span><br><span class="line">        index = <span class="built_in">int</span>(random.random() * length_data) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; length_data + <span class="number">2</span>:</span><br><span class="line">            logger.info(<span class="string">f&quot;data length: <span class="subst">&#123;<span class="built_in">len</span>(data)&#125;</span> &gt; <span class="subst">&#123;length_data + <span class="number">2</span>&#125;</span>, use random proxy: <span class="subst">&#123;index&#125;</span>&quot;</span>)</span><br><span class="line">            max_value = data[<span class="built_in">len</span>(data) - index]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.info(<span class="string">f&quot;data length: <span class="subst">&#123;<span class="built_in">len</span>(data)&#125;</span> &lt; <span class="subst">&#123;length_data + <span class="number">2</span>&#125;</span>, use max value！&quot;</span>)</span><br><span class="line">            max_value = data[<span class="built_in">len</span>(data) - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logger.info(<span class="string">f&quot;data length: <span class="subst">&#123;<span class="built_in">len</span>(data)&#125;</span> &lt; <span class="subst">&#123;block_split_num&#125;</span>, use max value！&quot;</span>)</span><br><span class="line">        max_value = data[<span class="built_in">len</span>(data) - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> max_value.string()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="base-crawel">base crawel</h3><ul><li>基础定义</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BaseCrawler</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    urls = []</span><br><span class="line"></span><br><span class="line"><span class="meta">    @retry(<span class="params">stop_max_attempt_number=<span class="number">3</span>, retry_on_result=<span class="keyword">lambda</span> x: x <span class="keyword">is</span> <span class="literal">None</span>, wait_fixed=<span class="number">2000</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fetch</span>(<span class="params">self, url, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            headers = Headers(headers=<span class="literal">True</span>).generate()</span><br><span class="line">            kwargs.setdefault(<span class="string">&#x27;timeout&#x27;</span>, GET_TIMEOUT)</span><br><span class="line">            kwargs.setdefault(<span class="string">&#x27;verify&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">            kwargs.setdefault(<span class="string">&#x27;headers&#x27;</span>, headers)</span><br><span class="line">            response = requests.get(url, **kwargs)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">                <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">except</span> (requests.ConnectionError, requests.ReadTimeout):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">self, html, url</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        used for parse html</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> proxy <span class="keyword">in</span> <span class="variable language_">self</span>.parse(html):</span><br><span class="line">            <span class="comment"># logger.info(f&#x27;fetched proxy &#123;proxy.string()&#125; from &#123;url&#125;&#x27;)</span></span><br><span class="line">            <span class="keyword">yield</span> proxy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">crawl</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        crawl main method</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> <span class="variable language_">self</span>.urls:</span><br><span class="line">                logger.info(<span class="string">f&#x27;fetching <span class="subst">&#123;url&#125;</span>&#x27;</span>)</span><br><span class="line">                html = <span class="variable language_">self</span>.fetch(url)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> html:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                time.sleep(<span class="number">.5</span>)</span><br><span class="line">                <span class="keyword">yield</span> <span class="keyword">from</span> <span class="variable language_">self</span>.process(html, url)</span><br><span class="line">        <span class="keyword">except</span> RetryError:</span><br><span class="line">            logger.error(</span><br><span class="line">                <span class="string">f&#x27;crawler <span class="subst">&#123;self&#125;</span> crawled proxy unsuccessfully, &#x27;</span></span><br><span class="line">                <span class="string">&#x27;please check if target url is valid or network issue&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>扩展应用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> schemas.proxy <span class="keyword">import</span> Proxy</span><br><span class="line"><span class="keyword">from</span> crawlers.base <span class="keyword">import</span> BaseCrawler</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">&#x27;https://www.zdaye.com/dayProxy/&#123;page&#125;.html&#x27;</span></span><br><span class="line">MAX_PAGE = <span class="number">5</span> * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZhandayeCrawler</span>(<span class="title class_ inherited__">BaseCrawler</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    zhandaye crawler, https://www.zdaye.com/dayProxy/</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    urls_catalog = [BASE_URL.<span class="built_in">format</span>(page=page) <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, MAX_PAGE)]</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;like Gecko) Chrome/83.0.4103.61 Safari/537.36 &#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    urls = []</span><br><span class="line">    ignore = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">crawl</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.crawl_catalog()</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> <span class="built_in">super</span>().crawl()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">crawl_catalog</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> <span class="variable language_">self</span>.urls_catalog:</span><br><span class="line">            logger.info(<span class="string">f&#x27;fetching <span class="subst">&#123;url&#125;</span>&#x27;</span>)</span><br><span class="line">            html = <span class="variable language_">self</span>.fetch(url, headers=<span class="variable language_">self</span>.headers)</span><br><span class="line">            <span class="variable language_">self</span>.parse_catalog(html)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_catalog</span>(<span class="params">self, html</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        parse html file to get proxies</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        doc = pq(html)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> doc(<span class="string">&#x27;#J_posts_list .thread_item div div p a&#x27;</span>).items():</span><br><span class="line">            url = <span class="string">&#x27;https://www.zdaye.com&#x27;</span> + item.attr(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">            logger.info(<span class="string">f&#x27;get detail url: <span class="subst">&#123;url&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.urls.append(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, html</span>):</span><br><span class="line">        doc = pq(html)</span><br><span class="line">        trs = doc(<span class="string">&#x27;.cont br&#x27;</span>).items()</span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">            line = tr[<span class="number">0</span>].tail</span><br><span class="line">            <span class="keyword">match</span> = re.search(<span class="string">r&#x27;(\d+\.\d+\.\d+\.\d+):(\d+)&#x27;</span>, line)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                host = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">                port = <span class="keyword">match</span>.group(<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">yield</span> Proxy(host=host, port=port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    crawler = ZhandayeCrawler()</span><br><span class="line">    <span class="keyword">for</span> proxy <span class="keyword">in</span> crawler.crawl():</span><br><span class="line">        <span class="built_in">print</span>(proxy)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spider_image_system_introduction</title>
      <link href="/2024/03/06/spider-image-system-introduction/"/>
      <url>/2024/03/06/spider-image-system-introduction/</url>
      
        <content type="html"><![CDATA[<h1>Spider Image System User Guide</h1><h2 id="Struct-design">Struct design</h2><ol><li>Spider <a href="http://pixiv.net">pixiv.net</a> img -&gt; search img -&gt; get url.</li><li>Replace domain -&gt; save url to txt.</li><li>According to url download image from txt content.</li><li>Spider gif image generate video.</li><li>Download gofile file.</li></ol><h2 id="Execute-method">Execute method</h2><ol><li>Run sis_v1.0.x.exe(windows platform).</li><li>Run ./src/run/sh/run.bat(windows platform).</li><li>Run ./src/run/sh/run.sh(linux platform).</li></ol><h2 id="Position">Position</h2><ul><li>If not visit <a href="http://pixiv.net">pixiv.net</a> website, could visit sd.2021.host or other url(example: <a href="http://sd.vv50.de">sd.vv50.de</a>) replace.</li><li>Other.</li></ul><h2 id="GUI">GUI</h2><ul><li>Pyqt5 paint main ui.</li></ul><h2 id="Technology-lib">Technology lib</h2><ol><li>selenium.</li><li>loguru.</li><li>requests.</li><li>Other(Read requirements.txt).</li></ol><h2 id="Folder">Folder</h2><ol><li>./data/href_url/ artwork url folder.</li><li>./data/img_url/ img url txt folder.</li><li>./data/*/images/ save img folder.</li><li>./data/video generate video folder.</li><li>./data/according_pid_download_image pid image download folder.</li><li>./data/face_detect_result face detect result folder.</li><li>./data/error_images error images folder.</li><li>./log_dir/ script run log folder.</li><li>Other see ./data/.</li></ol><h2 id="File">File</h2><ol><li>./data/download_final_image.json: final download image info.</li><li>./data/download_finished_txt.txt: already download keyword txt.</li><li>./data/error_image_txt.txt: download fail image save txt.</li><li>./data/spider_finished_keyword.txt: already spider finish keyword txt.</li><li>./data/spider_img_keyword_final.json: final spider keyword image json.</li></ol><h2 id="Other">Other</h2><ol><li>Self config constant val(Done).</li><li>Play all video(Done).</li><li>Autoplay all image(Done).</li><li>Auto spider image(Done).</li><li>System performance monitor(Done).</li><li>Online show image(Done).</li><li>Gif and image process(Done).</li><li>Face detect from downloaded image folder(Done).</li><li>Other small tools(Done).</li><li>Other…(to be continued…)</li></ol><ul><li>bugs 1 : 在类方法中不能使用@logger.catch注解方法，会出现以下错误：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">File <span class="string">&quot;C:\Users\Administrator\PycharmProjects\calmcar_sf_server\src\test\gui\ui_main.py&quot;</span>, line 130, <span class="keyword">in</span> ui_paint</span></span><br><span class="line">    app.exec_()</span><br><span class="line">    │   └ &lt;built-in method exec_&gt;</span><br><span class="line">    └ &lt;PyQt5.QtWidgets.QApplication object at 0x000002045EF19AF0&gt;</span><br><span class="line"></span><br><span class="line">TypeError: next_img() takes 1 positional argument but 3 were given</span><br></pre></td></tr></table></figure><ul><li>problem 1 on ubuntu: opencv-python与pyqt5冲突(问题解决)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 uninstall opencv-python</span><br><span class="line">sudo pip3 install opencv-python-headless</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QObject::moveToThread: Current thread (0x55f29a27e0e0) is not the object&#x27;s thread (0x55f29a946dd0).</span><br><span class="line">Cannot move to target thread (0x55f29a27e0e0)</span><br><span class="line"></span><br><span class="line">qt.qpa.plugin: Could not load the Qt platform plugin &quot;xcb&quot; in &quot;/usr/local/lib/python3.10/dist-packages/cv2/qt/plugins&quot; even though it was found.</span><br><span class="line">This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.</span><br><span class="line"></span><br><span class="line">Available platform plugins are: xcb, eglfs, linuxfb, minimal, minimalegl, offscreen, vnc, wayland-egl, wayland, wayland-xcomposite-egl, wayland-xcomposite-glx, webgl.</span><br><span class="line"></span><br><span class="line">Aborted</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Notice: if cannot start spider image, you need install google chrome explore, detail:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">File &quot;/usr/local/lib/python3.10/dist-packages/selenium/webdriver/chrome/webdriver.py&quot;, line 45, in __init__</span><br><span class="line">    super().__init__(</span><br><span class="line">  File &quot;/usr/local/lib/python3.10/dist-packages/selenium/webdriver/chromium/webdriver.py&quot;, line 49, in __init__</span><br><span class="line">    self.service.path = DriverFinder.get_path(self.service, options)</span><br><span class="line">    │    │       │      │            │        │    │        └ &lt;selenium.webdriver.chrome.options.Options object at 0x7f816cf3da20&gt;</span><br><span class="line">    │    │       │      │            │        │    └ &lt;selenium.webdriver.chrome.service.Service object at 0x7f816cf3da80&gt;</span><br><span class="line">    │    │       │      │            │        └ &lt;unprintable WebDriver object&gt;</span><br><span class="line">    │    │       │      │            └ &lt;staticmethod(&lt;function DriverFinder.get_path at 0x7f816eb9cb80&gt;)&gt;</span><br><span class="line">    │    │       │      └ &lt;class &#x27;selenium.webdriver.common.driver_finder.DriverFinder&#x27;&gt;</span><br><span class="line">    │    │       └ &lt;property object at 0x7f816eb5ebb0&gt;</span><br><span class="line">    │    └ &lt;selenium.webdriver.chrome.service.Service object at 0x7f816cf3da80&gt;</span><br><span class="line">    └ &lt;unprintable WebDriver object&gt;</span><br><span class="line">  File &quot;/usr/local/lib/python3.10/dist-packages/selenium/webdriver/common/driver_finder.py&quot;, line 41, in get_path</span><br><span class="line">    raise NoSuchDriverException(msg) from err</span><br><span class="line">          │                     └ &#x27;Unable to obtain driver for chrome using Selenium Manager.&#x27;</span><br><span class="line">          └ &lt;class &#x27;selenium.common.exceptions.NoSuchDriverException&#x27;&gt;</span><br><span class="line"></span><br><span class="line">selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome using Selenium Manager.; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location</span><br></pre></td></tr></table></figure><p>~ For solve problem, need install follow package:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt install chromium-browser</span><br><span class="line">sudo mkdir -p /home/czq/.local/share/applications</span><br><span class="line">sudo touch /home/czq/.local/share/applications/mimeapps.list</span><br><span class="line">chmod -R 777 /home/czq/</span><br><span class="line">xdg-open https://www.baidu.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">re run ./sh/run.sh to solve the problem</span></span><br></pre></td></tr></table></figure><ul><li>For use face detect, you need run follow command on ubuntu:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install libgtk2.0-dev pkg-config</span><br><span class="line">run ./sh/run_face_detect.sh # (on ubuntu os)</span><br></pre></td></tr></table></figure><ul><li>Install third-party libraries for project</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">recommend use</span></span><br><span class="line">pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">single lib install <span class="built_in">command</span></span></span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple opencv-contrib-python</span><br></pre></td></tr></table></figure><ul><li>Build project and publish pack</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pyinstaller main_test.spec #使用spec文件打包exe</span><br></pre></td></tr></table></figure><ul><li>solve not run on HECS(HuaWei ECS) from huawei cloud</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">see</span></span><br><span class="line">https://neucrack.com/p/407</span><br></pre></td></tr></table></figure><blockquote><p>wait a moment, code will open to all people, please visit follow url download exe or source code:<br><a href="https://gitee.com/caozhaoqi/spider_image_system">https://gitee.com/caozhaoqi/spider_image_system</a></p></blockquote><h1>See</h1><ul><li><a href="https://gitee.com/caozhaoqi">https://gitee.com/caozhaoqi</a></li><li><a href="https://gitee.com/caozhaoqi/spider_image_system">https://gitee.com/caozhaoqi/spider_image_system</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python使用selenium框架动态抓取指定内容</title>
      <link href="/2024/01/25/python-selenium-spider/"/>
      <url>/2024/01/25/python-selenium-spider/</url>
      
        <content type="html"><![CDATA[<h1>技术简介</h1><blockquote><p>Selenium是一个用于Web应用程序的自动化测试框架，通过模拟用户在浏览器中的操作，如点击按钮、输入文本等，来执行自动化测试。它支持多种浏览器和操作系统，并且可以通过各种编程语言编写测试脚本。Selenium的主要特点是易于使用、灵活性和稳定性，因此在Web测试领域被广泛使用。</p></blockquote><h1>安装使用</h1><h2 id="安装">安装</h2><ul><li>pip</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><h2 id="demo">demo</h2><ul><li>动态获取内容</li></ul><blockquote><p>demo中的案例通过selenium框架中的 webdriver.Chrome(options=options)方法获取google chrome启动后的驱动，通过操作driver.get(url_detail)方法动态获取当前网页内容，通过 time.sleep(search_delta_time)增加延迟以确保内容加载完成。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common <span class="keyword">import</span> NoSuchWindowException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 设置代理服务器</span></span><br><span class="line">    proxy = &#123;</span><br><span class="line">        <span class="string">&quot;proxyType&quot;</span>: <span class="string">&quot;manual&quot;</span>,</span><br><span class="line">        <span class="string">&quot;httpProxy&quot;</span>: <span class="string">&quot;http://&quot;</span> + constants.proxy_server_ip + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(constants.proxy_server_port),  <span class="comment"># 代理服务器地址和端口</span></span><br><span class="line">        <span class="string">&quot;ftpProxy&quot;</span>: <span class="string">&quot;http://&quot;</span> + constants.proxy_server_ip + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(constants.proxy_server_port),</span><br><span class="line">        <span class="string">&quot;sslProxy&quot;</span>: <span class="string">&quot;http://&quot;</span> + constants.proxy_server_ip + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(constants.proxy_server_port),</span><br><span class="line">        <span class="string">&quot;noProxy&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;proxyAutoconfigUrl&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建浏览器驱动程序并设置代理参数</span></span><br><span class="line">    options = webdriver.ChromeOptions()</span><br><span class="line">    <span class="keyword">if</span> proxy_flag == <span class="string">&#x27;True&#x27;</span>:</span><br><span class="line">        options.set_capability(<span class="string">&quot;proxy&quot;</span>, proxy)</span><br><span class="line">        logger.info(<span class="string">&quot;current use internal proxy, proxy content: &quot;</span> + <span class="built_in">str</span>(proxy[<span class="string">&#x27;httpProxy&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">    driver = webdriver.Chrome(options=options)</span><br><span class="line">    mode = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    url = <span class="string">&quot;https://&quot;</span> + visit_url + <span class="string">&quot;/tags/&quot;</span> + key_word + <span class="string">&quot;/artworks?&quot;</span> + mode</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url_detail = url_process_page(url, current_page=cur_page)</span><br><span class="line">        logger.info(<span class="string">&quot;current use url : &quot;</span> + <span class="built_in">str</span>(url_detail))</span><br><span class="line">        driver.get(url_detail)</span><br><span class="line">        <span class="comment"># 等待图片加载完成</span></span><br><span class="line">        time.sleep(search_delta_time)</span><br><span class="line">        logger.debug(<span class="string">&quot;start load href save url to txt.&quot;</span>)</span><br><span class="line">        load_save_flag = load_href_save(driver, key_word)</span><br><span class="line">        <span class="keyword">if</span> load_save_flag:</span><br><span class="line">            <span class="comment"># 使用函数</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                save_img_url(driver, key_word)</span><br><span class="line">                cur_page += <span class="number">1</span></span><br><span class="line">                logger.success(<span class="string">&quot;save img all finish，current page:  &quot;</span> + <span class="built_in">str</span>(cur_page))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> NoSuchWindowException <span class="keyword">as</span> nswe:</span><br><span class="line">                logger.warning(<span class="string">&quot;chrome force exit! detail:&quot;</span> + <span class="built_in">str</span>(nswe))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 循环抓取结束 断掉浏览器 重置标志位、</span></span><br><span class="line">    <span class="variable language_">self</span>.success_tips()</span><br><span class="line">    constants.spider_image_flag = <span class="literal">False</span></span><br><span class="line">    logger.warning(<span class="string">&quot;google chrome will exit! &quot;</span>)</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure><ul><li>过滤筛选数据</li></ul><blockquote><p>下方代码通过driver.find_elements(By.CSS_SELECTOR, “a”)获取指定html元素值，并存储值列表，后期可对列表数据进行筛选，以此完成目标数据的动态抓取</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_href_save</span>(<span class="params">driver, key_word</span>):</span><br><span class="line">    image_urls_list = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        image_elements = driver.find_elements(By.CSS_SELECTOR, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> image_element <span class="keyword">in</span> image_elements:</span><br><span class="line">            driver.execute_script(<span class="string">&quot;return arguments[0].href;&quot;</span>, image_element)</span><br><span class="line">            image_urls_list.append(image_url)</span><br><span class="line">            logger.debug(<span class="string">&quot;load href and start save img url: &quot;</span> + image_url)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> un_e:</span><br><span class="line">        logger.error(<span class="string">&quot;Error, unknown error, detail:&quot;</span> + <span class="built_in">str</span>(un_e))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python多脚本的集成化管理（微服务，Nginx）</title>
      <link href="/2023/12/29/micro-service-py/"/>
      <url>/2023/12/29/micro-service-py/</url>
      
        <content type="html"><![CDATA[<h1>基本思想</h1><blockquote><p>通过微服务、或nginx通过某种方式集成管理各个分散python脚本</p></blockquote><h2 id="技术路线">技术路线</h2><h3 id="Nginx代理转发">Nginx代理转发</h3><blockquote><p>通过配置脚本微服务web功能，通过nginx转发API。在此之前需要手动编写脚本web功能和API接口。</p></blockquote><h3 id="nginx-配置文件编写">nginx 配置文件编写</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   #对外监听端口</span><br><span class="line">       listen       9001;</span><br><span class="line">       #主机名称</span><br><span class="line">       server_name  localhost;   </span><br><span class="line">       #规则：当请求路径包含‘eduservice’的时候转发到“http://loclahost:8001”</span><br><span class="line">       # ~ 代表正则匹配，不加~ 则为完全匹配才能执行</span><br><span class="line">       #请求路径</span><br><span class="line">       location ~ /eduservice/ &#123;</span><br><span class="line">       #转发地址</span><br><span class="line">       proxy_pass http://localhost:8001;</span><br><span class="line">       &#125;</span><br><span class="line">       #规则：当请求路径包含‘eduoss’的时候转发到“http://loclahost:8002”</span><br><span class="line">       location ~ /eduoss/ &#123;</span><br><span class="line">       proxy_pass http://localhost:8002;</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="原py文件改造">原py文件改造</h3><h4 id="主py文件编写">主py文件编写</h4><ul><li><a href="http://main.py">main.py</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from flask import Flask</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> nameko.standalone.rpc <span class="keyword">import</span> ClusterRpcProxy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> app.http_server.log.log_base <span class="keyword">import</span> LOG_DIR</span><br><span class="line"><span class="keyword">from</span> app.http_server.log.log_config <span class="keyword">import</span> InterceptHandler, format_record</span><br><span class="line"><span class="keyword">from</span> app.http_server.router.router <span class="keyword">import</span> api_router</span><br><span class="line"><span class="keyword">from</span> app.run.constant <span class="keyword">import</span> app_port, log_man_input_path, log_man_out_path, publish_date, build_date, py_server_version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_app</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    APP init : log router ...</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># fast api app 启动项配置与启动</span></span><br><span class="line">    app = FastAPI(title=<span class="string">&quot;CTS Log Reporter&quot;</span>, version=<span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">                  description=<span class="string">&quot;Calmcar Tools System: Log analysis and reporter platform&quot;</span>, debug=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 路由引入</span></span><br><span class="line">    app.include_router(router=api_router, prefix=<span class="string">&quot;/api/v1&quot;</span>)</span><br><span class="line">    <span class="comment"># 日志配置与捕获</span></span><br><span class="line">    logging.getLogger().handlers = [InterceptHandler()]</span><br><span class="line">    logger.configure(</span><br><span class="line">        handlers=[&#123;<span class="string">&quot;sink&quot;</span>: sys.stdout, <span class="string">&quot;level&quot;</span>: logging.DEBUG, <span class="string">&quot;format&quot;</span>: format_record&#125;])</span><br><span class="line">    logger.add(LOG_DIR, encoding=<span class="string">&#x27;utf-8&#x27;</span>, rotation=<span class="string">&quot;12:00&quot;</span>)</span><br><span class="line">    logger.debug(<span class="string">&#x27;日志系统已加载... 当前日志所在目录：&#x27;</span> + LOG_DIR)</span><br><span class="line">    logging.getLogger(<span class="string">&quot;uvicorn.access&quot;</span>).handlers = [InterceptHandler()]</span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = init_app()</span><br><span class="line"><span class="comment"># MQ配置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">&#x27;main:app&#x27;</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=app_port, reload=<span class="literal">True</span>, workers=<span class="number">4</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="API路由定义">API路由定义</h4><ul><li><a href="http://router.py">router.py</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> APIRouter</span><br><span class="line"><span class="keyword">from</span> app.http_server.view <span class="keyword">import</span> log_process</span><br><span class="line"></span><br><span class="line">api_router = APIRouter()</span><br><span class="line"><span class="comment"># 模块路由配置</span></span><br><span class="line">api_router.include_router(log_process.router, prefix=<span class="string">&quot;/shell&quot;</span>, tags=[<span class="string">&#x27;脚本操作&#x27;</span>])</span><br></pre></td></tr></table></figure><h4 id="API-接口定义">API 接口定义</h4><ul><li>api_manage.py</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> APIRouter</span><br><span class="line"><span class="keyword">from</span> nameko.standalone.rpc <span class="keyword">import</span> ClusterRpcProxy</span><br><span class="line"></span><br><span class="line">config_mq = &#123;<span class="string">&#x27;AMQP_URI&#x27;</span>: <span class="string">&quot;amqp://guest:guest@192.168.163.129:5672&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router = APIRouter()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@router.get(<span class="params"><span class="string">&#x27;/hello_world&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_service</span>():</span><br><span class="line">    <span class="keyword">with</span> ClusterRpcProxy(config_mq) <span class="keyword">as</span> rpc:</span><br><span class="line">        <span class="comment"># 消费者调用微服务(生产者)，获取服务（生产者）的返回值</span></span><br><span class="line">        result = rpc.generate_service.hello_world(msg=<span class="string">&quot;xag msg&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> result, <span class="number">200</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="微服务网关转发">微服务网关转发</h2><blockquote><p>如图：代理网关转发来自web前端请求，并根据api转发对应微服务脚本。Gateway与微服务之间采用gRPC，微服务之间采用http（REST API）通信。</p></blockquote><p><img src="/2023/12/29/micro-service-py/struct_py.png" class="lazyload placeholder" data-srcset="/2023/12/29/micro-service-py/struct_py.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="nameko">nameko</h3><p><img src="/2023/12/29/micro-service-py/rabbitmq_struct.png" class="lazyload placeholder" data-srcset="/2023/12/29/micro-service-py/rabbitmq_struct.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><blockquote><p>Nameko框架采用生产者-消费者模式。</p></blockquote><h4 id="搭建nameko框架">搭建nameko框架</h4> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install nameko</span><br></pre></td></tr></table></figure><h4 id="构建生产者服务">构建生产者服务</h4> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># producer_service.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> nameko.rpc <span class="keyword">import</span> rpc</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenerateService</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># 定义微服务名称 此处调用指定脚本</span></span><br><span class="line">    name = <span class="string">&quot;generate_service&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @rpc</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello_world</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hello,i am been called by customer（消费者）,返回消息：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(msg))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!I Am a msg from producer!&quot;</span></span><br></pre></td></tr></table></figure><h4 id="通过rabbitmq注册微服务">通过rabbitmq注册微服务</h4> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册服务</span></span><br><span class="line"><span class="comment"># producer_service：目标文件</span></span><br><span class="line"><span class="comment"># admin:admin：MQ用户名及密码</span></span><br><span class="line"><span class="comment"># ip地址:5672：MQ服务器ip地址及应用端口号</span></span><br><span class="line"><span class="comment"># my_vhost：虚拟机名</span></span><br><span class="line">nameko run producer_service --broker amqp://admin:admin@ip地址:5672/my_vhost</span><br></pre></td></tr></table></figure><h4 id="消费者调用脚本微服务">消费者调用脚本微服务</h4> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">config_mq = &#123;<span class="string">&#x27;AMQP_URI&#x27;</span>: <span class="string">&quot;amqp://guest:guest@192.168.163.129:5672&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router = APIRouter()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@router.get(<span class="string">&#x27;/hello_world&#x27;</span>)</span><br><span class="line">def call_service():</span><br><span class="line">    with ClusterRpcProxy(config_mq) as rpc:</span><br><span class="line">        <span class="comment"># 消费者调用微服务(生产者)，获取服务（生产者）的返回值</span></span><br><span class="line">        result = rpc.generate_service.hello_world(msg=<span class="string">&quot;xag msg&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回结果</span></span><br><span class="line">        <span class="built_in">return</span> result, 200</span><br></pre></td></tr></table></figure><h4 id="生产者服务启动方式">生产者服务启动方式</h4><ul><li>命令行启动</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameko run generate_service --broker amqp://guest:guest@192.168.163.129:5672/</span><br></pre></td></tr></table></figure><ul><li>配置文件启动</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.yml</span></span><br><span class="line"><span class="attr">AMQP_URI:</span> <span class="string">&#x27;pyamqp://guest:guest@localhost&#x27;</span></span><br><span class="line"><span class="attr">WEB_SERVER_ADDRESS:</span> <span class="string">&#x27;0.0.0.0:8000&#x27;</span></span><br><span class="line"><span class="attr">rpc_exchange:</span> <span class="string">&#x27;nameko-rpc&#x27;</span></span><br><span class="line"><span class="attr">max_workers:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">parent_calls_tracked:</span> <span class="number">10</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">LOGGING:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">handlers:</span></span><br><span class="line">        <span class="attr">console:</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">logging.StreamHandler</span></span><br><span class="line">    <span class="attr">root:</span></span><br><span class="line">        <span class="attr">level:</span> <span class="string">DEBUG</span></span><br><span class="line">        <span class="attr">handlers:</span> [<span class="string">console</span>]</span><br><span class="line"><span class="comment"># 启动命令行：</span></span><br><span class="line"><span class="comment"># nameko run --config config.yml service1</span></span><br></pre></td></tr></table></figure><ul><li>结果示例：</li></ul><blockquote><p>调用者<br><img src="/2023/12/29/micro-service-py/result-nginx.png" class="lazyload placeholder" data-srcset="/2023/12/29/micro-service-py/result-nginx.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"><br>被调用者<br><img src="/2023/12/29/micro-service-py/result-pro.png" class="lazyload placeholder" data-srcset="/2023/12/29/micro-service-py/result-pro.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p></blockquote><h4 id="原web服务改造">原web服务改造</h4><blockquote><p>将API迁移至消费者中，仅保留具体执行方法；安装nameko，编写生产者通过rpc调用的方法。</p></blockquote><h3 id="rabbitmq服务构建">rabbitmq服务构建</h3><h4 id="构建docker容器">构建docker容器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq</span><br><span class="line">docker run -d --hostname localhost --name rabbitmq -p 15672:15672 -p 5672:5672 rabbitmq:management</span><br></pre></td></tr></table></figure><h4 id="web页面管理">web页面管理</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps </span><br><span class="line">docker <span class="built_in">exec</span> -it contain ID /bin/bash</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><h2 id="Bali">Bali</h2><blockquote><p>Bali is a framework integrate FastAPI and gRPC. If you want to provide both HTTP and RPC, it can improve development efficiency.<br>业务代码分布为在两个层次：Model 层和 Resource 层。Model 层是一个 Fat Model 模型，除了字段定义，还有与 Model 相关的一些逻辑；Resource 层提供同时兼容 HTTP/RPC 的资源服务。遵循 RESTful 及 gRPC 的开发指南定义了几个标准方法。</p></blockquote><h3 id="install">install</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Bali framework</span></span><br><span class="line">pip install bali-core </span><br><span class="line"></span><br><span class="line"><span class="comment"># Bali command line tool </span></span><br><span class="line">pip install bali-cli </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="application-create">application create</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> greeter_server</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialized App </span></span><br><span class="line">app = Bali()</span><br><span class="line"><span class="comment"># Updated settings</span></span><br><span class="line">app.settings(base_settings=&#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Bali App&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="app-start">app start</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># With bali-cli </span></span><br><span class="line">bali run http</span><br><span class="line">bali run rpc</span><br><span class="line">bali run event</span><br><span class="line"></span><br><span class="line">python main.py run --http  <span class="comment"># launch HTTP in development mode </span></span><br><span class="line">python main.py run --rpc  <span class="comment"># launch RPC </span></span><br><span class="line">python main.py run --event  <span class="comment"># launch Event </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="test-demo">test demo</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">创建gRPC 测试代码</span><br><span class="line"><span class="keyword">from</span> bali.tests <span class="keyword">import</span> GRPCTestBase</span><br><span class="line"><span class="keyword">from</span> service.demo <span class="keyword">import</span> demo_service, demo_pb2, demo_pb2_grpc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemoRPC</span>(<span class="title class_ inherited__">GRPCTestBase</span>):</span><br><span class="line">    server_class = demo_service.DemoService  <span class="comment"># Provided service </span></span><br><span class="line"></span><br><span class="line">    pb2 = demo_pb2  <span class="comment"># Provided pb2</span></span><br><span class="line">    pb2_grpc = demo_pb2_grpc  <span class="comment"># Provided pb2 grpc</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup_method</span>(<span class="params">self</span>):  <span class="comment"># Pytest setup </span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown_method</span>(<span class="params">self</span>):  <span class="comment"># Pytest teardown</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>See</h1><ul><li>1.<a href="https://segmentfault.com/a/1190000041230541">https://segmentfault.com/a/1190000041230541</a></li><li>2.<a href="https://github.com/nameko/nameko">https://github.com/nameko/nameko</a></li><li>3.<a href="https://github.com/bali-framework/bali">https://github.com/bali-framework/bali</a></li><li>4.<a href="https://bali-framework.github.io/bali/">https://bali-framework.github.io/bali/</a></li><li>5.<a href="https://www.jianshu.com/p/1979844c6bee">https://www.jianshu.com/p/1979844c6bee</a></li><li>6.<a href="https://www.oschina.net/p/bali">https://www.oschina.net/p/bali</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SMB共享服务python脚本操作文件上传下载</title>
      <link href="/2023/12/29/smb-py-operation/"/>
      <url>/2023/12/29/smb-py-operation/</url>
      
        <content type="html"><![CDATA[<h1>简介</h1><blockquote><p>NAS（Network Attached Storage：网络附属存储），连接在网络上，具备资料存储功能的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。<br>NAS设备一般支持多计算机平台，用户通过网络支持协议可进入相同的文档，因而NAS设备无需改造即可用于混合Unix/Windows NT局域网内。<br>NAS本身能够支持多种协议（如 NFS、 CIFS、 FTP、 HTTP等），而且能够支持各种操作系统。通过任何一台工作站，采用 IE或 Netscape浏览器就可以对NAS设备进行直观方便的管理。<br>SMB是一个协议名，全称是Server Message Block（服务器消息快协议），用于在计算机间共享文件、打印机、串口等，电脑上的网上邻居由它实现。端口445</p></blockquote><ul><li>windows</li></ul><blockquote><p>文件共享是指主动地在网络上共享自己的计算机文件。一般文件共享使用P2P模式，文件本身存在用户本人的个人电脑上。大多数参加文件共享的人也同时下载其他用户提供的共享文件。有时这两个行动是连在一起的。在很早期的windows中(windows2000以下)，文件共享服务是利用TCP的139端口实现的，服务名是SMB。后来，微软又把SMB改名为CIFS协议，并且使用的是TCP的445端口</p></blockquote><h2 id="py第三方库">py第三方库</h2><ul><li>pysmb包下载</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install pysmb</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">pip3 install pysmb</span><br></pre></td></tr></table></figure><h2 id="共享文件挂载">共享文件挂载</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use k:  \\10.96.10.59\c$ </span><br></pre></td></tr></table></figure><ul><li>常用命令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net share ipc$    /delete               关闭ipc默认共享</span><br><span class="line">•net share admin$  /delete          关闭admin账户目录共享</span><br><span class="line">•net share  c$ /delete                   关闭c盘默认共享</span><br><span class="line">•net share  d$ /delete                   关闭d盘默认共享</span><br></pre></td></tr></table></figure><h1>案例</h1><h2 id="smb服务配置">smb服务配置</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> smb.SMBConnection <span class="keyword">import</span> SMBConnection</span><br><span class="line">host=<span class="string">&quot;xxx.xxx.xxx.xxx&quot;</span>  <span class="comment">#ip或域名，改成你自己的</span></span><br><span class="line">username=<span class="string">&quot;xxxxxx&quot;</span> <span class="comment">#用户名，改成你自己的</span></span><br><span class="line">password=<span class="string">&quot;xxxxxx&quot;</span> <span class="comment">#密码，改成你自己的</span></span><br><span class="line">conn=SMBConnection(username,password,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,use_ntlm_v2 = <span class="literal">True</span>)</span><br><span class="line">result = conn.connect(host, <span class="number">445</span>) <span class="comment">#smb协议默认端口445</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="smb服务连接与文件上传下载">smb服务连接与文件上传下载</h2><ul><li>上传</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">localFile=<span class="built_in">open</span>(<span class="string">&quot;本地文件路径&quot;</span>,<span class="string">&quot;rb&quot;</span>) </span><br><span class="line"><span class="comment">#rb代表read+binary模式，即“读二进制文件”</span></span><br><span class="line"><span class="comment">#打开本地文件，注意如果是二进制文件，比如zip包，需要加上参数b，即binary模式，默认是t模式，即text文本模式。</span></span><br><span class="line"><span class="comment">#示例：localFile=open(&quot;/Users/devnn/Desktop/test.zip&quot;,&quot;rb&quot;) </span></span><br><span class="line"></span><br><span class="line">conn.storeFile(<span class="string">&quot;共享文件夹名称&quot;</span>,<span class="string">&quot;存放路径&quot;</span>,localFile) </span><br><span class="line"><span class="comment">#“共享文件夹名称”是一个文件夹，即你使用smb共享的那个文件夹。“存放路径”是相对共享文件夹下的文件。</span></span><br><span class="line"><span class="comment">#上传文件到smb服务器,默认超时30秒，可以添加参数修改:timeout=xx。</span></span><br><span class="line"><span class="comment">#示例：conn.storeFile(&quot;test&quot;,&quot;test1/test2/test3.zip&quot;,localFile) </span></span><br><span class="line"></span><br><span class="line">localFile.close() </span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;上传成功&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>下载</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">localFile=<span class="built_in">open</span>(<span class="string">&quot;下载后的文件路径&quot;</span>,<span class="string">&quot;wb&quot;</span>) </span><br><span class="line"><span class="comment">#创建本地文件，注意是下载二进制文件，比如zip包，需要加上参数b，即binary模式，默认是t模式，即text文本模式。</span></span><br><span class="line"><span class="comment">#示例：localFile=open(&quot;/Users/devnn/Desktop/test.zip&quot;,&quot;wb&quot;) </span></span><br><span class="line"></span><br><span class="line">conn.retrieveFile(<span class="string">&quot;共享文件夹名称&quot;</span>,<span class="string">&quot;文件所在路径&quot;</span>,localFile) </span><br><span class="line"><span class="comment">#从smb服务器下载文件到本地,默认超时30秒，可以修改:timeout=xx。“文件所在路径”是相对共享文件夹的路径，不需要加&quot;/&quot;.</span></span><br><span class="line"><span class="comment">#示例：conn.retrieveFile(&quot;test&quot;,&quot;test1/test2/test3.zip&quot;,localFile)</span></span><br><span class="line"></span><br><span class="line">localFile.close() </span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;下载成功&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="示例如下：">示例如下：</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">host = <span class="string">&quot;2.2.2.2&quot;</span>  <span class="comment"># ip或域名，改成你自己的</span></span><br><span class="line">username = <span class="string">&quot;root&quot;</span>  <span class="comment"># 用户名，改成你自己的</span></span><br><span class="line">password = <span class="string">&quot;123134&quot;</span>  <span class="comment"># 密码，改成你自己的</span></span><br><span class="line">my_name = <span class="string">&quot;&quot;</span>  <span class="comment"># 这个随便，可以为空字符串</span></span><br><span class="line">remote_name = <span class="string">&quot;&quot;</span>  <span class="comment"># 这个是共享主机的主机名，listShares会用到，不用listShares的话可以为空字符串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file_smb_server</span>(<span class="params">tad4_mf4_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param tad4_mf4_path:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># path_list = []</span></span><br><span class="line">    <span class="comment"># comment_list = []</span></span><br><span class="line">    <span class="comment"># file_name_list = []</span></span><br><span class="line">    root_path = <span class="string">r&quot;C:\Users\Administrator\Desktop\t\demo\test\mdf&quot;</span></span><br><span class="line">    <span class="comment"># for share in conn.listShares():</span></span><br><span class="line">    <span class="comment">#     logger.info(share.name)</span></span><br><span class="line">    (file_path, file_name) = os.path.split(tad4_mf4_path)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(root_path + <span class="string">&quot;\\&quot;</span> + file_name):</span><br><span class="line">        logger.warning(<span class="string">&quot;file exists , skip download file&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> root_path + <span class="string">&quot;\\&quot;</span> + file_name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        conn = SMBConnection(username, password, my_name, remote_name, is_direct_tcp=<span class="literal">True</span>)</span><br><span class="line">        result = conn.connect(host, <span class="number">445</span>)  <span class="comment"># smb协议默认端口445</span></span><br><span class="line">        logger.success(<span class="string">&quot;login ntfs smb server success !&quot;</span>, result)</span><br><span class="line">        logger.info(<span class="string">&quot; download file .&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(root_path + <span class="string">&quot;\\&quot;</span> + file_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fw:</span><br><span class="line">            conn.retrieveFile(<span class="string">&quot;shared&quot;</span>, tad4_mf4_path, fw)</span><br><span class="line">        <span class="keyword">return</span> root_path + <span class="string">&quot;\\&quot;</span> + file_name</span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于CLion IDE的CPP项目构建与运行</title>
      <link href="/2023/12/01/cpp-project-build-clion/"/>
      <url>/2023/12/01/cpp-project-build-clion/</url>
      
        <content type="html"><![CDATA[<h1>基于Clion IDE的CPP项目构建与运行</h1><h2 id="工具基本信息">工具基本信息</h2><h3 id="1-CLion">1.CLion</h3><blockquote><p>CLion:<br>A cross-platform IDE for C and C++<br>CLion takes a lot of the toil out of C++, allowing me to concentrate on the interesting part: problem solving.</p></blockquote><ul><li>下载地址</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.jetbrains.com/clion/download/#section=windows</span><br></pre></td></tr></table></figure><h3 id="2-MingW">2.MingW</h3><blockquote><p>A complete runtime environment for GCC &amp; LLVMfor 32 and 64 bit Windows</p></blockquote><ul><li>下载地址（x64、posix、.seh版本）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/</span><br></pre></td></tr></table></figure><ul><li>如图<br><img src="/2023/12/01/cpp-project-build-clion/mingw-version.png" class="lazyload placeholder" data-srcset="/2023/12/01/cpp-project-build-clion/mingw-version.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ul><h3 id="3-CMake">3.CMake</h3><blockquote><p>CMake允许开发者编写一种平台无关的 CMakeList.txt 文件来定制整个编译流程，然后再根据目标用户的平台进一步生成所需的本地化 Makefile 和工程文件</p></blockquote><ul><li>基本指令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required：指定运行此配置文件所需的 CMake 的最低版本；</span><br><span class="line">project：参数值是 Demo1，该命令表示项目的名称是 Demo1 。</span><br><span class="line">add_executable：将名为 main.cc 的源文件编译成一个名称为 Demo 的可执行文件</span><br><span class="line"><span class="comment"># 查找当前目录下的所有源文件</span></span><br><span class="line"><span class="comment"># 并将名称保存到 DIR_LIB_SRCS 变量</span></span><br><span class="line">aux_source_directory(. DIR_LIB_SRCS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成链接库</span></span><br><span class="line">add_library (MathFunctions <span class="variable">$&#123;DIR_LIB_SRCS&#125;</span>)</span><br></pre></td></tr></table></figure><ul><li>举例</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># CMake 最低版本号要求</span><br><span class="line"><span class="built_in">cmake_minimum_required</span> (VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"># 项目信息</span><br><span class="line"><span class="built_in">project</span> (Demo4)</span><br><span class="line"></span><br><span class="line"># 加入一个配置头文件，用于处理 CMake 对源码的设置</span><br><span class="line"><span class="built_in">configure_file</span> (</span><br><span class="line">  <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/config.h.in&quot;</span></span><br><span class="line">  <span class="string">&quot;$&#123;PROJECT_BINARY_DIR&#125;/config.h&quot;</span></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"># 是否使用自己的 MathFunctions 库</span><br><span class="line"><span class="built_in">option</span> (USE_MYMATH</span><br><span class="line">       <span class="string">&quot;Use provided math implementation&quot;</span> ON)</span><br><span class="line"></span><br><span class="line"># 是否加入 MathFunctions 库</span><br><span class="line"><span class="keyword">if</span> (USE_MYMATH)</span><br><span class="line">  <span class="built_in">include_directories</span> (<span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/math&quot;</span>)</span><br><span class="line">  <span class="built_in">add_subdirectory</span> (math)  </span><br><span class="line">  <span class="built_in">set</span> (EXTRA_LIBS $&#123;EXTRA_LIBS&#125; MathFunctions)</span><br><span class="line"><span class="built_in">endif</span> (USE_MYMATH)</span><br><span class="line"></span><br><span class="line"># 查找当前目录下的所有源文件</span><br><span class="line"># 并将名称保存到 DIR_SRCS 变量</span><br><span class="line"><span class="built_in">aux_source_directory</span>(. DIR_SRCS)</span><br><span class="line"></span><br><span class="line"># 指定生成目标</span><br><span class="line"><span class="built_in">add_executable</span>(Demo $&#123;DIR_SRCS&#125;)</span><br><span class="line"><span class="built_in">target_link_libraries</span> (Demo  $&#123;EXTRA_LIBS&#125;)</span><br></pre></td></tr></table></figure><h2 id="工具安装构建">工具安装构建</h2><h3 id="CLion">CLion</h3><h4 id="1-新建cpp项目">1.新建cpp项目</h4><blockquote><p>如图<br><img src="/2023/12/01/cpp-project-build-clion/clion_new_project.png" class="lazyload placeholder" data-srcset="/2023/12/01/cpp-project-build-clion/clion_new_project.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p></blockquote><h4 id="2-编写测试代码">2.编写测试代码</h4><ul><li>1.src/test.cpp</li></ul><blockquote><p>定义socket套机字，构建socket服务端；实现登录、登出、数据转发等功能</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tcpSocket.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Clog.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tcpSocket/MySocket.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;WebServer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tinyxml2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;xmlParser.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户�?信息结构�?</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SockInfo</span> &#123;</span><br><span class="line">    sockaddr_in addr;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录状态记录</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> UserName[<span class="number">32</span>];</span><br><span class="line">    <span class="type">int</span> SocketID;</span><br><span class="line">&#125;loginPool;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 用户登录验证代码部分</span></span><br><span class="line"></span><br><span class="line">std::vector&lt;loginPool&gt; login_pool_vect;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查用户ID是否存在与容器内,如果存在则返回用户名</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_login</span><span class="params">(std::vector&lt;loginPool&gt; &amp;ptr, <span class="type">int</span> socket_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; x : ptr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x.SocketID == socket_id)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户登录验证</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">login</span><span class="params">(<span class="type">char</span> *username, <span class="type">char</span> *password, <span class="type">int</span> socket_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">strcmp</span>(username, <span class="string">&quot;admin&quot;</span>) == <span class="number">0</span>) &amp;&amp; (<span class="built_in">strcmp</span>(password, <span class="string">&quot;123456&quot;</span>) == <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果在则增加一个socket登录标志</span></span><br><span class="line">        loginPool pool_ptr;</span><br><span class="line">        pool_ptr.SocketID = socket_id;</span><br><span class="line">        <span class="built_in">strcpy</span>(pool_ptr.UserName, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        login_pool_vect.<span class="built_in">push_back</span>(pool_ptr);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="built_in">strcmp</span>(username, <span class="string">&quot;admin&quot;</span>) == <span class="number">0</span>) &amp;&amp; (<span class="built_in">strcmp</span>(password, <span class="string">&quot;123456&quot;</span>) == <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果在则增加一个socket登录标志</span></span><br><span class="line">        loginPool pool_ptr;</span><br><span class="line">        pool_ptr.SocketID = socket_id;</span><br><span class="line">        <span class="built_in">strcpy</span>(pool_ptr.UserName, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        login_pool_vect.<span class="built_in">push_back</span>(pool_ptr);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据传入ID从容器内弹出一个节点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">logout</span><span class="params">(std::vector&lt;loginPool&gt; &amp;ptr, <span class="type">int</span> socket_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = ptr.<span class="built_in">begin</span>(); it != ptr.<span class="built_in">end</span>(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (it-&gt;SocketID == socket_id)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 弹出指定结构体</span></span><br><span class="line">            ptr.<span class="built_in">erase</span>(it);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ClientPro</span><span class="params">(<span class="type">void</span>* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">auto</span>* pSock = (MySocket*)ptr;</span><br><span class="line">    MySocket server_socket = *pSock;</span><br><span class="line">    server_socket.<span class="built_in">Send</span>((<span class="type">const</span> <span class="type">char</span> *)<span class="string">&quot;Welcome to CPP WebSocket Server!&quot;</span>, <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取客户端信息</span></span><br><span class="line">    <span class="type">char</span> sIp[<span class="number">20</span>];</span><br><span class="line">    UINT nPort;</span><br><span class="line">    server_socket.<span class="built_in">GetPeerName</span>(sIp, nPort);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> szBuffer[<span class="number">4096</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="type">int</span> sid = pSock-&gt;<span class="built_in">GetSocketID</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ref = server_socket.<span class="built_in">Receive</span>(szBuffer, <span class="built_in">sizeof</span>(szBuffer));</span><br><span class="line">        <span class="keyword">if</span> (ref &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">logout</span>(login_pool_vect, sid);</span><br><span class="line">            ilog-&gt;<span class="built_in">warn</span>(<span class="string">&quot;client :&#123;0&#125;:&#123;1&#125; , [disconnect]&quot;</span>,sIp,nPort);</span><br><span class="line"><span class="comment">//            std::cout &lt;&lt; &quot;客户: &quot; &lt;&lt; sIp &lt;&lt; &quot;:&quot; &lt;&lt; nPort &lt;&lt; &quot; [已断开]&quot; &lt;&lt; std::endl;</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ilog-&gt;<span class="built_in">info</span>(<span class="string">&quot;address:&#123;0&#125;:&#123;1&#125;,receive command:&#123;2&#125; &quot;</span>,sIp,nPort,szBuffer);</span><br><span class="line"><span class="comment">//        std::cout &lt;&lt; &quot;地址: &quot; &lt;&lt; sIp &lt;&lt; &quot;:&quot; &lt;&lt; nPort &lt;&lt; &quot; 接收命令: &quot; &lt;&lt; szBuffer &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用户登录</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(szBuffer, <span class="string">&quot;login\n&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> recv_username[<span class="number">32</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">            <span class="type">char</span> recv_password[<span class="number">32</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 接收用户名和密码</span></span><br><span class="line">            pSock-&gt;<span class="built_in">Receive</span>(recv_username, <span class="number">32</span>, <span class="number">0</span>);</span><br><span class="line">            pSock-&gt;<span class="built_in">Receive</span>(recv_password, <span class="number">32</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            ilog-&gt;<span class="built_in">info</span>(<span class="string">&quot;account :&#123;0&#125;, password : &#123;1&#125;&quot;</span>,recv_username,recv_password);</span><br><span class="line">            <span class="comment">// 验证登录状态</span></span><br><span class="line">            <span class="type">bool</span> login_flag = <span class="built_in">login</span>(recv_username, recv_password, sid);</span><br><span class="line">            <span class="keyword">if</span> (login_flag == TRUE)</span><br><span class="line">            &#123;</span><br><span class="line">                ilog-&gt;<span class="built_in">info</span>(<span class="string">&quot;user :&#123;0&#125;, login .&quot;</span>,recv_username);</span><br><span class="line"><span class="comment">//                std::cout &lt;&lt; &quot;用户: &quot; &lt;&lt; recv_username &lt;&lt; &quot; 已登录&quot; &lt;&lt; std::endl;</span></span><br><span class="line">                pSock-&gt;<span class="built_in">Send</span>(<span class="string">&quot;login&quot;</span>, <span class="built_in">sizeof</span>(<span class="string">&quot;login&quot;</span>), <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pSock-&gt;<span class="built_in">Send</span>(<span class="string">&quot;account or password incorrect&quot;</span>, <span class="built_in">sizeof</span>(<span class="string">&quot;account or password incorrect&quot;</span>), <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 用户登出</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(szBuffer, <span class="string">&quot;logout\n&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 验证是否登录成功</span></span><br><span class="line">            <span class="type">int</span> login_flag = <span class="built_in">is_login</span>(login_pool_vect, sid);</span><br><span class="line">            <span class="keyword">if</span> (login_flag == TRUE)</span><br><span class="line">            &#123;</span><br><span class="line">                ilog-&gt;<span class="built_in">info</span>(<span class="string">&quot;user logout.&quot;</span>);</span><br><span class="line"><span class="comment">//                std::cout &lt;&lt; &quot;用户已登出&quot; &lt;&lt; std::endl;</span></span><br><span class="line">                <span class="built_in">logout</span>(login_pool_vect, sid);</span><br><span class="line">                pSock-&gt;<span class="built_in">Send</span>(<span class="string">&quot;user logout.&quot;</span>, <span class="built_in">sizeof</span>(<span class="string">&quot;user logout.&quot;</span>), <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ilog-&gt;<span class="built_in">warn</span>(<span class="string">&quot;please login account!&quot;</span>);</span><br><span class="line"><span class="comment">//                std::cout &lt;&lt; &quot;请先登录&quot; &lt;&lt; std::endl;</span></span><br><span class="line">                pSock-&gt;<span class="built_in">Send</span>(<span class="string">&quot;please login account!&quot;</span>, <span class="built_in">sizeof</span>(<span class="string">&quot;please login account!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历本机文件</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(szBuffer, <span class="string">&quot;list\n&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 验证是否登录成功</span></span><br><span class="line">            <span class="type">int</span> login_flag = <span class="built_in">is_login</span>(login_pool_vect, sid);</span><br><span class="line">            <span class="keyword">if</span> (login_flag == TRUE)</span><br><span class="line">            &#123;</span><br><span class="line">                ilog-&gt;<span class="built_in">info</span>(<span class="string">&quot;user has login , output current pc file &quot;</span>);</span><br><span class="line"><span class="comment">//                std::cout &lt;&lt; &quot;用户已登录,输出本机文件&quot; &lt;&lt; std::endl;</span></span><br><span class="line">                pSock-&gt;<span class="built_in">Send</span>(<span class="string">&quot;auth success!&quot;</span>, <span class="built_in">sizeof</span>(<span class="string">&quot;auth success!&quot;</span>), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 循环输出数据包</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; x++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">char</span> sz[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">                    <span class="built_in">sprintf</span>(sz, <span class="string">&quot;count -&gt; %d&quot;</span>, x);</span><br><span class="line">                    pSock-&gt;<span class="built_in">Send</span>(sz, <span class="built_in">sizeof</span>(sz), <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ilog-&gt;<span class="built_in">warn</span>(<span class="string">&quot;please login account!&quot;</span>);</span><br><span class="line"><span class="comment">//                std::cout &lt;&lt; &quot;请先登录&quot; &lt;&lt; std::endl;</span></span><br><span class="line">                pSock-&gt;<span class="built_in">Send</span>(<span class="string">&quot;please login account!&quot;</span>, <span class="built_in">sizeof</span>(<span class="string">&quot;please login account!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">startSocketServer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MySocket sock;</span><br><span class="line">    <span class="keyword">if</span> (!sock.<span class="built_in">Create</span>(<span class="number">8233</span>, SOCK_STREAM, <span class="string">&quot;127.0.0.1&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取本机信息</span></span><br><span class="line">    <span class="type">char</span> sSevIp[<span class="number">20</span>];</span><br><span class="line">    UINT nSevPort;</span><br><span class="line">    sock.<span class="built_in">GetSockName</span>(sSevIp, nSevPort);</span><br><span class="line">    ilog-&gt;<span class="built_in">info</span>(<span class="string">&quot;server : &#123;0&#125;,&#123;1&#125; ,server is running!&quot;</span>,sSevIp,nSevPort);</span><br><span class="line"><span class="comment">//    std::cout &lt;&lt; &quot;服务端: &quot; &lt;&lt; sSevIp &lt;&lt; &quot;:&quot; &lt;&lt; nSevPort &lt;&lt; &quot; 服务器启动成功&quot; &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line">    sock.<span class="built_in">Listen</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取客户端信息</span></span><br><span class="line">    <span class="type">char</span> sIp[<span class="number">20</span>];</span><br><span class="line">    UINT nPort;</span><br><span class="line"></span><br><span class="line">    MySocket ptr;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 当有新用户进来自动创建一个线程来维持会话</span></span><br><span class="line">        sock.<span class="built_in">Accept</span>(ptr, sIp, &amp;nPort);</span><br><span class="line">        ilog-&gt;<span class="built_in">info</span>(<span class="string">&quot;client : &#123;0&#125; :&#123;1&#125; [login]&quot;</span>,sIp,nPort);</span><br><span class="line"><span class="comment">//        std::cout &lt;&lt; &quot;客户: &quot; &lt;&lt; sIp &lt;&lt; &quot;:&quot; &lt;&lt; nPort &lt;&lt; &quot; [已登录]&quot; &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多线程</span></span><br><span class="line">        _beginthread(ClientPro, <span class="number">0</span>, &amp;ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">testR</span><span class="params">(wsProtocol ws)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;asd&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">httpR</span><span class="params">(requestHttp httpRq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;httpR&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">XmlNodeGetVal</span><span class="params">(std::stringstream stringstream, tinyxml2::XMLElement *pElement, <span class="type">const</span> <span class="type">char</span> *string, <span class="type">const</span> <span class="type">char</span> *ip)</span> </span>&#123;</span><br><span class="line">ip = pElement-&gt;<span class="built_in">Attribute</span>(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    readXMLConfig(&quot;./../config.xml&quot;);</span></span><br><span class="line">    <span class="built_in">startSocketServer</span>();</span><br><span class="line"><span class="comment">//    startWebSocketServer();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>2.include/test.h</li></ul><blockquote><p>存放test.cpp中所需头文件与函数定义，变量定义.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySocket</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    SOCKET m_hSocket;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取对端Socket用户IP端口等</span></span><br><span class="line">    <span class="function">BOOL <span class="title">GetPeerName</span><span class="params">(<span class="type">char</span>* rSocketAddress, UINT&amp; rSocketPort)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sockaddr_in name = &#123; AF_INET &#125;;</span><br><span class="line">        <span class="type">int</span> lenname = <span class="built_in">sizeof</span>(name);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getpeername</span>(m_hSocket, (sockaddr*)&amp;name, &amp;lenname) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(rSocketAddress, <span class="built_in">inet_ntoa</span>(name.sin_addr));</span><br><span class="line">        rSocketPort = <span class="built_in">htons</span>(name.sin_port);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取本机Socket用户IP端口等</span></span><br><span class="line">    <span class="function">BOOL <span class="title">GetSockName</span><span class="params">(<span class="type">char</span>* rSocketAddress, UINT&amp; rSocketPort)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sockaddr_in name = &#123; AF_INET &#125;;</span><br><span class="line">        <span class="type">int</span> lenname = <span class="built_in">sizeof</span>(name);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getsockname</span>(m_hSocket, (sockaddr*)&amp;name, &amp;lenname) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(rSocketAddress, <span class="built_in">inet_ntoa</span>(name.sin_addr));</span><br><span class="line">        rSocketPort = <span class="built_in">htons</span>(name.sin_port);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前用户SocketID</span></span><br><span class="line">    <span class="function">BOOL <span class="title">GetSocketID</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_hSocket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建套接字</span></span><br><span class="line">    <span class="function">BOOL <span class="title">Create</span><span class="params">(UINT nSocketPort = <span class="number">0</span>, <span class="type">int</span> nSockType = SOCK_STREAM, LPCTSTR lpszSocketAddress = <span class="literal">NULL</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建套接字</span></span><br><span class="line">        m_hSocket = <span class="built_in">socket</span>(AF_INET, nSockType, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (m_hSocket == INVALID_SOCKET)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置IP地址和端口</span></span><br><span class="line">        sockaddr_in sa = &#123; AF_INET &#125;;</span><br><span class="line">        sa.sin_port = <span class="built_in">htons</span>(nSocketPort);</span><br><span class="line">        <span class="keyword">if</span> (lpszSocketAddress)</span><br><span class="line">            sa.sin_addr.s_addr = <span class="built_in">inet_addr</span>(lpszSocketAddress);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定套接字和IP地址端口</span></span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">bind</span>(m_hSocket, (sockaddr*)&amp;sa, <span class="built_in">sizeof</span>(sa));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受客户请求</span></span><br><span class="line">    <span class="function">BOOL <span class="title">Accept</span><span class="params">(MySocket&amp; rConnectedSock, LPSTR szIp = <span class="literal">NULL</span>, UINT* nPort = <span class="literal">NULL</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sockaddr_in sa = &#123; AF_INET &#125;;</span><br><span class="line">        <span class="type">int</span> nLen = <span class="built_in">sizeof</span>(sa);</span><br><span class="line">        rConnectedSock.m_hSocket = <span class="built_in">accept</span>(<span class="keyword">this</span>-&gt;m_hSocket, (sockaddr*)&amp;sa, &amp;nLen);</span><br><span class="line">        <span class="keyword">if</span> (rConnectedSock.m_hSocket == INVALID_SOCKET)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (szIp)</span><br><span class="line">            <span class="built_in">strcpy</span>(szIp, <span class="built_in">inet_ntoa</span>(sa.sin_addr));</span><br><span class="line">        <span class="keyword">if</span> (nPort)</span><br><span class="line">            *nPort = <span class="built_in">htons</span>(sa.sin_port);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接服务端</span></span><br><span class="line">    <span class="function">BOOL <span class="title">Connection</span><span class="params">(LPCSTR lpszHostAddress, UINT nPort)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sockaddr_in sa = &#123; AF_INET &#125;;</span><br><span class="line">        sa.sin_port = <span class="built_in">htons</span>(nPort);</span><br><span class="line">        sa.sin_addr.s_addr = <span class="built_in">inet_addr</span>(lpszHostAddress);</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">connect</span>(m_hSocket, (sockaddr*)&amp;sa, <span class="built_in">sizeof</span>(sa));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 侦听</span></span><br><span class="line">    <span class="function">BOOL <span class="title">Listen</span><span class="params">(<span class="type">int</span> nConnectionBacklog = <span class="number">5</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">listen</span>(m_hSocket, nConnectionBacklog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逐条发送</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Send</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* lpBuf, <span class="type">int</span> nBufLen, <span class="type">int</span> nFlags = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">send</span>(m_hSocket, (LPCSTR)lpBuf, nBufLen, nFlags);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送整个缓冲区</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">SendTo</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* lpBuf, <span class="type">int</span> nBufLen, UINT nHostPort, LPCSTR lpszHostAddress = <span class="literal">NULL</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="type">int</span> nFlags = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sockaddr_in to = &#123; AF_INET &#125;;</span><br><span class="line">        to.sin_port = <span class="built_in">htons</span>(nHostPort);</span><br><span class="line">        to.sin_addr.s_addr = <span class="built_in">inet_addr</span>(lpszHostAddress);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sendto</span>(m_hSocket, (LPCSTR)lpBuf, nBufLen, nFlags, (sockaddr*)&amp;to, <span class="built_in">sizeof</span>(to));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逐条接收</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Receive</span><span class="params">(<span class="type">void</span>* lpBuf, <span class="type">int</span> nBufLen, <span class="type">int</span> nFlags = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">recv</span>(m_hSocket, (LPTSTR)lpBuf, nBufLen, nFlags);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收整个缓冲区</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">ReceiveFrom</span><span class="params">(<span class="type">void</span>* lpBuf, <span class="type">int</span> nBufLen, <span class="type">char</span>* rSocketAddress, UINT&amp; rSocketPort, <span class="type">int</span> nFlags = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sockaddr_in from = &#123; AF_INET &#125;;</span><br><span class="line">        <span class="type">int</span> lenFrom = <span class="built_in">sizeof</span>(from);</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">recvfrom</span>(m_hSocket, (LPSTR)lpBuf, nBufLen, nFlags, (sockaddr*)&amp;from, &amp;lenFrom);</span><br><span class="line">        <span class="built_in">strcpy</span>(rSocketAddress, <span class="built_in">inet_ntoa</span>(from.sin_addr));</span><br><span class="line">        rSocketPort = <span class="built_in">htons</span>(from.sin_port);</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭套接字</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Close</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">closesocket</span>(m_hSocket);</span><br><span class="line">        m_hSocket = INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">MySocket</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        WSADATA wsaData;</span><br><span class="line">        <span class="built_in">WSAStartup</span>(<span class="number">0x0202</span>, &amp;wsaData);</span><br><span class="line">        m_hSocket = INVALID_SOCKET;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">MySocket</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>3.CMakeLists.txt</li></ul><blockquote><p>配置CMake编译所需环境</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmake最小版本</span></span><br><span class="line">cmake_minimum_required(VERSION 3.26)</span><br><span class="line"><span class="comment"># 定义项目名</span></span><br><span class="line">project(cpp_socket_server)</span><br><span class="line"><span class="comment"># cpp版本</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD 17)</span><br><span class="line"><span class="comment"># 设置编译参数</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_C_FLAGS   <span class="string">&quot;<span class="variable">$&#123;CMAKE_C_FLAGS&#125;</span>   -s&quot;</span>)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;<span class="variable">$&#123;CMAKE_CXX_FLAGS&#125;</span> -s&quot;</span>)</span><br><span class="line"><span class="comment"># 引入win平台socket库</span></span><br><span class="line">link_libraries(ws2_32)</span><br><span class="line"><span class="comment"># 引入所需头文件库</span></span><br><span class="line">include_directories(</span><br><span class="line">        lib/include</span><br><span class="line">        lib/include/spdlog</span><br><span class="line"><span class="comment">#        lib/include/cryptopp</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 引入所需编译源文件（*.cpp）</span></span><br><span class="line">aux_source_directory(</span><br><span class="line">        src</span><br><span class="line">        SRC_FILES</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置编译文件</span></span><br><span class="line"><span class="built_in">set</span>(main_file</span><br><span class="line">        <span class="variable">$&#123;SRC_FILES&#125;</span></span><br><span class="line">        lib/include/tcpSocket.h</span><br><span class="line">        src/tcpSocket/tcpSocket.cpp</span><br><span class="line">        src/tcpSocket/MySocket.hpp</span><br><span class="line">        lib/include/tinyxml2.h</span><br><span class="line">        src/utils/tinyxml2.cpp</span><br><span class="line">        lib/include/xmlParser.h</span><br><span class="line">        src/utils/xmlParser.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接第三方库</span></span><br><span class="line"><span class="keyword">if</span>(SPDLOG_BUILD_EXAMPLE_HO)</span><br><span class="line">    target_link_libraries(cpp_socket_server PRIVATE spdlog::spdlog_header_only)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加可执行文件</span></span><br><span class="line"><span class="comment"># Add executable files</span></span><br><span class="line">add_executable(</span><br><span class="line">        <span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">        <span class="variable">$&#123;main_file&#125;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 链接第三方库</span></span><br><span class="line">target_link_libraries(</span><br><span class="line">        <span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">        <span class="variable">$&#123;LIBRARY&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mingw工具">mingw工具</h3><ul><li>配置环境</li></ul><blockquote><p>下载完mingw包后，在系统变量Path中引入以下路径</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\mingw64\bin</span><br></pre></td></tr></table></figure><ul><li>工具引入</li></ul><blockquote><p>在clion中，可添加mingw工具。点击File-&gt;Settings-&gt;Build、Execution、Deployment-&gt;Toolchains；在其中设置如下路径，也可使用clion默认路径</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toolset: D:\\mingw64\\bin</span><br></pre></td></tr></table></figure><blockquote><p>如图<br><img src="/2023/12/01/cpp-project-build-clion/clion-mingw.png" class="lazyload placeholder" data-srcset="/2023/12/01/cpp-project-build-clion/clion-mingw.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p></blockquote><ul><li>编写配置</li></ul><blockquote><p>在CMakeLists.txt（示例）中写入需引入配置，如下所示：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 CMake 最低版本要求</span></span><br><span class="line">cmake_minimum_required(VERSION 3.8)</span><br><span class="line"><span class="comment"># 定义项目名称和版本</span></span><br><span class="line">project(MyApp VERSION 1.0.0 LANGUAGES CXX)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 C++ 标准</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD 17)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD_REQUIRED ON)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_EXTENSIONS OFF)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义用户可配置的选项</span></span><br><span class="line">option(ENABLE_DEBUG <span class="string">&quot;Enable debug output&quot;</span> ON)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ENABLE_DEBUG)</span><br><span class="line">  add_definitions(-DDEBUG_OUTPUT)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义宏：添加 MSVC 常用编译选项</span></span><br><span class="line">macro(add_msvc_options target)</span><br><span class="line">  <span class="keyword">if</span>(MSVC)</span><br><span class="line">    target_compile_options(<span class="variable">$&#123;target&#125;</span> PRIVATE</span><br><span class="line">    /W4                <span class="comment"># 设置警告级别为 4</span></span><br><span class="line">    /WX                <span class="comment"># 将警告视为错误</span></span><br><span class="line">    /MP                <span class="comment"># 启用多处理器编译</span></span><br><span class="line">    /permissive-       <span class="comment"># 禁用不严格的语言 conformance</span></span><br><span class="line">    /Zc:__cplusplus    <span class="comment"># 启用正确的 __cplusplus 宏值</span></span><br><span class="line">    /Zc:inline         <span class="comment"># 移除未使用的函数</span></span><br><span class="line">    /Gm-               <span class="comment"># 禁用最小生成（minimal rebuild）</span></span><br><span class="line">    /EHsc              <span class="comment"># 指定异常处理模型</span></span><br><span class="line">    )</span><br><span class="line">  endif()</span><br><span class="line">endmacro()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加源文件</span></span><br><span class="line"><span class="built_in">set</span>(SOURCE_FILES src/main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成可执行文件</span></span><br><span class="line">add_executable(MyApp <span class="variable">$&#123;SOURCE_FILES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用自定义宏，为 MyApp 添加 MSVC 常用编译选项</span></span><br><span class="line">add_msvc_options(MyApp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为特定目标设置头文件目录</span></span><br><span class="line">target_include_directories(MyApp PRIVATE include)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接静态库</span></span><br><span class="line">find_library(STATIC_LIB libStatic.lib PATHS <span class="string">&quot;<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/static&quot;</span>)</span><br><span class="line">target_link_libraries(MyApp PRIVATE <span class="variable">$&#123;STATIC_LIB&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接动态库</span></span><br><span class="line">find_library(DYNAMIC_LIB libDynamic.dll PATHS <span class="string">&quot;<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/dynamic&quot;</span>)</span><br><span class="line">find_library(DYNAMIC_LIB_IMPORT libDynamic.lib PATHS <span class="string">&quot;<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/dynamic&quot;</span>)</span><br><span class="line">target_link_libraries(MyApp PRIVATE <span class="variable">$&#123;DYNAMIC_LIB_IMPORT&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Windows 的 DLL delay-load 机制</span></span><br><span class="line">set_target_properties(MyApp PROPERTIES LINK_FLAGS <span class="string">&quot;/DELAYLOAD:libDynamic.dll&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据目标架构定制编译选项和链接选项</span></span><br><span class="line"><span class="keyword">if</span>(CMAKE_GENERATOR_PLATFORM STREQUAL <span class="string">&quot;Win32&quot;</span>)</span><br><span class="line">  message(<span class="string">&quot;Building for Win32 (x86) architecture&quot;</span>)</span><br><span class="line">  target_compile_options(MyApp PRIVATE /arch:SSE2)</span><br><span class="line">elseif(CMAKE_GENERATOR_PLATFORM STREQUAL <span class="string">&quot;x64&quot;</span>)</span><br><span class="line">  message(<span class="string">&quot;Building for x64 architecture&quot;</span>)</span><br><span class="line">  target_compile_options(MyApp PRIVATE /arch:AVX2)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">  message(WARNING <span class="string">&quot;Unknown architecture&quot;</span>)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加子项目</span></span><br><span class="line">add_subdirectory(subproject)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在构建时生成配置文件</span></span><br><span class="line">configure_file(config.h.in config.h @ONLY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定安装规则</span></span><br><span class="line">install(TARGETS MyApp RUNTIME DESTINATION bin)</span><br><span class="line">install(FILES <span class="string">&quot;<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/dynamic/libDynamic.dll&quot;</span> DESTINATION bin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="CMake编译">CMake编译</h3><ul><li>编译test.exe</li></ul><blockquote><p>点击运行按钮，查看效果</p></blockquote><ul><li>目录结构</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">MyApp/</span><br><span class="line">  ├─ CMakeLists.txt</span><br><span class="line">  ├─ src/</span><br><span class="line">  │   └─ main.cpp</span><br><span class="line">  ├─ include/</span><br><span class="line">  │   ├─ static_lib/</span><br><span class="line">  │   │   └─ StaticLibHeader.h</span><br><span class="line">  │   └─ dynamic_lib/</span><br><span class="line">  │       └─ DynamicLibHeader.h</span><br><span class="line">  ├─ libs/</span><br><span class="line">  │   ├─ static/</span><br><span class="line">  │   │   └─ libStatic.lib</span><br><span class="line">  │   └─ dynamic/</span><br><span class="line">  │       ├─ libDynamic.dll</span><br><span class="line">  │       └─ libDynamic.lib</span><br><span class="line">  ├─ subproject/</span><br><span class="line">  │   ├─ CMakeLists.txt</span><br><span class="line">  │   ├─ src/</span><br><span class="line">  │   │   └─ subproject_main.cpp</span><br><span class="line">  │   └─ include/</span><br><span class="line">  │       └─ subproject/</span><br><span class="line">  │           └─ SubProjectHeader.h</span><br><span class="line">  └─ config.h.in</span><br></pre></td></tr></table></figure><ul><li>cmake运行(Visual Studio 2019)</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于 x86 架构： </span></span><br><span class="line">cmake -G <span class="string">&quot;Visual Studio 16 2019&quot;</span> -A Win32 ..</span><br><span class="line"><span class="comment"># 对于 x64 架构： </span></span><br><span class="line">cmake -G <span class="string">&quot;Visual Studio 16 2019&quot;</span> -A x64 ..</span><br></pre></td></tr></table></figure><h2 id="引入第三方库（以spdlog为例）">引入第三方库（以spdlog为例）</h2><blockquote><p>Very fast, header-only/compiled, C++ logging library.</p></blockquote><h3 id="工具下载">工具下载</h3><blockquote><p>在以下路径下载spdlog：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/gabime/spdlog.git</span><br></pre></td></tr></table></figure><h3 id="cmake引入">cmake引入</h3><h4 id="在项目include-文件夹中复制以下文件夹内容">在项目include 文件夹中复制以下文件夹内容</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include/spdlog/</span><br></pre></td></tr></table></figure><h4 id="在CMakeLists-txt中引入库">在CMakeLists.txt中引入库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">include_directories(</span><br><span class="line">        lib/include</span><br><span class="line">        lib/include/spdlog</span><br><span class="line"><span class="comment">#        lib/include/cryptopp</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(SPDLOG_BUILD_EXAMPLE_HO)</span><br><span class="line">    target_link_libraries(cpp_socket_server PRIVATE spdlog::spdlog_header_only)</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure><h3 id="测试运行">测试运行</h3><h4 id="编写如下代码">编写如下代码</h4><ul><li>1.封装spdlog库</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MY_SPDLOG_LOG_HPP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_SPDLOG_LOG_HPP</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;spdlog/spdlog.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;spdlog/async.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;spdlog/sinks/stdout_color_sinks.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;spdlog/sinks/rotating_file_sink.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;spdlog/sinks/daily_file_sink.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;spdlog/sinks/basic_file_sink.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CLog</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> CLog &amp;<span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> CLog m_instance;</span><br><span class="line">        <span class="keyword">return</span> m_instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">get_logger</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;logger_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">CLog</span>() &#123;</span><br><span class="line">        spdlog::<span class="built_in">drop_all</span>(); <span class="comment">// 释放所有logger</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CLog</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Log System Init , start record log : &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">init_file</span>();</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">init_logger</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init_file</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;log_root_path = <span class="string">R&quot;(C:\Users\Administrator\CLionProjects\cpp_socket_server\logs\)&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;info_file_path = <span class="string">&quot;info.log&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;error_file_path = <span class="string">&quot;error.log&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;rotation_h = <span class="number">5</span>; <span class="comment">// 分割时间</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;rotation_m = <span class="number">59</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init_logger</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;info_sink_ = std::<span class="built_in">make_shared</span>&lt;spdlog::sinks::daily_file_sink_mt&gt;(</span><br><span class="line">                <span class="keyword">this</span>-&gt;log_root_path + <span class="keyword">this</span>-&gt;info_file_path, <span class="keyword">this</span>-&gt;rotation_h, <span class="keyword">this</span>-&gt;rotation_m);</span><br><span class="line">        <span class="keyword">this</span>-&gt;error_sink_ = std::<span class="built_in">make_shared</span>&lt;spdlog::sinks::daily_file_sink_mt&gt;(</span><br><span class="line">                <span class="keyword">this</span>-&gt;log_root_path + <span class="keyword">this</span>-&gt;error_file_path, <span class="keyword">this</span>-&gt;rotation_h, <span class="keyword">this</span>-&gt;rotation_m);</span><br><span class="line">        <span class="keyword">this</span>-&gt;console_sink_ = std::<span class="built_in">make_shared</span>&lt;spdlog::sinks::stdout_color_sink_mt&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;info_sink_-&gt;<span class="built_in">set_level</span>(spdlog::level::info); <span class="comment">// debug&lt; info&lt; warn&lt; error&lt; critical  日志信息低于设置的级别时, 不予显示</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;error_sink_-&gt;<span class="built_in">set_level</span>(spdlog::level::err);</span><br><span class="line">        <span class="keyword">this</span>-&gt;console_sink_-&gt;<span class="built_in">set_level</span>(spdlog::level::debug);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;sinks_.<span class="built_in">push_back</span>(<span class="keyword">this</span>-&gt;info_sink_); <span class="comment">// info</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;sinks_.<span class="built_in">push_back</span>(<span class="keyword">this</span>-&gt;error_sink_); <span class="comment">// error</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;sinks_.<span class="built_in">push_back</span>(<span class="keyword">this</span>-&gt;console_sink_); <span class="comment">// console</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;logger_ = std::<span class="built_in">make_shared</span>&lt;spdlog::logger&gt;(<span class="string">&quot;log_demo&quot;</span>, <span class="built_in">begin</span>(<span class="keyword">this</span>-&gt;sinks_), <span class="built_in">end</span>(<span class="keyword">this</span>-&gt;sinks_));</span><br><span class="line">        <span class="keyword">this</span>-&gt;logger_-&gt;<span class="built_in">set_pattern</span>(<span class="string">&quot;[%l] [%Y-%m-%d %H:%M:%S %e] [Process:%P] - %v&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>-&gt;logger_-&gt;<span class="built_in">flush_on</span>(spdlog::level::info); <span class="comment">// 设置当触发 info 或更严重的错误时立刻刷新日志到 disk</span></span><br><span class="line">        spdlog::<span class="built_in">register_logger</span>(<span class="keyword">this</span>-&gt;logger_); <span class="comment">// 注册logger</span></span><br><span class="line">        spdlog::<span class="built_in">flush_every</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">10</span>)); <span class="comment">// 每隔10秒刷新一次日志</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr &lt;spdlog::logger&gt; logger_;</span><br><span class="line">    std::shared_ptr &lt;spdlog::sinks::daily_file_sink_mt&gt; info_sink_; <span class="comment">// info</span></span><br><span class="line">    std::shared_ptr &lt;spdlog::sinks::daily_file_sink_mt&gt; error_sink_; <span class="comment">// error</span></span><br><span class="line">    std::shared_ptr &lt;spdlog::sinks::stdout_color_sink_mt&gt; console_sink_; <span class="comment">// console</span></span><br><span class="line">    std::vector &lt;spdlog::sink_ptr&gt; sinks_;</span><br><span class="line">    std::string log_root_path;</span><br><span class="line">    std::string error_file_path;</span><br><span class="line">    std::string info_file_path;</span><br><span class="line">    <span class="type">short</span> <span class="type">int</span> rotation_h&#123;&#125;;</span><br><span class="line">    <span class="type">short</span> <span class="type">int</span> rotation_m&#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;; <span class="comment">// CLog</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ilog CLog::instance().get_logger()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//MY_SPDLOG_LOG_HPP</span></span></span><br></pre></td></tr></table></figure><ul><li>2.在主cpp中写入测试代码</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ilog-&gt;<span class="built_in">info</span>(<span class="string">&quot;server : &#123;0&#125;,&#123;1&#125; ,server is running!&quot;</span>,sSevIp,nSevPort);</span><br><span class="line">ilog-&gt;<span class="built_in">warn</span>(<span class="string">&quot;client :&#123;0&#125;:&#123;1&#125; , [disconnect]&quot;</span>,sIp,nPort);</span><br><span class="line">ilog-&gt;<span class="built_in">error</span>(<span class="string">&quot;[VP] load config file error : &#123;0&#125;&quot;</span>,doc_dump.<span class="built_in">LoadFile</span>(path));</span><br></pre></td></tr></table></figure><ul><li>3.运行主cpp，测试效果</li></ul><blockquote><p>如图：<br><img src="/2023/12/01/cpp-project-build-clion/run-result.png" class="lazyload placeholder" data-srcset="/2023/12/01/cpp-project-build-clion/run-result.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p></blockquote><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> clion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Assammdf第三方python库处理mdf、mf4文件</title>
      <link href="/2023/11/28/mdf-file-parser/"/>
      <url>/2023/11/28/mdf-file-parser/</url>
      
        <content type="html"><![CDATA[<h1>基于Assammdf第三方python库处理mdf、mf4文件</h1><blockquote><p>1.ASAMMDF是ASAM（自动化和测量系统标准化协会）MDF（测量数据格式）文件的快速解析器和编辑器。<br>2.asammdf支持MDF版本2（.dat）、3（.mdf）和4（.mf4）。<br>3.asammdf适用于python&gt;；=3.6（对于python 2.7、3.4和3.5，请参阅4.x.y版本）</p></blockquote><h2 id="第三方库主要功能">第三方库主要功能</h2><ul><li>1.mdf、mf4文件创建读取</li><li>2.读取、提取can总线日志文件信息</li><li>3.不同版本文件转换</li><li>4.原始数据导入、导出，包括：HDF5、Matlab（v4、v5和v7.3）、CSV和Parquet</li></ul><h2 id="基础用法">基础用法</h2><ul><li>参考代码如下：</li></ul><blockquote><p>基础mdf文件引入、数据过滤与解析、数据转换存储、数据图形化绘制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> asammdf <span class="keyword">import</span> MDF </span><br><span class="line">mdf=MDF(<span class="string">&#x27;sample.mdf&#x27;</span>)</span><br><span class="line">speed=mdf.get(<span class="string">&#x27;WheelSpeed&#x27;</span>)</span><br><span class="line">speed.plot()</span><br><span class="line">important_signals=[<span class="string">&#x27;WheelSpeed&#x27;</span>,<span class="string">&#x27;VehicleSpeed&#x27;</span>,<span class="string">&#x27;VehicleAcceleration&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># get short measurement with a subset of channels from 10s to 12s</span></span><br><span class="line">short=mdf.<span class="built_in">filter</span>(important_signals).cut(start=<span class="number">10</span>,stop=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># convert to version 4.10 and save to disk</span></span><br><span class="line">short.convert(<span class="string">&#x27;4.10&#x27;</span>).save(<span class="string">&#x27;important signals.mf4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot some channels from a huge file</span></span><br><span class="line">efficient=MDF(<span class="string">&#x27;huge.mf4&#x27;</span>) </span><br><span class="line"><span class="keyword">for</span> signal <span class="keyword">in</span> efficient.select([<span class="string">&#x27;Sensor1&#x27;</span>,<span class="string">&#x27;Voltage3&#x27;</span>]):</span><br><span class="line">signal.plot()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用流程">使用流程</h2><h3 id="第三方库安装">第三方库安装</h3><ul><li>1.pip工具安装</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install asammdf</span><br><span class="line"><span class="comment"># GUI version install</span></span><br><span class="line">pip install asammdf[gui]</span><br></pre></td></tr></table></figure><ul><li>2.基础文件读取(mf4)</li></ul><blockquote><ol><li>查找MDF文件中特定信号最大值；</li><li>计算平均车速和里程，使用matplotlib作图；</li><li>计算两信号差值，进行波峰判断并记录峰值个数，避免信号毛刺干扰，设定差值门限值，使用matplotlib作图（含主次坐标)；</li><li>以上信息直接写入word保存。</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理mf4数据</span></span><br><span class="line"><span class="comment"># 20220530 FQF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入库文件</span></span><br><span class="line"><span class="keyword">from</span> asammdf <span class="keyword">import</span> MDF     <span class="comment"># 用于处理MDF文件</span></span><br><span class="line"><span class="keyword">import</span> os       <span class="comment"># 用于获取文件路径</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np      <span class="comment"># 用于数学处理</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt     <span class="comment"># 用于绘图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取mf4</span></span><br><span class="line">path = <span class="string">&#x27;C:/fqf&#x27;</span></span><br><span class="line">os.chdir(path)      <span class="comment"># 更改python的工作空间</span></span><br><span class="line">files = os.listdir(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;_decoded&#x27;</span> <span class="keyword">in</span> f <span class="keyword">and</span> f.endswith(<span class="string">&#x27;.mf4&#x27;</span>) <span class="keyword">and</span> f.startswith(<span class="string">&#x27;df&#x27;</span>):      <span class="comment"># 查找文件名字含有fish且以.png后缀的文件</span></span><br><span class="line">        <span class="comment"># print(&#x27;Find the mf4: &#x27; + f)</span></span><br><span class="line">        <span class="comment"># print(f.title())</span></span><br><span class="line">        mf4_name = f.split()</span><br><span class="line">        mdf = MDF(f)</span><br><span class="line">        <span class="comment"># print(mdf.info())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">        Prompt_info = mdf.get(<span class="string">&quot;InterSysInfoDisp&quot;</span>)</span><br><span class="line">        Prompt_value = ICA_Prompt_info.samples</span><br><span class="line">        Prompt_timestamps = Prompt_info .timestamps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索工况</span></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(Prompt_timestamps )-<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> Prompt_value [i] != <span class="number">9</span> &amp; Prompt_value [i+<span class="number">1</span>] == <span class="number">9</span>:       <span class="comment"># 搜索工况</span></span><br><span class="line">                <span class="built_in">print</span>( <span class="string">&quot;============================&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(f)</span><br><span class="line">                <span class="built_in">print</span>(Prompt_timestamps [i])</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="comment"># plt.plot(Prompt_timestamps ,Prompt_value )#r表示颜色，v表示下三角线类型</span></span><br><span class="line"><span class="comment"># plt.xlabel(&#x27;xlabel&#x27;,fontsize = 25)</span></span><br><span class="line"><span class="comment"># plt.ylabel(&#x27;ylabel&#x27;,fontsize = 16)</span></span><br><span class="line"><span class="comment"># plt.grid()</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br></pre></td></tr></table></figure><ul><li>3.文件读取处理（mdf）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span>   asammdf <span class="keyword">import</span> MDF                                    <span class="comment"># 用于处理MDF文件</span></span><br><span class="line"><span class="keyword">import</span> os                                                    <span class="comment"># 用于获取文件路径</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd                                          <span class="comment"># 用于数据分析</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np                                           <span class="comment"># 用于数组处理</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> trapz                                      <span class="comment"># 可用于积分求面积</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt                         <span class="comment"># 用于作图 </span></span><br><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> dt                                        <span class="comment"># 用于调用系统时间</span></span><br><span class="line"><span class="keyword">import</span> docx                                                  <span class="comment"># 调用word文档库</span></span><br><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> Inches                               <span class="comment"># 用于设置图片尺寸</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_MDF</span>(<span class="params">Document_Adress</span>):                              <span class="comment"># 定义check_MDF函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;文件名： &#x27;</span>+Adress_str+<span class="string">&#x27;，相关统计信息如下：&#x27;</span>)       <span class="comment"># 提取地址中文件名信息，打印</span></span><br><span class="line"></span><br><span class="line">    new_Doc = document.add_paragraph\</span><br><span class="line">        (<span class="string">&#x27;文件名： &#x27;</span>+Adress_str+<span class="string">&#x27;，相关统计信息如下：&#x27;</span>)        <span class="comment"># 新增段落文本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    MDF_File=MDF(Document_Adress)                            <span class="comment"># 使用asammdf第三方包调取.mdf文件内容</span></span><br><span class="line">    TCOil= MDF_File.get(<span class="string">&quot;TCOil&quot;</span>)                             <span class="comment"># 调用.mdf中零件处油温Signal   </span></span><br><span class="line">    TOil=MDF_File.get(<span class="string">&quot;TOil&quot;</span>)                                <span class="comment"># 调用.mdf中油底壳温度Signal</span></span><br><span class="line">    VehSpd=MDF_File.get(<span class="string">&quot;VehSpd&quot;</span>)                            <span class="comment"># 调用.mdf中车速Signal</span></span><br><span class="line"></span><br><span class="line">    VehSpdCheck(VehSpd)                                      <span class="comment"># check_MDF()函数调用VehSpdCheck()函数</span></span><br><span class="line">    Signal_Data_Max(TCOil)                                   <span class="comment"># check_MDF()函数调用Signal_Data_Max()函数</span></span><br><span class="line">    T_Subtract_Peak(TCOil, TOil, <span class="number">20</span>)                         <span class="comment"># check_MDF()函数调用T_Subtract_Peak()函数</span></span><br><span class="line"></span><br><span class="line">    document.save(Veh_VIN+<span class="string">&#x27;.docx&#x27;</span>)                           <span class="comment"># 运行完程序后保存word文档</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timeconvert</span>(<span class="params">second</span>):                                     <span class="comment"># 将时间秒转化str类型的时分秒</span></span><br><span class="line">    Timestr =<span class="built_in">str</span>(<span class="built_in">int</span>(second/<span class="number">3600</span>)) + <span class="string">&#x27;h &#x27;</span> + \</span><br><span class="line">             <span class="built_in">str</span>(<span class="built_in">int</span>((second%<span class="number">3600</span>)/ <span class="number">60</span>)) + <span class="string">&#x27;min &#x27;</span> + \</span><br><span class="line">             <span class="built_in">str</span>(<span class="built_in">int</span>((second%<span class="number">3600</span>) % <span class="number">60</span>)) + <span class="string">&#x27;s&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> Timestr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Signal_Data_Max</span>(<span class="params">Signal</span>):                                 <span class="comment"># 定义Signal_Data_Max()函数</span></span><br><span class="line">    x=Signal.timestamps                                      <span class="comment"># 提取Signal中所有时刻值存放列表x()中</span></span><br><span class="line">    y=Signal.samples                                         <span class="comment"># 提取Signal中所有实测值存放列表y()中</span></span><br><span class="line">    T_C_Max=np.<span class="built_in">max</span>(y)                                        <span class="comment"># 使用Numpy库中max()函数求y中数据的最大值</span></span><br><span class="line">    Positon=np.where(y==np.<span class="built_in">max</span>(y))                           <span class="comment"># 找到y最大值对应的索引值（可理解为序号）</span></span><br><span class="line">    Time=(x[Positon[<span class="number">0</span>][<span class="number">0</span>]])                                  <span class="comment"># 提取索引值对应时刻</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;零件处油温最大值%d&#x27;</span> %T_C_Max+\</span><br><span class="line">          <span class="string">&#x27;时间是&#x27;</span>+timeconvert(Time))                        <span class="comment"># 打印零件处油温最大值及对应的时间（秒转化为分钟）</span></span><br><span class="line"></span><br><span class="line">    new_Doc = document.add_paragraph\</span><br><span class="line">        (<span class="string">&#x27;零件处油温最大值为 &#x27;</span>+<span class="built_in">str</span>(T_C_Max)+<span class="string">&#x27; ℃，&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;时间是&#x27;</span>+timeconvert(Time),style=<span class="string">&#x27;List Bullet&#x27;</span>)     <span class="comment"># 新增段落文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">VehSpdCheck</span>(<span class="params">Singal</span>):                                     <span class="comment"># 定义Signal_Data_Max()函数</span></span><br><span class="line">    x=Singal.timestamps                                      <span class="comment"># 提取Signal中所有时刻值存放列表x()中</span></span><br><span class="line">    <span class="comment">#print(Singal.display_name)</span></span><br><span class="line">    y=Singal.samples                                         <span class="comment"># 提取Signal中所有实测值存放列表y()中</span></span><br><span class="line">    Average_Vehspd=np.<span class="built_in">sum</span>(y)/<span class="built_in">len</span>(y)                          <span class="comment"># 使用Numpy库中sum()函数求和后除以点的个数</span></span><br><span class="line">    Drive_Distance=Average_Vehspd*x[-<span class="number">1</span>]/<span class="number">3600</span>                 <span class="comment"># 行驶里程通过均值与时间乘积获得</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;该文件平均车速 %.2f km/h,&#x27;</span> %Average_Vehspd+\</span><br><span class="line">    <span class="string">&#x27;行驶里程 %.2f km&#x27;</span> %Drive_Distance)                      <span class="comment"># 打印平均车速和行驶里程（使用换行\）</span></span><br><span class="line"></span><br><span class="line">    Average_Vehspd_str=<span class="built_in">str</span>(<span class="built_in">round</span>(Average_Vehspd, <span class="number">2</span>))         <span class="comment"># 平均速度保留两位，转化为字符串</span></span><br><span class="line">    Drive_Distance_str =<span class="built_in">str</span>(<span class="built_in">round</span>( Drive_Distance, <span class="number">2</span>))       <span class="comment"># 行驶里程保留两位，转化为字符串</span></span><br><span class="line">    new_Doc = document.add_paragraph\</span><br><span class="line">        (<span class="string">&#x27;该文件平均车速 &#x27;</span>+ Average_Vehspd_str+<span class="string">&#x27; km/h，&#x27;</span>+\</span><br><span class="line">         <span class="string">&#x27;行驶里程= &#x27;</span>+Drive_Distance_str+<span class="string">&#x27; km&#x27;</span>+<span class="string">&#x27;，见下图：&#x27;</span>,style=<span class="string">&#x27;List Bullet&#x27;</span>)</span><br><span class="line">                                                             <span class="comment"># 新增段落文本</span></span><br><span class="line"></span><br><span class="line">    plt.figure(Adress_str+<span class="string">&#x27;--&#x27;</span>+Singal.display_name)          <span class="comment"># 图表命名为文件名加信号名称</span></span><br><span class="line">    plt.axis([np.<span class="built_in">min</span>(x),np.<span class="built_in">max</span>(x),<span class="number">0</span>,np.<span class="built_in">max</span>(y)])              <span class="comment"># 使用pyplot函数定义x轴和y轴最大及最小值</span></span><br><span class="line">    plt.plot(x,y,label=<span class="string">&#x27;$VehSpd$&#x27;</span>)                           <span class="comment"># 使用pyplot作图，图例为VehSpd</span></span><br><span class="line">    plt.xlabel(<span class="string">&#x27;t (s) &#x27;</span>)                                     <span class="comment"># 增加X轴-坐标轴标题</span></span><br><span class="line">    plt.ylabel(<span class="string">&#x27;VehicleSpeed (km/h) &#x27;</span>)                       <span class="comment"># 增加y轴-坐标轴标题</span></span><br><span class="line"></span><br><span class="line">    plt.fill_between(x,y1=y,y2=<span class="number">0</span>,facecolor=<span class="string">&#x27;purple&#x27;</span>,\</span><br><span class="line">                     alpha=<span class="number">0.2</span>)                              <span class="comment"># 对y与x围成面积着色，展示速度求积分→里程</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    plt.text(x[-<span class="number">1</span>]/<span class="number">3</span>,np.<span class="built_in">max</span>(y)-<span class="number">3</span>, <span class="string">&#x27;DriveDistance:%.2f km&#x27;</span> \</span><br><span class="line">             %Drive_Distance, \</span><br><span class="line">             fontdict=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>&#125;)          <span class="comment">#  x轴坐标，y轴坐标,显示内容,字体大小、颜色</span></span><br><span class="line"></span><br><span class="line">    plt.title(Adress_str)                                    <span class="comment"># 将全局变量信息增加入表头</span></span><br><span class="line">    <span class="comment">#plt.title(Adress_str+&#x27;__&#x27;+&#x27;(DriveDistance: %.2f &#x27;%Drive_Distance+&#x27; km)&#x27;)</span></span><br><span class="line">    plt.legend(loc=<span class="string">&#x27;upper right&#x27;</span>)                            <span class="comment"># 图例选择最佳位置，可选择best</span></span><br><span class="line">    <span class="comment">#plt.show()                                              # 显示图例</span></span><br><span class="line">    picture_name=Adress_str +<span class="string">&#x27;-&#x27;</span>+ \</span><br><span class="line">                 Singal.display_name+<span class="string">&#x27;.png&#x27;</span>                  <span class="comment"># 图片保存时名称</span></span><br><span class="line">    plt.savefig(picture_name, dpi=<span class="number">200</span>)                       <span class="comment"># 保存图片</span></span><br><span class="line"></span><br><span class="line">    new_Doc = document.add_picture(picture_name, width=Inches(<span class="number">5.0</span>))</span><br><span class="line">                                                             <span class="comment"># 图片写入word</span></span><br><span class="line">    os.remove(picture_name)                                  <span class="comment"># 删除图片文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">T_Subtract_Peak</span>(<span class="params">T1,T2,threshold</span>):</span><br><span class="line">    <span class="comment"># T1.plot()                                              # 使用ASAMMDF自带Plot制图</span></span><br><span class="line">    <span class="comment"># T2.plot()</span></span><br><span class="line">    x = T1.timestamps                                        <span class="comment"># 提取信号T1中所有时刻值的点存放列表x()中</span></span><br><span class="line">    y1 = T1.samples                                          <span class="comment"># 提取信号T1中所有信号值的点存放列表y()中</span></span><br><span class="line">    y2 = T2.samples                                          <span class="comment"># 提取信号T2中所有信号值的点存放列表y()中</span></span><br><span class="line">    k = <span class="built_in">len</span>(x)                                               <span class="comment"># 统计数据的总个数</span></span><br><span class="line"></span><br><span class="line">    a = <span class="number">0</span>                                                    <span class="comment"># 定义数字a</span></span><br><span class="line">    i = <span class="number">0</span>                                                    <span class="comment"># 定义数字i</span></span><br><span class="line">    m = <span class="number">0</span>                                                    <span class="comment"># 定义数字m</span></span><br><span class="line"></span><br><span class="line">    T_Up = []                                                <span class="comment"># 定义T_Up为列表</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, k):</span><br><span class="line">        T_Up.append(y1[a] - y2[a])                           <span class="comment"># 将所有温差点写入T_Up</span></span><br><span class="line">    y3 = T_Up</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt; k - <span class="number">1</span>:                                         <span class="comment"># 从0到k，使用while循环，条件满足一直执行</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(T1.samples[i] - T2.samples[i]) &gt;= \</span><br><span class="line">                threshold:                                   <span class="comment"># T1和T2在某时刻温差大于门限值,执行一次</span></span><br><span class="line">            j = i                                            <span class="comment"># 过滤信号毛刺，寻找大于门限值波峰个数</span></span><br><span class="line">            <span class="keyword">while</span> j &lt; k - <span class="number">1</span>:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">int</span>(T1.samples[j] - \</span><br><span class="line">                       T2.samples[j]) &lt; threshold - <span class="number">3</span>:        <span class="comment"># 设置差值为2作为过滤信号</span></span><br><span class="line">                    m = m + <span class="number">1</span>                                 <span class="comment"># 记录波峰个数</span></span><br><span class="line">                    time = <span class="built_in">int</span>(j / k * T1.timestamps[-<span class="number">1</span>] / <span class="number">60</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;该文件零件处油温与油底壳温差大于&#x27;</span> + <span class="built_in">str</span>(threshold) + <span class="string">&#x27;的波峰第 %d 处,&#x27;</span> % m + \</span><br><span class="line">                          <span class="string">&#x27;时间是 %d s,&#x27;</span> % time + <span class="string">&#x27;零件处油温 %d ℃&#x27;</span> % T1.samples[j])</span><br><span class="line"></span><br><span class="line">                    new_Doc = document.add_paragraph \</span><br><span class="line">                        (<span class="string">&#x27;该文件零件处油温与油底壳温差大于&#x27;</span>\</span><br><span class="line">                         + <span class="built_in">str</span>(threshold) + <span class="string">&#x27;℃的波峰第&#x27;</span> +\</span><br><span class="line">                         <span class="built_in">str</span>(m) + <span class="string">&#x27;处，时间是&#x27;</span> + timeconvert(time))</span><br><span class="line">                                                              <span class="comment"># 新增段落文本</span></span><br><span class="line"></span><br><span class="line">                    i = j                                     <span class="comment"># 局部变量i更新为j</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>                                     <span class="comment"># 循环退出</span></span><br><span class="line">        i = i + <span class="number">1</span>                                             <span class="comment"># 以上程序不执行或者退出，执行i自加</span></span><br><span class="line"></span><br><span class="line">    plt.figure(Adress_str + <span class="string">&#x27;—&#x27;</span> + T1.display_name +</span><br><span class="line">               <span class="string">&#x27;-&#x27;</span> + T1.display_name)                         <span class="comment"># 图表命名为文件名加两信号名称</span></span><br><span class="line"></span><br><span class="line">    fig = plt.figure(num=<span class="number">1</span>, figsize=(<span class="number">15</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)         <span class="comment"># 开启一个窗口，同时设置大小，分辨率</span></span><br><span class="line">    fig, ax1 = plt.subplots()                                <span class="comment"># 作1个图</span></span><br><span class="line">    ax2 = ax1.twinx()                                        <span class="comment"># 坐标轴2为次要坐标</span></span><br><span class="line">    ax1.plot(x, y1, <span class="string">&#x27;-&#x27;</span>, color=<span class="string">&#x27;g&#x27;</span>, label=<span class="string">&#x27;TCOil&#x27;</span>)           <span class="comment"># 绘制曲线y1，含线型、颜色、图例名称</span></span><br><span class="line">    ax1.plot(x, y2, <span class="string">&#x27;-&#x27;</span>, color=<span class="string">&#x27;b&#x27;</span>, label=<span class="string">&#x27;TOil&#x27;</span>)            <span class="comment"># 绘制曲线y2</span></span><br><span class="line">    ax2.plot(x, y3, <span class="string">&#x27;-&#x27;</span>, color=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;T_Up&#x27;</span>)            <span class="comment"># 绘制曲线y3</span></span><br><span class="line">    ax1.legend(loc=<span class="string">&#x27;upper left&#x27;</span>)                             <span class="comment"># 显示图例位置,plt.legend()，左上</span></span><br><span class="line">    ax2.legend(loc=<span class="string">&#x27;upper right&#x27;</span>)                            <span class="comment"># 显示图例位置,右上</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ax1.set_xlim(-5,5)</span></span><br><span class="line">    ax1.set_ylim(np.<span class="built_in">min</span>(y2) - <span class="number">5</span>, np.<span class="built_in">max</span>(y1) + <span class="number">5</span>)             <span class="comment"># 设定y1轴最大最小值</span></span><br><span class="line">    ax2.set_ylim(np.<span class="built_in">min</span>(y3) - <span class="number">5</span>, np.<span class="built_in">max</span>(y3) + <span class="number">5</span>)             <span class="comment">#  同上</span></span><br><span class="line"></span><br><span class="line">    ax1.set_title(Adress_str)                                <span class="comment"># 图表表头</span></span><br><span class="line"></span><br><span class="line">    ax1.set_xlabel(<span class="string">&#x27;time(s)&#x27;</span>)                                <span class="comment"># 设定x轴标题</span></span><br><span class="line">    ax1.set_ylabel(<span class="string">&quot;TC_Oil &amp; T_Oil (℃)&quot;</span>, color=<span class="string">&#x27;b&#x27;</span>)         <span class="comment">#  设定y1轴标题</span></span><br><span class="line">    ax2.set_ylabel(<span class="string">&quot;T_Up(℃)&quot;</span>, color=<span class="string">&#x27;r&#x27;</span>)                    <span class="comment"># 设定y2轴标题</span></span><br><span class="line">    <span class="comment"># plt.show()                                             # 参考之前注释</span></span><br><span class="line"></span><br><span class="line">    picture_name = Adress_str + <span class="string">&#x27;-&#x27;</span> + T1.display_name + <span class="string">&#x27;-&#x27;</span> + T2.display_name +<span class="string">&#x27;.png&#x27;</span></span><br><span class="line">    plt.savefig(picture_name, dpi=<span class="number">100</span>)                       <span class="comment"># 保存图片文件到文件夹</span></span><br><span class="line"></span><br><span class="line">    new_Doc = document.add_picture(picture_name, width=Inches(<span class="number">6.0</span>))</span><br><span class="line">                                                             <span class="comment"># 保存图片到word</span></span><br><span class="line">    os.remove(picture_name)                                  <span class="comment"># 删除图片文件</span></span><br><span class="line"></span><br><span class="line">file_path = <span class="string">&#x27;D:\SoftApp\Python\HardWay2StudyPython\MDFData&#x27;</span>  <span class="comment"># 文件所在文件夹</span></span><br><span class="line">now_time=dt.datetime.now().strftime(<span class="string">&#x27;%F  %T&#x27;</span>)                <span class="comment"># 调用系统时间</span></span><br><span class="line">Veh_VIN=<span class="built_in">input</span>(<span class="string">&quot;请在下方输入故障排查车辆VIN数字编号后，回车：&quot;</span>) <span class="comment"># 提示输入车辆信息</span></span><br><span class="line"><span class="built_in">print</span>(Veh_VIN+<span class="string">&quot;车辆&quot;</span>+<span class="string">&#x27;数据分析时间：&#x27;</span>+now_time)               <span class="comment"># 打印输出车辆和系统时间</span></span><br><span class="line"></span><br><span class="line">document = docx.Document()                                  <span class="comment"># 创建word文档对象</span></span><br><span class="line">document.add_heading(Veh_VIN+<span class="string">&#x27;车排查信息&#x27;</span>, <span class="number">0</span>)                <span class="comment"># 添加文档标题</span></span><br><span class="line">new_Doc= document.add_paragraph \</span><br><span class="line">    (<span class="string">&#x27;主要排查行驶里程、最高油温、\</span></span><br><span class="line"><span class="string">    零件处与变速箱油温差值出现的峰值数。 &#x27;</span>)                    <span class="comment"># 新增段落文本，字符\用于换行</span></span><br><span class="line">new_Doc=document.add_paragraph\</span><br><span class="line">     (Veh_VIN+<span class="string">&quot;车辆&quot;</span>+<span class="string">&#x27;数据分析时间：&#x27;</span>+ now_time)              <span class="comment"># 新增段落文本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(file_path):                 <span class="comment"># os.walk返回三个对象: dirpath(目录路径，string类型) ;</span></span><br><span class="line">                                                             <span class="comment"># dirname(多个子目录名，列表); filename(多个文件名，列表）</span></span><br><span class="line">    Documents=[os.path.join(root, name) <span class="keyword">for</span> name <span class="keyword">in</span> files]   <span class="comment"># 遍历文件名存放list(列表)类型的Documets</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> Document_Path <span class="keyword">in</span> Documents:                              <span class="comment"># 遍历文件名对应的地址（假设有3个文件地址）</span></span><br><span class="line">    <span class="comment"># print(Document_path.info())                            # 打印MDF文件信号，例如可以看到有哪些信号</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">60</span>)                                            <span class="comment"># 打印分割行</span></span><br><span class="line"></span><br><span class="line">    new_Doc = document.add_paragraph(<span class="string">&#x27;-&#x27;</span>*<span class="number">100</span>)                <span class="comment"># 新增段落文本，字符\用于换行</span></span><br><span class="line">    new_Doc = document.add_paragraph(<span class="string">&#x27;-&#x27;</span> * <span class="number">100</span>)              <span class="comment"># 新增段落文本，字符\用于换行</span></span><br><span class="line"></span><br><span class="line">    Adress=Document_Path.split(<span class="string">&#x27;\\&#x27;</span>)[-<span class="number">1</span>]                     <span class="comment"># 提取路径中的含后缀的文件名</span></span><br><span class="line">    Adress_str=Adress.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]                          <span class="comment"># 提取路径中的文件名</span></span><br><span class="line"></span><br><span class="line">    check_MDF(Document_Path)                                 <span class="comment"># 调用def check_MDF()函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常用API">常用API</h3><ul><li>1.基础文件读取</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> asammdf <span class="keyword">import</span> MDF</span><br><span class="line"> </span><br><span class="line">f = <span class="string">r&quot;xxx.mdf&quot;</span></span><br><span class="line">mdf = MDF(f)</span><br><span class="line">signal = mdf.get(<span class="string">&#x27;信号名&#x27;</span>)</span><br><span class="line">data = signal.samples</span><br><span class="line">timestamps = signal.timestamps</span><br></pre></td></tr></table></figure><ul><li>2.信号数据获取与数据转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chn_db = mdf.channels_db</span><br><span class="line"><span class="comment">#代码接上</span></span><br><span class="line">df = mdf.to_dataframe()</span><br></pre></td></tr></table></figure><ul><li>3.channel和channelgroup获取</li></ul><blockquote><p>mdf文件一般是用channel和channel group组织的，一个文件可能包含多个chnannel group，一个channel group也可以包含多个channel，channel和signal一一对应，channel保存了一些描述信息，数据和时间戳保存在signal里。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> group_index, (virtual_group_index, virtual_group) <span class="keyword">in</span> <span class="built_in">enumerate</span>(</span><br><span class="line">            mdf_ins.virtual_groups.items()</span><br><span class="line">        ):</span><br><span class="line">            <span class="keyword">if</span> virtual_group.cycles_nr == <span class="number">0</span> <span class="keyword">and</span> empty_channels == <span class="string">&quot;skip&quot;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line">            channels = [</span><br><span class="line">                (<span class="literal">None</span>, gp_index, ch_index)</span><br><span class="line">                <span class="keyword">for</span> gp_index, channel_indexes <span class="keyword">in</span> mdf_ins.included_channels(</span><br><span class="line">                    virtual_group_index</span><br><span class="line">                )[virtual_group_index].items()</span><br><span class="line">                <span class="keyword">for</span> ch_index <span class="keyword">in</span> channel_indexes</span><br><span class="line">                <span class="keyword">if</span> ch_index != mdf_ins.masters_db.get(gp_index, <span class="literal">None</span>)</span><br><span class="line">            ]</span><br></pre></td></tr></table></figure><ul><li>4.基础文件创建（mf4、mdf）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">*asammdf* MDF usage example</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> asammdf <span class="keyword">import</span> MDF, Signal</span><br><span class="line"> </span><br><span class="line"><span class="comment"># create 3 Signal objects</span></span><br><span class="line"> </span><br><span class="line">timestamps = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>, <span class="number">0.4</span>, <span class="number">0.5</span>], dtype=np.float32)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># unit8</span></span><br><span class="line">s_uint8 = Signal(</span><br><span class="line">    samples=np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], dtype=np.uint8),</span><br><span class="line">    timestamps=timestamps,</span><br><span class="line">    name=<span class="string">&quot;Uint8_Signal&quot;</span>,</span><br><span class="line">    unit=<span class="string">&quot;u1&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># int32</span></span><br><span class="line">s_int32 = Signal(</span><br><span class="line">    samples=np.array([-<span class="number">20</span>, -<span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>], dtype=np.int32),</span><br><span class="line">    timestamps=timestamps,</span><br><span class="line">    name=<span class="string">&quot;Int32_Signal&quot;</span>,</span><br><span class="line">    unit=<span class="string">&quot;i4&quot;</span>,</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># float64</span></span><br><span class="line">s_float64 = Signal(</span><br><span class="line">    samples=np.array([-<span class="number">20</span>, -<span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>], dtype=np.float64),</span><br><span class="line">    timestamps=timestamps,</span><br><span class="line">    name=<span class="string">&quot;Float64_Signal&quot;</span>,</span><br><span class="line">    unit=<span class="string">&quot;f8&quot;</span>,</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># create empty MDf version 4.00 file</span></span><br><span class="line"><span class="keyword">with</span> MDF(version=<span class="string">&quot;4.10&quot;</span>) <span class="keyword">as</span> mdf4:</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># append the 3 signals to the new file</span></span><br><span class="line">    signals = [s_uint8, s_int32, s_float64]</span><br><span class="line">    mdf4.append(signals, comment=<span class="string">&quot;Created by Python&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># save new file</span></span><br><span class="line">    mdf4.save(<span class="string">&quot;my_new_file.mf4&quot;</span>, overwrite=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># convert new file to mdf version 3.10</span></span><br><span class="line">    mdf3 = mdf4.convert(version=<span class="string">&quot;3.10&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(mdf3.version)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># get the float signal</span></span><br><span class="line">    sig = mdf3.get(<span class="string">&quot;Float64_Signal&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(sig)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># cut measurement from 0.3s to end of measurement</span></span><br><span class="line">    mdf4_cut = mdf4.cut(start=<span class="number">0.3</span>)</span><br><span class="line">    mdf4_cut.get(<span class="string">&quot;Float64_Signal&quot;</span>).plot()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># cut measurement from start of measurement to 0.4s</span></span><br><span class="line">    mdf4_cut = mdf4.cut(stop=<span class="number">0.45</span>)</span><br><span class="line">    mdf4_cut.get(<span class="string">&quot;Float64_Signal&quot;</span>).plot()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># filter some signals from the file</span></span><br><span class="line">    mdf4 = mdf4.<span class="built_in">filter</span>([<span class="string">&quot;Int32_Signal&quot;</span>, <span class="string">&quot;Uint8_Signal&quot;</span>])</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># save using zipped transpose deflate blocks</span></span><br><span class="line">    mdf4.save(<span class="string">&quot;out.mf4&quot;</span>, compression=<span class="number">2</span>, overwrite=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><ul><li>[1].官方API文档: <a href="https://asammdf.readthedocs.io/en/master/">https://asammdf.readthedocs.io/en/master/</a></li><li>[2].源代码：<a href="https://github.com/danielhrisca/asammdf">https://github.com/danielhrisca/asammdf</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python 读写 ini config 文件</title>
      <link href="/2023/11/06/python-ini-file-config/"/>
      <url>/2023/11/06/python-ini-file-config/</url>
      
        <content type="html"><![CDATA[<h1>使用python 读写 ini config 文件</h1><blockquote><p>使用configparser 库读写ini文件,ini配置文件由节、键、值组成;【参数】（键=值）：INI所包含的最基本的“元素”就是参数（parameter），每个参数都有一个name和一个value，name和value由等号“=”隔开，name在等号的左边</p></blockquote><h2 id="编写">编写</h2><ul><li>ini文件在程序开发中经常使用，具体形式如下</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[minio_config_selected]</span></span><br><span class="line"><span class="comment">;注释 section name 节 name = value</span></span><br><span class="line"><span class="attr">minio_config_id</span> = <span class="number">3245678</span></span><br><span class="line"><span class="attr">minio_server_ip</span> = <span class="number">11.22</span>.<span class="number">10.12</span></span><br><span class="line"><span class="attr">minio_server_port</span> = <span class="number">9000</span></span><br><span class="line"><span class="attr">minio_account</span> = <span class="number">1321</span></span><br><span class="line"><span class="attr">minio_password</span> = <span class="number">12312</span></span><br><span class="line"><span class="attr">mark_msg</span> = wewe</span><br><span class="line"><span class="attr">enable</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="读写">读写</h2><ul><li>读取ini文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_ini_config</span>(<span class="params">file_name, section, value_key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    读取指定配置文件</span></span><br><span class="line"><span class="string">    :param file_name: ini file name</span></span><br><span class="line"><span class="string">    :param section: ini file section name</span></span><br><span class="line"><span class="string">    :param value_key: ini file content name</span></span><br><span class="line"><span class="string">    :return: select value</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># file_name = &quot;../config/config.ini&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Writing Data</span></span><br><span class="line">    config = configparser.ConfigParser()</span><br><span class="line"></span><br><span class="line">    config.read(file_name, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    keys = [</span><br><span class="line">        <span class="string">&quot;host&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user&quot;</span>,</span><br><span class="line">        <span class="string">&quot;port&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>,</span><br><span class="line">        <span class="string">&quot;port&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># for key in keys:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        value = config.get(section, value_key)</span><br><span class="line">        <span class="comment"># logger.info(&quot;read ini file :&quot; + file_name + &quot;, ini file config content : &quot; + config.get(section, value_key))</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">except</span> configparser.NoSectionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># logger.info(&quot;normal&quot;)</span></span><br><span class="line">        logger.error(<span class="string">&quot;Error! section: &quot;</span> + section + <span class="string">&quot;, value_key :&quot;</span> + value_key + <span class="string">&quot;, value error content: &quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;log_dir&quot;</span></span><br><span class="line">    <span class="keyword">except</span> configparser.NoOptionError:</span><br><span class="line">        logger.error(<span class="string">f&quot;No option &#x27;<span class="subst">&#123;section&#125;</span>&#x27; in section , please re input config key&#x27;&#x27;&quot;</span> + value_key)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>2.写入配置内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_minio_config_to_file</span>(<span class="params">minio_config</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    ini 配置文件写入</span></span><br><span class="line"><span class="string">    :param minio_config: 元组 notice</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    iniPath = os.path.realpath(ini_file_path)  <span class="comment"># 读取生成后运行时的临时文件目录</span></span><br><span class="line">    logger.info(<span class="string">&quot;generate file path：&quot;</span> + iniPath)</span><br><span class="line">    conf = configparser.ConfigParser()</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(iniPath):</span><br><span class="line">        os.remove(iniPath)</span><br><span class="line">    logger.warning(<span class="string">&quot;Not Found config ini file , creating ini file ....&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ini_path):</span><br><span class="line">        os.makedirs(ini_path)</span><br><span class="line">        logger.debug(<span class="string">&quot;dir not exists ,create dir&quot;</span>)</span><br><span class="line">    <span class="comment"># tes = open(iniPath, &#x27;a+&#x27;)</span></span><br><span class="line">    <span class="comment"># tes.close()</span></span><br><span class="line">    conf.read(iniPath, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    logger.info(<span class="string">&quot;start generate config ini file :&quot;</span>)</span><br><span class="line"></span><br><span class="line">    conf.add_section(<span class="string">&quot;minio_config_selected&quot;</span>)</span><br><span class="line">    conf.<span class="built_in">set</span>(<span class="string">&quot;minio_config_selected&quot;</span>, <span class="string">&quot;minio_config_id&quot;</span>, minio_config[<span class="string">&#x27;minio_config_id&#x27;</span>])</span><br><span class="line">    conf.<span class="built_in">set</span>(<span class="string">&quot;minio_config_selected&quot;</span>, <span class="string">&quot;minio_server_ip&quot;</span>, minio_config[<span class="string">&#x27;minio_server_ip&#x27;</span>])  <span class="comment"># 写入配置参数</span></span><br><span class="line">    conf.<span class="built_in">set</span>(<span class="string">&quot;minio_config_selected&quot;</span>, <span class="string">&quot;minio_server_port&quot;</span>, <span class="built_in">str</span>(minio_config[<span class="string">&#x27;minio_server_port&#x27;</span>]))</span><br><span class="line">    conf.<span class="built_in">set</span>(<span class="string">&quot;minio_config_selected&quot;</span>, <span class="string">&quot;minio_account&quot;</span>, minio_config[<span class="string">&#x27;minio_account&#x27;</span>])</span><br><span class="line">    conf.<span class="built_in">set</span>(<span class="string">&quot;minio_config_selected&quot;</span>, <span class="string">&quot;minio_password&quot;</span>, minio_config[<span class="string">&#x27;minio_password&#x27;</span>])</span><br><span class="line">    conf.<span class="built_in">set</span>(<span class="string">&quot;minio_config_selected&quot;</span>, <span class="string">&quot;mark_msg&quot;</span>, minio_config[<span class="string">&#x27;mark_msg&#x27;</span>])</span><br><span class="line">    conf.<span class="built_in">set</span>(<span class="string">&quot;minio_config_selected&quot;</span>, <span class="string">&quot;enable&quot;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="comment"># conf.set(minio_config.minio_config_id, &quot;minio_server_ip&quot;, minio_config.minio_server_ip)</span></span><br><span class="line">    <span class="comment"># tes.write(conf.values())</span></span><br><span class="line">    conf.write(<span class="built_in">open</span>(iniPath, <span class="string">&#x27;a+&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    conf.read(iniPath, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    logger.info(<span class="string">&quot;config write finished , read test : &quot;</span> + conf.get(<span class="string">&quot;minio_config_selected&quot;</span>, <span class="string">&quot;minio_server_ip&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Spring Cloud应用activiti流程框架</title>
      <link href="/2023/08/29/spring-cloud-activiti/"/>
      <url>/2023/08/29/spring-cloud-activiti/</url>
      
        <content type="html"><![CDATA[<h1>基于Spring Cloud应用activiti流程框架</h1><h2 id="activiti工作流简介">activiti工作流简介</h2><blockquote><p>Activiti 是一个开源架构的工作流引擎，基于bpmn2.0 标准进行流程定义。其前身是JBPM，Activiti 通过嵌入到业务系统开发中进行使用。</p></blockquote><h2 id="引入与使用">引入与使用</h2><ul><li>1.maven pom.xml文件引入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入Activiti7 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0.M4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 7.1.0版本排除mybatis 防止冲突 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti.dependencies<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0.M4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 生成流程图 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-image-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0.M4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.yml配置文件编写</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">16666</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">activity</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://$&#123;MYSQL_HOST:localhost&#125;:$&#123;MYSQL_PORT:3306&#125;/activity?useUnicode=true&amp;characterEncoding=UTF8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">activity</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">activity</span></span><br><span class="line">    <span class="comment"># 使用druid数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">select</span> <span class="string">&#x27;x&#x27;</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">maxOpenPreparedStatements:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">activiti:</span></span><br><span class="line">    <span class="comment">#关闭activiti自动部署（使用流程设计器部署，不使用具体文件访问方式）</span></span><br><span class="line">    <span class="attr">check-process-definitions:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#设置流程引擎启动和关闭时数据库执行的策略</span></span><br><span class="line">    <span class="comment">#false：false为默认值，设置为该值后，Activiti在启动时，会对比数据库表中保存的版本，如果版本不匹配时，将在启动时抛出异常。</span></span><br><span class="line">    <span class="comment">#true：设置为该值后，Activiti会对数据库中所有的表进行更新，如果表不存在，则Activiti会自动创建。</span></span><br><span class="line">    <span class="comment">#create-drop：Activiti启动时，会执行数据库表的创建操作，在Activiti关闭时，执行数据库表的删除操作。</span></span><br><span class="line">    <span class="comment">#drop-create：Activiti启动时，执行数据库表的删除操作在Activiti关闭时，会执行数据库表的创建操作。</span></span><br><span class="line">    <span class="attr">database-schema-update:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#保存历史数据级别设置为full最高级别，便于历史数据的追溯</span></span><br><span class="line">    <span class="comment">#none：不保存任何的历史数据，因此，在流程执行过程中，这是最高效的。</span></span><br><span class="line">    <span class="comment">#activity：级别高于none，保存流程实例与流程行为，其他数据不保存。</span></span><br><span class="line">    <span class="comment">#audit：除activity级别会保存的数据外，还会保存全部的流程任务及其属性。audit为history的默认值。</span></span><br><span class="line">    <span class="comment">#full：保存历史数据的最高级别，除了会保存audit级别的数据外，还会保存其他全部流程相关的细节数据，包括一些流程参数等。</span></span><br><span class="line">    <span class="attr">history-level:</span> <span class="string">full</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">base-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.acti:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><ul><li>3.启动类配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acti;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.spring.boot.SecurityAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Desc</span> activity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> jx111</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/11/29-16:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123; SecurityAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ActivityApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：@SpringBootApplication(exclude = { SecurityAutoConfiguration.class}) 排除注解，取消登陆限制。<br>启动服务后，可在数据库中观察到表名以act_为首的25张表生成。</p></blockquote><h2 id="整合发布">整合发布</h2><h3 id="spring-cloud整合SpringSecurity">spring cloud整合SpringSecurity</h3><ul><li>1.添加工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czq.image.util;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import com.czq.image.dao.UserRepository.java;</span></span><br><span class="line"><span class="keyword">import</span> com.czq.image.dao.SysUserRepository;</span><br><span class="line"><span class="comment">//import com.czq.image.service.impl.MyUserD??etailsService;</span></span><br><span class="line"><span class="keyword">import</span> com.czq.model.image.entity.SysUserEntity;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.AuthorizationScope;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.AuthorityUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.Permission;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(onConstructor = @__(@Autowired))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityUtil</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public SecurityUtil() &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logInAs</span><span class="params">(String username)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> userDetailsService.loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;User &quot;</span> + username + <span class="string">&quot; doesn&#x27;t exist, please provide a valid user&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SecurityContextHolder.setContext(<span class="keyword">new</span> <span class="title class_">SecurityContextImpl</span>(<span class="keyword">new</span> <span class="title class_">Authentication</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">                <span class="keyword">return</span> user.getAuthorities();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">getCredentials</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> user.getPassword();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">getDetails</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">getPrincipal</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAuthenticated</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthenticated</span><span class="params">(<span class="type">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> user.getUsername();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">        org.activiti.engine.impl.identity.Authentication.setAuthenticatedUserId(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>2.添加配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czq.image.config;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import com.czq.image.service.impl.MyUserDetailsService;</span></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.provisioning.InMemoryUserDetailsManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.firewall.HttpFirewall;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.firewall.StrictHttpFirewall;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplicationConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(DemoApplicationConfiguration.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(myUserDetailsService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserDetailsService <span class="title function_">myUserDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InMemoryUserDetailsManager</span> <span class="variable">inMemoryUserDetailsManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>();</span><br><span class="line"></span><br><span class="line">        String[][] usersGroupsAndRoles = &#123;</span><br><span class="line">                &#123;<span class="string">&quot;salaboy&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;ROLE_ACTIVITI_USER&quot;</span>, <span class="string">&quot;GROUP_activitiTeam&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;ryandawsonuk&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;ROLE_ACTIVITI_USER&quot;</span>, <span class="string">&quot;GROUP_activitiTeam&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;erdemedeiros&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;ROLE_ACTIVITI_USER&quot;</span>, <span class="string">&quot;GROUP_activitiTeam&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;other&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;ROLE_ACTIVITI_USER&quot;</span>, <span class="string">&quot;GROUP_otherTeam&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;ROLE_ACTIVITI_ADMIN&quot;</span>&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String[] user : usersGroupsAndRoles) &#123;</span><br><span class="line">            List&lt;String&gt; authoritiesStrings = Arrays.asList(Arrays.copyOfRange(user, <span class="number">2</span>, user.length));</span><br><span class="line">            logger.info(<span class="string">&quot;&gt; Registering new user: &quot;</span> + user[<span class="number">0</span>] + <span class="string">&quot; with the following Authorities[&quot;</span> + authoritiesStrings + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            inMemoryUserDetailsManager.createUser(<span class="keyword">new</span> <span class="title class_">User</span>(user[<span class="number">0</span>], passwordEncoder().encode(user[<span class="number">1</span>]),</span><br><span class="line">                    authoritiesStrings.stream().map(s -&gt; <span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(s)).collect(Collectors.toList())));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> inMemoryUserDetailsManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest().permitAll()</span><br><span class="line"><span class="comment">//                .authenticated()</span></span><br><span class="line">                .and()</span><br><span class="line"><span class="comment">//                .cors()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//                .and().</span></span><br><span class="line">                .httpBasic();</span><br><span class="line"><span class="comment">//                .and()</span></span><br><span class="line"><span class="comment">//                .cors(c -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                        CorsConfigurationSource source = request -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                        CorsConfiguration config = new CorsConfiguration();</span></span><br><span class="line"><span class="comment">//                        config.setAllowedOrigins(Arrays.asList(&quot;*&quot;));</span></span><br><span class="line"><span class="comment">//                        config.setAllowedMethods(Arrays.asList(&quot;*&quot;));</span></span><br><span class="line"><span class="comment">//                return config;</span></span><br><span class="line"><span class="comment">//            &#125;;</span></span><br><span class="line"><span class="comment">//            c.configurationSource(source);</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/js/**&quot;</span>,<span class="string">&quot;/resources/**&quot;</span>,<span class="string">&quot;/templates/**&quot;</span>,<span class="string">&quot;/lib/**&quot;</span>,<span class="string">&quot;/file/**&quot;</span>,<span class="string">&quot;/img/**&quot;</span>,<span class="string">&quot;/swagger-ui.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    CorsConfigurationSource <span class="title function_">corsConfigurationSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        configuration.setAllowedOrigins(Arrays.asList(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">        configuration.setAllowedMethods(Arrays.asList(<span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>, <span class="string">&quot;HEAD&quot;</span>));</span><br><span class="line">        configuration.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        configuration.setExposedHeaders(Arrays.asList( <span class="string">&quot;access-control-allow-headers&quot;</span>,</span><br><span class="line">                <span class="string">&quot;access-control-allow-methods&quot;</span>,</span><br><span class="line">                <span class="string">&quot;access-control-allow-origin&quot;</span>,</span><br><span class="line">                <span class="string">&quot;access-Control-allow-credentials&quot;</span>,</span><br><span class="line">                <span class="string">&quot;access-control-max-age&quot;</span>,</span><br><span class="line">                <span class="string">&quot;X-Frame-Options&quot;</span>));</span><br><span class="line">        configuration.setAllowedHeaders(Arrays.asList(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;X-Requested-With&quot;</span>, <span class="string">&quot;accept&quot;</span>, <span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Origin&quot;</span>, <span class="string">&quot;Access-Control-Request-Method&quot;</span>, <span class="string">&quot;Access-Control-Request-Headers&quot;</span>));</span><br><span class="line">        configuration.setMaxAge(<span class="number">3600L</span>);</span><br><span class="line"><span class="comment">//        configuratio</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, configuration);</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HttpFirewall <span class="title function_">allowUrlEncodedSlashHttpFirewall</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StrictHttpFirewall</span> <span class="variable">firewall</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrictHttpFirewall</span>();</span><br><span class="line">        firewall.setAllowUrlEncodedSlash(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> firewall;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bpnm文件绘制生成">bpnm文件绘制生成</h3><ul><li>1.demo.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:activiti</span>=<span class="string">&quot;http://activiti.org/bpmn&quot;</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;myProcess_1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;My process&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startevent1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Start&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;usertask1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;one&quot;</span> <span class="attr">activiti:candidateGroups</span>=<span class="string">&quot;activitiTeam&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow1&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startevent1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;usertask1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;usertask2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;two&quot;</span> <span class="attr">activiti:candidateGroups</span>=<span class="string">&quot;activitiTeam&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow2&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;usertask1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;usertask2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;endevent1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;End&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow3&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;usertask2&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;endevent1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">&quot;BPMNDiagram_myProcess_1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;myProcess_1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNPlane_myProcess_1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;startevent1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;35.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;35.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;160.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;usertask1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_usertask1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;55.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;105.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;130.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;150.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;usertask2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_usertask2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;55.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;105.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;280.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;150.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;endevent1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;35.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;35.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;430.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;160.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;flow1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;85.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;130.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;flow2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;235.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;280.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;flow3&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_flow3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;385.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;430.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="接口定义与使用">接口定义与使用</h3><ul><li>1.接口定义</li></ul><blockquote><p>API文件接口编写</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czq.api.image;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//import com.czq.common.model.response.Result;</span></span><br><span class="line"><span class="keyword">import</span> com.czq.model.image.entity.Result;</span><br><span class="line"><span class="keyword">import</span> com.czq.model.image.request.AddXMLRequest;</span><br><span class="line"><span class="comment">//import com.czq.model.image.response.Result;</span></span><br><span class="line"><span class="keyword">import</span> com.czq.model.user.UserMessage;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Api(value = &quot;BPMN XML文件处理接口&quot;, description = &quot;BPMN XML处理公共接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BPMNControllerApi</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;上传BPMN内容字符串部署&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">postBPMNAndDeployment</span><span class="params">(AddXMLRequest addXMLRequest)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;XML文件上传部署&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">uploadFileAndDeployment</span><span class="params">(</span></span><br><span class="line"><span class="params">            MultipartFile processFile,</span></span><br><span class="line"><span class="params">            String processName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取流程资源文件&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getProcessDefineXML</span><span class="params">(String deploymentId, String resourceName, HttpServletResponse response)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;启动流程&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">startProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">            String processDefinitionKey,</span></span><br><span class="line"><span class="params">            String instanceName,</span></span><br><span class="line"><span class="params">            UserMessage userDetail)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;挂起流程&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">suspendInstance</span><span class="params">(String instanceId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;激活流程&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">resumeInstance</span><span class="params">(String instanceId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;完成任务&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">completeTask</span><span class="params">(String taskId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取任务&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getTasks</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;activiti流程测试&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">testActiviti</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2.controller中调用service实现功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czq.image.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.czq.api.image.BPMNControllerApi;</span><br><span class="line"><span class="comment">//import com.czq.common.model.response.Result;</span></span><br><span class="line"><span class="keyword">import</span> com.czq.image.service.BPMNService;</span><br><span class="line"><span class="keyword">import</span> com.czq.model.image.entity.Result;</span><br><span class="line"><span class="keyword">import</span> com.czq.model.image.request.AddXMLRequest;</span><br><span class="line"><span class="comment">//import com.czq.model.image.response.Result;v/</span></span><br><span class="line"><span class="keyword">import</span> com.czq.model.user.UserMessage;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.task.model.Task;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/bpmn&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BPMNController</span> <span class="keyword">implements</span> <span class="title class_">BPMNControllerApi</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BPMNService bpmnService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/postBPMNAndDeployment&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">postBPMNAndDeployment</span><span class="params">(<span class="meta">@RequestBody</span> AddXMLRequest addXMLRequest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bpmnService.postBPMNAndDeployment(addXMLRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/uploadFileAndDeployment&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">uploadFileAndDeployment</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(&quot;processFile&quot;)</span>MultipartFile processFile,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(value = &quot;processName&quot;,required = false)</span> String processName)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bpmnService.uploadFileAndDeployment(processFile,processName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getProcessDefineXML&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getProcessDefineXML</span><span class="params">(String deploymentId, String resourceName, HttpServletResponse response)</span> &#123;</span><br><span class="line">         bpmnService.getProcessDefineXML(deploymentId,resourceName,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/startProcess&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">startProcess</span><span class="params">(String processDefinitionKey, String instanceName, UserMessage userDetail)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bpmnService.startProcess(processDefinitionKey,instanceName,userDetail);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/suspendInstance/&#123;instanceId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">suspendInstance</span><span class="params">(<span class="meta">@PathVariable</span> String instanceId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bpmnService.suspendInstance(instanceId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/resumeInstance/&#123;instanceId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">resumeInstance</span><span class="params">(<span class="meta">@PathVariable</span> String instanceId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bpmnService.resumeInstance(instanceId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/completeTask/&#123;taskId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">completeTask</span><span class="params">(<span class="meta">@PathVariable</span> String taskId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bpmnService.completeTask(taskId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getTasks&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getTasks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bpmnService.getTasks();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testActiviti&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">testActiviti</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bpmnService.testActiviti();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>3.编写Controller调用的服务，服务通过调用activiti框架提供接口完成各项功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.czq.image.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.czq.common.model.response.CommonCode;</span><br><span class="line"><span class="comment">//import com.czq.common.model.response.Result;</span></span><br><span class="line"><span class="keyword">import</span> com.czq.image.service.BPMNService;</span><br><span class="line"><span class="keyword">import</span> com.czq.image.util.SecurityUtil;</span><br><span class="line"><span class="keyword">import</span> com.czq.model.image.entity.Result;</span><br><span class="line"><span class="keyword">import</span> com.czq.model.image.entity.vo.HistoricActivityInstanceVO;</span><br><span class="line"><span class="keyword">import</span> com.czq.model.image.entity.vo.TaskVO;</span><br><span class="line"><span class="keyword">import</span> com.czq.model.image.entity.vo.VOConverter;</span><br><span class="line"><span class="keyword">import</span> com.czq.model.image.request.AddXMLRequest;</span><br><span class="line"><span class="comment">//import com.czq.model.image.response.Result;/</span></span><br><span class="line"><span class="keyword">import</span> com.czq.model.user.UserMessage;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.process.model.ProcessDefinition;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.process.model.ProcessInstance;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.process.model.builders.ProcessPayloadBuilder;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.process.model.payloads.StartProcessPayload;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.process.runtime.ProcessRuntime;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.runtime.shared.query.Page;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.runtime.shared.query.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.task.model.Task;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.task.model.builders.TaskPayloadBuilder;</span><br><span class="line"><span class="keyword">import</span> org.activiti.api.task.runtime.TaskRuntime;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.HistoryService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.RepositoryService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.RuntimeService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.history.*;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.repository.Deployment;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FilenameUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.annotation.Secured;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipInputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BPMNServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BPMNService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RepositoryService repositoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProcessRuntime processRuntime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TaskRuntime taskRuntime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HistoryService historyService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(BPMNServiceImpl.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private ProcessRuntime processRuntime;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private TaskRuntime taskRuntime;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">postBPMNAndDeployment</span><span class="params">(AddXMLRequest addXMLRequest)</span> &#123;</span><br><span class="line">        <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">                <span class="comment">// .addString 第一次参数的名字如果没有添加.bpmn的话，不会插入到 ACT_RE_DEPLOYMENT 表中</span></span><br><span class="line">                .addString(addXMLRequest.getProcessName() + <span class="string">&quot;.bpmn&quot;</span>, addXMLRequest.getBpmnContent())</span><br><span class="line">                .name(addXMLRequest.getProcessName())</span><br><span class="line">                .deploy();</span><br><span class="line">        <span class="keyword">return</span> Result.ok(deploy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">uploadFileAndDeployment</span><span class="params">(MultipartFile processFile,</span></span><br><span class="line"><span class="params">                                          String processName)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> processFile.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> FilenameUtils.getExtension(originalFilename);</span><br><span class="line">        <span class="keyword">if</span> (processName != <span class="literal">null</span>) &#123;</span><br><span class="line">            processName = originalFilename;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> processFile.getInputStream();</span><br><span class="line">            <span class="type">Deployment</span> <span class="variable">deployment</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;zip&quot;</span>.equals(extension)) &#123;</span><br><span class="line">                <span class="comment">// 压缩包部署方式</span></span><br><span class="line">                <span class="type">ZipInputStream</span> <span class="variable">zipInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(inputStream);</span><br><span class="line">                deployment = repositoryService.createDeployment().addZipInputStream(zipInputStream).name(processName).deploy();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;bpmn&quot;</span>.equals(extension)) &#123;</span><br><span class="line">                <span class="comment">// bpmn文件部署方式</span></span><br><span class="line">                deployment = repositoryService.createDeployment().addInputStream(originalFilename, inputStream).name(processName).deploy();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(deployment);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;deployment object null !&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getProcessDefineXML</span><span class="params">(String deploymentId, String resourceName, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> repositoryService.getResourceAsStream(deploymentId, resourceName);</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> inputStream.available();</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[count];</span><br><span class="line">            response.setContentType(<span class="string">&quot;text/xml&quot;</span>);</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">            <span class="keyword">while</span> (inputStream.read(bytes) != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(bytes);</span><br><span class="line">            &#125;</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">startProcess</span><span class="params">(String processDefinitionKey, String instanceName, UserMessage userDetail)</span> &#123;</span><br><span class="line">        <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">StartProcessPayload</span> <span class="variable">startProcessPayload</span> <span class="operator">=</span> ProcessPayloadBuilder.start().withProcessDefinitionKey(processDefinitionKey)</span><br><span class="line">                    .withBusinessKey(<span class="string">&quot;businessKey&quot;</span>)</span><br><span class="line">                    .withVariable(<span class="string">&quot;sponsor&quot;</span>, userDetail.getUsername())</span><br><span class="line">                    .withName(instanceName).build();</span><br><span class="line">            processInstance = processRuntime.start(startProcessPayload);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"><span class="comment">//                System.out.println(e);</span></span><br><span class="line">            <span class="keyword">return</span> Result.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(processInstance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">suspendInstance</span><span class="params">(String instanceId)</span> &#123;</span><br><span class="line">        <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> processRuntime.suspend(ProcessPayloadBuilder.suspend().withProcessInstanceId(instanceId).build());</span><br><span class="line">        <span class="keyword">return</span> Result.ok(processInstance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">resumeInstance</span><span class="params">(String instanceId)</span> &#123;</span><br><span class="line">        <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> processRuntime</span><br><span class="line">                .resume(ProcessPayloadBuilder.resume().withProcessInstanceId(instanceId).build());</span><br><span class="line">        <span class="keyword">return</span> Result.ok(processInstance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">completeTask</span><span class="params">(String taskId)</span> &#123;</span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskRuntime.task(taskId);</span><br><span class="line">        <span class="keyword">if</span> (task.getAssignee() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 说明任务需要拾取</span></span><br><span class="line">            taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(taskId).build());</span><br><span class="line">        &#125;</span><br><span class="line">        taskRuntime.complete(TaskPayloadBuilder.complete().withTaskId(taskId).build());</span><br><span class="line">        <span class="keyword">return</span> Result.ok(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getTasks</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        SecurityUtil securityUtil = new SecurityUtil();</span></span><br><span class="line"><span class="comment">//        securityUtil.logInAs(&quot;jack&quot;);</span></span><br><span class="line"><span class="comment">//        Page&lt;Task&gt; taskPage = runtimeService.(Pageable.of(0,100));</span></span><br><span class="line">        Page&lt;Task&gt; taskPage = taskRuntime.tasks(Pageable.of(<span class="number">0</span>, <span class="number">100</span>));</span><br><span class="line">        List&lt;Task&gt; tasks = taskPage.getContent();</span><br><span class="line">        List&lt;TaskVO&gt; taskVOS = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Task task : tasks) &#123;</span><br><span class="line">            <span class="type">TaskVO</span> <span class="variable">taskVO</span> <span class="operator">=</span> (TaskVO) task;</span><br><span class="line"><span class="comment">//            TaskVO taskVO = TaskVO.o/ftask;</span></span><br><span class="line">            <span class="type">ProcessInstance</span> <span class="variable">instance</span> <span class="operator">=</span> processRuntime.processInstance(task.getProcessInstanceId());</span><br><span class="line">            taskVO.setInstanceName(instance.getName());</span><br><span class="line">            taskVOS.add(taskVO);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(taskVOS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">createLoginUser</span><span class="params">(UserMessage user)</span> &#123;</span><br><span class="line"><span class="comment">//        Set&lt;String&gt; postCode = sysPostService.selectPostCodeByUserId(user.getId());</span></span><br><span class="line"><span class="comment">//        postCode = postCode.parallelStream().map( s -&gt;  &quot;GROUP_&quot; + s).collect(Collectors.toSet());</span></span><br><span class="line"><span class="comment">//        postCode.add(&quot;ROLE_ACTIVITI_USER&quot;);</span></span><br><span class="line"><span class="comment">//        List&lt;SimpleGrantedAuthority&gt; collect = postCode.stream().map(s -&gt; new SimpleGrantedAuthority(s)).collect(Collectors.toList());</span></span><br><span class="line"><span class="comment">//        return new LoginUser(user, permissionService.getMenuPermission(user), collect);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">testActiviti</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 首先，取出项目中的最多 10 个流程定义</span></span><br><span class="line">        Page&lt;ProcessDefinition&gt; processDefinitionPage = processRuntime.processDefinitions(Pageable.of(<span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line">        <span class="keyword">if</span> (processDefinitionPage.getTotalItems() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 然后，对取出的流程进行启动</span></span><br><span class="line">            <span class="keyword">for</span> (ProcessDefinition definition : processDefinitionPage.getContent()) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot; 流程定义信息：&quot;</span> + definition);</span><br><span class="line">                processRuntime.start(ProcessPayloadBuilder</span><br><span class="line">                        .start()</span><br><span class="line">                        .withProcessDefinitionId(definition.getId())</span><br><span class="line">                        .build());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 完成流程启动后，由于当前项目中只有 other.bpmn 一个流程，且该流程在设计时，已分配给activitiTeam 组</span></span><br><span class="line">        <span class="comment">// 因此我们登录一个 activitiTeam 组成员 , 该账号信息会被设置到 security 上下文中，activiti会对其信息进行读取</span></span><br><span class="line">        <span class="comment">// 获取当前用户任务，最多 10 个</span></span><br><span class="line">        Page&lt;Task&gt; taskPage = taskRuntime.tasks(Pageable.of(<span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line">        <span class="comment">// 由于目前只有一个流程，两个任务，我们尝试一下完成一个，看看会发生什么变化</span></span><br><span class="line">        <span class="keyword">if</span> (taskPage.getTotalItems() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Task task : taskPage.getContent()) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot; 任务信息1：&quot;</span> + task);</span><br><span class="line">                <span class="comment">// 注意，完成任务前必须先声明</span></span><br><span class="line">                taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(task.getId()).build());</span><br><span class="line">                <span class="comment">// 完成任务</span></span><br><span class="line">                taskRuntime.complete(TaskPayloadBuilder.complete().withTaskId(task.getId()).build()</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上一轮任务完成，再看一下，现在流程是否走到了 second ？</span></span><br><span class="line">        taskPage = taskRuntime.tasks(Pageable.of(<span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line">        <span class="keyword">if</span> (taskPage.getTotalItems() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Task task : taskPage.getContent()) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;任务2: &quot;</span> + task);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(taskPage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> businessKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> 查询历史记录</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;HistoricActivityInstanceVO&gt; <span class="title function_">getProcessHistoryByBusinessKey</span><span class="params">(String businessKey)</span> &#123;</span><br><span class="line">        <span class="type">ProcessInstance</span> <span class="variable">instance</span> <span class="operator">=</span> (ProcessInstance) runtimeService.createProcessInstanceQuery().processInstanceBusinessKey(businessKey).singleResult();</span><br><span class="line">        List&lt;HistoricActivityInstance&gt; historicActivityInstanceList = historyService.createHistoricActivityInstanceQuery().processInstanceId(instance.getId())</span><br><span class="line">                .orderByHistoricActivityInstanceStartTime().asc().list();</span><br><span class="line">        List&lt;HistoricActivityInstanceVO&gt; historicActivityInstanceVOList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        historicActivityInstanceList.forEach(historicActivityInstance -&gt; historicActivityInstanceVOList.add(VOConverter.getHistoricActivityInstanceVO(historicActivityInstance)));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">instanceId</span> <span class="operator">=</span> <span class="string">&quot;111&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">taskId</span> <span class="operator">=</span> <span class="string">&quot;111&quot;</span>;</span><br><span class="line"><span class="comment">//        详情查询+</span></span><br><span class="line">        <span class="type">HistoricDetailQuery</span> <span class="variable">historicDetailQuery</span> <span class="operator">=</span> historyService.createHistoricDetailQuery();</span><br><span class="line">        List&lt;HistoricDetail&gt; historicDetails = historicDetailQuery.processInstanceId(instanceId).orderByTime().list();</span><br><span class="line">        <span class="keyword">for</span> (HistoricDetail hd : historicDetails) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;流程实例ID:&quot;</span> + hd.getProcessInstanceId());</span><br><span class="line">            System.out.println(<span class="string">&quot;活动实例ID:&quot;</span> + hd.getActivityInstanceId());</span><br><span class="line">            System.out.println(<span class="string">&quot;执行ID:&quot;</span> + hd.getTaskId());</span><br><span class="line">            System.out.println(<span class="string">&quot;记录时间:&quot;</span> + hd.getTime());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        任务历史流程查询</span></span><br><span class="line">        <span class="type">HistoricTaskInstanceQuery</span> <span class="variable">historicTaskInstanceQuery</span> <span class="operator">=</span> historyService.createHistoricTaskInstanceQuery();</span><br><span class="line">        List&lt;HistoricTaskInstance&gt; taskInstances = historicTaskInstanceQuery.taskId(taskId).list();</span><br><span class="line">        <span class="keyword">for</span> (HistoricTaskInstance hti : taskInstances) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开始时间:&quot;</span> + hti.getStartTime());</span><br><span class="line">            System.out.println(<span class="string">&quot;结束时间:&quot;</span> + hti.getEndTime());</span><br><span class="line">            System.out.println(<span class="string">&quot;任务拾取时间:&quot;</span> + hti.getClaimTime());</span><br><span class="line">            System.out.println(<span class="string">&quot;删除原因:&quot;</span> + hti.getDeleteReason());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> historicActivityInstanceVOList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试">测试</h3><ul><li>1.demo</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -l http://localhost:16666/api/v1.0.1/bpmn/gettask</span><br></pre></td></tr></table></figure><ul><li>2.返回值</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Success!&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;obj&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Nginx的http_sssl_cert双向认证配置</title>
      <link href="/2023/08/25/https-ssl-cert/"/>
      <url>/2023/08/25/https-ssl-cert/</url>
      
        <content type="html"><![CDATA[<h1>基于Nginx的http_sssl_cert双向认证配置</h1><h2 id="背景">背景</h2><blockquote><p>HTTPS是工作于SSL层之上的HTTP协议，SSL（安全套接层）工作于TCP层之上，向应用层提供了两个基本安全服务：认证和保密。SSL有三个子协议：握手协议，记录协议和警报协议。其中握手协议实现服务器与客户端的认证与密钥交换，记录协议进行数据加密并保证数据的完整性，警报协议则规定了错误类型和处理机制。</p></blockquote><h2 id="流程">流程</h2><h3 id="认证流程">认证流程</h3><h4 id="单向认证">单向认证</h4><ul><li><p>客户端发起建立HTTPS连接请求，将SSL协议版本的信息发送给服务器端；</p></li><li><p>服务器端将本机的公钥证书（server.crt）发送给客户端；</p></li><li><p>客户端读取公钥证书（server.crt），取出了服务端公钥；</p></li><li><p>客户端生成一个随机数（密钥R），用刚才得到的服务器公钥去加密这个随机数形成密文，发送给服务端；</p></li><li><p>服务端用自己的私钥（server.key）去解密这个密文，得到了密钥R</p></li><li><p>服务端和客户端在后续通讯过程中就使用这个密钥R进行通信了。</p></li></ul><blockquote><p>如图为单向认证流程<br><img src="https-ssl-cert/liucheng.png" class="lazyload placeholder" data-srcset="https-ssl-cert/liucheng.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p></blockquote><h4 id="双向认证">双向认证</h4><ul><li>客户端发起建立HTTPS连接请求，将SSL协议版本的信息发送给服务端；</li><li>服务器端将本机的公钥证书(server.crt)发送给客户端；</li><li>客户端读取公钥证书(server.crt)，取出了服务端公钥；</li><li>客户端将客户端公钥证书(client.crt)发送给服务器端；</li><li>服务器端使用根证书(root.crt)解密客户端公钥证书，拿到客户端公钥；</li><li>客户端发送自己支持的加密方案给服务器端；</li><li>服务器端根据自己和客户端的能力，选择一个双方都能接受的加密方案，使用客户端的公钥加密8. 后发送给客户端；</li><li>客户端使用自己的私钥解密加密方案，生成一个随机数R，使用服务器公钥加密后传给服务器端；</li><li>服务端用自己的私钥去解密这个密文，得到了密钥R</li><li>服务端和客户端在后续通讯过程中就使用这个密钥R进行通信了。</li></ul><blockquote><p>如图为双向认证流程<br><img src="https-ssl-cert/shuangxiang.png" class="lazyload placeholder" data-srcset="https-ssl-cert/shuangxiang.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p></blockquote><h2 id="生成">生成</h2><h3 id="自签名证书生成">自签名证书生成</h3><ul><li>1.ca证书生成(ca私钥)</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /etc/nginx/keys/</span><br><span class="line"><span class="built_in">cd</span> /etc/nginx/keys/</span><br><span class="line">openssl genrsa -out ca.key 4096</span><br></pre></td></tr></table></figure><ul><li>2.ca数字证书生成</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -days 3650 -key ca.key -out ca.crt</span><br></pre></td></tr></table></figure><blockquote><p>信息Common name 填写域名或ip地址，其余随意填写</p></blockquote><ul><li><ol start="3"><li>用 CA 私钥签发 server 的数字证书</li></ol></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -<span class="keyword">in</span> server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 3650</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li>生成客户端的私钥与证书</li></ol></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out client.key 4096</span><br></pre></td></tr></table></figure><ul><li><ol start="5"><li>生成客户端数字证书</li></ol></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key client.key -out client.csr</span><br></pre></td></tr></table></figure><blockquote><p>信息与ca保持一致</p></blockquote><ul><li><ol start="6"><li>openssl req -new -key client.key -out client.csr</li></ol></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -<span class="keyword">in</span> client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out client.crt -days 3650</span><br></pre></td></tr></table></figure><h2 id="Nginx配置">Nginx配置</h2><blockquote><p>安装nginx并启用ssl模块</p></blockquote><ul><li>nginx配置文件如下：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">        <span class="attribute">server_name</span> localhost;</span><br><span class="line">        <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /etc/nginx/keys/server.crt;<span class="comment">#配置证书位置</span></span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /etc/nginx/keys/server.key;<span class="comment">#配置秘钥位置</span></span><br><span class="line">        <span class="attribute">ssl_client_certificate</span> /etc/nginx/keys/ca.crt;<span class="comment">#双向认证</span></span><br><span class="line">        <span class="attribute">ssl_verify_client</span> <span class="literal">on</span>; <span class="comment">#双向认证</span></span><br><span class="line">        <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">        <span class="attribute">ssl_protocols</span> SSLv2 SSLv3 TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; <span class="comment">#按照这个协议配置</span></span><br><span class="line">        <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; <span class="comment">#按照这个套件配置</span></span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">root</span> html;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">                <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在测试前重新nginx</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">nginx -v</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="测试">测试</h2><h3 id="java测试">java测试</h3><ul><li>代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.ssl.SSLContexts;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientWithClientCert</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">PFX_PATH</span> <span class="operator">=</span> <span class="string">&quot;/Users/fred/temp/cert5/client.p12&quot;</span>;    <span class="comment">//客户端证书路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">PFX_PWD</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;    <span class="comment">//客户端证书密码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sslRequestGet</span><span class="params">(String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">KeyStore</span> <span class="variable">keyStore</span> <span class="operator">=</span> KeyStore.getInstance(<span class="string">&quot;PKCS12&quot;</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">instream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(PFX_PATH));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            keyStore.load(instream, PFX_PWD.toCharArray());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            instream.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SSLContext</span> <span class="variable">sslcontext</span> <span class="operator">=</span> SSLContexts.custom().loadKeyMaterial(keyStore, PFX_PWD.toCharArray()).build();</span><br><span class="line">        <span class="type">SSLConnectionSocketFactory</span> <span class="variable">sslsf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SSLConnectionSocketFactory</span>(sslcontext</span><br><span class="line">                , <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;TLSv1&quot;</span> &#125;    <span class="comment">// supportedProtocols ,这里可以按需要设置</span></span><br><span class="line">                , <span class="literal">null</span>    <span class="comment">// supportedCipherSuites</span></span><br><span class="line">                , SSLConnectionSocketFactory.getDefaultHostnameVerifier());</span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpclient</span> <span class="operator">=</span> HttpClients.custom().setSSLSocketFactory(sslsf).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">HttpGet</span> <span class="variable">httpget</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">            <span class="comment">//httpget.addHeader(&quot;host&quot;, &quot;integration-fred2.fredhuang.com&quot;);// 设置一些heander等</span></span><br><span class="line">            <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpclient.execute(httpget);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">                <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity(), <span class="string">&quot;UTF-8&quot;</span>);<span class="comment">//返回结果</span></span><br><span class="line">                EntityUtils.consume(entity);</span><br><span class="line">                <span class="keyword">return</span> jsonStr;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            httpclient.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;java.home&quot;</span>));</span><br><span class="line">        System.out.println(sslRequestGet(<span class="string">&quot;https://integration-fred2.fredhuang.com&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试方法如下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line"><span class="built_in">sudo</span> ./bin/keytool -import -<span class="built_in">alias</span> ttt -keystore cacerts -file /Users/fred/temp/cert5/server.crt</span><br></pre></td></tr></table></figure><h3 id="curl-工具测试">curl 工具测试</h3><ul><li>demo</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v</span><br></pre></td></tr></table></figure><ul><li>test</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --cacert ca.crt --cert client.crt --key client.key --tlsv1.2 https://192.168.0.162</span><br></pre></td></tr></table></figure><ul><li>detail</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--cert指定客户端公钥证书的路径</span></span><br><span class="line"><span class="comment">#--key指定客户端私钥文件的路径</span></span><br><span class="line"><span class="comment">#-k 使用本参数不校验证书的合法性，因为我们用的是自签名证书</span></span><br><span class="line"><span class="comment">#可以使用-v来观察具体的SSL握手过程</span></span><br><span class="line">curl --cert ./client.crt --key ./client.key https://integration-fred2.fredhuang.com -k -v</span><br><span class="line">* Rebuilt URL to: https://47.93.XX.XX/</span><br><span class="line">*   Trying 47.93.XX.XX...</span><br><span class="line">* TCP_NODELAY <span class="built_in">set</span></span><br><span class="line">* Connected to 47.93.XX.XX (47.93.XX.XX) port 443 (#0)</span><br><span class="line">* ALPN, offering h2</span><br><span class="line">* ALPN, offering http/1.1</span><br><span class="line">* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH</span><br><span class="line">* successfully <span class="built_in">set</span> certificate verify locations:</span><br><span class="line">*   CAfile: /etc/ssl/cert.pem</span><br><span class="line">  CApath: none</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Client hello (1):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server hello (2):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Certificate (11):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server key exchange (12):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Request CERT (13):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server finished (14):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Certificate (11):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, CERT verify (15):</span><br><span class="line">* TLSv1.2 (OUT), TLS change cipher, Client hello (1):</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Finished (20):</span><br><span class="line">* TLSv1.2 (IN), TLS change cipher, Client hello (1):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Finished (20):</span><br><span class="line">* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384</span><br><span class="line">* ALPN, server accepted to use http/1.1</span><br><span class="line">* Server certificate:</span><br><span class="line">*  subject: C=CN; ST=BJ; L=BJ; O=Alibaba; OU=Test; CN=integration-fred2.fredhuang.com; emailAddress=a@alibaba.com</span><br><span class="line">*  start <span class="built_in">date</span>: Nov  2 01:01:34 2019 GMT</span><br><span class="line">*  expire <span class="built_in">date</span>: Oct 30 01:01:34 2029 GMT</span><br><span class="line">*  issuer: C=CN; ST=BJ; L=BJ; O=Alibaba; OU=Test; CN=root; emailAddress=a@alibaba.com</span><br><span class="line">*  SSL certificate verify result: unable to get <span class="built_in">local</span> issuer certificate (20), continuing anyway.</span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; host:integration-fred2.fredhuang.com</span><br><span class="line">&gt; User-Agent: curl/7.54.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Server: nginx/1.17.5</span><br><span class="line">&lt; Date: Sat, 02 Nov 2019 02:39:43 GMT</span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt; Content-Length: 612</span><br><span class="line">&lt; Last-Modified: Wed, 30 Oct 2019 11:29:45 GMT</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; ETag: <span class="string">&quot;5db97429-264&quot;</span></span><br><span class="line">&lt; Accept-Ranges: bytes</span><br><span class="line">&lt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">* Connection <span class="comment">#0 to host 47.93.XX.XX left intact</span></span><br></pre></td></tr></table></figure><ul><li>test demo</li></ul><blockquote><p>如图<br><img src="https-ssl-cert/result.png" class="lazyload placeholder" data-srcset="https-ssl-cert/result.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p></blockquote><ul><li>succ demo</li></ul><blockquote><p>如图<br><img src="https-ssl-cert/succ.png" class="lazyload placeholder" data-srcset="https-ssl-cert/succ.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p></blockquote><h2 id="See">See</h2><p><a href="https://blog.csdn.net/qq_27682773/article/details/104943308">https://blog.csdn.net/qq_27682773/article/details/104943308</a></p><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python 链接 ADCS FTP 服务批量下载和上传文件</title>
      <link href="/2023/07/31/python-ftp-server/"/>
      <url>/2023/07/31/python-ftp-server/</url>
      
        <content type="html"><![CDATA[<h1>使用python 链接 ADCS FTP 服务批量下载和上传文件</h1><h2 id="基础环境">基础环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PyCharm IDE</span><br><span class="line">PDCU or ADCU hardware</span><br><span class="line">Python &gt;= 3.8</span><br></pre></td></tr></table></figure><h2 id="准备工作">准备工作</h2><ul><li>ADCS开启FTP服务，端口20或21</li><li>python编写程序操作</li></ul><h2 id="测试环境">测试环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ubuntu &gt;= 22.04</span><br><span class="line">python &gt;= 3.8</span><br><span class="line">PyCharm IDE</span><br></pre></td></tr></table></figure><h2 id="代码编写">代码编写</h2><h3 id="FTP服务开启">FTP服务开启</h3><blockquote><p>基于ubuntu 22.04 系统开启ftp服务，使用python代码测试是否连接成功。</p></blockquote><h4 id="FTP服务开启-2">FTP服务开启</h4><ul><li>ssh服务开启</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install openssh-server</span><br><span class="line">lsof -i:21</span><br></pre></td></tr></table></figure><ul><li>ftp服务开启</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install vsftpd</span><br><span class="line"><span class="comment"># 更改配置</span></span><br><span class="line"><span class="built_in">sudo</span> vi /etc/vsftpd.conf</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line"><span class="comment"># 重启服务生效</span></span><br><span class="line"><span class="built_in">sudo</span> service vsftpd restart</span><br></pre></td></tr></table></figure><ul><li>ftp与ssh测试</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ftp </span></span><br><span class="line">ftp ip</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh</span></span><br><span class="line">ssh root@ip </span><br></pre></td></tr></table></figure><h3 id="sfpt链接服务器">sfpt链接服务器</h3><ul><li>代码如下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ftp_connect</span>(<span class="params">host, port, username, password</span>):</span><br><span class="line">    cnopts = pysftp.CnOpts()</span><br><span class="line">    cnopts.hostkeys = <span class="literal">None</span></span><br><span class="line">    myHostname = host</span><br><span class="line">    myUsername = username</span><br><span class="line">    myPassword = password</span><br><span class="line"></span><br><span class="line">    sftp = pysftp.Connection(host=myHostname, username=myUsername, password=myPassword, cnopts=cnopts)</span><br><span class="line">    logger.debug(<span class="string">&quot;Connection succesfully stablished ... &quot;</span>)</span><br><span class="line">    directory_structure = sftp.listdir_attr()</span><br><span class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> directory_structure:</span><br><span class="line">        logger.debug(attr.filename, attr)</span><br><span class="line">    <span class="keyword">return</span> sftp, directory_structure</span><br></pre></td></tr></table></figure><h3 id="sftp批量下载文件">sftp批量下载文件</h3><ul><li>使用sftp.get()方法下载文件，构造指定函数下载</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>(<span class="params">sftp, LocalFile, RemoteFile</span>):  <span class="comment"># 下载当个文件</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    download point file from remote PDCU</span></span><br><span class="line"><span class="string">    :param sftp:</span></span><br><span class="line"><span class="string">    :param LocalFile: local file dir</span></span><br><span class="line"><span class="string">    :param RemoteFile: remote pdcu file</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    file_handler = <span class="built_in">open</span>(LocalFile, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    logger.debug(<span class="string">&quot; download file dir : &quot;</span> + LocalFile)</span><br><span class="line">    sftp.get(RemoteFile, LocalFile)  <span class="comment"># 下载目录中文件</span></span><br><span class="line">    file_handler.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li>抑或目录：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_filetree</span>(<span class="params">sftp, LocalDir, RemoteDir</span>):  <span class="comment"># 下载整个目录下的文件</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    download point file and dir from remote PDCU</span></span><br><span class="line"><span class="string">    :param sftp:</span></span><br><span class="line"><span class="string">    :param LocalDir: local file dir</span></span><br><span class="line"><span class="string">    :param RemoteDir: remote pdcu file</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(LocalDir):</span><br><span class="line">        os.makedirs(LocalDir)</span><br><span class="line">    logger.debug(<span class="string">&quot; download file dir : &quot;</span> + LocalDir)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> sftp.listdir(RemoteDir):</span><br><span class="line">        Local = os.path.join(LocalDir, file)</span><br><span class="line">        Remote = RemoteDir + <span class="string">&quot;/&quot;</span> + file</span><br><span class="line">        <span class="keyword">if</span> sftp.isdir(Remote):  <span class="comment"># 判断是否是文件</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(Local):</span><br><span class="line">                os.makedirs(Local)</span><br><span class="line">            download_filetree(sftp, Local, Remote)</span><br><span class="line">        <span class="keyword">elif</span> sftp.isfile(Remote):  <span class="comment"># 文件</span></span><br><span class="line">            download_file(sftp, Local, Remote)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.error(<span class="string">&quot; you input path or file is incorrect!, detail path or file  :&quot;</span> + Remote)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;complete&quot;</span></span><br></pre></td></tr></table></figure><h3 id="sftp上传指定文件">sftp上传指定文件</h3><ul><li>参考如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断sftp服务端中文件路径是否存在，若不存在则创建</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_dir</span>(<span class="params">sftp, remoteDir</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> stat.S_ISDIR(sftp.stat(remoteDir).st_mode):  <span class="comment"># 如果remoteDir存在且为目录，则返回True</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        sftp.mkdir(remoteDir)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在远程sftp上创建目录：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(remoteDir))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传</span></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sftp_upload</span>(<span class="params">sftp, localDir, remoteDir</span>):</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(localDir):  <span class="comment"># 判断本地localDir是否为目录</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(localDir):</span><br><span class="line">            remoteDirTmp = os.path.join(remoteDir, file)</span><br><span class="line">            localDirTmp = os.path.join(localDir, file)</span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(localDirTmp):  <span class="comment"># 如果本地localDirTmp为目录，则对远程sftp服务器进行判断</span></span><br><span class="line">                create_dir(sftp, remoteDirTmp)  <span class="comment"># 判断sftp服务端文件目录是否存在,若不存在则创建</span></span><br><span class="line">            sftp_upload(sftp, localDirTmp, remoteDirTmp)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;upload file:&quot;</span>, localDir)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sftp.put(localDir, remoteDir)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;upload error:&#x27;</span>, e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    host = <span class="string">&#x27;192.168.149.153&#x27;</span>  <span class="comment"># sftp主机</span></span><br><span class="line">    port = <span class="number">22</span>  <span class="comment"># 端口</span></span><br><span class="line">    username = <span class="string">&#x27;sftpuser&#x27;</span>  <span class="comment"># sftp用户名</span></span><br><span class="line">    password = <span class="string">&#x27;passwd&#x27;</span>  <span class="comment"># 密码</span></span><br><span class="line">    localDir = <span class="string">&#x27;/test/sftp&#x27;</span>  <span class="comment"># 本地文件或目录</span></span><br><span class="line">    remoteDir = <span class="string">&#x27;/sftp&#x27;</span>  <span class="comment"># 远程文件或目录（注意远程路径要存在）</span></span><br><span class="line">    sf = paramiko.Transport((host, port))</span><br><span class="line">    sf.connect(username=username, password=password)</span><br><span class="line">    sftp = paramiko.SFTPClient.from_transport(sf)</span><br><span class="line">    sftp_upload(sftp, localDir, remoteDir)</span><br><span class="line">    sf.close()</span><br></pre></td></tr></table></figure><h3 id="sftp获取文件状态">sftp获取文件状态</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_dir</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    清空文件夹：如果文件夹不存在就创建，如果文件存在就清空！</span></span><br><span class="line"><span class="string">    :param path: 文件夹路径</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">import</span> shutil</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            os.makedirs(path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            shutil.rmtree(path)</span><br><span class="line">            os.makedirs(path)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">self, sftp, command</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    执行命令</span></span><br><span class="line"><span class="string">    :param command:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># with SSHConnectionManager(**self.ssh_args) as ssh:</span></span><br><span class="line">    <span class="keyword">return</span> sftp.cmd(<span class="string">f&quot;<span class="subst">&#123;command&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exists</span>(<span class="params">self, sftp, path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    判断路径是否存在</span></span><br><span class="line"><span class="string">    :param path:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    is_exists = <span class="literal">False</span></span><br><span class="line">    <span class="comment"># with SSHConnectionManager(**self.ssh_args) as ssh:</span></span><br><span class="line">    result = sftp.cmd(<span class="string">f&quot;find <span class="subst">&#123;path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        is_exists = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> is_exists</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_file</span>(<span class="params">self, sftp, path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    判断路径是否是文件</span></span><br><span class="line"><span class="string">    :param path:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="variable language_">self</span>.exists(path):</span><br><span class="line">        <span class="comment"># with SSHConnectionManager(**self.ssh_args) as ssh:</span></span><br><span class="line">        prefix = sftp.cmd(<span class="string">f&quot;ls -ld <span class="subst">&#123;path&#125;</span>&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> prefix == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_dir</span>(<span class="params">self, sftp, path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    判断路径是否是目录</span></span><br><span class="line"><span class="string">    :param path:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="variable language_">self</span>.exists(path):</span><br><span class="line">        <span class="comment"># with SSHConnectionManager(**self.ssh_args) as ssh:</span></span><br><span class="line">        prefix = sftp.cmd(<span class="string">f&quot;ls -ld <span class="subst">&#123;path&#125;</span>&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> prefix == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makedirs</span>(<span class="params">self, sftp, path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建目录</span></span><br><span class="line"><span class="string">    :param path: 远程文件夹路径</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># with SSHConnectionManager(**self.ssh_args) as ssh:</span></span><br><span class="line">    cmd_str = <span class="string">f&quot;mkdir -p <span class="subst">&#123;path&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(cmd_str)</span><br><span class="line">    sftp.cmd(cmd_str)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="UI编写">UI编写</h3><blockquote><p>UI绘制采用tkinter 第三方库绘制 ，示例代码如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileDownload</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master</span>):</span><br><span class="line">        <span class="variable language_">self</span>.file_path = StringVar()</span><br><span class="line">        <span class="variable language_">self</span>.file_path.<span class="built_in">set</span>(<span class="string">&#x27;请输入下载文件地址:&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.src_dir = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.urls = []</span><br><span class="line">        <span class="comment"># tkinter刚开始不熟悉，布局麻烦，这里使用的网格布局，row，column 的index，定位cell</span></span><br><span class="line">        open_btn = Button(master, text=<span class="string">&quot;链接ftp服务&quot;</span>, width=<span class="number">15</span>, height=<span class="number">3</span>, borderwidth=<span class="number">2</span>,</span><br><span class="line">                          command=<span class="variable language_">self</span>.connect_ftp_service)</span><br><span class="line">        download_btn = Button(master, text=<span class="string">&quot;开始下载文件&quot;</span>, width=<span class="number">15</span>, height=<span class="number">3</span>, borderwidth=<span class="number">2</span>,</span><br><span class="line">                              command=<span class="variable language_">self</span>.file_download)</span><br><span class="line">        <span class="comment"># self.file_path = Text(master, width=200, height=3)</span></span><br><span class="line">        <span class="comment"># self.file_path.grid(row=2, column=1, columnspan=2, ipadx=10, ipady=10)</span></span><br><span class="line">        open_btn.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, ipadx=<span class="number">5</span>, ipady=<span class="number">3</span>, padx=<span class="number">10</span>, pady=<span class="number">3</span>)</span><br><span class="line">        download_btn.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, ipadx=<span class="number">5</span>, ipady=<span class="number">3</span>, padx=<span class="number">10</span>, pady=<span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 文件输入路径获取</span></span><br><span class="line">        <span class="variable language_">self</span>.file_label = Entry(master, textvariable=<span class="variable language_">self</span>.file_path, fg=<span class="string">&#x27;green&#x27;</span>, bg=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.file_label.grid(row=<span class="number">0</span>, column=<span class="number">1</span>, rowspan=<span class="number">2</span>, ipadx=<span class="number">200</span>, ipady=<span class="number">15</span>, padx=<span class="number">10</span>, pady=<span class="number">2</span>)  <span class="comment"># ,padx=20,pady=10,</span></span><br><span class="line">        <span class="comment"># self.console_text = StringVar()</span></span><br><span class="line">        <span class="variable language_">self</span>.text = Text(master, width=<span class="number">200</span>, height=<span class="number">50</span>, bg=<span class="string">&#x27;white&#x27;</span>, fg=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.text.grid(row=<span class="number">2</span>, columnspan=<span class="number">2</span>, ipadx=<span class="number">10</span>, ipady=<span class="number">10</span>)</span><br><span class="line">        <span class="comment"># self.file_path.pack()</span></span><br><span class="line">        <span class="comment"># self.text.setvar(&quot;aaaaa&quot;)# self.file_name = StringVar()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">server_msg_input</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :return: ip port username psd</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 初始化弹出输入对话框</span></span><br><span class="line">    child = tkinter.Tk()</span><br><span class="line">    <span class="comment"># 弹出对话框的title</span></span><br><span class="line">    child.title(<span class="string">&#x27;服务器账户信息输入&#x27;</span>)</span><br><span class="line">    child[<span class="string">&#x27;height&#x27;</span>] = <span class="number">260</span></span><br><span class="line">    child[<span class="string">&#x27;width&#x27;</span>] = <span class="number">320</span></span><br><span class="line">    child.resizable(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 设置弹出对话的框的标签值</span></span><br><span class="line">    ip_label = tkinter.Label(child, text=<span class="string">&#x27;IP:&#x27;</span>, font=(<span class="string">&#x27;黑体&#x27;</span>, <span class="number">12</span>))</span><br><span class="line">    ip_label.place(x=<span class="number">25</span>, y=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 弹出输入对话框请获取相应的值</span></span><br><span class="line">    ip_str = tkinter.StringVar()</span><br><span class="line">    ip_entry = tkinter.Entry(child, font=(<span class="string">&#x27;黑体&#x27;</span>, <span class="number">12</span>), textvariable=ip_str)</span><br><span class="line">    ip_entry.place(x=<span class="number">100</span>, y=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    port_label = tkinter.Label(child, text=<span class="string">&#x27;port:&#x27;</span>, font=(<span class="string">&#x27;黑体&#x27;</span>, <span class="number">12</span>))</span><br><span class="line">    port_label.place(x=<span class="number">25</span>, y=<span class="number">60</span>)</span><br><span class="line">    <span class="comment"># 弹出输入对话框请获取相应的值</span></span><br><span class="line">    port_str = tkinter.StringVar()</span><br><span class="line">    port_entry = tkinter.Entry(child, font=(<span class="string">&#x27;黑体&#x27;</span>, <span class="number">12</span>), textvariable=port_str)</span><br><span class="line">    port_entry.place(x=<span class="number">100</span>, y=<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    user_name_label = tkinter.Label(child, text=<span class="string">&#x27;UserName:&#x27;</span>, font=(<span class="string">&#x27;黑体&#x27;</span>, <span class="number">12</span>))</span><br><span class="line">    user_name_label.place(x=<span class="number">25</span>, y=<span class="number">100</span>)</span><br><span class="line">    <span class="comment"># 弹出输入对话框请获取相应的值</span></span><br><span class="line">    user_name_str = tkinter.StringVar()</span><br><span class="line">    user_name_entry = tkinter.Entry(child, font=(<span class="string">&#x27;黑体&#x27;</span>, <span class="number">12</span>), textvariable=user_name_str)</span><br><span class="line">    user_name_entry.place(x=<span class="number">100</span>, y=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    psd_label = tkinter.Label(child, text=<span class="string">&#x27;PassWord:&#x27;</span>, font=(<span class="string">&#x27;黑体&#x27;</span>, <span class="number">12</span>))</span><br><span class="line">    psd_label.place(x=<span class="number">25</span>, y=<span class="number">140</span>)</span><br><span class="line">    <span class="comment"># 弹出输入对话框请获取相应的值</span></span><br><span class="line">    psd_str = tkinter.StringVar()</span><br><span class="line">    psd_entry = tkinter.Entry(child, font=(<span class="string">&#x27;黑体&#x27;</span>, <span class="number">12</span>), textvariable=psd_str)</span><br><span class="line">    psd_entry.place(x=<span class="number">100</span>, y=<span class="number">140</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绑定回车键</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Get_key</span>():</span><br><span class="line">        <span class="keyword">global</span> key, edt_ip, edt_port, edt_user_name, edt_pass_word</span><br><span class="line">        key = ip_entry.get()</span><br><span class="line">        edt_ip = ip_entry.get()</span><br><span class="line">        edt_port = port_entry.get()</span><br><span class="line">        edt_user_name = user_name_entry.get()</span><br><span class="line">        edt_pass_word = psd_entry.get()</span><br><span class="line">        <span class="keyword">if</span> edt_ip != <span class="string">&quot;&quot;</span> <span class="keyword">and</span> ip_identify(edt_ip) <span class="keyword">and</span> edt_port != <span class="string">&quot;&quot;</span> <span class="keyword">and</span> edt_user_name != <span class="string">&quot;&quot;</span> <span class="keyword">and</span> edt_pass_word != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            logger.debug(</span><br><span class="line">                <span class="string">&quot; user input server msg , ip : &quot;</span> + edt_ip + <span class="string">&quot;,port:&quot;</span> + edt_port + <span class="string">&quot;.user name :&quot;</span></span><br><span class="line">                + edt_user_name + <span class="string">&quot;, psd : &quot;</span> + edt_pass_word)</span><br><span class="line">            connect_ftp_server(<span class="variable language_">self</span>, edt_ip, edt_port, edt_user_name, edt_pass_word)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.error(<span class="string">&quot; you input msg is error , please re input!&quot;</span>)</span><br><span class="line">            showerror(title=<span class="string">&#x27;错误！&#x27;</span>, message=<span class="string">&#x27;您输入信息有误，请重新输入！&#x27;</span>)</span><br><span class="line">        child.destroy()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按下回车键返回秘钥</span></span><br><span class="line">    child.bind(<span class="string">&#x27;&lt;Return&gt;&#x27;</span>, Get_key)</span><br><span class="line">    <span class="comment"># 点击OK按钮返回秘钥</span></span><br><span class="line">    btn_OK = tkinter.Button(child, text=<span class="string">&#x27;确认&#x27;</span>, font=(<span class="string">&#x27;黑体&#x27;</span>, <span class="number">12</span>), height=<span class="number">2</span>, command=Get_key)</span><br><span class="line">    btn_OK.place(x=<span class="number">150</span>, y=<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># edt_ip, edt_port, edt_user_name, edt_pass_word = Get_key()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># if edt_ip != &quot;&quot; and edt_port != &quot;&quot; and edt_user_name \</span></span><br><span class="line">    <span class="comment">#         != &quot;&quot; and edt_pass_word != &quot;&quot;:</span></span><br><span class="line">    <span class="comment"># return edt_ip, edt_port, edt_user_name, edt_pass_word</span></span><br><span class="line">    <span class="comment"># return child</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其他部分">其他部分</h3><blockquote><p>linux系统目录无法找到解决办法</p></blockquote><ul><li>在代码首部添加如下代码：</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 导入OS模块</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把当前文件所在文件夹的父文件夹路径加入到PYTHONPATH</span></span><br><span class="line">sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uvicorn 框架软件编写后发布至ubuntu服务器</title>
      <link href="/2023/06/20/uvicorn-publish/"/>
      <url>/2023/06/20/uvicorn-publish/</url>
      
        <content type="html"><![CDATA[<h1>uvicorn 框架软件编写后发布至ubuntu服务器</h1><h2 id="uvicorn安装使用">uvicorn安装使用</h2><ul><li>1.安装</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uvicorn</span><br></pre></td></tr></table></figure><ul><li>2.main.py编写</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastApi</span><br><span class="line"></span><br><span class="line">app = FastApi()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;hello World&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>3.开发环境运行</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(<span class="string">&quot;main:app&quot;</span>, host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">8000</span>, log_level=<span class="string">&quot;info&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="发布环境部署">发布环境部署</h2><ul><li>1.gunicorn安装</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install uvicorn</span><br><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure><ul><li>2.gunicorn.py配置文件编写</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置守护进程</span></span><br><span class="line">daemon=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 监听内网端口8000</span></span><br><span class="line">bind=<span class="string">&#x27;0.0.0.0:8000&#x27;</span></span><br><span class="line"><span class="comment"># 设置进程文件目录</span></span><br><span class="line">pidfile=<span class="string">&#x27;./gunicorn.pid&#x27;</span></span><br><span class="line">chdir=<span class="string">&#x27;./&#x27;</span> <span class="comment"># 工作目录</span></span><br><span class="line"><span class="comment"># 工作模式</span></span><br><span class="line">worker_class=<span class="string">&#x27;uvicorn.workers.UvicornWorker&#x27;</span></span><br><span class="line"><span class="comment"># 并行工作进程数 核心数*2+1个</span></span><br><span class="line">workers=<span class="number">3</span>  <span class="comment">#multiprocessing.cpu_count()+1</span></span><br><span class="line"><span class="comment"># 指定每个工作者的线程数</span></span><br><span class="line">threads=<span class="number">2</span></span><br><span class="line"><span class="comment"># 设置最大并发量</span></span><br><span class="line">worker_connections = <span class="number">2000</span></span><br><span class="line">loglevel=<span class="string">&#x27;debug&#x27;</span> <span class="comment"># 错误日志的日志级别</span></span><br><span class="line">access_log_format = <span class="string">&#x27;%(t)s %(p)s %(h)s &quot;%(r)s&quot; %(s)s %(L)s %(b)s %(f)s&quot; &quot;%(a)s&quot;&#x27;</span></span><br><span class="line"><span class="comment"># 设置访问日志和错误信息日志路径</span></span><br><span class="line">log_dir = <span class="string">&quot;./log&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_dir):</span><br><span class="line">    os.makedirs(log_dir)</span><br><span class="line">accesslog = <span class="string">&quot;./log/gunicorn_access.log&quot;</span></span><br><span class="line">errorlog = <span class="string">&quot;./log/gunicorn_error.log&quot;</span></span><br></pre></td></tr></table></figure><ul><li>3.py文件特殊处理</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入OS模块</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把当前文件所在文件夹的父文件夹路径加入到PYTHONPATH</span></span><br><span class="line">sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))</span><br></pre></td></tr></table></figure><ul><li>4.服务器运行</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn main:app -c gunicorn.py</span><br></pre></td></tr></table></figure><blockquote><p>抑或</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn main:app -b 0.0.0.0:8000 -w 4 -k uvicorn.workers.UvicornWorker --daemon</span><br></pre></td></tr></table></figure><h3 id="项目停止运行">项目停止运行</h3><ul><li>1.获取gunicorn进程树</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pstree -ap | grep gunicorn</span><br></pre></td></tr></table></figure><ul><li>2.终止gunicorn任务</li></ul><p>kill -HUP 进程pid</p><ul><li>3.如果使用了多进程，那么执行了上述命令后还会有子进程在运行，可以使用如下命令杀死</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 进程pid</span><br></pre></td></tr></table></figure><h4 id="进程脚本杀死">进程脚本杀死</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">​</span><br><span class="line"><span class="comment"># 查找 gunicorn 主进程 PID</span></span><br><span class="line">gunicorn_pid=$(ps aux | grep <span class="string">&#x27;gunicorn&#x27;</span> | grep -v <span class="string">&#x27;grep&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">​</span><br><span class="line"><span class="comment"># 如果找到了主进程 PID</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$gunicorn_pid</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Found gunicorn process: <span class="variable">$gunicorn_pid</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 给主进程发 SIGINT 信号，请求正常停止进程</span></span><br><span class="line">  <span class="built_in">kill</span> -INT <span class="variable">$gunicorn_pid</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 睡眠 5 秒等待主进程结束 </span></span><br><span class="line">  <span class="built_in">sleep</span> 5</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 查找所有 gunicorn 子进程 PID</span></span><br><span class="line">  gunicorn_child_pids=$(pstree -p <span class="variable">$gunicorn_pid</span> | grep -oP <span class="string">&#x27;([0-9]+)(?=\))&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 如果找到了子进程 PID</span></span><br><span class="line">  <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$gunicorn_child_pids</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Found gunicorn child processes: <span class="variable">$gunicorn_child_pids</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 杀死所有子进程</span></span><br><span class="line">    <span class="keyword">for</span> pid <span class="keyword">in</span> <span class="variable">$gunicorn_child_pids</span>; <span class="keyword">do</span></span><br><span class="line">      <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Stopped gunicorn process and child processes&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;No running gunicorn process found&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>脚本执行</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 stop_gunicorn.sh</span><br><span class="line">bash stop_gunicorn.sh</span><br></pre></td></tr></table></figure><h3 id="配置开机自启动服务">配置开机自启动服务</h3><h4 id="配置-gunicorn-service服务开机自启动">配置 gunicorn.service服务开机自启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;/usr/lib/systemd/system/gunicorn.service &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=Gunicorn fast</span></span><br><span class="line"><span class="string">After=syslog.target network.target remote-fs.target nss-lookup.target</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=forking</span></span><br><span class="line"><span class="string">PIDFile=/var/run/gunicorn.pid</span></span><br><span class="line"><span class="string">ExecStart=/root/.local/share/virtualenvs/fastapi-Xq8atoqR/bin/gunicorn  -c </span></span><br><span class="line"><span class="string">/opt/web/fastapi/gunicorn.py main:app</span></span><br><span class="line"><span class="string">ExecReload=/bin/kill -s HUP $MAINPID</span></span><br><span class="line"><span class="string">ExecStop=/bin/kill -s QUIT $MAINPID</span></span><br><span class="line"><span class="string">PrivateTmp=true</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><blockquote><p>依次执行下面命令</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> gunicorn</span><br><span class="line">systemctl start gunicorn</span><br></pre></td></tr></table></figure><blockquote><p>查看服务状态</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status gunicorn</span><br></pre></td></tr></table></figure><h3 id="Nginx代理配置">Nginx代理配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">            listen 80;</span><br><span class="line">           <span class="comment"># listen 443 ssl;</span></span><br><span class="line">            server_name api.hmily.vip;</span><br><span class="line">            access_log  /var/log/nginx/access.log;</span><br><span class="line">            location / &#123;</span><br><span class="line">                proxy_pass http://127.0.0.1:8000;</span><br><span class="line">                proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">                proxy_set_header X-Forwarded-For</span><br><span class="line">                <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>nginx配置生效</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="See">See</h2><ul><li>[1].<a href="https://zhuanlan.zhihu.com/p/580791329">https://zhuanlan.zhihu.com/p/580791329</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> unbutu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zuul + Oauth 2 实现鉴权功能</title>
      <link href="/2023/05/31/gateway-auth-control/"/>
      <url>/2023/05/31/gateway-auth-control/</url>
      
        <content type="html"><![CDATA[<h1>Zuul + Oauth 2 实现鉴权功能</h1><h2 id="技术简介">技术简介</h2><h3 id="oauth2">oauth2</h3><blockquote><p>OAuth 2.0 is the industry-standard protocol for authorization. OAuth 2.0 focuses on client developer simplicity while providing specific authorization flows for web applications, desktop applications, mobile phones, and living room devices. This specification and its extensions are being developed within the IETF OAuth Working Group.</p></blockquote><blockquote><p>OAuth 2.1 is an in-progress effort to consolidate OAuth 2.0 and many common extensions under a new name.</p></blockquote><h3 id="zuul">zuul</h3><blockquote><p>Zuul is the front door for all requests from devices and web sites to the backend of the Netflix streaming application. As an edge service application, Zuul is built to enable dynamic routing, monitoring, resiliency and security. It also has the ability to route requests to multiple Amazon Auto Scaling Groups as appropriate.</p></blockquote><h2 id="技术版本选择">技术版本选择</h2><ul><li>1.zuul 版本选择</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.oauth2 版本选择</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现">实现</h2><ul><li>1.网关搭建<blockquote><p>见：&lt;&lt;Swagger + Zuul 整合微服务接口文档&gt;&gt; 一文</p></blockquote></li><li>2.oauth 配置<ul><li>在 application.yml 文件中配置 auth 服务</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auth:</span></span><br><span class="line">  <span class="attr">tokenValiditySeconds:</span> <span class="number">1200</span> <span class="comment">#token存储到redis的过期时间</span></span><br><span class="line">  <span class="attr">clientId:</span> <span class="string">domain</span></span><br><span class="line">  <span class="attr">clientSecret:</span> <span class="string">domain</span></span><br><span class="line">  <span class="attr">cookieDomain:</span> <span class="string">domain.com</span></span><br><span class="line">  <span class="attr">cookieMaxAge:</span> <span class="number">-1</span></span><br><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">  <span class="attr">key-store:</span></span><br><span class="line">    <span class="attr">location:</span> <span class="string">classpath:rs.keystore</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="string">domainkeystore</span></span><br><span class="line">    <span class="attr">alias:</span> <span class="string">domainkey</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">domain</span></span><br></pre></td></tr></table></figure><h4 id="security-配置-放行登陆、获取验证码等接口">security 配置,放行登陆、获取验证码等接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czq.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@Order(-1)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/userlogin&quot;</span>,<span class="string">&quot;/userlogout&quot;</span>,<span class="string">&quot;/userjwt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">AuthenticationManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//采用bcrypt对密码进行编码</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .httpBasic().and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests().anyRequest().permitAll();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="继承-AuthorizationServerConfigurer-类配置-auth-服务器">继承 AuthorizationServerConfigurer 类配置 auth 服务器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czq.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.bootstrap.encrypt.KeyProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.ClientDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.client.JdbcClientDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtTokenStore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.KeyStoreKeyFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorizationServerConfig</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="comment">//jwt令牌转换器</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAccessTokenConverter jwtAccessTokenConverter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TokenStore tokenStore;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomUserAuthenticationConverter customUserAuthenticationConverter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取密钥的配置</span></span><br><span class="line">    <span class="meta">@Bean(&quot;keyProp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> KeyProperties <span class="title function_">keyProperties</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyProperties</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;keyProp&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> KeyProperties keyProperties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//客户端配置</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ClientDetailsService <span class="title function_">clientDetails</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdbcClientDetailsService</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        clients.jdbc(<span class="built_in">this</span>.dataSource).clients(<span class="built_in">this</span>.clientDetails());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> TokenStore <span class="title function_">tokenStore</span><span class="params">(JwtAccessTokenConverter jwtAccessTokenConverter)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtTokenStore</span>(jwtAccessTokenConverter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtAccessTokenConverter <span class="title function_">jwtAccessTokenConverter</span><span class="params">(CustomUserAuthenticationConverter customUserAuthenticationConverter)</span> &#123;</span><br><span class="line">        <span class="type">JwtAccessTokenConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JwtAccessTokenConverter</span>();</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyStoreKeyFactory</span></span><br><span class="line">                (keyProperties.getKeyStore().getLocation(), keyProperties.getKeyStore().getSecret().toCharArray())</span><br><span class="line">                .getKeyPair(keyProperties.getKeyStore().getAlias(),keyProperties.getKeyStore().getPassword().toCharArray());</span><br><span class="line">        converter.setKeyPair(keyPair);</span><br><span class="line">        <span class="comment">//配置自定义的CustomUserAuthenticationConverter</span></span><br><span class="line">        <span class="type">DefaultAccessTokenConverter</span> <span class="variable">accessTokenConverter</span> <span class="operator">=</span> (DefaultAccessTokenConverter) converter.getAccessTokenConverter();</span><br><span class="line">        accessTokenConverter.setUserTokenConverter(customUserAuthenticationConverter);</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//授权服务器端点配置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        endpoints.accessTokenConverter(jwtAccessTokenConverter)</span><br><span class="line">                .authenticationManager(authenticationManager)<span class="comment">//认证管理器</span></span><br><span class="line">                .tokenStore(tokenStore)<span class="comment">//令牌存储</span></span><br><span class="line">                .userDetailsService(userDetailsService);<span class="comment">//用户信息service</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权服务器的安全配置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerSecurityConfigurer oauthServer)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        oauthServer.checkTokenAccess(&quot;isAuthenticated()&quot;);//校验token需要认证通过，可采用http basic认证</span></span><br><span class="line">        oauthServer.allowFormAuthenticationForClients()</span><br><span class="line">                .passwordEncoder(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>())</span><br><span class="line">                .tokenKeyAccess(<span class="string">&quot;permitAll()&quot;</span>)</span><br><span class="line">                .checkTokenAccess(<span class="string">&quot;permitAll()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    采用 bcrypt对密码进行hash</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置自定义的-CustomUserAuthenticationConverter">配置自定义的 CustomUserAuthenticationConverter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czq.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.czq.auth.service.UserJwt;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.AuthorityUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.DefaultUserAuthenticationConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomUserAuthenticationConverter</span> <span class="keyword">extends</span> <span class="title class_">DefaultUserAuthenticationConverter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, ?&gt; convertUserAuthentication(Authentication authentication) &#123;</span><br><span class="line">        <span class="type">LinkedHashMap</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> authentication.getName();</span><br><span class="line">        response.put(<span class="string">&quot;username&quot;</span>, name);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">principal</span> <span class="operator">=</span> authentication.getPrincipal();</span><br><span class="line">        <span class="type">UserJwt</span> <span class="variable">userJwt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(principal <span class="keyword">instanceof</span>  UserJwt)&#123;</span><br><span class="line">            userJwt = (UserJwt) principal;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//refresh_token默认不去调用userdetailService获取用户信息，这里我们手动去调用，得到 UserJwt</span></span><br><span class="line">            <span class="type">UserDetails</span> <span class="variable">userDetails</span> <span class="operator">=</span> userDetailsService.loadUserByUsername(name);</span><br><span class="line">            userJwt = (UserJwt) userDetails;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (authentication.getAuthorities() != <span class="literal">null</span> &amp;&amp; !authentication.getAuthorities().isEmpty()) &#123;</span><br><span class="line">            response.put(<span class="string">&quot;authorities&quot;</span>, AuthorityUtils.authorityListToSet(authentication.getAuthorities()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3.Oauth 令牌生成<blockquote><p>在用户登录时申请 token</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description: 认证方法 从 spring security去获取认证是否成功信息 即是否能成功获取令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clientId 客户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clientSecret 客户密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> czq</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> $&#123;date&#125; $&#123;time&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">private</span> AuthToken <span class="title function_">applyToken</span><span class="params">(String username, String password, String clientId, String clientSecret)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line"><span class="comment">//    选中认证服务地址</span></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> loadBalancerClient.choose(ServiceList.AUTH_SERVICE);</span><br><span class="line">        <span class="keyword">if</span> (serviceInstance == <span class="literal">null</span>)&#123;</span><br><span class="line">            LOGGER.error(<span class="string">&quot;choose an auth instance null&quot;</span>);</span><br><span class="line">            ExceptionCast.cast(AuthCode.AUTH_LOGIN_AUTHSERVER_NOTFOUND);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//       获取令牌url</span></span><br><span class="line">        <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> serviceInstance.getUri();</span><br><span class="line">        <span class="type">String</span> <span class="variable">authUrl</span> <span class="operator">=</span> uri+ <span class="string">&quot;/auth/oauth/token&quot;</span>;</span><br><span class="line"><span class="comment">//        定义body</span></span><br><span class="line">        MultiValueMap&lt;String,String&gt; formData = <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//        授权方式</span></span><br><span class="line">        formData.add(<span class="string">&quot;grant_type&quot;</span>,<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        formData.add(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        formData.add(<span class="string">&quot;password&quot;</span>,password);</span><br><span class="line"><span class="comment">//        定义头部</span></span><br><span class="line">        MultiValueMap&lt;String,String&gt; header = <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>&lt;&gt;();</span><br><span class="line">        header.add(<span class="string">&quot;Authorization&quot;</span>,httpbasic(clientId,clientSecret));</span><br><span class="line">        <span class="comment">///指定 restTemplate当遇到400或401响应时候也不要抛出异常，也要正常返回值</span></span><br><span class="line">        restTemplate.setErrorHandler(<span class="keyword">new</span> <span class="title class_">DefaultResponseErrorHandler</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleError</span><span class="params">(URI url, HttpMethod method, ClientHttpResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="comment">//当响应的值为400或401时候也要正常响应，不要抛出异常</span></span><br><span class="line">                <span class="keyword">if</span>(response.getRawStatusCode()!=<span class="number">400</span> &amp;&amp; response.getRawStatusCode()!=<span class="number">401</span>)&#123;</span><br><span class="line">                    <span class="built_in">super</span>.handleError(response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; httpEntity = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(formData, header);</span><br><span class="line"><span class="comment">//        http请求spring security 申请令牌接口</span></span><br><span class="line">            ResponseEntity&lt;Map&gt; mapResponseEntity = restTemplate.exchange(authUrl, HttpMethod.POST,</span><br><span class="line">                    httpEntity, Map.class);</span><br><span class="line">            map = mapResponseEntity.getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RestClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            LOGGER.error(<span class="string">&quot;request oauth_token_password error: &#123;&#125;&quot;</span>,e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            ExceptionCast.cast(AuthCode.AUTH_LOGIN_APPLYTOKEN_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (map == <span class="literal">null</span> ||</span><br><span class="line">                map.get(<span class="string">&quot;access_token&quot;</span>) == <span class="literal">null</span> ||</span><br><span class="line">                map.get(<span class="string">&quot;refresh_token&quot;</span>) == <span class="literal">null</span> ||</span><br><span class="line">                map.get(<span class="string">&quot;jti&quot;</span>) == <span class="literal">null</span>)&#123;<span class="comment">//jti是jwt令牌的唯一标识作为用户身份令牌</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">error_description</span> <span class="operator">=</span> (String) map.get(<span class="string">&quot;error_description&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(error_description)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(error_description.equals(<span class="string">&quot;坏的凭证&quot;</span>))&#123;</span><br><span class="line">                    ExceptionCast.cast(AuthCode.AUTH_CREDENTIAL_ERROR);</span><br><span class="line">                &#125;   <span class="keyword">else</span> <span class="keyword">if</span> (error_description.indexOf(<span class="string">&quot;UserDetailsService returned null&quot;</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    ExceptionCast.cast(AuthCode.AUTH_ACCOUNT_NOTEXISTS);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ExceptionCast.cast(AuthCode.AUTH_LOGIN_APPLYTOKEN_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">AuthToken</span> <span class="variable">authToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthToken</span>();</span><br><span class="line"><span class="comment">//        访问令牌jwt</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt_token</span> <span class="operator">=</span> (String) map.get(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line"><span class="comment">//        刷新令牌jwt</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">refresh_token</span> <span class="operator">=</span> (String) map.get(<span class="string">&quot;refresh_token&quot;</span>);</span><br><span class="line">        <span class="comment">//jti，作为用户的身份标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">access_token</span> <span class="operator">=</span> (String) map.get(<span class="string">&quot;jti&quot;</span>);</span><br><span class="line">        authToken.setJwt_token(jwt_token);</span><br><span class="line">        authToken.setAccess_token(access_token);</span><br><span class="line">        authToken.setRefresh_token(refresh_token);</span><br><span class="line">        <span class="keyword">return</span> authToken;</span><br></pre></td></tr></table></figure><blockquote><p>在获取到令牌后，存储至 redis 中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description: 登录服务 认证方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clientId 客户端id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clientSecret 客户端密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> czq</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> $&#123;date&#125; $&#123;time&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> AuthToken <span class="title function_">login</span><span class="params">(String username, String password, String clientId, String clientSecret)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line"><span class="comment">//        申请令牌</span></span><br><span class="line">   <span class="type">AuthToken</span> <span class="variable">authToken</span> <span class="operator">=</span> applyToken(username,password,clientId,clientSecret);</span><br><span class="line">        <span class="keyword">if</span> (authToken == <span class="literal">null</span> )&#123;</span><br><span class="line">            ExceptionCast.cast(AuthCode.AUTH_LOGIN_APPLYTOKEN_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="type">String</span> <span class="variable">access_token</span> <span class="operator">=</span> authToken.getAccess_token();</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> (String) JSON.toJSONString(authToken);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">saveTokenResult</span> <span class="operator">=</span> saveToken(access_token,content,tokenValiditySeconds);</span><br><span class="line">        <span class="keyword">if</span> (!saveTokenResult)&#123;</span><br><span class="line">            ExceptionCast.cast(AuthCode.AUTH_LOGIN_TOKEN_SAVEFAIL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authToken;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description: 存储令牌到redis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> access_token 登录token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttl 过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> czq</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> $&#123;date&#125; $&#123;time&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">saveToken</span><span class="params">(String access_token, String content, <span class="type">long</span> ttl)</span> &#123;</span><br><span class="line"><span class="comment">//        令牌名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;user_token:&quot;</span> + access_token;</span><br><span class="line"><span class="comment">//        保存令牌到redis</span></span><br><span class="line">        stringRedisTemplate.boundValueOps(key).set(content,ttl, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">//        获取过期时间</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">expire</span> <span class="operator">=</span> stringRedisTemplate.getExpire(key,TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> expire &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>保存到 redis 后，通过 cookie 返回至前端</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description: 将令牌保存到cookie</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> access_token token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> czq</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> $&#123;date&#125; $&#123;time&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveCookie</span><span class="params">(String access_token)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> ((ServletRequestAttributes)</span><br><span class="line">                RequestContextHolder.getRequestAttributes()).getResponse();</span><br><span class="line"><span class="comment">//        添加cookie令牌 最后一个参数设置为false 表示允许浏览器获取</span></span><br><span class="line">        <span class="keyword">assert</span> response != <span class="literal">null</span>;</span><br><span class="line">        CookieUtil.addCookie(response,cookieDomain,<span class="string">&quot;/&quot;</span>,</span><br><span class="line">                <span class="string">&quot;uid&quot;</span>,access_token,cookieMaxAge,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>最终返回 token 至前端，前端通过携带 cookie 获取 jwt 令牌</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * description: 从redis查询令牌</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> access_token 准入token</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> auth token</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> czq</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@date</span> $&#123;date&#125; $&#123;time&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> AuthToken <span class="title function_">getUserToken</span><span class="params">(String access_token)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">userToken</span> <span class="operator">=</span> <span class="string">&quot;user_token:&quot;</span> + access_token;<span class="comment">//      String name = &quot;user_token:&quot; + access_token;</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">userTokenString</span> <span class="operator">=</span>  stringRedisTemplate.opsForValue().get(userToken);</span><br><span class="line">       <span class="keyword">if</span> (userToken != <span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="type">AuthToken</span> <span class="variable">authToken</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               authToken = JSON.parseObject(userTokenString,AuthToken.class);</span><br><span class="line">           &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">               LOGGER.error(<span class="string">&quot;getUserToken from redis and execute JSON.parseObject error &#123;&#125;&quot;</span>,e.getMessage());</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> authToken;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>4.网关配置过滤规则，放行登录等接口<blockquote><p>在过滤规则中，对不符合要求接口予以拦截并返回 403。</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czq.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.czq.common.model.response.CommonCode;</span><br><span class="line"><span class="keyword">import</span> com.czq.common.model.response.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.czq.model.auth.ext.*;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.client.RestTemplateBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.AntPathMatcher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.LinkedMultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.PathMatcher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFilter</span> <span class="keyword">extends</span> <span class="title class_">ZuulFilter</span> &#123;</span><br><span class="line">    List&lt;String&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(LoginFilter.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private RestTemplate restTemplate;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line"><span class="comment">//        paths.add(&quot;/login/logining&quot;);</span></span><br><span class="line">        paths.add(<span class="string">&quot;/**/auth/oauth/check_token&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/auth/oauth/token&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/auth/userlogin&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/auth/userjwt&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/manage/captcha&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/manage/verification&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/ui/**&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/swagger**/**&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/v2/api-docs&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/*.css&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/*.jpg&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/*.png&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/*.gif&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/*.js&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/*.svg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    过滤器类型</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * pre 请求前调用</span></span><br><span class="line"><span class="comment">     * routing 在路由请求前调用</span></span><br><span class="line"><span class="comment">     * post在routing error过滤器后调用</span></span><br><span class="line"><span class="comment">     * error处理请求发生错误调用</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">filterType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pre&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">filterOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">////int值来定义过滤器的执行顺序，数值越小优先级越高</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldFilter</span><span class="params">()</span> &#123;<span class="comment">//执行过滤器</span></span><br><span class="line">        <span class="type">RequestContext</span> <span class="variable">requestContext</span> <span class="operator">=</span> RequestContext.getCurrentContext();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> requestContext.getRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">PathMatcher</span> <span class="variable">matcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line">        Optional&lt;String&gt; optional = paths.stream().filter(t -&gt; matcher.match(t, uri)).findFirst();</span><br><span class="line">        <span class="keyword">return</span> !optional.isPresent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException &#123;</span><br><span class="line">        <span class="type">RequestContext</span> <span class="variable">requestContext</span> <span class="operator">=</span> RequestContext.getCurrentContext();</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">httpServletResponse</span> <span class="operator">=</span> requestContext.getResponse();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> requestContext.getRequest();</span><br><span class="line"><span class="comment">//取出头部信息Authorization</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> httpServletRequest.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(authorization)) &#123;</span><br><span class="line">            requestContext.setSendZuulResponse(<span class="literal">false</span>);<span class="comment">//;拒绝访问</span></span><br><span class="line">            requestContext.setResponseStatusCode(<span class="number">200</span>);<span class="comment">//响应码</span></span><br><span class="line">            <span class="type">ResponseResult</span> <span class="variable">unauthenticated</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(CommonCode.UNAUTHENTICATED);</span><br><span class="line">            <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(unauthenticated);</span><br><span class="line">            requestContext.setResponseBody(jsonString);</span><br><span class="line">            requestContext.getResponse().setContentType(<span class="string">&quot;application/json;charset=UTF‐8&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.startsWithIgnoreCase(authorization, <span class="string">&quot;bearer &quot;</span>)) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;http request header authorization is error&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">TokenInfo</span> <span class="variable">tokenInfo</span> <span class="operator">=</span> getTokenInfo(authorization);</span><br><span class="line">            httpServletRequest.setAttribute(<span class="string">&quot;token&quot;</span>, tokenInfo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;token check error !&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>对携带令牌的请求通过请求鉴权服务验证 token 合法后放行至下一过滤规则，反之返回 token 检查失败。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> TokenInfo <span class="title function_">getTokenInfo</span><span class="params">(String authorization)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:50201/api/v1.0.1/auth-service/auth/oauth/check_token&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> StringUtils.substringAfter(authorization, <span class="string">&quot;Bearer &quot;</span>);</span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);</span><br><span class="line"><span class="comment">//        headers.setBasicAuth(&quot;RsWebApp&quot;, &quot;RsWebApp&quot;);</span></span><br><span class="line">        <span class="comment">//方法一 使用RestTemplateBuilder来实例化</span></span><br><span class="line">        headers.add(HttpHeaders.AUTHORIZATION, <span class="string">&quot;Bearer &quot;</span> + token);</span><br><span class="line">        <span class="comment">//此处相当于在header里头添加content-type等参数</span></span><br><span class="line">        headers.add(HttpHeaders.CONTENT_TYPE,<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="type">RestTemplateBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplateBuilder</span>();</span><br><span class="line">        <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> builder.basicAuthorization(<span class="string">&quot;RsWebApp&quot;</span>, <span class="string">&quot;RsWebApp&quot;</span>).build();</span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>&lt;&gt;();</span><br><span class="line">        params.add(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">        HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; httpEntity = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(params, headers);</span><br><span class="line">        ResponseEntity&lt;TokenInfo&gt; exchange = restTemplate.exchange(url, HttpMethod.POST, httpEntity, TokenInfo.class);</span><br><span class="line">        <span class="keyword">return</span> exchange.getBody();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>5.网关鉴权过滤规则<blockquote><p>拦截请求，校验 token 是否过期；对符合要求的请求在 header 中添加 jti (java web token identity)并予以放行</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czq.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.czq.model.auth.ext.TokenInfo;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.AntPathMatcher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.PathMatcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 授权过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationFilter</span> <span class="keyword">extends</span> <span class="title class_">ZuulFilter</span> &#123;</span><br><span class="line">    List&lt;String&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(LoginFilter.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private RestTemplate restTemplate;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AuthorizationFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line"><span class="comment">//        paths.add(&quot;/login/logining&quot;);</span></span><br><span class="line"><span class="comment">//        paths.add(&quot;/login/checkCode&quot;);</span></span><br><span class="line">        paths.add(<span class="string">&quot;/**/auth/oauth/check_token&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/auth/oauth/token&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/auth/userlogin&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/auth/userjwt&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/manage/captcha&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/manage/verification&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/ui/**&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/swagger**/**&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/v2/api-docs&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/*.css&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/*.jpg&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/*.png&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/*.gif&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/*.js&quot;</span>);</span><br><span class="line">        paths.add(<span class="string">&quot;/**/*.svg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldFilter</span><span class="params">()</span> &#123;<span class="comment">//执行过滤器</span></span><br><span class="line">        <span class="type">RequestContext</span> <span class="variable">requestContext</span> <span class="operator">=</span> RequestContext.getCurrentContext();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> requestContext.getRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">PathMatcher</span> <span class="variable">matcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line">        Optional&lt;String&gt; optional = paths.stream().filter(t -&gt; matcher.match(t, uri)).findFirst();</span><br><span class="line">        <span class="keyword">return</span> !optional.isPresent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;authorization start&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">RequestContext</span> <span class="variable">requestContext</span> <span class="operator">=</span> RequestContext.getCurrentContext();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> requestContext.getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isNeedAuth(request)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// OAuthFilter token 校验通过，会将token信息放在请求头里</span></span><br><span class="line">            <span class="type">TokenInfo</span> <span class="variable">tokenInfo</span> <span class="operator">=</span> (TokenInfo) request.getAttribute(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 校验是否有权限</span></span><br><span class="line">            <span class="keyword">if</span> (tokenInfo != <span class="literal">null</span> &amp;&amp; tokenInfo.isActive()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!hasPermission(tokenInfo, request)) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;audit log update fail 403&quot;</span>);</span><br><span class="line">                    handleError(<span class="number">403</span>, requestContext);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                requestContext.addZuulRequestHeader(<span class="string">&quot;token&quot;</span>, tokenInfo.getJti());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.startsWith(request.getRequestURI(), <span class="string">&quot;/token&quot;</span>)) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;audit log update fail 401&quot;</span>);</span><br><span class="line">                    handleError(<span class="number">401</span>, requestContext);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleError</span><span class="params">(<span class="type">int</span> status, RequestContext requestContext)</span> &#123;</span><br><span class="line">        requestContext.getResponse().setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        requestContext.setResponseStatusCode(status);</span><br><span class="line">        requestContext.setResponseBody(<span class="string">&quot;&#123;\&quot;message\&quot;:\&quot;auth fail\&quot;&#125;&quot;</span>);</span><br><span class="line">        requestContext.setSendZuulResponse(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasPermission</span><span class="params">(TokenInfo tokenInfo, HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//RandomUtils.nextInt() % 2 == 0;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isNeedAuth</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">filterType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pre&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">filterOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><ol start="6"><li>token 信息实体类</li></ol></li></ul><h4 id="TokenInfo-java">TokenInfo.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czq.model.auth.ext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenInfo</span> &#123;</span><br><span class="line">    String userpic;</span><br><span class="line">    String user_name;</span><br><span class="line">    List&lt;String&gt; scope;</span><br><span class="line">    String name;</span><br><span class="line">    String utype;</span><br><span class="line">    <span class="type">boolean</span> active;</span><br><span class="line">    String id;</span><br><span class="line">    <span class="type">long</span> exp;</span><br><span class="line">    String jti;</span><br><span class="line">    String client_id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="AuthToken-java">AuthToken.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czq.model.auth.ext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthToken</span> &#123;</span><br><span class="line">    String access_token;<span class="comment">//访问token</span></span><br><span class="line">    String refresh_token;<span class="comment">//刷新token</span></span><br><span class="line">    String jwt_token;<span class="comment">//jwt令牌</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> zuul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger + Zuul 整合微服务接口文档</title>
      <link href="/2023/05/31/swagger-micro-service/"/>
      <url>/2023/05/31/swagger-micro-service/</url>
      
        <content type="html"><![CDATA[<h1>Swagger + Zuul 整合微服务接口文档</h1><h2 id="简介">简介</h2><h3 id="Swagger">Swagger</h3><blockquote><p>Swagger 是一款 RESTFUL 接口的文档在线自动生成+功能测试功能软件。Swagger 是一个规范和完整的框架,用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。目标是使客户端和文件系统作为服务器以同样的速度来更新文件的方法,参数和模型紧密集成到服务器。</p></blockquote><h3 id="Zuul">Zuul</h3><blockquote><p>Spring Cloud Zuul 是 Spring Cloud Netflix 子项目的核心组件之一，可以作为微服务架构中的 API 网关使用，支持动态路由与过滤功能<br>API 网关为微服务架构中的服务提供了统一的访问入口，客户端通过 API 网关访问相关服务。<br>API 网关的定义类似于设计模式中的门面模式，它相当于整个微服务架构中的门面，所有客户端的访问都通过它来进行路由及过滤。<br>它实现了请求路由、负载均衡、校验过滤、服务容错、服务聚合等功能。</p></blockquote><h2 id="技术">技术</h2><ul><li>1.swagger 文档：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.zuul 网关</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现">实现</h2><ul><li>1.API 模块配置引入<ul><li>pom.xml 文件重点如下:</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.API 模块 swagger 配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czq.api.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ParameterBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.schema.ModelRef;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Parameter;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Configuration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Parameter&gt; parameters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        parameters.add((<span class="keyword">new</span> <span class="title class_">ParameterBuilder</span>()).name(<span class="string">&quot;Authorization&quot;</span>).description(<span class="string">&quot;Authorization&quot;</span>).modelRef(<span class="keyword">new</span> <span class="title class_">ModelRef</span>(<span class="string">&quot;string&quot;</span>)).parameterType(<span class="string">&quot;header&quot;</span>).required(<span class="literal">false</span>).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .globalOperationParameters(parameters)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.czq&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;RecycleShop文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;RecycleShop文档&quot;</span>)</span><br><span class="line"><span class="comment">//                .termsOfServiceUrl(&quot;/&quot;)</span></span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3.网关微服务配置<ul><li>pom.xml 重点配置</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--生成接口文档--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--提供ui界面--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml 文件部分配置（路由配置）</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">manage-service:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/manage-service/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">manage-service</span></span><br><span class="line">      <span class="comment">#      strip-prefix: false</span></span><br><span class="line">      <span class="attr">sensitiveHeaders:</span></span><br></pre></td></tr></table></figure><ul><li>4.网关微服务中 swagger 整合<ul><li>swagger 配置编写</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czq.gateway.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.Route;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SwaggerResource;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SwaggerResourcesProvider;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过configuration注解自动注入配置文件</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//开启swagger功能</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="comment">//如果有多个配置文件，以这个为准</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="comment">//实现SwaggerResourcesProvider，配置swagger接口文档的数据源</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span>  <span class="keyword">implements</span> <span class="title class_">SwaggerResourcesProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//RouteLocator可以根据zuul配置的路由列表获取服务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RouteLocator routeLocator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SwaggerConfig</span><span class="params">(RouteLocator routeLocator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.routeLocator = routeLocator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个方法用来添加swagger的数据源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SwaggerResource&gt; <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">resources</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        List&lt;Route&gt; routes = routeLocator.getRoutes();</span><br><span class="line">        <span class="comment">//通过RouteLocator获取路由配置，遍历获取所配置服务的接口文档，这样不需要手动添加，实现动态获取</span></span><br><span class="line">        <span class="keyword">for</span> (Route route: routes) &#123;</span><br><span class="line">            resources.add(swaggerResource(route.getId(), route.getFullPath().replace(<span class="string">&quot;**&quot;</span>, <span class="string">&quot;v2/api-docs&quot;</span>),<span class="string">&quot;2.0&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resources;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SwaggerResource <span class="title function_">swaggerResource</span><span class="params">(String name, String location, String version)</span> &#123;</span><br><span class="line">        <span class="type">SwaggerResource</span> <span class="variable">swaggerResource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SwaggerResource</span>();</span><br><span class="line">        swaggerResource.setName(name);</span><br><span class="line">        swaggerResource.setLocation(location);</span><br><span class="line">        swaggerResource.setSwaggerVersion(version);</span><br><span class="line">        <span class="keyword">return</span> swaggerResource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>5.在主 main class 中启用网关</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czq.gateway;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span><span class="comment">//此工程是一个zuul网关</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>6.打开浏览器，使用以下地址测试</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:port/api/v1.0.1/swagger-ui.html</span><br></pre></td></tr></table></figure><blockquote><p>进入地址后选择对应微服务测试效果</p></blockquote><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻量快速的 Python ASGI uvicorn 框架使用</title>
      <link href="/2023/05/15/uvicorn-use/"/>
      <url>/2023/05/15/uvicorn-use/</url>
      
        <content type="html"><![CDATA[<h1>轻量快速的 Python ASGI uvicorn 框架使用</h1><h2 id="下载使用">下载使用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install fastapi</span><br><span class="line">pip install uvicorn</span><br></pre></td></tr></table></figure><h2 id="优点">优点</h2><blockquote><p>Python 仍缺乏异步的网关协议接口，ASGI 的出现填补了这一空白，现在开始，我们能够使用共同的标准为所有的异步框架来实现一些工具，ASGI 帮助 Python 在 Web 框架上和 Node.JS 及 Golang 相竟争，目标是获得高性能的 IO 密集型任务，ASGI 支持 HTTP2 和 WebSockets，WSGI 是不支持的。</p></blockquote><blockquote><p>Uvicorn 目前支持 HTTP1.1 和 WebSocket，计划支持 HTTP2</p></blockquote><h2 id="框架使用">框架使用</h2><h3 id="启动">启动</h3><ul><li>1.脚本式</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uvicorn example:app</span><br></pre></td></tr></table></figure><ul><li>2.代码式</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">app</span>(<span class="params">scope, receive, send</span>):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    uvicorn.run(<span class="string">&quot;example:app&quot;</span>, host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">5000</span>, log_level=<span class="string">&quot;info&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>3.整合 FastAPI</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由注解 参数注解</span></span><br><span class="line"><span class="meta">@router.get(<span class="params"><span class="string">&quot;/log/log&quot;</span>, summary=<span class="string">&#x27;summary&#x27;</span>, description=<span class="string">&#x27;desc&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_item</span>(<span class="params">item_id: <span class="type">Union</span>[<span class="built_in">str</span>, <span class="literal">None</span>] = Query(<span class="params">default=<span class="literal">None</span>, alias=<span class="string">&quot;log_id&quot;</span></span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取报告生成进度</span></span><br><span class="line"><span class="string">    @:parameter item_id log id</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> null;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(app=app)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="功能引入">功能引入</h3><ul><li>1.全局 log</li></ul><h4 id="启动文件配置">启动文件配置</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_app</span>():</span><br><span class="line">    app = FastAPI(title=<span class="string">&quot;&quot;</span>, version=<span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">                  description=<span class="string">&quot;&quot;</span>, debug=<span class="literal">True</span>)</span><br><span class="line">    app.include_router(router=api_router, prefix=<span class="string">&quot;/api/v1&quot;</span>)</span><br><span class="line">    logging.getLogger().handlers = [InterceptHandler()]</span><br><span class="line">    logger.configure(</span><br><span class="line">        handlers=[&#123;<span class="string">&quot;sink&quot;</span>: sys.stdout, <span class="string">&quot;level&quot;</span>: logging.DEBUG, <span class="string">&quot;format&quot;</span>: format_record&#125;])</span><br><span class="line">    logger.add(LOG_DIR, encoding=<span class="string">&#x27;utf-8&#x27;</span>, rotation=<span class="string">&quot;9:46&quot;</span>)</span><br><span class="line">    logger.debug(<span class="string">&#x27;日志系统已加载&#x27;</span>)</span><br><span class="line">    logging.getLogger(<span class="string">&quot;uvicorn.access&quot;</span>).handlers = [InterceptHandler()]</span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = init_app()</span><br></pre></td></tr></table></figure><h4 id="log-基础配置">log 基础配置</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pformat</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> http_server.log.log_base <span class="keyword">import</span> LOG_FORMAT</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="comment"># from ..config import config</span></span><br><span class="line"><span class="keyword">from</span> loguru._defaults <span class="keyword">import</span> LOGURU_FORMAT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InterceptHandler</span>(logging.Handler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">emit</span>(<span class="params">self, record</span>):</span><br><span class="line">        <span class="comment"># Get corresponding Loguru level if it exists</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            level = logger.level(record.levelname).name</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            level = record.levelno</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Find caller from where originated the logged message</span></span><br><span class="line">        frame, depth = logging.currentframe(), <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> frame.f_code.co_filename == logging.__file__:</span><br><span class="line">            frame = frame.f_back</span><br><span class="line">            depth += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        logger.opt(depth=depth, exception=record.exc_info).log(</span><br><span class="line">            level, record.getMessage()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">format_record</span>(<span class="params">record: <span class="built_in">dict</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    format_string = LOG_FORMAT</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> record[<span class="string">&quot;extra&quot;</span>].get(<span class="string">&quot;payload&quot;</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        record[<span class="string">&quot;extra&quot;</span>][<span class="string">&quot;payload&quot;</span>] = pformat(</span><br><span class="line">            record[<span class="string">&quot;extra&quot;</span>][<span class="string">&quot;payload&quot;</span>], indent=<span class="number">4</span>, compact=<span class="literal">True</span>, width=<span class="number">88</span></span><br><span class="line">        )</span><br><span class="line">        format_string += <span class="string">&quot;\n&lt;level&gt;&#123;extra[payload]&#125;&lt;/level&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    format_string += <span class="string">&quot;&#123;exception&#125;\n&quot;</span></span><br><span class="line">    <span class="keyword">return</span> format_string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基础变量配置</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------系统调试------------------------------------</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"><span class="comment"># -----------------------日志-----------------------------------------</span></span><br><span class="line">LOG_DIR = os.path.join(os.getcwd(), <span class="string">f&#x27;log_dir\\<span class="subst">&#123;time.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)&#125;</span>.log&#x27;</span>)</span><br><span class="line">LOG_FORMAT = <span class="string">&#x27;&lt;level&gt;&#123;level: &lt;8&#125;&lt;/level&gt;  &lt;green&gt;&#123;time:YYYY-MM-DD HH:mm:ss.SSS&#125;&lt;/green&gt; - &lt;cyan&gt;&#123;name&#125;&lt;/cyan&gt;:&lt;cyan&gt;&#123;&#x27;</span> \</span><br><span class="line">             <span class="string">&#x27;function&#125;&lt;/cyan&gt; - &lt;level&gt;&#123;message&#125;&lt;/level&gt; &#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>2.全局异常处理</li></ul><h4 id="异常类定义">异常类定义</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from rest_framework.exceptions import APIException</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class Success(APIException):</span></span><br><span class="line"><span class="comment">#     code = 201</span></span><br><span class="line"><span class="comment">#     msg = &#x27;ok&#x27;</span></span><br><span class="line"><span class="comment">#     error_code = 0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class DeleteSuccess(APIException):</span></span><br><span class="line"><span class="comment">#     code = 202</span></span><br><span class="line"><span class="comment">#     msg = &#x27;delete ok&#x27;</span></span><br><span class="line"><span class="comment">#     error_code = 1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class UpdateSuccess(APIException):</span></span><br><span class="line"><span class="comment">#     code = 200</span></span><br><span class="line"><span class="comment">#     msg = &#x27;update ok&#x27;</span></span><br><span class="line"><span class="comment">#     error_code = 2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class ServerError(APIException):</span></span><br><span class="line"><span class="comment">#     code = 500</span></span><br><span class="line"><span class="comment">#     msg = &#x27;sorry, we made a mistake!&#x27;</span></span><br><span class="line"><span class="comment">#     error_code = 999</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class ParameterException(APIException):</span></span><br><span class="line"><span class="comment">#     code = 400</span></span><br><span class="line"><span class="comment">#     msg = &#x27;invalid parameter&#x27;</span></span><br><span class="line"><span class="comment">#     error_code = 1000</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class NotFound(APIException):</span></span><br><span class="line"><span class="comment">#     code = 404</span></span><br><span class="line"><span class="comment">#     msg = &#x27;the resource are not found&#x27;</span></span><br><span class="line"><span class="comment">#     error_code = 1001</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class AuthFailed(APIException):</span></span><br><span class="line"><span class="comment">#     code = 401</span></span><br><span class="line"><span class="comment">#     msg = &#x27;authorization failed&#x27;</span></span><br><span class="line"><span class="comment">#     error_code = 1005</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class Forbidden(APIException):</span></span><br><span class="line"><span class="comment">#     code = 403</span></span><br><span class="line"><span class="comment">#     error_code = 1004</span></span><br><span class="line"><span class="comment">#     msg = &#x27;forbidden, not in scope&#x27;</span></span><br><span class="line"><span class="keyword">from</span> docutils.nodes <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> fastapi.encoders <span class="keyword">import</span> jsonable_encoder</span><br><span class="line"><span class="keyword">from</span> fastapi.exceptions <span class="keyword">import</span> RequestValidationError</span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> starlette.responses <span class="keyword">import</span> JSONResponse, PlainTextResponse</span><br><span class="line"><span class="keyword">from</span> starlette.exceptions <span class="keyword">import</span> HTTPException <span class="keyword">as</span> StarletteHTTPException</span><br><span class="line"><span class="keyword">from</span> http_server.router <span class="keyword">import</span> router</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">自定义异常</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnicornException</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@router.api_router.exception_handler(<span class="params">RequestValidationError</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">validation_exception_handler</span>(<span class="params">request: Request, exc: RequestValidationError</span>):</span><br><span class="line">    <span class="keyword">return</span> JSONResponse(</span><br><span class="line">        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,</span><br><span class="line">        content=jsonable_encoder(&#123;<span class="string">&quot;detail&quot;</span>: exc.errors(), <span class="string">&quot;body&quot;</span>: exc.body&#125;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@router.api_router.exception_handler(<span class="params">StarletteHTTPException</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">http_exception_handler</span>(<span class="params">request, exc</span>):</span><br><span class="line">    <span class="keyword">return</span> PlainTextResponse(<span class="built_in">str</span>(exc.detail), status_code=exc.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@router.api_router.exception_handler(<span class="params">UnicornException</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">unicorn_exception_handler</span>(<span class="params">request: Request, exc: UnicornException</span>):</span><br><span class="line">    <span class="keyword">return</span> JSONResponse(</span><br><span class="line">        status_code=<span class="number">418</span>,</span><br><span class="line">        content=&#123;<span class="string">&quot;message&quot;</span>: <span class="string">f&quot;Oops! <span class="subst">&#123;exc.name&#125;</span> did something. There goes a rainbow...&quot;</span>&#125;,</span><br><span class="line">    )</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用">使用</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params"><span class="string">&quot;/&#123;id&#125;&quot;</span>, summary=<span class="string">&#x27;测试接口&#x27;</span>, description=<span class="string">&#x27;测试接口&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_root</span>(<span class="params"><span class="built_in">id</span>: <span class="built_in">int</span> = Path(<span class="params">title=<span class="string">&quot;id not null&quot;</span></span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试接口</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">id</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(<span class="number">404</span>, <span class="string">&quot;no data&quot;</span>)</span><br><span class="line">    datas = &#123;</span><br><span class="line">        <span class="string">&quot;hello &quot;</span>: <span class="string">&quot;wprils&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse.success(datas)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>3.路由定义</li></ul><h4 id="启动文件配置-2">启动文件配置</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.include_router(router=api_router, prefix=<span class="string">&quot;/api/v1&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="路由文件配置">路由文件配置</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> APIRouter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> http_server.response.JsonResponse <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> http_server.view <span class="keyword">import</span> log_process</span><br><span class="line"></span><br><span class="line">api_router = APIRouter()</span><br><span class="line">api_router.include_router(log_process.router, prefix=<span class="string">&quot;/shell&quot;</span>, tags=[<span class="string">&#x27;脚本操作&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="接口定义">接口定义</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> APIRouter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> http_server.response.JsonResponse <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> http_server.request.http_request <span class="keyword">import</span> data_process, get_csv_data</span><br><span class="line"><span class="keyword">from</span> http_server.tools.file_process <span class="keyword">import</span> download_csv_data</span><br><span class="line"><span class="keyword">from</span> run.application_main <span class="keyword">import</span> run_process_thread</span><br><span class="line"></span><br><span class="line">router = APIRouter()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@router.get(<span class="params"><span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_root</span>():</span><br><span class="line">    datas = &#123;</span><br><span class="line">        <span class="string">&quot;hello &quot;</span>: <span class="string">&quot;wprils&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse.success(datas)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>4.统一返回值</li></ul><h4 id="定义">定义</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JsonResponse</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    统一的json返回格式</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data, code, msg</span>):</span><br><span class="line">        <span class="variable language_">self</span>.data = data</span><br><span class="line">        <span class="variable language_">self</span>.code = code</span><br><span class="line">        <span class="variable language_">self</span>.msg = msg</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">success</span>(<span class="params">cls, data=<span class="literal">None</span>, code=<span class="number">0</span>, msg=<span class="string">&#x27;success&#x27;</span></span>):</span><br><span class="line">        <span class="keyword">return</span> cls(data, code, msg)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">error</span>(<span class="params">cls, data=<span class="literal">None</span>, code=-<span class="number">1</span>, msg=<span class="string">&#x27;error&#x27;</span></span>):</span><br><span class="line">        <span class="keyword">return</span> cls(data, code, msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_dict</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;code&quot;</span>: <span class="variable language_">self</span>.code,</span><br><span class="line">            <span class="string">&quot;msg&quot;</span>: <span class="variable language_">self</span>.msg,</span><br><span class="line">            <span class="string">&quot;data&quot;</span>: <span class="variable language_">self</span>.data</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="使用-2">使用</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params"><span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_root</span>():</span><br><span class="line">    datas = &#123;</span><br><span class="line">        <span class="string">&quot;hello &quot;</span>: <span class="string">&quot;wprils&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse.success(datas)</span><br></pre></td></tr></table></figure><h2 id="参考链接">参考链接</h2><ul><li>[1].<a href="https://fastapi.tiangolo.com/zh/tutorial/path-params-numeric-validations/">https://fastapi.tiangolo.com/zh/tutorial/path-params-numeric-validations/</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Electron 框架中 http 请求与 Java 后端 websocket 服务端通信</title>
      <link href="/2023/05/09/web-socket-electron/"/>
      <url>/2023/05/09/web-socket-electron/</url>
      
        <content type="html"><![CDATA[<h1>使用 Electron 框架中 http 请求与 Java 后端 websocket 服务端通信</h1><h2 id="Electron-框架基本搭建">Electron 框架基本搭建</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参见《Electron Egg 框架研究》一文</span><br></pre></td></tr></table></figure><h2 id="后端-Websocker-服务建立">后端 Websocker 服务建立</h2><h3 id="基础环境配置">基础环境配置</h3><ul><li>1.pom.xml 文件引入 websocket 包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.后端服务搭建</li><li>websocket 配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.czq.shop.handler.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> com.czq.shop.interceptor.WebSocketInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebsocketConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebSocketConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// webSocket通道</span></span><br><span class="line">        <span class="comment">// 指定处理器和路径</span></span><br><span class="line">        registry.addHandler(<span class="keyword">new</span> <span class="title class_">WebSocketHandler</span>(), <span class="string">&quot;/websocket&quot;</span>)</span><br><span class="line">                <span class="comment">// 指定自定义拦截器</span></span><br><span class="line">                .addInterceptors(<span class="keyword">new</span> <span class="title class_">WebSocketInterceptor</span>())</span><br><span class="line">                <span class="comment">// 允许跨域</span></span><br><span class="line">                .setAllowedOrigins(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// sockJs通道</span></span><br><span class="line">        registry.addHandler(<span class="keyword">new</span> <span class="title class_">WebSocketHandler</span>(), <span class="string">&quot;/sock-js&quot;</span>)</span><br><span class="line">                .addInterceptors(<span class="keyword">new</span> <span class="title class_">WebSocketInterceptor</span>())</span><br><span class="line">                .setAllowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 开启sockJs支持</span></span><br><span class="line">                .withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>handle 文件编写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.handler.AbstractWebSocketHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketHandler</span> <span class="keyword">extends</span> <span class="title class_">AbstractWebSocketHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储sessionId和webSocketSession</span></span><br><span class="line"><span class="comment">     * 需要注意的是，webSocketSession没有提供无参构造，不能进行序列化，也就不能通过redis存储</span></span><br><span class="line"><span class="comment">     * 在分布式系统中，要想别的办法实现webSocketSession共享</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, WebSocketSession&gt; sessionMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; userMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * webSocket连接创建后调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line"><span class="comment">//session.g6</span></span><br><span class="line"><span class="comment">//        String user = String.valueOf(session.getUri().getPath().get(&quot;user&quot;));</span></span><br><span class="line">        userMap.put(<span class="string">&quot;user&quot;</span>, session.getId());</span><br><span class="line">        sessionMap.put(session.getId(), session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收到消息会调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(WebSocketSession session, WebSocketMessage&lt;?&gt; message)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.parseObject(message.getPayload().toString());</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        sendMessage(username, <span class="string">&quot;hello user&quot;</span>);</span><br><span class="line">        sendMessage(username, <span class="string">&quot;data content is json data&quot;</span>+password+message.getPayload().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接出错会调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleTransportError</span><span class="params">(WebSocketSession session, Throwable exception)</span> &#123;</span><br><span class="line">        sessionMap.remove(session.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭会调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span> &#123;</span><br><span class="line">        sessionMap.remove(session.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsPartialMessages</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后端发送消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String user, String message)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sessionId</span> <span class="operator">=</span> userMap.get(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(sessionId)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">WebSocketSession</span> <span class="variable">session</span> <span class="operator">=</span> sessionMap.get(sessionId);</span><br><span class="line">        <span class="keyword">if</span> (session == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        session.sendMessage(<span class="keyword">new</span> <span class="title class_">TextMessage</span>(message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>interceptor 文件编写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czq.shop.interceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServletServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.HandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandshakeInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * handler处理前调用,attributes属性最终在WebSocketSession里,</span></span><br><span class="line"><span class="comment">     * 可能通过webSocketSession.getAttributes().get(key值)获得</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map&lt;String, Object&gt; attributes)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> ServletServerHttpRequest) &#123;</span><br><span class="line">            <span class="type">ServletServerHttpRequest</span> <span class="variable">serverHttpRequest</span> <span class="operator">=</span> (ServletServerHttpRequest) request;</span><br><span class="line">            <span class="comment">// 获取请求路径携带的参数</span></span><br><span class="line"><span class="comment">//            String url = serverHttpRequest.getURI().getPath();</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> serverHttpRequest.getServletRequest().getParameter(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="comment">//            serverHttpRequest.getBody().g/</span></span><br><span class="line">            attributes.put(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line"><span class="comment">//            response.getHeaders().ge</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception exception)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在此之后启动后端</li></ul><h2 id="前端-wesocket-client-请求发起">前端 wesocket client 请求发起</h2><ul><li>第三方库安装</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ReconnectingWebSocket</span><br></pre></td></tr></table></figure><ul><li>1.编写 HTML 界面，编写单击事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">round</span> @<span class="attr">click</span>=<span class="string">&quot;websocket()&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>&#123;&#123; $t(&quot;buttons.api&quot;) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.编写单击事件方法调用服务端 websocket 服务</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">websocket</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> websocket = <span class="keyword">new</span> <span class="title class_">ReconnectingWebSocket</span>(local_url);</span><br><span class="line">                websocket.<span class="title function_">addEventListener</span>(<span class="string">&#x27;open&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    websocket.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">person_msg</span>).<span class="title function_">toString</span>());</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">//连接发生错误的回调方法</span></span><br><span class="line">                websocket.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//连接成功建立的回调方法</span></span><br><span class="line">                websocket.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;-----&quot;</span>)</span><br><span class="line">                <span class="comment">//接收到消息的回调方法</span></span><br><span class="line">                websocket.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到消息&#x27;</span>)</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span> = event.<span class="property">data</span>;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>);</span><br><span class="line">                    <span class="comment">// setTimeout(function () &#123;</span></span><br><span class="line">                    websocket.<span class="title function_">send</span>(<span class="string">&#x27;get data&#x27;</span>);</span><br><span class="line">                    <span class="comment">// &#125;,2000)</span></span><br><span class="line">                    ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;openit&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure><h3 id="普通-http-请求的发起">普通 http 请求的发起</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;@/utils/request&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params">token</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/shop/monitor/getOrderCount&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123; token &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>request.js 配置文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Message</span> &#125; <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>.<span class="property">userConfig</span>);</span><br><span class="line"><span class="comment">// const process.env.userConfig.BASE_API = &#x27;http://127.0.0.1:10086&#x27;</span></span><br><span class="line"><span class="keyword">const</span> serves = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">userConfig</span>.<span class="property">BASE_API</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求发送之前的拦截器</span></span><br><span class="line">serves.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置发送之前数据需要做什么处理</span></span><br><span class="line">    config.<span class="property">baseURL</span> = <span class="string">&quot;http://0.0.0.0:10086&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求接受拦截器</span></span><br><span class="line">serves.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置接受数据之后，做什么处理</span></span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">50000</span>) &#123;</span><br><span class="line">      <span class="title class_">Message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 判断请求异常信息中是否含有超时timeout字符串</span></span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">message</span>.<span class="title function_">includes</span>(<span class="string">&quot;timeout&quot;</span>)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;错误回调&quot;</span>, err);</span><br><span class="line">      <span class="title class_">Message</span>.<span class="title function_">error</span>(<span class="string">&quot;网络超时&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">message</span>.<span class="title function_">includes</span>(<span class="string">&quot;Network Error&quot;</span>)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;错误回调&quot;</span>, err);</span><br><span class="line">      <span class="title class_">Message</span>.<span class="title function_">error</span>(<span class="string">&quot;服务端未启动，或网络连接错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将serves抛出去</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> serves;</span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 django-rest-framework 框架编写接口与页面</title>
      <link href="/2023/05/09/rest-framework-user/"/>
      <url>/2023/05/09/rest-framework-user/</url>
      
        <content type="html"><![CDATA[<h1>使用 django-rest-framework 框架编写接口与页面</h1><h2 id="基础环境搭建">基础环境搭建</h2><ul><li>1.python 基础环境与第三方库搭建<ul><li>python 基础环境安装，地址</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.python.org/downloads/</span><br></pre></td></tr></table></figure><pre><code>- 开发工具使用 Pycharm 或 Anaconda</code></pre><ul><li>2.第三方库下载安装</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install django-restframework-swagger</span><br><span class="line">pip install django-rest-framework</span><br><span class="line">pip install django-rest-framework-jwt</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><ul><li>3.simpleui 下载安装</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/newpanjing/simpleui_demo</span><br><span class="line">python manage.py runserver 8000 <span class="comment">#运行</span></span><br></pre></td></tr></table></figure><blockquote><p>或者使用 Docker 构建</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull newpanjing/simpleui_demo</span><br><span class="line"></span><br><span class="line">docker run -p 8080:8080 newpanjing/simpleui_demo</span><br></pre></td></tr></table></figure><h2 id="rest-framework-django-概述">rest-framework-django 概述</h2><blockquote><p>Django’s class-based views are a welcome departure from the old-style views.</p></blockquote><blockquote><p>Django REST framework is a powerful and flexible toolkit for building Web APIs.</p></blockquote><ul><li><p>Some reasons you might want to use REST framework:</p></li><li><p>The Web browsable API is a huge usability win for your developers.</p></li><li><p>Authentication policies including packages for OAuth1a and OAuth2.</p></li><li><p>Serialization that supports both ORM and non-ORM data sources.</p></li><li><p>Customizable all the way down - just use regular function-based views if you don’t need the more powerful features.</p></li><li><p>Extensive documentation, and great community support.</p></li><li><p>Used and trusted by internationally recognised companies including Mozilla, Red Hat, Heroku, and Eventbrite.</p></li></ul><h3 id="框架安装">框架安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure><h2 id="项目配置">项目配置</h2><ul><li><a href="http://1.setteings.py">1.setteings.py</a> 配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Django settings for shellapi project.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Generated by &#x27;django-admin startproject&#x27; using Django 2.1.7.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For more information on this file, see</span></span><br><span class="line"><span class="string">https://docs.djangoproject.com/en/2.1/topics/settings/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For the full list of settings and their values, see</span></span><br><span class="line"><span class="string">https://docs.djangoproject.com/en/2.1/ref/settings/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Quick-start development settings - unsuitable for production</span></span><br><span class="line"><span class="comment"># See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: keep the secret key used in production secret!</span></span><br><span class="line">SECRET_KEY = <span class="string">&#x27;&amp;%up9@!s_$$4(qurnori=vit2#kg!bzs$_+m64^j$2-vzibx&amp;p&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: don&#x27;t run with debug turned on in production!</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>, ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;simpleui&#x27;</span>,<span class="comment"># simpleui 框架</span></span><br><span class="line">    <span class="string">&#x27;drf_spectacular&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;drf_spectacular_sidecar&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;rest_framework&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rest_framework_swagger&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;import_export&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;shell_sc&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;drf_yasg&#x27;</span>,  <span class="comment">#swagger-ui</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">ROOT_URLCONF = <span class="string">&#x27;shellapi.urls&#x27;</span></span><br><span class="line"></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">WSGI_APPLICATION = <span class="string">&#x27;shellapi.wsgi.application&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Database 需提前安装pymysql</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/2.1/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="comment"># &#x27;default&#x27;: &#123;</span></span><br><span class="line">    <span class="comment">#     &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span></span><br><span class="line">    <span class="comment">#     &#x27;NAME&#x27;: os.path.join(BASE_DIR, &#x27;db.sqlite3&#x27;),</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;sh_data&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;1111&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;111.2.3.4&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">        <span class="comment"># &#x27;NAME&#x27;: &#x27;&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;init_command&quot;</span>: <span class="string">&quot;SET foreign_key_checks = 0;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Password validation</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators</span></span><br><span class="line"></span><br><span class="line">AUTH_PASSWORD_VALIDATORS = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.MinimumLengthValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.CommonPasswordValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.NumericPasswordValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Internationalization</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/2.1/topics/i18n/</span></span><br><span class="line"></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line"><span class="comment"># LANGUAGE_CODE = &#x27;en-us&#x27;</span></span><br><span class="line"><span class="comment"># LANGUAGE_CODE = &#x27;ja&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_L10N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Static files (CSS, JavaScript, Images)</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/2.1/howto/static-files/</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># STATICFILES_DIRS = [</span></span><br><span class="line"><span class="comment">#      os.path.join(BASE_DIR, &quot;static&quot;),</span></span><br><span class="line"><span class="comment">#  ]</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># simpleui 设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页配置</span></span><br><span class="line"><span class="comment"># SIMPLEUI_HOME_PAGE = &#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"><span class="comment"># 首页标题</span></span><br><span class="line">SIMPLEUI_HOME_TITLE = <span class="string">&#x27;后台管理&#x27;</span></span><br><span class="line"><span class="comment"># 首页图标,支持element-ui的图标和fontawesome的图标</span></span><br><span class="line">SIMPLEUI_HOME_ICON = <span class="string">&#x27;el-icon-date&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置simpleui 点击首页图标跳转的地址</span></span><br><span class="line">SIMPLEUI_INDEX = <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页显示服务器、python、django、simpleui相关信息</span></span><br><span class="line">SIMPLEUI_HOME_INFO = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页显示快速操作</span></span><br><span class="line">SIMPLEUI_HOME_QUICK = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页显示最近动作</span></span><br><span class="line">SIMPLEUI_HOME_ACTION = <span class="literal">False</span></span><br><span class="line"><span class="comment"># SIMPLEUI_HOME_INFO = False</span></span><br><span class="line"><span class="comment"># 自定义SIMPLEUI的Logo</span></span><br><span class="line"><span class="comment"># SIMPLEUI_LOGO = &#x27;https://avatars2.githubusercontent.com/u/13655483?s=60&amp;v=4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录页粒子动画，默认开启，False关闭</span></span><br><span class="line"><span class="comment"># SIMPLEUI_LOGIN_PARTICLES = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让simpleui 不要收集相关信息</span></span><br><span class="line">SIMPLEUI_ANALYSIS = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义simpleui 菜单</span></span><br><span class="line">SIMPLEUI_CONFIG = &#123;</span><br><span class="line">    <span class="comment"># 在自定义菜单的基础上保留系统模块</span></span><br><span class="line">    <span class="string">&#x27;system_keep&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;menus&#x27;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;app&#x27;</span>: <span class="string">&#x27;shell_sc&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;接口测试&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;icon&#x27;</span>: <span class="string">&#x27;fas fa-user-shield&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;models&#x27;</span>: [&#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;脚本调用&#x27;</span>,</span><br><span class="line">                <span class="comment"># 注意url按&#x27;/admin/应用名小写/模型名小写/&#x27;命名。</span></span><br><span class="line">                <span class="string">&#x27;icon&#x27;</span>: <span class="string">&#x27;fa fa-surprise&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/admin/shell_sc/shellmodel/&#x27;</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示默认图标，默认=True</span></span><br><span class="line"><span class="comment"># SIMPLEUI_DEFAULT_ICON = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图标设置，图标参考：</span></span><br><span class="line">SIMPLEUI_ICON = &#123;</span><br><span class="line">    <span class="string">&#x27;接口测试&#x27;</span>: <span class="string">&#x27;fab fa-apple&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;员工管理&#x27;: &#x27;fas fa-user-tie&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定simpleui 是否以脱机模式加载静态资源，为True的时候将默认从本地读取所有资源，即使没有联网一样可以。适合内网项目</span></span><br><span class="line"><span class="comment"># 不填该项或者为False的时候，默认从第三方的cdn获取</span></span><br><span class="line"></span><br><span class="line">SIMPLEUI_STATIC_OFFLINE = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上传目录</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;../cml&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置前缀</span></span><br><span class="line">MEDIA_URL = <span class="string">&#x27;../../cml/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认主题 设置</span></span><br><span class="line">SIMPLEUI_DEFAULT_THEME = <span class="string">&#x27;x-blue.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># django 3.2要配置</span></span><br><span class="line">DEFAULT_AUTO_FIELD = <span class="string">&#x27;django.db.models.BigAutoField&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># swagger-ui</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># YOUR SETTINGS</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_SCHEMA_CLASS&#x27;</span>: <span class="string">&#x27;drf_spectacular.openapi.AutoSchema&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="comment"># &#x27;rest_framework.permissions.IsAuthenticated&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.permissions.AllowAny&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="comment"># &#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;,</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.authentication.BasicAuthentication&#x27;,</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.authentication.SessionAuthentication&#x27;,</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.authentication.TokenAuthentication&#x27;,</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PARSER_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.parsers.FormParser&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.parsers.MultiPartParser&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.parsers.JSONParser&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># 全局配置异常模块</span></span><br><span class="line">    <span class="comment"># &#x27;EXCEPTION_HANDLER&#x27;: &#x27;utils.exception.custom_exception_handler&#x27;,</span></span><br><span class="line">    <span class="comment"># # 修改默认返回JSON的renderer的类</span></span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_RENDERER_CLASSES&#x27;: (</span></span><br><span class="line">    <span class="comment">#     &#x27;rendererresponse.customRenderer&#x27;,</span></span><br><span class="line">    <span class="comment"># ),</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SPECTACULAR_SETTINGS = &#123;</span><br><span class="line">    <span class="string">&#x27;SECURITY_DEFINITIONS&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;basic&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;apiKey&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;in&#x27;</span>: <span class="string">&#x27;header&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Authorization&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 如果需要登录才能够查看接口文档, 登录的链接使用restframework自带的.</span></span><br><span class="line">    <span class="string">&#x27;LOGIN_URL&#x27;</span>: <span class="string">&#x27;rest_framework:login&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;LOGOUT_URL&#x27;</span>: <span class="string">&#x27;rest_framework:logout&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;DOC_EXPANSION&#x27;: None,</span></span><br><span class="line">    <span class="comment"># &#x27;SHOW_REQUEST_HEADERS&#x27;:True,</span></span><br><span class="line">    <span class="comment"># &#x27;USE_SESSION_AUTH&#x27;: True,</span></span><br><span class="line">    <span class="comment"># &#x27;DOC_EXPANSION&#x27;: &#x27;list&#x27;,</span></span><br><span class="line">    <span class="comment"># 接口文档中方法列表以首字母升序排列</span></span><br><span class="line">    <span class="string">&#x27;APIS_SORTER&#x27;</span>: <span class="string">&#x27;alpha&#x27;</span>,</span><br><span class="line">    <span class="comment"># 如果支持json提交, 则接口文档中包含json输入框</span></span><br><span class="line">    <span class="string">&#x27;JSON_EDITOR&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># 方法列表字母排序</span></span><br><span class="line">    <span class="string">&#x27;OPERATIONS_SORTER&#x27;</span>: <span class="string">&#x27;alpha&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;VALIDATOR_URL&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;SHOW_REQUEST_HEADERS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><a href="http://2.urls.py">2.urls.py</a> 文件中 swagger 配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include, re_path</span><br><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers, permissions</span><br><span class="line"><span class="keyword">from</span> drf_yasg.views <span class="keyword">import</span> get_schema_view</span><br><span class="line"><span class="keyword">from</span> drf_yasg <span class="keyword">import</span> openapi</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> shell_sc.viewsets <span class="keyword">import</span> ShellInfoViewSet</span><br><span class="line"></span><br><span class="line">router = routers.DefaultRouter()</span><br><span class="line">router.register(<span class="string">&#x27;shell_sc&#x27;</span>, ShellInfoViewSet)</span><br><span class="line"><span class="comment"># router.register(r&#x27;upload&#x27;, FileViewSet)</span></span><br><span class="line">schema_view = get_schema_view(</span><br><span class="line">    openapi.Info(</span><br><span class="line">        title=<span class="string">&quot;测试工程API&quot;</span>,</span><br><span class="line">        default_version=<span class="string">&#x27;v1.0&#x27;</span>,</span><br><span class="line">        description=<span class="string">&quot;测试工程接口文档&quot;</span>,</span><br><span class="line">        terms_of_service=<span class="string">&quot;&quot;</span>,</span><br><span class="line">        contact=openapi.Contact(email=<span class="string">&quot;&quot;</span>),</span><br><span class="line">        license=openapi.License(name=<span class="string">&quot;MIT License&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">    public=<span class="literal">True</span>,</span><br><span class="line">    permission_classes=(permissions.AllowAny,),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;shell_sc/&#x27;</span>, include(<span class="string">&#x27;shell_sc.urls&#x27;</span>)),</span><br><span class="line">    <span class="comment"># re_path(r&quot;file/(?P&lt;path&gt;.*)$&quot;, serve, &#123;&quot;document_root&quot;: settings.MEDIA_ROOT&#125;),</span></span><br><span class="line">    <span class="comment"># 配置django-rest-framwork API路由</span></span><br><span class="line">    <span class="comment"># path(&#x27;test&#x27;, views.APIList),</span></span><br><span class="line">    <span class="comment"># path(&#x27;api-auth/&#x27;, include(&#x27;rest_framework.urls&#x27;, namespace=&#x27;rest_framework&#x27;)),</span></span><br><span class="line">    <span class="comment"># 配置drf-yasg路由</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(router.urls)),</span><br><span class="line">    path(<span class="string">&#x27;^swagger(?P&lt;format&gt;\.json|\.yaml)$&#x27;</span>, schema_view.without_ui(cache_timeout=<span class="number">0</span>), name=<span class="string">&#x27;schema-json&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;swagger&#x27;</span>, schema_view.with_ui(<span class="string">&#x27;swagger&#x27;</span>, cache_timeout=<span class="number">0</span>), name=<span class="string">&#x27;schema-swagger-ui&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;redoc/&#x27;</span>, schema_view.with_ui(<span class="string">&#x27;redoc&#x27;</span>, cache_timeout=<span class="number">0</span>), name=<span class="string">&#x27;schema-redoc&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="接口编写">接口编写</h2><h3 id="接口编写流程">接口编写流程</h3><ul><li>1.项目构建</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startapp book_api_swagger</span><br></pre></td></tr></table></figure><ul><li>2.app 构建</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\root\AppData\Roaming\Python\Python38\Scripts\django-admin.exe startapp shellapi</span><br></pre></td></tr></table></figure><ul><li>3.Model 文件编写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># @admi</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShellModel</span>(models.Model):</span><br><span class="line">    name = models.CharField(help_text=<span class="string">&quot;脚本名称&quot;</span>, max_length=<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    file = models.FileField(upload_to=<span class="string">&#x27;upload&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    size = models.IntegerField(help_text=<span class="string">&quot;大小&quot;</span>)</span><br><span class="line"></span><br><span class="line">    path = models.CharField(help_text=<span class="string">&quot;路径&quot;</span>, max_length=<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    desc = models.CharField(help_text=<span class="string">&quot;脚本描述&quot;</span>, max_length=<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;shell_sh&#x27;</span></span><br><span class="line">        <span class="comment"># 设置表名，默认表名是：应用名称_模型类名</span></span><br><span class="line">        <span class="comment"># 带有应用名的表名太长了</span></span><br><span class="line">        <span class="comment"># verbose_name = &#x27;脚本列表&#x27;</span></span><br><span class="line">        <span class="comment"># verbose_name_plural = &quot;脚本列表&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;脚本名&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.name</span><br></pre></td></tr></table></figure><ul><li>4.序列化文件编写</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># book_api_swagger/serializers.py</span></span><br><span class="line">from django.forms import Field</span><br><span class="line">from rest_framework import serializers</span><br><span class="line">from rest_framework.serializers import Serializer</span><br><span class="line"></span><br><span class="line">from . import models</span><br><span class="line">from .models import ShellModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># from .models import APIInfo</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ShellSerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = ShellModel</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ShellInfoSerializer(serializers.HyperlinkedModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = ShellModel</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>5.viewset 文件编写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APIList</span>(generics.ListAPIView):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查看接口列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = models.APIInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serializers.APISerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APIDetail</span>(generics.RetrieveAPIView):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查看接口详细</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = models.APIInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serializers.APISerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APIDetail</span>(generics.RetrieveUpdateDestroyAPIView):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    更新接口内容</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = models.APIInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serializers.APISerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APIInfoViewSet</span>(viewsets.ModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        retrieve:</span></span><br><span class="line"><span class="string">            返回一组（查）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        list:</span></span><br><span class="line"><span class="string">            返回所有组（查）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        create:</span></span><br><span class="line"><span class="string">            创建新组（增）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        delete:</span></span><br><span class="line"><span class="string">            删除现有的一组（删）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        partial_update:</span></span><br><span class="line"><span class="string">            更新现有组中的一个或多个字段（改：部分更改）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        update:</span></span><br><span class="line"><span class="string">            更新一组（改：全部更改）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    queryset = models.APIInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serializers.APIInfoSerializer</span><br></pre></td></tr></table></figure><ul><li>6.app 中 urls 文件路由配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from django.urls import path, include</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> django.template.defaulttags <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> viewsets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, viewsets.ShellModelList.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:pk&gt;/&#x27;</span>, viewsets.ShellDetail.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;famous/&#x27;</span>, viewsets.famous, name=<span class="string">&#x27;famous&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>7.项目 urls 文件配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">router = routers.DefaultRouter()</span><br><span class="line">router.register(<span class="string">&#x27;shell_sc&#x27;</span>, ShellInfoViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;shell_sc/&#x27;</span>, include(<span class="string">&#x27;shell_sc.urls&#x27;</span>)),</span><br><span class="line">    <span class="comment"># re_path(r&quot;file/(?P&lt;path&gt;.*)$&quot;, serve, &#123;&quot;document_root&quot;: settings.MEDIA_ROOT&#125;),</span></span><br><span class="line">    <span class="comment"># 配置django-rest-framwork API路由</span></span><br><span class="line">    <span class="comment"># path(&#x27;test&#x27;, views.APIList),</span></span><br><span class="line">    <span class="comment"># path(&#x27;api-auth/&#x27;, include(&#x27;rest_framework.urls&#x27;, namespace=&#x27;rest_framework&#x27;)),</span></span><br><span class="line">    <span class="comment"># 配置drf-yasg路由</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(router.urls)),</span><br><span class="line">    path(<span class="string">&#x27;^swagger(?P&lt;format&gt;\.json|\.yaml)$&#x27;</span>, schema_view.without_ui(cache_timeout=<span class="number">0</span>), name=<span class="string">&#x27;schema-json&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;swagger&#x27;</span>, schema_view.with_ui(<span class="string">&#x27;swagger&#x27;</span>, cache_timeout=<span class="number">0</span>), name=<span class="string">&#x27;schema-swagger-ui&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;redoc/&#x27;</span>, schema_view.with_ui(<span class="string">&#x27;redoc&#x27;</span>, cache_timeout=<span class="number">0</span>), name=<span class="string">&#x27;schema-redoc&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>8.外部接口调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 外部接口调用</span></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">famous</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    调用外部接口测试</span></span><br><span class="line"><span class="string">    :param request: 请求参数 暂无</span></span><br><span class="line"><span class="string">    :return: 调用接口返回值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    url = <span class="string">&#x27;http://localhost:10086/shop/monitor/getOrderCount&#x27;</span>  <span class="comment"># api链接</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        我用的这个接口没有什么apikey或者参数</span></span><br><span class="line"><span class="string">        如果有的话直接写上参数，类似于这样</span></span><br><span class="line"><span class="string">        apikey = &#x27;chgaxvsf88f3858a15fa4426f4cbdd4d2a02b92ee0747f3&#x27;</span></span><br><span class="line"><span class="string">        area = &quot;人生&quot;</span></span><br><span class="line"><span class="string">        areaID = &quot;45&quot;</span></span><br><span class="line"><span class="string">        data = &#123;</span></span><br><span class="line"><span class="string">            &quot;apiKey&quot;:apikey,</span></span><br><span class="line"><span class="string">            &quot;area&quot;:area,</span></span><br><span class="line"><span class="string">            &quot;areaID&quot;:areaID,</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        将数据封装成人家接口定义的格式，请求数据改成以下样子</span></span><br><span class="line"><span class="string">        wb_data = requests.get(url,apikey,data)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    wb_data = requests.get(url)  <span class="comment"># 引入requests库来请求数据</span></span><br><span class="line">    result = wb_data.json()  <span class="comment"># 将请求的数据转换为json格式</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(json.dumps(result), safe=<span class="literal">False</span>)  <span class="comment"># 用json响应出去，顺便格式化数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="项目接口测试">项目接口测试</h2><ul><li>1.swagger 接口测试地址</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/swagger</span><br></pre></td></tr></table></figure><ul><li>2.后台管理地址</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/admin</span><br></pre></td></tr></table></figure><ul><li>3.测试方式</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eg:</span></span><br><span class="line">curl -X <span class="string">&#x27;GET&#x27;</span> \</span><br><span class="line">  <span class="string">&#x27;http://127.0.0.1:8000/shell_sc/4/&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;accept: application/json&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;X-CSRFToken: npDP6jrGLiAoUG9ujDsTxCRL2toVaM1EZpRmoNWM9NjtznNnLvtcLgOSkNXw9Wmk&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="rest-framework-django-中部分-API-使用">rest-framework-django 中部分 API 使用</h2><h3 id="generics">generics</h3><ul><li>1.list 查询与单个查询 ListCreateAPIView</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继承了视图基类 GenericAPIView，工具类 ListModelMixin，CreateModelMixin实现群查和单增</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListCreateAPIView</span>(mixins.ListModelMixin,</span><br><span class="line">                        mixins.CreateModelMixin,</span><br><span class="line">                        GenericAPIView):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Concrete view for listing a queryset or creating a model instance.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 群查</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.<span class="built_in">list</span>(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单增</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.create(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><ul><li>2.添加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要什么接口，直接继承就行</span></span><br><span class="line"><span class="comment"># 比如我们在群查，单增的基础上，添加单改接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookListCreateView</span>(ListCreateAPIView, UpdateAPIView):</span><br><span class="line">    queryset = models.Book.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>)</span><br><span class="line">    serializer_class = serializers.BookModelSerializer</span><br></pre></td></tr></table></figure><h3 id="mixins">mixins</h3><blockquote><p>mixins : from rest_framework import mixins #导入方式<br>存放一些增删改查的一些类 增 查 部分修改 更新 删除<br>CreateModelMixin，ListModelMixin，RetrieveModelMixin，UpdateModelMixin，DestroyModelMixin</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mixins.ListModelMixin</span><br><span class="line"></span><br><span class="line">这个是用来显示queryset的数据</span><br><span class="line"></span><br><span class="line">mixins.CreateModelMixin</span><br><span class="line"></span><br><span class="line">这个用来创建一条model对象</span><br><span class="line"></span><br><span class="line">mixins.RetrieveModelMixin</span><br><span class="line"></span><br><span class="line">这个是用来显示一个model对象</span><br><span class="line"></span><br><span class="line">mixins.DestroyModelMixin</span><br><span class="line"></span><br><span class="line">这个是用来删除一个model对象</span><br><span class="line"></span><br><span class="line">mixins.UpdateModelMixin</span><br><span class="line"></span><br><span class="line">这个是用来更新一个model对象</span><br></pre></td></tr></table></figure><ul><li><ol><li>eg:ListModelMixin</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListModelMixin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    List a queryset.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        queryset = <span class="variable language_">self</span>.filter_queryset(<span class="variable language_">self</span>.get_queryset())</span><br><span class="line"></span><br><span class="line">        page = <span class="variable language_">self</span>.paginate_queryset(queryset)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            serializer = <span class="variable language_">self</span>.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.get_paginated_response(serializer.data)</span><br><span class="line"></span><br><span class="line">        serializer = <span class="variable language_">self</span>.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure><ul><li><a href="http://2.eg">2.eg</a>:CreateModelMixin</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreateModelMixin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Create a model instance.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        serializer = <span class="variable language_">self</span>.get_serializer(data=request.data)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.perform_create(serializer)</span><br><span class="line">        headers = <span class="variable language_">self</span>.get_success_headers(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_success_headers</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&#x27;Location&#x27;</span>: <span class="built_in">str</span>(data[api_settings.URL_FIELD_NAME])&#125;</span><br><span class="line">        <span class="keyword">except</span> (TypeError, KeyError):</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="http://3.eg">3.eg</a>:RetriveModelMixin</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RetrieveModelMixin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Retrieve a model instance.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retrieve</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        instance = <span class="variable language_">self</span>.get_object()</span><br><span class="line">        serializer = <span class="variable language_">self</span>.get_serializer(instance)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure><ul><li><a href="http://4.eg">4.eg</a>:DestroyModelMixin</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DestroyModelMixin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Destroy a model instance.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">destroy</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        instance = <span class="variable language_">self</span>.get_object()</span><br><span class="line">        <span class="variable language_">self</span>.perform_destroy(instance)</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_destroy</span>(<span class="params">self, instance</span>):</span><br><span class="line">        instance.delete()</span><br></pre></td></tr></table></figure><ul><li><a href="http://5.eg">5.eg</a>:UpdateModelMixin</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UpdateModelMixin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Update a model instance.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        partial = kwargs.pop(<span class="string">&#x27;partial&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">        instance = <span class="variable language_">self</span>.get_object()</span><br><span class="line">        serializer = <span class="variable language_">self</span>.get_serializer(instance, data=request.data, partial=partial)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.perform_update(serializer)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">getattr</span>(instance, <span class="string">&#x27;_prefetched_objects_cache&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            <span class="comment"># If &#x27;prefetch_related&#x27; has been applied to a queryset, we need to</span></span><br><span class="line">            <span class="comment"># forcibly invalidate the prefetch cache on the instance.</span></span><br><span class="line">            instance._prefetched_objects_cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_update</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">partial_update</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        kwargs[<span class="string">&#x27;partial&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.update(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><h3 id="APIView">APIView</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">APIView是REST framework提供的所有视图的基类，继承自Django的View类</span><br><span class="line">APIView与View的不同点为：</span><br><span class="line">传入到视图方法中的是REST framework的Request对象，而不是Django的HttpRequeset对象</span><br><span class="line">视图方法可以返回REST framework的Response对象，视图会为响应数据设置（render）符合前端期望要求格式</span><br><span class="line">任何APIException异常都会被捕获到，并且处理成合适格式（json）的响应信息返回给客户端</span><br><span class="line">会重新声明了一个新的as_views方法并在dispatch()进行路由分发前，对请求的客户端进行身份认证、权限检查、流量控制</span><br><span class="line">APIView还新增了如下的类属性：</span><br><span class="line"></span><br><span class="line">authentication_classes 列表或元组，身份认证类</span><br><span class="line">permissoin_classes 列表或元组，权限检查类</span><br><span class="line">throttle_classes 列表或元祖，流量控制类</span><br></pre></td></tr></table></figure><ul><li><ol><li>eg 增删改查 APIView</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Students</span><br><span class="line"><span class="keyword">from</span> .serilizers <span class="keyword">import</span> StudentsModelSerializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentsApiview</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 获取数据集（学生模型对象）</span></span><br><span class="line">        students_data = Students.objects.<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># 实例化序列化器，得到序列化器对象</span></span><br><span class="line">        ser = StudentsModelSerializers(instance=students_data, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 调用序列化器对象的data属性方法获取转换后的数据</span></span><br><span class="line">        data = ser.data</span><br><span class="line">        <span class="comment"># 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Response(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 反序列化数据</span></span><br><span class="line">        student = StudentsModelSerializers(data=request.data)</span><br><span class="line">        <span class="comment"># 校验不通过</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> student.is_valid():</span><br><span class="line">            <span class="comment"># 返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> Response(student.errors)</span><br><span class="line">        <span class="comment"># 校验通过，保存数据</span></span><br><span class="line">        student.save()</span><br><span class="line">        <span class="comment"># 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Response(student.data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentDerailApiview</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># 获取一个学生的信息</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, pk</span>):</span><br><span class="line">        student = Students.objects.get(pk=pk)</span><br><span class="line">        ser = StudentsModelSerializers(instance=student)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改一个学生的信息</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, pk</span>):</span><br><span class="line">        instance = Students.objects.get(pk=pk)</span><br><span class="line">        ser = StudentsModelSerializers(instance=instance, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ser.is_valid():</span><br><span class="line">            <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line">        ser.save()</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除一个学生的信息</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, request, pk</span>):</span><br><span class="line">        Students.objects.get(pk=pk).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;detail&#x27;</span>: <span class="string">&#x27;删除成功！！&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>2.urls 文件统一配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> StudentsApiview, StudentDerailApiview</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;students/&#x27;</span>, StudentsApiview.as_view()),</span><br><span class="line">    <span class="comment"># 单个数据进行操作</span></span><br><span class="line">    re_path(<span class="string">&#x27;students/(?P&lt;pk&gt;\d+)/&#x27;</span>, StudentDerailApiview.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>3.models 定义</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Students</span>(models.Model):</span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;姓名&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    classmate = models.IntegerField(verbose_name=<span class="string">&#x27;班级&#x27;</span>)</span><br><span class="line">    studentID = models.IntegerField(verbose_name=<span class="string">&#x27;学号&#x27;</span>)</span><br><span class="line">    description = models.TextField(verbose_name=<span class="string">&#x27;描述&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;students&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>4.serailizers 定义</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentsModelSerializers</span>(serializers.Serializer):</span><br><span class="line">    name = serializers.CharField()</span><br><span class="line">    classmate = serializers.IntegerField()</span><br><span class="line">    studentID = serializers.IntegerField()</span><br><span class="line">    description = serializers.CharField()</span><br></pre></td></tr></table></figure><h3 id="数据同步与迁移">数据同步与迁移</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android常用脚本</title>
      <link href="/2023/05/01/sh/"/>
      <url>/2023/05/01/sh/</url>
      
        <content type="html"><![CDATA[<h1>1. logcat 日志采集脚本</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -v time &gt; D:\log1.txt</span><br></pre></td></tr></table></figure><h1>2. bugly 符号表上传脚本</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>  C:\Windows\System32\cmd.exe</span><br><span class="line">java -jar C:\Users\root\Desktop\buglyqq-upload-symbol.jar -appid 4107a98858 -appkey 3bd03b8a-7c32-447c-ae4f-cb636561bae5 -bundleid com.example.apanewtuozhuai_MKZD531110DZDML1223_u3d -version 1.0.0 -platform Android -inputSymbol D:\u3d_host_app_drm\unityLibrary\symbols\armeabi-v7a\libil2cpp.so</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mapping 映射文件 -inputMapping <mapping file></mapping></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%~dp0\D:\Program Files\Java\jdk1.8.0_181\jre\bin\java</span><br></pre></td></tr></table></figure><h2 id="result">result</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.25252.1010]</span><br><span class="line">(c) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">D:\Program Files\Java\jdk1.8.0_181\bin&gt;java -jar C:\Users\root\Desktop\buglyqq-upload-symbol.jar -appid 4107a98858 -appkey 3bd03b8a-7c32-447c-ae4f-cb636561bae5 -bundleid com.example.apanewtuozhuai_MKZD531110DZDML1223_u3d -version 1.0.0 -platform Android -inputSymbol D:\u3d_host_app_drm\unityLibrary\symbols\armeabi-v7a\libil2cpp.so</span><br><span class="line"><span class="comment">##[info]bugly tools android params: -appid 4107a98858 -appkey 3bd03b8a-7c32-447c-ae4f-cb636561bae5 -bundleid com.example.apanewtuozhuai_MKZD531110DZDML1223_u3d -version 1.0.0 -platform Android -inputSymbol D:\u3d_host_app_drm\unityLibrary\symbols\armeabi-v7a\libil2cpp.so</span></span><br><span class="line"></span><br><span class="line">Bugly(bugly.qq.com)符号表工具上传工具包 V1.0.48</span><br><span class="line"></span><br><span class="line">用法 -- Usage</span><br><span class="line"> java -jar buglyqq-upload-symbol.jar -appid &lt;APP ID&gt; -appkey &lt;APP KEY&gt; -bundleid &lt;App BundleID&gt; -version &lt;App Version&gt; -platform &lt;App Platform&gt; -inputSymbol &lt;Original Symbol File Path&gt; -inputMapping &lt;Original mapping File Path&gt;</span><br><span class="line"></span><br><span class="line">参数说明 -- Introduction <span class="keyword">for</span> arguments</span><br><span class="line"> -appid APP ID of Bugly</span><br><span class="line"> -appkey APP Key of Bugly</span><br><span class="line"> -bundleid Android平台对应的是package name/iOS平台是Bundle Id</span><br><span class="line"> -version APP版本，需要和bugly平台上面看到的crash版本号保持对齐</span><br><span class="line"> -platform 平台类型包含三个选项 Android、IOS两个选项，注意大小写要正确</span><br><span class="line"> -inputSymbol 原始符号表[ios是dsym/android平台是debug so]所在文件夹目录地址</span><br><span class="line"> -inputMapping mapping所在文件夹目录地址[Android平台特有，ios忽略]</span><br><span class="line"></span><br><span class="line"><span class="comment">##[info]args is ArgsParser&#123;appId=&#x27;4107a98858&#x27;appKey=&#x27;3bd03b8a-7c32-447c-ae4f-cb636561bae5&#x27;, appPackage=&#x27;com.example.apanewtuozhuai_MKZD531110DZDML1223_u3d&#x27;, appVersion=&#x27;1.0.0&#x27;, appBuildNo=&#x27;null&#x27;, platformId=Android&#x27;, enviroment=null&#x27;, symbolPathName=&#x27;D:\u3d_host_app_drm\unityLibrary\symbols\armeabi-v7a\libil2cpp.so&#x27;, mappingPathName=&#x27;null&#x27;, appPathName=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">##[info]deleteDirFiles file path is D:\Program Files\Java\jdk1.8.0_181\bin\buglybin</span></span><br><span class="line"><span class="comment">##[info]packSymbolFile file</span></span><br><span class="line"><span class="comment">##[warning]mapping path is null</span></span><br><span class="line"><span class="comment">##[info]mapping is exist ?: false</span></span><br><span class="line"><span class="comment">##[info]so is exist ?: true</span></span><br><span class="line"><span class="comment">##[info]bugly tools android params: -i D:\u3d_host_app_drm\unityLibrary\symbols\armeabi-v7a\libil2cpp.so -o D:\Program Files\Java\jdk1.8.0_181\bin\buglybin\symbolResult\BuglySoStifListZip.zip</span></span><br><span class="line">D:\u3d_host_app_drm\unityLibrary\symbols\armeabi-v7a\libil2cpp.so [armeabi-v7a] 611f94d5ee0bbee371346d6abe550c7b</span><br><span class="line"></span><br><span class="line">[SymtabTool-I] Extracting symtab file: libil2cpp.so</span><br><span class="line">[SymtabTool-I] Processing file: D:\u3d_host_app_drm\unityLibrary\symbols\armeabi-v7a\libil2cpp.so</span><br><span class="line">[SymtabTool-I] Begin to parse file: D:\u3d_host_app_drm\unityLibrary\symbols\armeabi-v7a\libil2cpp.so</span><br><span class="line">[SymtabTool-W] No .bugly_version section <span class="keyword">in</span> the elf file</span><br><span class="line">[SymtabTool-I] Successfully parsed the file!</span><br><span class="line">[SymtabTool-I] Begin to extract symbol table.................................................................................................................................................................................................................................................................................................................................................................................................................................................................................</span><br><span class="line">[SymtabTool-I] Successfully extracted symbol table!</span><br><span class="line">[SymtabTool-I] UUID: 611f94d5ee0bbee371346d6abe550c7b</span><br><span class="line">[SymtabTool-I] Begin to create symtab file: D:\u3d_host_app_drm\unityLibrary\symbols\armeabi-v7a\buglySymbol&amp;armeabi-v7a&amp;libil2cpp&amp;611f94d5ee0bbee371346d6abe550c7b.symbol</span><br><span class="line">[SymtabTool-I] Successfully created symtab file!</span><br><span class="line">[SymtabTool-I] Begin to parse the file：D:\u3d_host_app_drm\unityLibrary\symbols\armeabi-v7a\buglySymbol&amp;armeabi-v7a&amp;libil2cpp&amp;611f94d5ee0bbee371346d6abe550c7b.symbol</span><br><span class="line">[SymtabTool-I] Successfully parsed the file</span><br><span class="line">[SymtabTool-I] Begin to construct stif file: D:\u3d_host_app_drm\unityLibrary\symbols\armeabi-v7a\buglySymbol&amp;armeabi-v7a&amp;libil2cpp&amp;611f94d5ee0bbee371346d6abe550c7b.stif</span><br><span class="line">[SymtabTool-I] getSymtabEntryNum: 9563453</span><br><span class="line">[SymtabTool-I] getIndexEntryLength: 24</span><br><span class="line">[SymtabTool-I] Successfully constructed stif file</span><br><span class="line">[SymtabTool-I] Add stif to symtab zip file: D:\u3d_host_app_drm\unityLibrary\symbols\armeabi-v7a\buglySymbol&amp;armeabi-v7a&amp;libil2cpp&amp;611f94d5ee0bbee371346d6abe550c7b.stif</span><br><span class="line">[SymtabTool-I] Begin to zip stif file: D:\u3d_host_app_drm\unityLibrary\symbols\armeabi-v7a\buglySymbol&amp;armeabi-v7a&amp;libil2cpp&amp;611f94d5ee0bbee371346d6abe550c7b</span><br><span class="line">[SymtabTool-I] Successfully zipped stif file!</span><br><span class="line">[SymtabTool-I] Begin to zip symtab file: D:\Program Files\Java\jdk1.8.0_181\bin\buglybin\symbolResult\BuglySoStifListZip.zip</span><br><span class="line">[SymtabTool-I] Successfully zipped symtab file!</span><br><span class="line"><span class="comment">##[info]destFile :D:\Program Files\Java\jdk1.8.0_181\bin\buglybin\symbolResult\BuglySoStifListZip.zipdir :.\buglybin\symbolResult</span></span><br><span class="line"><span class="comment">##[info]visit file name is : buglySymbol&amp;armeabi-v7a&amp;libil2cpp&amp;611f94d5ee0bbee371346d6abe550c7b.zip</span></span><br><span class="line"><span class="comment">##[info]parseStifFileName prefix : buglySymbol arg1 : armeabi-v7a</span></span><br><span class="line"><span class="comment">##[info]parseStifFileName arg2 : libil2cpp uuid : 611f94d5ee0bbee371346d6abe550c7b</span></span><br><span class="line"><span class="comment">##[info]parseStifFileName endfix : zip</span></span><br><span class="line"><span class="comment">##[info]so file detail :SymbolFileDetail&#123;name=&#x27;buglySymbol&amp;armeabi-v7a&amp;libil2cpp&amp;611f94d5ee0bbee371346d6abe550c7b.zip, uuid=&#x27;611f94d5ee0bbee371346d6abe550c7b, arch=&#x27;armeabi-v7a, type=101, moduleName=&#x27;libil2cpp&#125;</span></span><br><span class="line"><span class="comment">##[info]mix symbol file detail :SymbolFileDetail&#123;name=&#x27;buglySymbol&amp;armeabi-v7a&amp;libil2cpp&amp;611f94d5ee0bbee371346d6abe550c7b.zip, uuid=&#x27;611f94d5ee0bbee371346d6abe550c7b, arch=&#x27;armeabi-v7a, type=101, moduleName=&#x27;libil2cpp&#125;</span></span><br><span class="line"><span class="comment">##[info]androidSymbolFileDetailList size is :1</span></span><br><span class="line"><span class="comment">##[info]uploadSymbolFile file :D:\Program Files\Java\jdk1.8.0_181\bin\buglybin\symbolResult\BuglySoStifListZip.zip</span></span><br><span class="line"><span class="comment">##[info]postRqdFile fileName: BuglySoStifListZip.zip</span></span><br><span class="line"><span class="comment">##[info]now begin to uploadFile</span></span><br><span class="line"><span class="comment">##[info]buildName :null&amp;null</span></span><br><span class="line"><span class="comment">##[info]buildID :null</span></span><br><span class="line"><span class="comment">##[info]appID :4107a98858</span></span><br><span class="line"><span class="comment">##[info]bundle :com.example.apanewtuozhuai_MKZD531110DZDML1223_u3d</span></span><br><span class="line"><span class="comment">##[info]appVersion :1.0.0</span></span><br><span class="line"><span class="comment">##[info]platformId :1</span></span><br><span class="line"><span class="comment">##[info]appBuildNumber :null</span></span><br><span class="line"><span class="comment">##[info]fileType :201</span></span><br><span class="line"><span class="comment">##[info]fileMD5 :f09855ee3011c9a39b59d601374ea61f</span></span><br><span class="line"><span class="comment">##[info]fileSize :81016813</span></span><br><span class="line"><span class="comment">##[info]symbolFileDetail is [&#123;&quot;name&quot;:&quot;buglySymbol&amp;armeabi-v7a&amp;libil2cpp&amp;611f94d5ee0bbee371346d6abe550c7b.zip&quot;,&quot;uuid&quot;:&quot;611f94d5ee0bbee371346d6abe550c7b&quot;,&quot;arch&quot;:&quot;armeabi-v7a&quot;,&quot;type&quot;:101,&quot;moduleName&quot;:&quot;libil2cpp&quot;&#125;]</span></span><br><span class="line"><span class="comment">##[info]request json is &#123;&quot;appID&quot;:&quot;4107a98858&quot;,&quot;authSign&quot;:&quot;3bd03b8a-7c32-447c-ae4f-cb636561bae5&quot;,&quot;appVersion&quot;:&quot;1.0.0&quot;,&quot;appBundleID&quot;:&quot;com.example.apanewtuozhuai_MKZD531110DZDML1223_u3d&quot;,&quot;appPlatform&quot;:1,&quot;appBuildNumber&quot;:null,&quot;fileType&quot;:201,&quot;fileSize&quot;:81016813,&quot;fileMD5&quot;:&quot;f09855ee3011c9a39b59d601374ea61f&quot;,&quot;clientType&quot;:7,&quot;clientVersion&quot;:&quot;1.0.48&quot;,&quot;buildPlatform&quot;:1,&quot;buildID&quot;:null,&quot;buildName&quot;:&quot;null&amp;null&quot;,&quot;fileInfoList&quot;:[&#123;&quot;name&quot;:&quot;buglySymbol&amp;armeabi-v7a&amp;libil2cpp&amp;611f94d5ee0bbee371346d6abe550c7b.zip&quot;,&quot;uuid&quot;:&quot;611f94d5ee0bbee371346d6abe550c7b&quot;,&quot;arch&quot;:&quot;armeabi-v7a&quot;,&quot;type&quot;:101,&quot;moduleName&quot;:&quot;libil2cpp&quot;&#125;],&quot;buildRepo&quot;:null,&quot;buildBranch&quot;:null,&quot;buildCommitID&quot;:null&#125;</span></span><br><span class="line"><span class="comment">##[info]request upload Info Url is https://symbol-v2.bugly.qq.com/trpc.eff_tool.symbol_upload_gateway.SymbolUploadGateway/uploadInfo</span></span><br><span class="line"><span class="comment">##[info]request gitRepoUrl is null</span></span><br><span class="line"><span class="comment">##[info]request gitRepoBranch is null</span></span><br><span class="line"><span class="comment">##[info]request gitRepoHeadCommitId is null</span></span><br><span class="line"><span class="comment">##[info]envtype is null</span></span><br><span class="line"><span class="comment">##[info]getAppModuleList is null</span></span><br><span class="line"><span class="comment">##[info]retCode: 200 response message: &#123;&quot;statusCode&quot;:0,&quot;msg&quot;:&quot;success&quot;,&quot;uploadReqID&quot;:&quot;4107a98858-2015378e-233f-4d3a-84de-798a78374d51&quot;&#125;</span></span><br><span class="line"><span class="comment">##[info]now begin to uploadFileContent</span></span><br><span class="line"><span class="comment">##[info]request uploadFileurl is https://symbol-v2.bugly.qq.com/trpc.eff_tool.symbol_upload_gateway.SymbolUploadGateway/uploadFile</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="成功后结果如图">成功后结果如图</h2><p><img src="/2023/05/01/sh/symbol-tables.png" class="lazyload placeholder" data-srcset="/2023/05/01/sh/symbol-tables.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Vue+Spring Cloud 前后端服务的云部署</title>
      <link href="/2023/04/20/admin-manage-publish/"/>
      <url>/2023/04/20/admin-manage-publish/</url>
      
        <content type="html"><![CDATA[<h1>基于 Vue+Spring Cloud 前后端服务的云部署</h1><h2 id="系统环境">系统环境</h2><ul><li>基础环境</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">centos 8 <span class="comment"># 操作系统</span></span><br><span class="line">JDK 1.8 <span class="comment"># java</span></span><br><span class="line">yum -y install java</span><br><span class="line">git</span><br><span class="line">yum install git</span><br></pre></td></tr></table></figure><h2 id="前端打包">前端打包</h2><ul><li>1.打包指令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><ul><li><p>2.文件上传</p></li><li><p>使用 FTP 工具上传<code>dist</code>文件</p></li></ul><h2 id="后端打包">后端打包</h2><ul><li>1.Maven 打包</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package <span class="comment">#or mvn install 只需在父服务中运行</span></span><br></pre></td></tr></table></figure><ul><li><p>2.jar 包上传</p></li><li><p>使用 FTP 上传 jar 包</p></li><li><p>3.jar 包运行</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohub java -jar rs_shop_service.jar &amp; 1 &amp;out.log</span><br></pre></td></tr></table></figure><h2 id="云服务器部署">云服务器部署</h2><ul><li><p>1.基础镜像配置</p></li><li><p>镜像源设置</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /etc/yum.repos.d.bak</span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/* /etc/yum.repos.d.bak/</span><br><span class="line">ll /etc/yum.repos.d/</span><br><span class="line">ll /etc/yum.repos.d.bak/</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line">sed -i -e <span class="string">&#x27;/mirrors.cloud.aliyuncs.com/d&#x27;</span> -e <span class="string">&#x27;/mirrors.aliyuncs.com/d&#x27;</span> /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line">sed -i <span class="string">&#x27;s/releasever\//releasever-stream\//g&#x27;</span> /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure><ul><li>缓存清除与元数据重建</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><ul><li><p>2.Docker 安装与使用</p></li><li><p>更新 yum 源</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure><ul><li>安装</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum install -y docker-ce</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><ul><li><p>3.基础镜像安装与使用</p></li><li><p>mysql</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql <span class="comment"># 镜像拉取</span></span><br><span class="line">docker images <span class="comment"># 查看镜像</span></span><br><span class="line">docker run --name testmysql -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=smx0920 mysqlimagesname <span class="comment">#运行</span></span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><ul><li>redis</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line">docker images</span><br><span class="line">docker run -p 6379:6379 -v <span class="variable">$PWD</span>/data:/data  -d redis redis-server --appendonly <span class="built_in">yes</span></span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><ul><li>nginx</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line">docker images</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/nginx/conf</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/nginx/conf.d</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/nginx/html</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/nginx/logs</span><br><span class="line">docker run --name mynginx -d -p 80:80 -v /data/nginx/html:/usr/share/nginx/html -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /data/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf -v /data/nginx/logs:/var/log/nginx nginx</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><ul><li><p>4.基础镜像配置</p></li><li><p>mysql</p></li></ul><p><code>mysql需做如下配置</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql bash</span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment"># 输入密码回车</span></span><br><span class="line">```</span><br><span class="line">`对数据库做如下配置`</span><br><span class="line">```sql</span><br><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified with mysql_native_password by <span class="string">&#x27;smx0920&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line">```</span><br><span class="line">```sh</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">docker restart mysql</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><ul><li>redis<br><code>运行完后做如下测试：</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L 127.0.0.1:6379</span><br></pre></td></tr></table></figure><ul><li>nginx</li></ul><h4 id="nginx-conf-配置">nginx.conf 配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">user nginx;</span><br><span class="line">worker_processes 1;</span><br><span class="line"></span><br><span class="line">error_log /var/log/nginx/error.log warn;</span><br><span class="line">pid    /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">  worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">  include    /etc/nginx/mime.types;</span><br><span class="line">  default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">  log_format main <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  access_log /var/log/nginx/access.log main;</span><br><span class="line"></span><br><span class="line">  sendfile    on;</span><br><span class="line">  <span class="comment">#tcp_nopush   on;</span></span><br><span class="line"></span><br><span class="line">  keepalive_timeout 65;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#gzip on;</span></span><br><span class="line"></span><br><span class="line">  include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="default-conf-配置">default.conf 配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen    6666;</span><br><span class="line">  server_name localhost;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#charset koi8-r;</span></span><br><span class="line">  <span class="comment">#access_log /var/log/nginx/host.access.log main;</span></span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    root  /usr/share/nginx/html;</span><br><span class="line">    index 1.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#error_page 404/404.html;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  error_page  500 502 503 504 /50x.html;</span><br><span class="line">  location = /50x.html &#123;</span><br><span class="line">    root  /usr/share/nginx/html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /api/ &#123;</span><br><span class="line">    proxy_pass http://localhost:10000/shop <span class="comment">#端口代理转发</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#location ~ .php$ &#123;</span></span><br><span class="line">  <span class="comment">#  proxy_pass  http://127.0.0.1;</span></span><br><span class="line">  <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#location ~ .php$ &#123;</span></span><br><span class="line">  <span class="comment">#  root      html;</span></span><br><span class="line">  <span class="comment">#  fastcgi_pass  127.0.0.1:9000;</span></span><br><span class="line">  <span class="comment">#  fastcgi_index index.php;</span></span><br><span class="line">  <span class="comment">#  fastcgi_param script_FILENAME /scripts$fastcgi_script_name;</span></span><br><span class="line">  <span class="comment">#  include    fastcgi_params;</span></span><br><span class="line">  <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">  <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#location ~ /.ht &#123;</span></span><br><span class="line">  <span class="comment">#  deny all;</span></span><br><span class="line">  <span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置完成后，重启容器</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart containerid</span><br></pre></td></tr></table></figure><ul><li>或者进入容器重启 nginx 服务</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx  bash</span><br><span class="line">nginx -s reload</span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure><ul><li>5.服务搭建与测试</li></ul><h2 id="最终测试">最终测试</h2><ul><li>1.前端页面测试</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L http://localhost:6666</span><br></pre></td></tr></table></figure><ul><li>2.后端接口测试</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L http://localhost:10000/api/shop/test</span><br></pre></td></tr></table></figure><p><code>上述有结果反馈，即为部署成功！</code></p><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron Egg 框架研究</title>
      <link href="/2023/03/10/eestudy/"/>
      <url>/2023/03/10/eestudy/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><blockquote><p><code> electron-egg 是一个业务框架；就好比 Spring 之于 java，thinkphp 之于 php，nuxt.js 之于 vue；electron 只提供了基础的函数和 api，但你写项目的时候，业务和代码工程化是需要自己实现的，ee 就提供了这个工程化能力。</code></p></blockquote><ul><li>Electron： 基于 JavaScript 开发的多平台桌面应用框架，支持 MacOS 、Linux、Windows 等操作系统。</li></ul><h2 id="安装与使用">安装与使用</h2><h4 id="安装">安装</h4><ul><li>源代码</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gitee</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/dromara/electron-egg.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/dromara/electron-egg.git</span><br></pre></td></tr></table></figure><ul><li>其他</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置国内镜像源(加速)</span></span><br><span class="line">npm config <span class="built_in">set</span> registry=https://registry.npmmirror.com</span><br><span class="line">npm config <span class="built_in">set</span> disturl=https://registry.npmmirror.com/-/binary/node</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果下载electron慢，配置如下（或者挂个VPN）</span></span><br><span class="line">npm config <span class="built_in">set</span> electron_mirror=https://registry.npmmirror.com/-/binary/electron/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入目录 ./electron-egg/</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果还是提示 electron 没安装，进入 node_modules/electron 目录下，再npm install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建sqlite</span></span><br><span class="line"><span class="comment"># - 需要 python3 环境 （操作系统自带）</span></span><br><span class="line"><span class="comment"># - 需要 node-gyp</span></span><br><span class="line">npm i node-gyp -g</span><br><span class="line">npm run re-sqlite</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果sqlite报错 ...tools之类的</span></span><br><span class="line">npm --vs2015 i -g --production windows-build-tools</span><br><span class="line">或者</span><br><span class="line">npm i -g --production windows-build-tools</span><br></pre></td></tr></table></figure><h2 id="开始使用">开始使用</h2><h3 id="前端">前端</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入【前端目录】</span></span><br><span class="line"><span class="built_in">cd</span> frontend</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h3 id="逻辑代码">逻辑代码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动后端服务</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 热重载模式</span></span><br><span class="line">npm run reload</span><br></pre></td></tr></table></figure><h2 id="项目配置">项目配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位置</span></span><br><span class="line">./electron/config/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明</span></span><br><span class="line">config.default.js // 默认配置文件，开发环境和生产环境都会加载</span><br><span class="line">config.local.js // 开发环境配置文件，追加和覆盖default配置文件</span><br><span class="line">config.prod.js // 生产环境配置文件，追加和覆盖default配置文件</span><br><span class="line">encrypt.js     // 代码加密的配置</span><br><span class="line">nodemon.json   // 开发环境，代码（监控）热加载</span><br></pre></td></tr></table></figure><h2 id="项目结构">项目结构</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">project</span><br><span class="line">├── package.json npm包配置</span><br><span class="line">├── bulid 打包用的资源和脚本</span><br><span class="line">├── icons 软件图标（打包用到）</span><br><span class="line">    ├── extraResources 额外资源目录</span><br><span class="line">├── electron 主进程服务</span><br><span class="line">    ├── addon 插件目录</span><br><span class="line">        ├── example demo插件（代码示例）</span><br><span class="line">    ├── config 配置文件</span><br><span class="line">        ├── config.default.js 默认配置，都会加载</span><br><span class="line">        ├── config.local.js dev环境加载</span><br><span class="line">        ├── config.prod.js 生产环境加载</span><br><span class="line">├── encrypt.js 加密配置文件</span><br><span class="line">├── controller 控制器</span><br><span class="line">    ├── service 业务层</span><br><span class="line">    ├── preload 预加载，在程序启动时加载，如托盘、自动升级等功能要提前加载代码</span><br><span class="line">    ├── library 一些封装库</span><br><span class="line">├── frontend 前端目录（demo是用vue编写的）</span><br><span class="line">├── out 打包后生成的可执行文件</span><br><span class="line">├── latest.yml 自动升级文件</span><br><span class="line">├── xxx.exe window应用安装包</span><br><span class="line">    ├── xxx.exe.blockmap window应用增量升级包（未测试过）</span><br><span class="line">    ├── xxx.dmg mac应用安装包</span><br><span class="line">    ├── xxx.deb linux应用安装包后缀有多种</span><br><span class="line">├── run 一些运行缓存</span><br><span class="line">├── logs 日志</span><br><span class="line">├── main.js 入口文件</span><br><span class="line">├── public 资源目录</span><br><span class="line">├── dist 前端资源会移动到这里，生产环境加载</span><br><span class="line">    ├── electron 业务js加密后的文件</span><br><span class="line">├── html 一些模板</span><br><span class="line">    ├── images 一些图片</span><br><span class="line">├── data 内置数据库文件</span><br><span class="line">├── system.json 框架使用的数据库</span><br><span class="line">├── demo.json 示例json数据库</span><br><span class="line">├── sqlite-demo.db 示例sqlite数据库</span><br></pre></td></tr></table></figure><h2 id="demo-改写步骤">demo 改写步骤</h2><ul><li>1.编写接口</li><li>在 electron\controller\demo.js 中编写方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打开浏览器</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="title function_">openBrowser</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">messageShowConfirm</span>(<span class="string">&quot;ok?&quot;</span>);</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;http://baidu.com&quot;</span>);<span class="comment">//代替函数操作</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">messageShow</span>(<span class="string">&quot;success.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2.定义接口</li><li>在 frontend\src\api\main.js 中定义接口</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ipcApiRoute = &#123;</span><br><span class="line">  <span class="attr">openBrowser</span>: <span class="string">&quot;controller.example.openBrowser&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>3.使用接口</li><li>在指定界面使用接口</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">openBrowserClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$ipc</span>.<span class="title function_">invoke</span>(ipcApiRoute.<span class="property">openBrowser</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(r);</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="打包发布应用">打包发布应用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包时，package.json中build.productName包名不要为中文，避免一些未知异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备，设置国内镜像</span></span><br><span class="line">npm config <span class="built_in">set</span> electron_builder_binaries_mirror=https://registry.npmmirror.com/-/binary/electron-builder-binaries/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包 （windows版）</span></span><br><span class="line">npm run build-w</span><br><span class="line">npm run build-w-32 (64位)</span><br><span class="line">npm run build-w-64 (64位)</span><br><span class="line">npm run build-w-arm64 (arm64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包 （windows 免安装版）</span></span><br><span class="line"><span class="comment"># ee &gt; v2.2.1</span></span><br><span class="line">npm run build-wz</span><br><span class="line">npm run build-wz-32 (32位)</span><br><span class="line">npm run build-wz-64 (64位)</span><br><span class="line">npm run build-wz-arm64 (arm64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包 （mac版）</span></span><br><span class="line">npm run build-m</span><br><span class="line">npm run build-m-arm64 (m1芯片架构)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包 （linux版）</span></span><br><span class="line"><span class="comment"># ee &gt; v2.2.1</span></span><br><span class="line">npm run build-l (32位 deb包)</span><br><span class="line">npm run build-l-64 (64位 deb包)</span><br><span class="line">npm run build-l-arm64 (64位 deb包 arm64)</span><br><span class="line">npm run build-l-armv7l (64位 deb包 armv7l)</span><br><span class="line">npm run build-lr-64 (64位 rpm包)</span><br><span class="line">npm run build-lp-64 (64位 pacman包)</span><br></pre></td></tr></table></figure><h2 id="See">See</h2><ul><li>1.<a href="https://www.yuque.com/u34495/mivcfg/fro580">https://www.yuque.com/u34495/mivcfg/fro580</a></li><li>2.<a href="https://www.w3cschool.cn/electronmanual/dih61qlb.html">https://www.w3cschool.cn/electronmanual/dih61qlb.html</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度地图功能使用</title>
      <link href="/2023/03/06/baidumapuse/"/>
      <url>/2023/03/06/baidumapuse/</url>
      
        <content type="html"><![CDATA[<h2 id="key-generate-地图-API-秘钥生成">key generate 地图 API 秘钥生成</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -printcert -file CERT.RSA</span><br></pre></td></tr></table></figure><h2 id="key-select-调试版">key select 调试版</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -v -keystore debug.keystore</span><br></pre></td></tr></table></figure><h2 id="key-gen-密钥生成">key gen 密钥生成</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> test.keystore -keyalg RSA -validity 40000 -keystore demo.keystore</span><br></pre></td></tr></table></figure><h2 id="or-see-详情请看">or see 详情请看</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/qq_40808344/article/details/101148833</span><br></pre></td></tr></table></figure><h2 id="error">error</h2><ul><li>details 已知错误</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The location <span class="keyword">function</span> has been stopped because you <span class="keyword">do</span> not agree with the privacy compliance policy. Please recheck the setAgreePrivacy interface</span><br></pre></td></tr></table></figure><ul><li><p>solve 解决方案</p><ul><li><p>such as figure 1 取消下列文件中对应行的注释即可解决</p><p><img src="/2023/03/06/baidumapuse/solve.png" class="lazyload placeholder" data-srcset="/2023/03/06/baidumapuse/solve.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p></li></ul></li></ul><h2 id="see-参考">see 参考</h2><p><a href="https://blog.csdn.net/czy_1995/article/details/128342280">https://blog.csdn.net/czy_1995/article/details/128342280</a></p><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#杀死unity中的进程方法</title>
      <link href="/2023/03/02/csharpkillprocess/"/>
      <url>/2023/03/02/csharpkillprocess/</url>
      
        <content type="html"><![CDATA[<h2 id="unity-退出-app">unity 退出 app</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> exit</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExitUnity</span>()</span></span><br><span class="line"> &#123;</span><br><span class="line">     Application.Quit();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="unity-暂停退出">unity 暂停退出</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> unload</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnloadUnity</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Application.Unload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="unity-杀死当前所有进程">unity 杀死当前所有进程</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> 退出方式1 https://blog.csdn.net/sakuya_miku/article/details/109219878</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">OnExitBtnClick</span>(<span class="params"><span class="built_in">string</span> processName</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// https://blog.csdn.net/qq_38721111/article/details/82864423</span></span><br><span class="line">       UnityEngine.Debug.Log(<span class="string">&quot;当前应用：&quot;</span> + System.Diagnostics.Process.GetCurrentProcess().ProcessName + <span class="string">&quot; 进程ID: &quot;</span> + System.Diagnostics.Process.GetCurrentProcess().Id);</span><br><span class="line">       <span class="comment">// ListAllAppliction();</span></span><br><span class="line">       UnityEngine.Debug.Log(<span class="string">&quot;On Exit Btn CLick method executing&quot;</span>);</span><br><span class="line">       <span class="keyword">try</span></span><br><span class="line">       &#123;</span><br><span class="line"></span><br><span class="line">           System.Diagnostics.Process.GetCurrentProcess().Exited += <span class="keyword">new</span> EventHandler(exep_Exited);</span><br><span class="line">           System.Diagnostics.Process.GetCurrentProcess().CloseMainWindow();</span><br><span class="line">           System.Diagnostics.Process.GetCurrentProcess().Close();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span> (Exception e)</span><br><span class="line">       &#123;</span><br><span class="line">           UnityEngine.Debug.Log(<span class="string">&quot;error : &quot;</span> + e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">exep_Exited</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       UnityEngine.Debug.LogError(<span class="string">&quot;CloseMainWindow&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="unity-杀死所有进程">unity 杀死所有进程</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> 杀死进程</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;processName&quot;&gt;</span>应用程序名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">KillProcess</span>(<span class="params"><span class="built_in">string</span> processName</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       System.Diagnostics.Process[] processes = System.Diagnostics.Process.GetProcesses();</span><br><span class="line">       <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; processes.Length; i++)</span><br><span class="line">           processes[i].Kill();</span><br><span class="line">       UnityEngine.Debug.Log(<span class="string">&quot;已杀死进程&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="unity-通过-Pid-杀死指定进程">unity 通过 Pid 杀死指定进程</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> kill by pid</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;id&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KillByPid</span>(<span class="params"><span class="built_in">string</span> id</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    System.Diagnostics.Process p = System.Diagnostics.Process.GetProcessById(<span class="built_in">int</span>.Parse(id));</span><br><span class="line">    p.Kill();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="杀死当前单一进程">杀死当前单一进程</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> test single kill process</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SingleKillProcess</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    System.Diagnostics.Process.GetCurrentProcess().Kill();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 在Activity中打开某个app</title>
      <link href="/2023/03/02/androidopenapp-md/"/>
      <url>/2023/03/02/androidopenapp-md/</url>
      
        <content type="html"><![CDATA[<h2 id="在使用前传入-app-包名，具体代码如下：">在使用前传入 app 包名，具体代码如下：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">openApp</span><span class="params">(String packageName)</span> &#123;</span><br><span class="line">       <span class="type">PackageInfo</span> <span class="variable">pi</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           pi = getPackageManager().getPackageInfo(packageName, <span class="number">0</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (pi == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">// 这里如果 packageInfo 为 null, 说明应用不存在</span></span><br><span class="line">           Toast.makeText(SecondActivity.<span class="built_in">this</span>, <span class="string">&quot;App does not exist&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="type">Intent</span> <span class="variable">resolveIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_MAIN, <span class="literal">null</span>);</span><br><span class="line">           resolveIntent.addCategory(Intent.CATEGORY_LAUNCHER);</span><br><span class="line">           resolveIntent.setPackage(pi.packageName);</span><br><span class="line">           List&lt;ResolveInfo&gt; apps = getPackageManager().queryIntentActivities(resolveIntent, <span class="number">0</span>);</span><br><span class="line">           <span class="type">ResolveInfo</span> <span class="variable">ri</span> <span class="operator">=</span> apps.iterator().next();</span><br><span class="line">           <span class="keyword">if</span> (ri != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="type">String</span> <span class="variable">packageName2</span> <span class="operator">=</span> ri.activityInfo.packageName;</span><br><span class="line">               <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> ri.activityInfo.name;</span><br><span class="line">               <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_MAIN);</span><br><span class="line">               intent.addCategory(Intent.CATEGORY_LAUNCHER);</span><br><span class="line">               <span class="type">ComponentName</span> <span class="variable">cn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComponentName</span>(packageName2, className);</span><br><span class="line">               intent.setComponent(cn);</span><br><span class="line">               startActivity(intent);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="在打开前检查是否存在">在打开前检查是否存在</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PackageManager packageManager = getPackageManager();</span><br><span class="line"><span class="keyword">if</span> (checkPackInfo(packname)) &#123;</span><br><span class="line">    Intent intent = packageManager.getLaunchIntentForPackage(packname);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;没有安装&quot;</span> + packname, <span class="number">1</span>).show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查包是否存在</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param packname</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> boolean <span class="title">checkPackInfo</span>(<span class="params">String packname</span>)</span> &#123;</span><br><span class="line">    PackageInfo packageInfo = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        packageInfo = getPackageManager().getPackageInfo(packname, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> packageInfo != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="打开-app-指定-activity">打开 app 指定 activity</h2><h3 id="代码">代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line"><span class="comment">//第一种方式</span></span><br><span class="line"><span class="type">ComponentName</span> <span class="variable">cn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComponentName</span>(<span class="string">&quot;com.example.fm&quot;</span>, <span class="string">&quot;com.example.fm.MainFragmentActivity&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    intent.setComponent(cn);</span><br><span class="line">    <span class="comment">//第二种方式</span></span><br><span class="line">    <span class="comment">//intent.setClassName(&quot;com.example.fm&quot;, &quot;com.example.fm.MainFragmentActivity&quot;);</span></span><br><span class="line">    intent.putExtra(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;intent1&quot;</span>);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">//TODO  可以在这里提示用户没有安装应用或找不到指定Activity，或者是做其他的操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="权限配置">权限配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name=<span class="string">&quot;com.example.fm.MainFragmentActivity&quot;</span>&gt;&lt;/activity&gt;</span><br></pre></td></tr></table></figure><h2 id="启动模式">启动模式</h2><h3 id="android-总-Activity-的启动模式分为四种：">android 总 Activity 的启动模式分为四种：</h3><h4 id="Activity-启动模式设置：">Activity 启动模式设置：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name=<span class="string">&quot;.MainActivity&quot;</span> android:launchMode=<span class="string">&quot;standard&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="Activity-的四种启动模式：">Activity 的四种启动模式：</h3><h4 id="1-standard-模式启动模式，每次激活-Activity-时都会创建-Activity，并放入任务栈中。">1. standard 模式启动模式，每次激活 Activity 时都会创建 Activity，并放入任务栈中。</h4><h4 id="2-singleTop-如果在任务的栈顶正好存在该-Activity-的实例，-就重用该实例，否者就会创建新的实例并放入栈顶-即使栈中已经存在该-Activity-实例，只要不在栈顶，都会创建实例-。">2. singleTop 如果在任务的栈顶正好存在该 Activity 的实例， 就重用该实例，否者就会创建新的实例并放入栈顶(即使栈中已经存在该 Activity 实例，只要不在栈顶，都会创建实例)。</h4><h4 id="3-singleTask-如果在栈中已经有该-Activity-的实例，就重用该实例-会调用实例的-onNewIntent-。重用时，会让该实例回到栈顶，因此在它上面的实例将会被移除栈。如果栈中不存在该实例，将会创建新的实例放入栈中。">3. singleTask 如果在栈中已经有该 Activity 的实例，就重用该实例(会调用实例的 onNewIntent())。重用时，会让该实例回到栈顶，因此在它上面的实例将会被移除栈。如果栈中不存在该实例，将会创建新的实例放入栈中。</h4><h4 id="4-singleInstance-在一个新栈中创建该-Activity-实例，并让多个应用共享改栈中的该-Activity-实例。一旦改模式的-Activity-的实例存在于某个栈中，任何应用再激活改-Activity-时都会重用该栈中的实例，其效果相当于多个应用程序共享一个应用，不管谁激活该-Activity-都会进入同一个应用中。">4. singleInstance 在一个新栈中创建该 Activity 实例，并让多个应用共享改栈中的该 Activity 实例。一旦改模式的 Activity 的实例存在于某个栈中，任何应用再激活改 Activity 时都会重用该栈中的实例，其效果相当于多个应用程序共享一个应用，不管谁激活该 Activity 都会进入同一个应用中。</h4><h4 id="其中-standard-是系统默认的启动模式。">其中 standard 是系统默认的启动模式。</h4><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kill_process_app 通过java代码kill进程</title>
      <link href="/2023/02/24/kill-process-app/"/>
      <url>/2023/02/24/kill-process-app/</url>
      
        <content type="html"><![CDATA[<h2 id="思路">思路</h2><ul><li>1.杀死指定包名对应进程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">killService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ActivityManager</span> <span class="variable">manager</span> <span class="operator">=</span> (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">    manager.killBackgroundProcesses(<span class="string">&quot;com.googleplay.service&quot;</span>);</span><br><span class="line">    List&lt;RunningAppProcessInfo&gt; list = manager.getRunningAppProcesses();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">process</span> <span class="operator">=</span> list.get(i).processName;</span><br><span class="line">        <span class="keyword">if</span> (process.equals(<span class="string">&quot;com.google.service&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">&quot;kill &quot;</span> + list.get(i).pid);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>2.获取当前进程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context mContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> list</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ProcessInfo&gt; <span class="title function_">getRunningProcesses</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="type">ActivityManager</span> <span class="variable">am</span> <span class="operator">=</span> (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">        List&lt;ActivityManager.RunningAppProcessInfo&gt; runningAppProcesses = am</span><br><span class="line">                .getRunningAppProcesses();<span class="comment">//获取运行中进程集合</span></span><br><span class="line"></span><br><span class="line">        <span class="type">PackageManager</span> <span class="variable">pm</span> <span class="operator">=</span> context.getPackageManager();</span><br><span class="line">        ArrayList&lt;ProcessInfo&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ProcessInfo&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ActivityManager.RunningAppProcessInfo runningAppProcessInfo : runningAppProcesses) &#123;</span><br><span class="line">            <span class="type">ProcessInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessInfo</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> runningAppProcessInfo.processName; <span class="comment">//包名</span></span><br><span class="line">            info.packageName = packageName;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">pid</span> <span class="operator">=</span> runningAppProcessInfo.pid;</span><br><span class="line">            Debug.MemoryInfo[] processMemoryInfo = am.getProcessMemoryInfo(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;pid&#125;);<span class="comment">//根据pid返回内存信息</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">memory</span> <span class="operator">=</span> processMemoryInfo[<span class="number">0</span>].getTotalPrivateDirty() * <span class="number">1024</span>;  <span class="comment">//获取当前进程占用内存大小</span></span><br><span class="line">            info.memory = memory;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ApplicationInfo</span> <span class="variable">applicationInfo</span> <span class="operator">=</span> pm.getApplicationInfo(packageName, <span class="number">0</span>);<span class="comment">//根据包名获取相关应用的信息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> applicationInfo.loadLabel(pm).toString();</span><br><span class="line">                <span class="type">Drawable</span> <span class="variable">icon</span> <span class="operator">=</span> applicationInfo.loadIcon(pm);</span><br><span class="line"></span><br><span class="line">                info.name = name;</span><br><span class="line">                info.icon = icon;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">flags</span> <span class="operator">=</span> applicationInfo.flags;</span><br><span class="line">                <span class="keyword">if</span> ((flags &amp; ApplicationInfo.FLAG_SYSTEM) == ApplicationInfo.FLAG_SYSTEM) &#123;</span><br><span class="line">                    <span class="comment">//系统进程</span></span><br><span class="line">                    info.isUser = <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//用户进程</span></span><br><span class="line">                    info.isUser = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">//某些系统进程没有名称和图标,会走此异常</span></span><br><span class="line">                info.name = packageName;</span><br><span class="line">                info.icon = context.getResources().getDrawable(R.drawable.left_car);</span><br><span class="line">                info.isUser = <span class="literal">false</span>;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            list.add(info);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Killsu</span><span class="params">(<span class="type">int</span> pn)</span> &#123;</span><br><span class="line">        <span class="type">Process</span> <span class="variable">sh</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            sh = Runtime.getRuntime().exec(<span class="string">&quot;su&quot;</span>);</span><br><span class="line"></span><br><span class="line">            os = <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(sh.getOutputStream());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                os.writeBytes(<span class="string">&quot;kill -9 &quot;</span> + pn + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                Log.d(TAG, <span class="string">&quot;kill -9&quot;</span>);</span><br><span class="line"></span><br><span class="line">                sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">                Log.d(TAG, <span class="string">&quot;kill -9 catch exception&quot;</span>);</span><br><span class="line"></span><br><span class="line">                e.printStackTrace();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>3.其他方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android.os.Process.killProcess(android.os.Process.myPid());</span><br><span class="line"></span><br><span class="line">   <span class="type">ActivityManager</span> <span class="variable">activityManager</span> <span class="operator">=</span> (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">   activityManager.killBackgroundProcesses(<span class="string">&quot;com.zhang.wei&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &lt;uses-permission android:name=<span class="string">&quot;android.permission.KILL_BACKGROUND_PROCESSES&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li>杀死本进程</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo框架构建博客并发布</title>
      <link href="/2023/02/22/hexo-blog-createanduse/"/>
      <url>/2023/02/22/hexo-blog-createanduse/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-blog-desc">hexo blog desc</h2><ul><li>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li></ul><h2 id="hexo-install">hexo install</h2><ul><li>安装 Node.js<br>在官方网站下载即可安装，链接如下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://nodejs.org/en/</span><br></pre></td></tr></table></figure><ul><li>安装 cnpm 或使用淘宝镜像（二选一）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ul><li>安装 hexo</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="github-pages-and-gitee-pages-open-page-services">github pages and gitee pages open page services</h2><ul><li><p>1.github pages 开通使用</p><ul><li>创建与 github 用户同名仓库，命名方式如下<br>如图<br><img src="/2023/02/22/hexo-blog-createanduse/createrepo.png" class="lazyload placeholder" data-srcset="/2023/02/22/hexo-blog-createanduse/createrepo.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username.github.io</span><br></pre></td></tr></table></figure><ul><li>开启 github pages 服务<br>如图：<br><img src="/2023/02/22/hexo-blog-createanduse/opengithubpages.png" class="lazyload placeholder" data-srcset="/2023/02/22/hexo-blog-createanduse/opengithubpages.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ul></li><li><p>2.gitee pages 开通使用</p><ul><li><p>创建与空间名相同仓库</p></li><li><p>开通 pages 服务（需提前实名认证，较为复杂）</p></li></ul></li></ul><h2 id="hexo-config-and-themes-use">hexo config and themes use</h2><ul><li>1.在下载结束后，可以编辑 hexo 配置<ul><li>配置文件<code>_config.yml</code></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">see @link</span><br><span class="line">https://hexo.io/zh-cn/docs/configuration</span><br></pre></td></tr></table></figure><h2 id="hexo-use">hexo use</h2><ul><li><ol><li>blog 编写</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new blog</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>blog md 文件 书写<br>采用 MarkerDown 语法</li></ol></li></ul><h2 id="macos-use">macos use</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install hexo</span><br></pre></td></tr></table></figure><h2 id="markerdown-upload-server">markerdown upload server</h2><ul><li><ol><li>使用以下脚本推送博客更新</li></ol></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h2 id="使用博客插件在-md-中引入图片资源（网站、vscode-均可用）">使用博客插件在 md 中引入图片资源（网站、vscode 均可用）</h2><ul><li>sh 脚本</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><ul><li>渲染库安装</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-markdown-it</span><br><span class="line">or</span><br><span class="line">cnpm install hexo-renderer-markdown-it-plus</span><br><span class="line">cnpm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br><span class="line">cnpm install --save hexo-renderer-ejs</span><br><span class="line">cnpm install --save hexo-renderer-pug</span><br><span class="line">cnpm install --save hexo-renderer-haml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Styles</span></span><br><span class="line">cnpm install --save hexo-renderer-less</span><br><span class="line">cnpm install --save hexo-renderer-sass</span><br><span class="line">cnpm install --save hexo-renderer-stylus</span><br><span class="line">cnpm install --global yo</span><br><span class="line">cnpm install --global generator-hexo-theme</span><br></pre></td></tr></table></figure><ul><li>主题库安装</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure><ul><li>更换电脑 修改key信息（github）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br><span class="line">https://blog.csdn.net/W_317/article/details/106518894</span><br></pre></td></tr></table></figure><h2 id="See-also">See also</h2><ul><li>[1].<a href="https://hexo.io/zh-cn/docs/setup">https://hexo.io/zh-cn/docs/setup</a></li><li>[2].<a href="https://mp.weixin.qq.com/s/w6m21gLNji3HkJKRMwCQ4g">https://mp.weixin.qq.com/s/w6m21gLNji3HkJKRMwCQ4g</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity 中绕某个物体旋转方法</title>
      <link href="/2023/02/22/UnityRotation/"/>
      <url>/2023/02/22/UnityRotation/</url>
      
        <content type="html"><![CDATA[<h1>Unity 中绕某个物体旋转方法</h1><h2 id="简介">简介</h2><ul><li>旋转主要是用以下方法：<ul><li>Transform.Rotate</li><li>Transform.RotateAround</li></ul></li></ul><h2 id="使用方法描述">使用方法描述</h2><h3 id="Transform-Rotate">Transform.Rotate</h3><ul><li><p>描述</p><ul><li><p>世界轴旋转使用 Scene 的坐标系，因此在开始旋转 GameObject 时，它的 x、y 和 z 轴与 x、y 和 z 世界轴对齐。所以，如果在世界空间中旋转一个立方体，它的轴就会与世界对齐。在 Unity 编辑器的 Scene 视图中选中一个立方体时，将显示左 Gizmos 下以及正向/反向旋转轴的旋转 Gizmos。移动这些 Gizmos 将使立方体绕轴旋转。如果取消选择然后重新选择该立方体，这些轴将重新开始在世界中对齐。</p></li><li><p>本地旋转使用 GameObject 本身的坐标系。因此，新建的立方体将使用设置为零旋转的 x、y 和 z 轴。旋转该立方体将更新旋转轴。如果取消选择然后重新选择该立方体，将按之前的相同方向显示这些轴。</p></li></ul></li><li><p>例如</p></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Rotate</span> (<span class="params">Vector3 eulers, Space relativeTo= Space.Self</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li>例子</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Transform.Rotate example</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This script creates two different cubes: one red which is rotated using Space.Self; one green which is rotated using Space.World.</span></span><br><span class="line"><span class="comment">// Add it onto any GameObject in a scene and hit play to see it run. The rotation is controlled using xAngle, yAngle and zAngle, modifiable on the inspector.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleScript</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> xAngle, yAngle, zAngle;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GameObject cube1, cube2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cube1 = GameObject.CreatePrimitive(PrimitiveType.Cube);</span><br><span class="line">        cube1.transform.position = <span class="keyword">new</span> Vector3(<span class="number">0.75f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">        cube1.transform.Rotate(<span class="number">90.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, Space.Self);</span><br><span class="line">        cube1.GetComponent&lt;Renderer&gt;().material.color = Color.red;</span><br><span class="line">        cube1.name = <span class="string">&quot;Self&quot;</span>;</span><br><span class="line"></span><br><span class="line">        cube2 = GameObject.CreatePrimitive(PrimitiveType.Cube);</span><br><span class="line">        cube2.transform.position = <span class="keyword">new</span> Vector3(<span class="number">-0.75f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">        cube2.transform.Rotate(<span class="number">90.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, Space.World);</span><br><span class="line">        cube2.GetComponent&lt;Renderer&gt;().material.color = Color.green;</span><br><span class="line">        cube2.name = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cube1.transform.Rotate(xAngle, yAngle, zAngle, Space.Self);</span><br><span class="line">        cube2.transform.Rotate(xAngle, yAngle, zAngle, Space.World);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Transform-RotateAround">Transform.RotateAround</h3><ul><li>描述<ul><li>将变换围绕穿过世界坐标中的 point 的 axis 旋转 angle 度。</li></ul></li><li>参数<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RotateAround</span> (<span class="params">Vector3 point, Vector3 axis, <span class="built_in">float</span> angle</span>)</span>;</span><br></pre></td></tr></table></figure></li><li>参数详解<ul><li>point: 目标坐标点</li><li>axis: 旋转轴，如：<code>new Vector3(1,0,0)</code>为绕 x 轴旋转。</li><li>angle: 需旋转角度的变量（增量或减量）</li></ul></li><li>例子</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Attach this script to a GameObject to rotate around the target position.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Assign a GameObject in the Inspector to rotate around</span></span><br><span class="line">    <span class="keyword">public</span> GameObject target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Spin the object around the target at 20 degrees/second.</span></span><br><span class="line">        transform.RotateAround(target.transform.position, Vector3.up, <span class="number">20</span> * Time.deltaTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实际应用">实际应用</h3><ul><li>代码如下：</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> 参数</span></span><br><span class="line">    <span class="comment">//  相机调整角度倍速</span></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;相机调整角度倍速&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> speed = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 坐标</span></span><br><span class="line">    <span class="keyword">public</span> Vector3 vect;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;需旋转目标物体&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> Transform target;<span class="comment">//获取旋转目标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> xcream;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> ycream;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绕目标物旋转 UI</span></span><br><span class="line">        <span class="comment">// step 1. get target object</span></span><br><span class="line">        <span class="comment">// step 2. get target position</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 角度增加</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AngleAdd</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">float</span> y = <span class="number">50</span>;</span><br><span class="line">        x += <span class="number">5</span>;</span><br><span class="line">        y += <span class="number">5</span>;</span><br><span class="line">        <span class="built_in">float</span> currentAngle = transform.eulerAngles.x;</span><br><span class="line">        <span class="keyword">if</span> (currentAngle + speed &gt; <span class="number">50</span> &amp;&amp; currentAngle + speed &lt; <span class="number">90</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// limitangle(120);</span></span><br><span class="line">            <span class="comment">// limitangleuandd(50);</span></span><br><span class="line">            Vector3 vector3 = <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">this</span>.transform.RotateAround(target.position, vector3, speed);</span><br><span class="line">            Debug.Log(<span class="string">&quot;camera controller: angle: &quot;</span> + <span class="keyword">this</span>.transform.eulerAngles);</span><br><span class="line">            <span class="comment">// this.transform.Rotate(0, x * speed, 0, Space.World);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// currentAngle = 50;</span></span><br><span class="line">            Toast.Show(<span class="string">&quot;已经增大到最大值，请减小角度！&quot;</span>, <span class="number">1f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 角度减少</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AngleReduce</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">float</span> y = <span class="number">90</span>;</span><br><span class="line">        x -= <span class="number">5</span>;</span><br><span class="line">        y -= <span class="number">5</span>;</span><br><span class="line">        <span class="built_in">float</span> currentAngle = transform.eulerAngles.x;</span><br><span class="line">        <span class="keyword">if</span> (currentAngle - speed &gt; <span class="number">50</span> &amp;&amp; currentAngle - speed &lt; <span class="number">90</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// limitangle(120);</span></span><br><span class="line">            <span class="comment">//limitangleuandd(50);</span></span><br><span class="line">            Vector3 vector3 = <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">this</span>.transform.RotateAround(target.position, vector3, -speed);</span><br><span class="line">            Debug.Log(<span class="string">&quot;camera controller: angle: &quot;</span> + <span class="keyword">this</span>.transform.eulerAngles);</span><br><span class="line">            <span class="comment">// this.transform.Rotate(0, x * speed, 0, Space.World);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// currentAngle = 50;</span></span><br><span class="line">            Toast.Show(<span class="string">&quot;已经减小到最小值，请增大角度！&quot;</span>, <span class="number">1f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>目的：通过上下按键控制相机沿 x 轴对目标物体转动同时限制 x 轴坐标范围为（50,90），对大于目标坐标的值予以过滤并提示用户反向操作以达到目的。</li></ul><h3 id="参考">参考</h3><ul><li>[1].<a href="https://docs.unity3d.com/cn/2021.2/ScriptReference/Transform.RotateAround.html">https://docs.unity3d.com/cn/2021.2/ScriptReference/Transform.RotateAround.html</a></li><li>[2].<a href="https://docs.unity3d.com/cn/2021.2/ScriptReference/Transform.Rotate.html">https://docs.unity3d.com/cn/2021.2/ScriptReference/Transform.Rotate.html</a></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 Unity 不同方式的导出与详细使用的说明(基于 Android 平台)</title>
      <link href="/2023/02/22/unityexport-to-android-md/"/>
      <url>/2023/02/22/unityexport-to-android-md/</url>
      
        <content type="html"><![CDATA[<h1>关于 Unity 不同方式的导出与详细使用的说明(基于 Android 平台)</h1><h2 id="导出方式-编译器选择">导出方式(编译器选择)</h2><ul><li><p>已有方式如下：</p></li><li><p>1.Mono</p><ul><li>Mono 是一个由 Xamarin 公司所主持的自由开放源码项目。<br>Mono <a href="http://xn--fhq68al1hea232boqdtuhp3e9zv3kexp4cga58kf87f.net">的目标是在尽可能多的平台上使.net</a> 标准的东西能正常运行的一套工具，核心在于&quot;<a href="http://xn--kpro9ekxi2w4cbmc.net">跨平台地让.net</a> 代码能运行起来&quot;。<br>Mono 组成组件：C# 编译器，CLI 虚拟机，以及核心类别程序库。<br>Mono 的编译器负责生成符合公共语言规范的映射代码，即公共中间语言（Common Intermediate Language，CIL），我的理解就是工厂方法实现不同解析。</li></ul></li><li><p>2.IL2CPP</p><ul><li><p>IL 的全称是 Intermediate Language，IL 是与 CPU 无关的机器语言，能访问和操作对象类型，并提供了指令来创建和初始化对象、调用对象上的虚方法以及直接操作数组元素。甚至提供了抛出和捕捉异常的指令来实现错误处理。可将 IL 视为一种面向对象的及其语言。很多时候还会看到 CIL（<a href="http://xn--3ds19y5om.Net">特指在.Net</a> 平台下的 IL 标准）。翻译过来就是中间语言。<br><a href="http://xn--4gq6mm7my2hl5a080bkgcolr64hwyjp18b92e9vp.NET">它是一种属于通用语言架构和.NET</a> 框架的低阶的人类可读的编程语言。<br>CIL 类似一个面向对象的汇编语言，并且它是完全基于堆栈的，它运行在虚拟机上（.Net Framework, Mono VM）的语言。</p><ul><li><p>IL2CPP 分为两个独立的部分：</p></li><li><ol><li>AOT（静态编译）编译器：把 IL 中间语言转换成 CPP 文件</li></ol></li><li><ol start="2"><li>运行时库：例如垃圾回收、线程/文件获取（独立于平台，与平台无关）、内部调用直接修改托管数据结构的原生代码的服务与抽象</li></ol></li></ul></li></ul></li><li><p>Unity 跨平台原理</p><ul><li><p>Mono 运行时编译器支持将 IL 代码转为对应平台原生码。</p></li><li><p>IL 可以在任何支持 CLI（通用语言环境结构）中运行，IL 的运行是依托于 Mono 运行时。</p></li></ul></li><li><p>总结<br>IL2CPP 比较适合开发和发布项目 ，但是为了提高版本迭代速度，可以在开发期间切换到 Mono 模式（构建应用快）。</p></li><li><p>如图：<br><img src="/2023/02/22/unityexport-to-android-md/publish.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/publish.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p></li><li><p>在选择编译方式后，可选择编译平台架构（armv7、arm64）以及 C#编译 API 库版本（.net）</p></li></ul><h2 id="推荐开发工具版本">推荐开发工具版本</h2><ul><li>Android Studio Bumblebee (2021.3.1) or later</li><li>Unity version 2021.3.4a18 or later</li><li>Visual Studio Code 1.75.1 (Code)</li></ul><h2 id="导出步骤">导出步骤</h2><h3 id="基础配置">基础配置</h3><ul><li><ol><li>预配置</li></ol><ul><li><ol><li>填充 unity file 菜单 project settings 中 company name、package name 名称</li></ol></li><li><ol start="2"><li>设置导出路径，勾选导出文件</li></ol></li><li><ol start="3"><li>复制 Unitylibrary 目录至 Android Studio 工程</li></ol></li><li><ol start="4"><li>更改<code>build.gradle</code>文件等</li></ol></li><li><ol start="5"><li>启动 Android 程序，跳转至选图后界面</li></ol></li><li><ol start="6"><li>启动 unity，预览程序</li></ol></li></ul></li><li><ol start="2"><li>导出</li></ol><ul><li><ol><li>export(File-&gt;Build Settings) 页面配置，如图:<br><img src="/2023/02/22/unityexport-to-android-md/player.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/player.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ol></li><li><ol start="2"><li>在 player settings 中设置如下项目，如图：（选中 Android 项目）<br><img src="/2023/02/22/unityexport-to-android-md/hidebar.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/hidebar.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ol></li><li><ol start="3"><li>设置发布配置，如图：<br><img src="/2023/02/22/unityexport-to-android-md/publish.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/publish.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ol></li><li><ol start="4"><li>设置启动页面<br><img src="/2023/02/22/unityexport-to-android-md/splash.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/splash.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ol></li><li><ol start="5"><li>最终，在 Build Settings 页面中点击 export 导出,如图：<br><img src="/2023/02/22/unityexport-to-android-md/player.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/player.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ol></li></ul></li><li><ol start="3"><li>导出前性能优化</li></ol><ul><li>物理模块优化<ul><li>1.如果项目使用 Unity 2017 以上版本，且实际没有使用物理模块，可以将 Project Settings 中 Physics 的 Auto Simulation 和 Auto Sync Transforms 选项关闭（如图）<br><img src="/2023/02/22/unityexport-to-android-md/exp-physical.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/exp-physical.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ul></li></ul></li></ul><h2 id="导出性能分析">导出性能分析</h2><h3 id="在-Android-Studio-Profiler-性能分析中，Unity-占用内存的判断">在 Android Studio Profiler 性能分析中，Unity 占用内存的判断</h3><ul><li>如图，native 内存即为 Unity 占用内存<br><img src="/2023/02/22/unityexport-to-android-md/unity_memory.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/unity_memory.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ul><h2 id="Android-Studio-引入-Unity-导出库配置（以官方案例为参考）">Android Studio 引入 Unity 导出库配置（以官方案例为参考）</h2><ul><li><p>在 Unity 编辑器中打开 UnityProject</p></li><li><p>进入构建设置窗口(菜单/文件/构建设置)</p></li><li><p>选择并切换到 Android 平台</p></li><li><p>进入播放器设置窗口(点击构建设置左下角的播放器设置按钮，或者使用编辑/项目设置菜单，选择左边的播放器选项卡)</p></li><li><p>在&quot;其他设置&quot;—)配置&quot;中选择目标架构<br><img src="/2023/02/22/unityexport-to-android-md/selectArchitectures.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/selectArchitectures.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>返回&quot;构建设置&quot;窗口 -选择&quot;导出项目&quot;选项<br>![img](unityexport-to-android-md/exportProject.png&quot; width=‘400px’&gt;<br>导出 UnityProject 到 androidBuild 文件夹，文件夹结构如下所示<br><img src="/2023/02/22/unityexport-to-android-md/exportedProjectFolder.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/exportedProjectFolder.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ul></li><li><p>3.添加 Unity 库模块到 NativeAndroidApp**</p></li><li><p>在 Android Studio 中将导出的 androidBuild/unityLibrary 模块添加到 NativeAndroidApp Gradle 项目中:</p></li></ul><p>在 Android Studio 中打开 NativeAndroidApp</p><ul><li><p>打开设置.gradle 文件</p></li><li><p>在主 app 模块之后添加一个指向 unityLibrary 模块的新项目</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include &#x27;:unityLibrary&#x27;</span><br><span class="line">project(&#x27;:unityLibrary&#x27;).projectDir=new File(&#x27;..\\UnityProject\\androidBuild\\unityLibrary&#x27;)</span><br></pre></td></tr></table></figure><ul><li>在&quot;dependencyresoltionmanagement {repositories{block&quot;中添加如下内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flatDir &#123;</span><br><span class="line">  dirs &quot;$&#123;project(&#x27;:unityLibrary&#x27;).projectDir&#125;/libs&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/22/unityexport-to-android-md/settingsGradle.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/settingsGradle.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li><p>开放构建.gradle(模块:NativeAndroidApp.app)文件</p></li><li><p>在 dependencies{block 中添加以下内容</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation project(&#x27;:unityLibrary&#x27;)</span><br><span class="line">implementation fileTree(dir: project(&#x27;:unityLibrary&#x27;).getProjectDir().toString() + (&#x27;\\libs&#x27;), include: [&#x27;*.jar&#x27;])</span><br></pre></td></tr></table></figure><p><img src="/2023/02/22/unityexport-to-android-md/buildGradleApp.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/buildGradleApp.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><ul><li>在同一个文件中，看看 android{defaultConfig{ndk{块，并确保 abiFilters 匹配你在 Unity 编辑器中选择的架构，然后再导出项目。过滤器必须与 Unity 编辑器中的架构完全匹配。如果 Unity 只导出 ARMv7 架构，但过滤器包含 ARM64 -v8a，应用程序将在 ARM64 设备上崩溃。在<a href="https://developer.android.com/ndk/guides/abis#sa">android 官方文档</a>中检查有效的 abiFilters 值。<br><img src="/2023/02/22/unityexport-to-android-md/buildGradleAppAbiFilters.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/buildGradleAppAbiFilters.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"><ul><li>复制 gradle 的内容。属性文件从导出的 Unity 项目根文件夹到 gradle。属性文件在本机应用程序根文件夹中。注意:如果你更新 Unity 项目并再次重新导出它，请确保 gradle 的内容。导出项目中的属性文件没有更改。如果有，重复这一步。<br><img src="/2023/02/22/unityexport-to-android-md/exportedASProject.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/exportedASProject.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"><br><img src="/2023/02/22/unityexport-to-android-md/gradlePropertiesApp.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/gradlePropertiesApp.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"><ul><li>点击 Sync Now 进行项目同步，因为 Gradle 文件已经被修改了<br><img src="/2023/02/22/unityexport-to-android-md/syncGradle.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/syncGradle.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ul></li></ul></li><li>如果一切成功，你应该看到 unityLibrary 模块添加到 Android 视图<br><img src="/2023/02/22/unityexport-to-android-md/unityLibraryModule.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/unityLibraryModule.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ul><h3 id="项目准备就绪">项目准备就绪</h3><p>一切就绪，可以构建、运行和调试:<br><img src="/2023/02/22/unityexport-to-android-md/buildOnDevice.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/buildOnDevice.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"><br>如果一切成功，在这一点上，你应该能够运行 NativeAndroidApp:</p><table><thead><tr><th>Main Activity</th><th>Unity Activity</th></tr></thead><tbody><tr><td><img src="/2023/02/22/unityexport-to-android-md/appNativeSS.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/appNativeSS.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></td><td><img src="/2023/02/22/unityexport-to-android-md/appUnitySS.png" class="lazyload placeholder" data-srcset="/2023/02/22/unityexport-to-android-md/appUnitySS.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></td></tr><tr><td>Main Activity</td><td>Unity 被加载并运行在一个单独的 Activity 中。中间的浅灰色按钮是从 MainUnityActivity 中添加的，在 NativeAndroidApp 中实现</td></tr></tbody></table><h2 id="注意">注意</h2><ul><li>Unity 运行在另一个进程 android:process=“:Unity” (AndroidManifest.xml 在应用模块)<br>安装完成后，设备上会增加两个图标。要只留下主活动的图标，删除<intent-filter>…</intent-filter> from AndroidManifest.xml 在 unityLibrary</li><li>(可选)我们找到了一些 Android 7。*设备将活动的 frontOfTask 设置为错误状态，导致当完成/退出 Unity 活动时，整个任务将进入后台，而不是带回主活动。下一个解决方案保持预期的行为:添加到 MainUnityActivity.java 从 NativeAndroidApp<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUnityPlayerQuitted</span>()</span> &#123;</span><br><span class="line">    showMainActivity(<span class="string">&quot;&quot;</span>); finish();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 Unity 中触摸屏幕坐标与物体世界坐标的判定方法(以矩形为例)</title>
      <link href="/2023/02/22/android-unity-touch-md/"/>
      <url>/2023/02/22/android-unity-touch-md/</url>
      
        <content type="html"><![CDATA[<h1>关于 Unity 中触摸屏幕坐标与物体世界坐标的判定方法(以矩形为例)</h1><h2 id="处理思路">处理思路</h2><ul><li>1.获取用户触摸的屏幕坐标(touch_vector3)</li><li>2.转换屏幕坐标为世界坐标(Camera.main.ScreenToWorldPoint(touch_vector3))</li><li>3.根据对应算法比较触摸点与目标点差值</li><li>4.差值在预期内，判定为用户选中；否则，未选中</li></ul><h2 id="算法选择">算法选择</h2><h3 id="交点-射线-法">交点(射线)法</h3><ul><li><p>1.基本思路：</p></li><li><p>从任意位置画一条到目标点的水平线，计算该水平线进出平面边界的次数，如果是偶数，则点在平面外；如果是奇数，则点在平面内。点正好落在定点或边界时会出现特殊的判断。</p></li><li><p>如图：<br><img src="/2023/02/22/android-unity-touch-md/point.png" class="lazyload placeholder" data-srcset="/2023/02/22/android-unity-touch-md/point.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p></li><li><p>2.代码实现</p></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> 判断点是否在矩形框内- app</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;APoints&quot;&gt;</span>库位点集合<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;pointBottomCenter&quot;&gt;</span>目标点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">isPolygonContainsPoint</span>(<span class="params">List&lt;Vector3&gt; APoints, Vector3 pointBottomCenter</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">int</span> nCross = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; APoints.Count; i++)</span><br><span class="line">       &#123;</span><br><span class="line">           Vector3 p1 = APoints[i];</span><br><span class="line">           Vector3 p2 = APoints[(i + <span class="number">1</span>) % APoints.Count];</span><br><span class="line">           <span class="comment">// 取多边形任意一个边,做点point的水平延长线,求解与当前边的交点个数</span></span><br><span class="line">           <span class="comment">// p1p2是水平线段,要么没有交点,要么有无限个交点</span></span><br><span class="line">           <span class="keyword">if</span> (p1.y == p2.y)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="built_in">double</span> minX = Math.Min(p1.x, p2.x);</span><br><span class="line">               <span class="built_in">double</span> maxX = Math.Max(p1.x, p2.x);</span><br><span class="line">               <span class="comment">// point在水平线段p1p2上,直接return true</span></span><br><span class="line">               <span class="keyword">if</span> ((pointBottomCenter.z == p1.z) &amp;&amp; (pointBottomCenter.x &gt;= minX &amp;&amp; pointBottomCenter.x &lt;= maxX))</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// point 在p1p2 底部 --&gt; 无交点</span></span><br><span class="line">           <span class="keyword">if</span> (pointBottomCenter.z &lt; Math.Min(p1.z, p2.z))</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           <span class="comment">// point 在p1p2 顶部 --&gt; 无交点</span></span><br><span class="line">           <span class="keyword">if</span> (pointBottomCenter.z &gt;= Math.Max(p1.z, p2.z))</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           <span class="comment">// 求解 point点水平线与当前p1p2边的交点的 X 坐标</span></span><br><span class="line">           <span class="built_in">double</span> x = (pointBottomCenter.z - p1.z) * (p2.x - p1.x) / (p2.z - p1.z) + p1.x;</span><br><span class="line">           <span class="keyword">if</span> (x &gt; pointBottomCenter.x) <span class="comment">// 当x=point.x时,说明point在p1p2线段上</span></span><br><span class="line">               nCross++; <span class="comment">// 只统计单边交点</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 单边交点为偶数，点在多边形之外 ---</span></span><br><span class="line">       <span class="keyword">return</span> (nCross % <span class="number">2</span> == <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="面积法">面积法</h3><ul><li>1.基本思路</li><li>通过将矩形切割为多个三角形计算面积，与原面积比较差值；若大于 0 则不在，否则在。</li><li>所有边和目标点组成的三角形面积和是否等于总的多边形面积，如果相等，则在内部。反之在外部。</li><li>2.代码实现</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> 计算距离</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;p1&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;p2&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="built_in">double</span> <span class="title">dis</span>(<span class="params">Vector3 p1, Vector3 p2</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">return</span> Math.Sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.z - p2.z) * (p1.z - p2.z));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> 计算三角形面积</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;p1&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;p2&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;p3&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">triangleArea</span>(<span class="params">Vector3 p1, Vector3 p2, Vector3 p3</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">double</span> a = dis(p1, p2);</span><br><span class="line">       <span class="built_in">double</span> b = dis(p2, p3);</span><br><span class="line">       <span class="built_in">double</span> c = dis(p3, p1);</span><br><span class="line">       <span class="built_in">double</span> p = (a + b + c) * <span class="number">0.5</span>;</span><br><span class="line">       <span class="keyword">return</span> Math.Sqrt(p * (p - a) * (p - b) * (p - c));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> 判断某点是否落在矩形内</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;a&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;b&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;c&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;d&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;p&quot;&gt;</span>目标点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">pInQuadrangle</span>(<span class="params">Vector3 a, Vector3 b, Vector3 c, Vector3 d, Vector3 p</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">double</span> dTriangle = triangleArea(a, b, p) + triangleArea(b, c, p) + triangleArea(c, d, p) + triangleArea(d, a, p);</span><br><span class="line">       <span class="built_in">double</span> dQuadrangle = triangleArea(a, b, c) + triangleArea(c, d, a);<span class="comment">// s5 + s6;</span></span><br><span class="line">       <span class="keyword">if</span> (Math.Abs(dTriangle - dQuadrangle) &lt; <span class="number">0.25f</span>)    <span class="comment">//说明理论上应该是相等的，但因为计算本身的原因可能会有细微不同，所以选择小于1，根据实际情况来设置</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 作为服务器向 UNITY 客户端发送数据</title>
      <link href="/2023/02/22/AndroidSocketToUnity/"/>
      <url>/2023/02/22/AndroidSocketToUnity/</url>
      
        <content type="html"><![CDATA[<h1>Android 作为服务器向 UNITY 客户端发送数据</h1><h2 id="简介">简介</h2><ul><li><p>分层对应协议</p><ul><li><p>应用层：TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet 等等</p></li><li><p>传输层：TCP，UDP</p></li><li><p>网络层：IP，ICMP，OSPF，EIGRP，IGMP</p></li><li><p>数据链路层：SLIP，CSLIP，PPP，MTU</p></li></ul></li><li><p>通信结构，如图<br><img src="https://pic3.zhimg.com/80/v2-6da4cb5ef8a02ea7eeca8fb132bd0776_720w.webp" class="lazyload placeholder" data-srcset="https://pic3.zhimg.com/80/v2-6da4cb5ef8a02ea7eeca8fb132bd0776_720w.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="alt 如图" title="通信过程"></p></li><li><p>socket 位置，如图<br><img src="https://pic4.zhimg.com/80/v2-57afdc329c984ad909d911bcddd6d0c7_720w.webp" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/80/v2-57afdc329c984ad909d911bcddd6d0c7_720w.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="alt img" title="socket"></p></li><li><p>三次握手过程，如图<br><img src="https://pic2.zhimg.com/80/v2-7e535f4306b205d0aae90e102c56bf9d_720w.webp" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-7e535f4306b205d0aae90e102c56bf9d_720w.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="alt img" title="握手过程"></p></li><li><p>具体到 socket 如下<br><img src="https://pic4.zhimg.com/80/v2-0166c6374f2a842f64fd566599a13d67_720w.webp" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/80/v2-0166c6374f2a842f64fd566599a13d67_720w.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="alt img" title="socket链接"></p></li><li><p>Android 使用 Socket 与 UNITY 客户端通信</p></li><li><p>两端定义相同协议进行数据的交互</p></li><li><p>在数据发送前使用相应转换方式进行转换</p></li></ul><h2 id="实现方式">实现方式</h2><h3 id="Android-服务端">Android 服务端</h3><ul><li><ol><li>建立 Android 服务器端 serversocket 服务</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">          server = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">          System.out.println(<span class="string">&quot;启动server，端口号：&quot;</span> + port);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>在创建 serversocket 后，在需要的地方调用方法并开启 socket 服务</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动server</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> ServerThread <span class="title function_">startServer</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;开启server&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (serverThread != <span class="literal">null</span>) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;server不为null正在重启server&quot;</span>);</span><br><span class="line">           <span class="comment">// 以下为关闭server和socket</span></span><br><span class="line">           shutDown();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 初始化</span></span><br><span class="line">       serverThread = <span class="keyword">new</span> <span class="title class_">ServerThread</span>();</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Thread</span>(serverThread).start();</span><br><span class="line">       System.out.println(<span class="string">&quot;开启server成功&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> serverThread;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>新建线程，等待客户端链接,在客户端连接后发送回应消息</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!isExit) &#123;</span><br><span class="line">                    <span class="comment">// 等待连接</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;等待手机的连接中... ...&quot;</span>);</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">                    System.out.println(<span class="string">&quot;获取的手机IP地址及端口号：&quot;</span> + socket.getRemoteSocketAddress().toString());</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 因为考虑到多手机连接的情况 所以加入线程锁 只允许单线程工作</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">private</span> String text;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                                    <span class="comment">// 在这里考虑到线程总数的计算 也代表着连接手机的数量</span></span><br><span class="line">                                    ++sum;</span><br><span class="line">                                    <span class="comment">// 存入到集合和Map中为群发和单独发送做准备</span></span><br><span class="line">                                    <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> socket.getRemoteSocketAddress().toString();</span><br><span class="line">                                    clientList.add(string);</span><br><span class="line">                                    clientMap.put(<span class="string">&quot;2&quot;</span>, socket);</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 定义输入输出流</span></span><br><span class="line">                                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">                                <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 接下来考虑输入流的读取显示到PC端和返回是否收到</span></span><br><span class="line"><span class="comment">//                                byte[] buffer = new byte[1024];</span></span><br><span class="line"><span class="comment">//                                int len;</span></span><br><span class="line"><span class="comment">//                                while ((len = is.read(buffer)) != -1) &#123;</span></span><br><span class="line"><span class="comment">//                                    text = new String(buffer, 0, len);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                                    System.out.println(&quot;收到的数据为：&quot; + text);</span></span><br><span class="line"><span class="comment">//                                    os.write(&quot;已收到消息&quot;.getBytes(&quot;utf-8&quot;));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                                &#125;</span></span><br><span class="line"></span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;关闭连接：&quot;</span> + socket.getRemoteSocketAddress().toString());</span><br><span class="line">                                <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                                    --sum;</span><br><span class="line">                                    <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> socket.getRemoteSocketAddress().toString();</span><br><span class="line">                                    clientMap.remove(string);</span><br><span class="line">                                    clientList.remove(string);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).start();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li>在连接结束后，关闭链接</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭server</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">          isExit = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">if</span> (server != <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  server.close();</span><br><span class="line">                  System.out.println(<span class="string">&quot;已关闭server&quot;</span>);</span><br><span class="line">              &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shutDown</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (Socket socket : clientMap.values()) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              socket.close();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      serverThread.stop();</span><br><span class="line">      clientMap.clear();</span><br><span class="line">      clientList.clear();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><ol start="5"><li>发送简易消息</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 发送消息的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">sendMessage</span><span class="params">(String name, String mag)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> clientMap.get(name);</span><br><span class="line"><span class="comment">//            socket.setSendBufferSize(mag.length());</span></span><br><span class="line"><span class="comment">////            socket.setReceiveBufferSize(mag.length());</span></span><br><span class="line">            <span class="keyword">assert</span> socket != <span class="literal">null</span>;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"><span class="comment">//            DataOutputStream out = new DataOutputStream(outputStream);</span></span><br><span class="line"><span class="comment">//            outputStream.write(mag.getBytes(&quot;utf-8&quot;));</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">MessageProtocol</span>().GenProtocol(outputStream,mag);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>6.定义消息协议</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProtocolHeader</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] version = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] mask = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] length = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] timeStamp = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>7.在发送消息前，组装报文</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">  <span class="type">byte</span>[] header = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">GenProtocol</span><span class="params">(OutputStream out, String msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        int type = 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        out.writeInt(type);</span></span><br><span class="line"><span class="comment">//        out.write(totalLen);</span></span><br><span class="line">        <span class="type">ProtocolHeader</span> <span class="variable">protocolHeader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProtocolHeader</span>();</span><br><span class="line">        protocolHeader.length = ConvertUtils.intToByteArray(bytes.length);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timeStamp</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        protocolHeader.timeStamp = longToBytes(timeStamp);</span><br><span class="line">        protocolHeader.mask = <span class="string">&quot;aaaaaaa&quot;</span>.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        protocolHeader.version= <span class="string">&quot;1.0.0.0.0&quot;</span>.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="type">byte</span>[] val = addBytes(protocolHeader.version, protocolHeader.mask);</span><br><span class="line">        <span class="type">byte</span>[] val2 = addBytes(val, protocolHeader.length);</span><br><span class="line">        header = addBytes(val2, protocolHeader.timeStamp);</span><br><span class="line">        out.write(header);</span><br><span class="line"><span class="comment">//        Arrays.toString(serialize(protocolHeader));</span></span><br><span class="line"><span class="comment">//        Log.i(&quot;sss&quot;,  String.valueOf(serialize(protocolHeader)));</span></span><br><span class="line">        out.write(bytes,<span class="number">0</span>, bytes.length);</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> data1 与 data2拼接的结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] addBytes(<span class="type">byte</span>[] data1, <span class="type">byte</span>[] data2) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] data3 = <span class="keyword">new</span> <span class="title class_">byte</span>[data1.length + data2.length];</span><br><span class="line"></span><br><span class="line">        System.arraycopy(data1, <span class="number">0</span>, data3, <span class="number">0</span>, data1.length);</span><br><span class="line"></span><br><span class="line">        System.arraycopy(data2, <span class="number">0</span>, data3, data1.length, data2.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data3;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>8.使用以下方法发送消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClientManager.sendMessage(<span class="string">&quot;id&quot;</span>, msg);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><ol start="9"><li>ClientManager 工具类完整代码</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管理连接到服务器中的手机类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ServerThread</span> <span class="variable">serverThread</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Socket&gt; clientMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; clientList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ServerThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ServerSocket server;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">10086</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isExit</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">// 一个boolean类型的判断 默认是退出状态false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造方法初始化</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ServerThread</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                server = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">                System.out.println(<span class="string">&quot;启动server，端口号：&quot;</span> + port);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.获得远程服务器的IP 地址.</span></span><br><span class="line"><span class="comment">         * InetAddress inetAddress = socket.getInetAddress();</span></span><br><span class="line"><span class="comment">         * 2.获得远程服务器的端口.</span></span><br><span class="line"><span class="comment">         * int port = socket.getPort();</span></span><br><span class="line"><span class="comment">         * 3. 获得客户本地的IP 地址.</span></span><br><span class="line"><span class="comment">         * InetAddress localAddress = socket.getLocalAddress();</span></span><br><span class="line"><span class="comment">         * 4.获得客户本地的端口.</span></span><br><span class="line"><span class="comment">         * int localPort = socket.getLocalPort();</span></span><br><span class="line"><span class="comment">         * 5.获取本地的地址和端口号</span></span><br><span class="line"><span class="comment">         * SocketAddress localSocketAddress = socket.getLocalSocketAddress();</span></span><br><span class="line"><span class="comment">         * 6.获得远程的地址和端口号</span></span><br><span class="line"><span class="comment">         * SocketAddress remoteSocketAddress = socket.getRemoteSocketAddress();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!isExit) &#123;</span><br><span class="line">                    <span class="comment">// 等待连接</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;等待手机的连接中... ...&quot;</span>);</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">                    System.out.println(<span class="string">&quot;获取的手机IP地址及端口号：&quot;</span> + socket.getRemoteSocketAddress().toString());</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 因为考虑到多手机连接的情况 所以加入线程锁 只允许单线程工作</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">private</span> String text;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                                    <span class="comment">// 在这里考虑到线程总数的计算 也代表着连接手机的数量</span></span><br><span class="line">                                    ++sum;</span><br><span class="line">                                    <span class="comment">// 存入到集合和Map中为群发和单独发送做准备</span></span><br><span class="line">                                    <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> socket.getRemoteSocketAddress().toString();</span><br><span class="line">                                    clientList.add(string);</span><br><span class="line">                                    clientMap.put(<span class="string">&quot;2&quot;</span>, socket);</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 定义输入输出流</span></span><br><span class="line">                                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">                                <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 接下来考虑输入流的读取显示到PC端和返回是否收到</span></span><br><span class="line"><span class="comment">//                                byte[] buffer = new byte[1024];</span></span><br><span class="line"><span class="comment">//                                int len;</span></span><br><span class="line"><span class="comment">//                                while ((len = is.read(buffer)) != -1) &#123;</span></span><br><span class="line"><span class="comment">//                                    text = new String(buffer, 0, len);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                                    System.out.println(&quot;收到的数据为：&quot; + text);</span></span><br><span class="line"><span class="comment">//                                    os.write(&quot;已收到消息&quot;.getBytes(&quot;utf-8&quot;));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                                &#125;</span></span><br><span class="line"></span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;关闭连接：&quot;</span> + socket.getRemoteSocketAddress().toString());</span><br><span class="line">                                <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                                    --sum;</span><br><span class="line">                                    <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> socket.getRemoteSocketAddress().toString();</span><br><span class="line">                                    clientMap.remove(string);</span><br><span class="line">                                    clientList.remove(string);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).start();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭server</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">            isExit = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (server != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    server.close();</span><br><span class="line">                    System.out.println(<span class="string">&quot;已关闭server&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动server</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ServerThread <span class="title function_">startServer</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启server&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (serverThread != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;server不为null正在重启server&quot;</span>);</span><br><span class="line">            <span class="comment">// 以下为关闭server和socket</span></span><br><span class="line">            shutDown();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        serverThread = <span class="keyword">new</span> <span class="title class_">ServerThread</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(serverThread).start();</span><br><span class="line">        System.out.println(<span class="string">&quot;开启server成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> serverThread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送消息的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">sendMessage</span><span class="params">(String name, String mag)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> clientMap.get(name);</span><br><span class="line"><span class="comment">//            socket.setSendBufferSize(mag.length());</span></span><br><span class="line"><span class="comment">////            socket.setReceiveBufferSize(mag.length());</span></span><br><span class="line">            <span class="keyword">assert</span> socket != <span class="literal">null</span>;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"><span class="comment">//            DataOutputStream out = new DataOutputStream(outputStream);</span></span><br><span class="line"><span class="comment">//            outputStream.write(mag.getBytes(&quot;utf-8&quot;));</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">MessageProtocol</span>().GenProtocol(outputStream,mag);</span><br><span class="line">            Log.e(<span class="string">&quot;AAA&quot;</span>,<span class="string">&quot;AAA==&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(mag.getBytes(<span class="string">&quot;utf-8&quot;</span>)));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 群发的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">sendMsgAll</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Socket socket : clientMap.values()) &#123;</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">                outputStream.write(msg.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取线程总数的方法，也等同于&lt;获取已连接了多少台手机&gt;的方法+</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sumTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个获取list集合的方法，取到所有连接server的手机的ip和端口号的集合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getTotalClients</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clientList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shutDown</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Socket socket : clientMap.values()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        serverThread.stop();</span><br><span class="line">        clientMap.clear();</span><br><span class="line">        clientList.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Unity-客户端">Unity 客户端</h3><ul><li><ol><li>与 Android 建立 socket 连接</li></ol></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建socket</span></span><br><span class="line">         clientSocket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line"></span><br><span class="line">         Debug.Log(logHeader + <span class="string">&quot;current ip and port is : ip :&quot;</span> + ip + <span class="string">&quot;,port:&quot;</span> + port);</span><br><span class="line"></span><br><span class="line">         IPAddress mIp = IPAddress.Parse(ip);</span><br><span class="line">         IPEndPoint ip_end_point = <span class="keyword">new</span> IPEndPoint(mIp, port);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">try</span></span><br><span class="line">         &#123;</span><br><span class="line">             clientSocket.Connect(ip_end_point);</span><br><span class="line">             IsConnected = <span class="literal">true</span>;</span><br><span class="line">             Debug.Log(<span class="string">&quot;连接服务器成功！&quot;</span>);</span><br><span class="line">             <span class="comment">// WriteLog(&quot;链接服务器成功！&quot;);</span></span><br><span class="line">             threadReceive = <span class="keyword">new</span> Thread(ReceiveMsgWS);</span><br><span class="line">             threadReceive.IsBackground = <span class="literal">true</span>;</span><br><span class="line">             threadReceive.Start();</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span></span><br><span class="line">         &#123;</span><br><span class="line">             IsConnected = <span class="literal">false</span>;</span><br><span class="line">             Debug.Log(logHeader + <span class="string">&quot;连接服务器失败&quot;</span>);</span><br><span class="line">             <span class="comment">// Toast.Show(&quot;服务器连接失败！&quot;, 1f);</span></span><br><span class="line">             <span class="comment">// WriteLog(&quot;链接服务器失败&quot;);</span></span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>接收 Android 消息</li></ol></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">Byte[] buffer_length;<span class="comment"><span class="doctag">///</span>buffer head</span></span><br><span class="line">Byte[] buffer;</span><br><span class="line"><span class="built_in">string</span> data;</span><br><span class="line"><span class="built_in">int</span> length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">bool</span> messageStart = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">string</span> const_str;</span><br><span class="line"><span class="built_in">int</span> status = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    buffer_length = <span class="keyword">new</span> Byte[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">// clientSocket.get</span></span><br><span class="line">    status = clientSocket.Receive(buffer_length);</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">40</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        const_str = System.Text.Encoding.ASCII.GetString(buffer_length).Substring(<span class="number">0</span>, <span class="number">20</span>);<span class="comment">//,(buffer, 0, 12, &quot;ASCII&quot;)</span></span><br><span class="line">        <span class="keyword">if</span> (const_str.Equals(<span class="string">&quot;1.0.0.0.0aaaaaaa&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            messageStart = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (messageStart)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        length = SocketUtils.byteArrayToInt(buffer_length, <span class="number">12</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="comment">// length = headerData.length;</span></span><br><span class="line">        buffer = <span class="keyword">new</span> Byte[length];</span><br><span class="line">        <span class="built_in">int</span> readed_length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (readed_length &lt; buffer.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            status = clientSocket.Receive(buffer, readed_length, buffer.Length - readed_length, SocketFlags.None);</span><br><span class="line">            <span class="keyword">if</span> (status &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            readed_length += status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buffer.Length &gt; <span class="number">0</span> &amp;&amp; readed_length == buffer.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            data = System.Text.Encoding.UTF8.GetString(buffer);</span><br><span class="line">            data_send(data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>断开连接</li></ol></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> != clientSocket &amp;&amp; clientSocket.Connected)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(logHeader + <span class="string">&quot;服务器连接已断开！&quot;</span>);</span><br><span class="line">    <span class="comment">// Toast.Show(&quot;服务器连接断开！&quot;, 1f);</span></span><br><span class="line">    clientSocket.Shutdown(SocketShutdown.Both);</span><br><span class="line">    clientSocket.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li>发送消息</li></ol></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (IsConnected == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//    Debug.Log(&quot;发送数据错误，服务器未连接！&quot;);</span></span><br><span class="line">                <span class="comment">//  WriteLog(&quot;服务器未连接!&quot;);</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == msg)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(logHeader + <span class="string">&quot;发送数据错误，消息不能为空！&quot;</span>);</span><br><span class="line">                <span class="comment">//WriteLog(&quot;消息不能为空&quot;);</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                clientSocket.Send(msg);</span><br><span class="line">                <span class="comment">//Debug.Log(&quot;发送成功！&quot;);</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// WriteLog(&quot;发送成功！&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span></span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(logHeader + <span class="string">&quot;发送数据错误，消息编码错误！&quot;</span>);</span><br><span class="line">                <span class="comment">// WriteLog(&quot;消息编码错误！&quot;);</span></span><br><span class="line">                IsConnected = <span class="literal">false</span>;</span><br><span class="line">                clientSocket.Shutdown(SocketShutdown.Both);</span><br><span class="line">                clientSocket.Close();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="5"><li>整数据转 byte 数组</li></ol></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">byteArrayToInt</span>(<span class="params"><span class="built_in">byte</span>[] byteArray, <span class="built_in">int</span> offset, <span class="built_in">int</span> length</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (length != <span class="number">4</span> || (offset + length) &gt; byteArray.Length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">value</span> = (byteArray[offset] &amp; <span class="number">0xFF</span>);</span><br><span class="line">    <span class="keyword">value</span> |= (byteArray[offset + <span class="number">1</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">value</span> |= (byteArray[offset + <span class="number">2</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">value</span> |= (byteArray[offset + <span class="number">3</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>6.接收处理类代码</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="comment">// using System;</span></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="comment">// using Newtonsoft.Json;</span></span><br><span class="line"><span class="keyword">using</span> cccc.util;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>socket 工具类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ccccc.ccc.internet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SocketClient</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> 工具类参数</span></span><br><span class="line">        <span class="comment">//是否登录</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> login_flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Socket clientSocket;</span><br><span class="line">        <span class="comment">//是否已连接的标识</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> logHeader = <span class="string">&quot;file:SocketClient.cs: &quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> result;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> IsConnected = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//握手消息</span></span><br><span class="line">        <span class="keyword">public</span> Thread threadReceive;</span><br><span class="line">        <span class="comment">//主数据</span></span><br><span class="line">        <span class="keyword">public</span> Thread threadReceive_get_data;</span><br><span class="line">        <span class="comment">//解析消息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// IMessage IMperson = new DetectionInfo();</span></span><br><span class="line">        <span class="comment">// DetectionInfo p1 = new();</span></span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> struct methods</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SocketClient</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//创建socket</span></span><br><span class="line">            clientSocket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 连接指定IP和端口的服务器</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;ip&quot;&gt;</span>IP地址<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;port&quot;&gt;</span>端口号<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Connect</span>(<span class="params"><span class="built_in">string</span> ip, <span class="built_in">int</span> port</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(logHeader + <span class="string">&quot;current ip and port is : ip :&quot;</span> + ip + <span class="string">&quot;,port:&quot;</span> + port);</span><br><span class="line">            IPAddress mIp = IPAddress.Parse(ip);</span><br><span class="line">            IPEndPoint ip_end_point = <span class="keyword">new</span> IPEndPoint(mIp, port);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                clientSocket.Connect(ip_end_point);</span><br><span class="line">                IsConnected = <span class="literal">true</span>;</span><br><span class="line">                Debug.Log(<span class="string">&quot;连接服务器成功！&quot;</span>);</span><br><span class="line">                <span class="comment">// WriteLog(&quot;链接服务器成功！&quot;);</span></span><br><span class="line">                threadReceive = <span class="keyword">new</span> Thread(ReceiveMsgWS);</span><br><span class="line">                threadReceive.IsBackground = <span class="literal">true</span>;</span><br><span class="line">                threadReceive.Start();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span></span><br><span class="line">            &#123;</span><br><span class="line">                IsConnected = <span class="literal">false</span>;</span><br><span class="line">                Debug.Log(logHeader + <span class="string">&quot;连接服务器失败&quot;</span>);</span><br><span class="line">                <span class="comment">// Toast.Show(&quot;服务器连接失败！&quot;, 1f);</span></span><br><span class="line">                <span class="comment">// WriteLog(&quot;链接服务器失败&quot;);</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 断开连接</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Disconnect</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != clientSocket &amp;&amp; clientSocket.Connected)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(logHeader + <span class="string">&quot;服务器连接已断开！&quot;</span>);</span><br><span class="line">                <span class="comment">// Toast.Show(&quot;服务器连接断开！&quot;, 1f);</span></span><br><span class="line">                clientSocket.Shutdown(SocketShutdown.Both);</span><br><span class="line">                clientSocket.Close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 发送数据给服务器</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;msg&quot;&gt;</span>发送消息内容<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (IsConnected == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(logHeader + <span class="string">&quot;发送数据错误，服务器未连接！&quot;</span>);</span><br><span class="line">                <span class="comment">// Toast.Show(&quot;无法发送数据，服务器未连接！&quot;, 1f);</span></span><br><span class="line">                <span class="comment">//   WriteLog(&quot;服务器未连接！&quot;);</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == msg)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(logHeader + <span class="string">&quot;发送数据错误，消息不能为空！&quot;</span>);</span><br><span class="line">                <span class="comment">//  WriteLog(&quot;消息不能为空！&quot;);</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// clientSocket.Send(ProtobufEncoding.Encode(msg));</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span></span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(logHeader + <span class="string">&quot;发送数据错误，消息编码错误！&quot;</span>);</span><br><span class="line">                <span class="comment">// WriteLog(&quot;消息编码错误!&quot;);</span></span><br><span class="line">                IsConnected = <span class="literal">false</span>;</span><br><span class="line">                clientSocket.Shutdown(SocketShutdown.Both);</span><br><span class="line">                clientSocket.Close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 发送数据给服务器</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;msg&quot;&gt;</span>发送消息内容<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendLogin</span>(<span class="params"><span class="built_in">byte</span>[] msg</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (IsConnected == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//    Debug.Log(&quot;发送数据错误，服务器未连接！&quot;);</span></span><br><span class="line">                <span class="comment">//  WriteLog(&quot;服务器未连接!&quot;);</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == msg)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(logHeader + <span class="string">&quot;发送数据错误，消息不能为空！&quot;</span>);</span><br><span class="line">                <span class="comment">//WriteLog(&quot;消息不能为空&quot;);</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                clientSocket.Send(msg);</span><br><span class="line">                <span class="comment">//Debug.Log(&quot;发送成功！&quot;);</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// WriteLog(&quot;发送成功！&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span></span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(logHeader + <span class="string">&quot;发送数据错误，消息编码错误！&quot;</span>);</span><br><span class="line">                <span class="comment">// WriteLog(&quot;消息编码错误！&quot;);</span></span><br><span class="line">                IsConnected = <span class="literal">false</span>;</span><br><span class="line">                clientSocket.Shutdown(SocketShutdown.Both);</span><br><span class="line">                clientSocket.Close();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// return;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 通过线程服务器数据获取</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReceiveMsgWS</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// string length_str;</span></span><br><span class="line">            Byte[] buffer_length;<span class="comment"><span class="doctag">///</span>buffer head</span></span><br><span class="line">            Byte[] buffer;</span><br><span class="line">            <span class="built_in">string</span> data;</span><br><span class="line">            <span class="built_in">int</span> length = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">bool</span> messageStart = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">string</span> const_str;</span><br><span class="line">            <span class="built_in">int</span> status = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                buffer_length = <span class="keyword">new</span> Byte[<span class="number">1024</span>];</span><br><span class="line">                <span class="comment">// clientSocket.get</span></span><br><span class="line">                status = clientSocket.Receive(buffer_length);</span><br><span class="line">                <span class="keyword">if</span> (status == <span class="number">24</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    const_str = System.Text.Encoding.ASCII.GetString(buffer_length).Substring(<span class="number">0</span>, <span class="number">12</span>);<span class="comment">//,(buffer, 0, 12, &quot;ASCII&quot;)</span></span><br><span class="line">                    <span class="keyword">if</span> (const_str.Equals(<span class="string">&quot;1.0.ccccc&quot;</span>))</span><br><span class="line">                    &#123;</span><br><span class="line">                        messageStart = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (messageStart)</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    length = SocketUtils.byteArrayToInt(buffer_length, <span class="number">12</span>, <span class="number">4</span>);</span><br><span class="line">                    <span class="comment">// length = headerData.length;</span></span><br><span class="line">                    buffer = <span class="keyword">new</span> Byte[length];</span><br><span class="line">                    <span class="built_in">int</span> readed_length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> (readed_length &lt; buffer.Length)</span><br><span class="line">                    &#123;</span><br><span class="line">                        status = clientSocket.Receive(buffer, readed_length, buffer.Length - readed_length, SocketFlags.None);</span><br><span class="line">                        <span class="keyword">if</span> (status &lt;= <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        readed_length += status;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (buffer.Length &gt; <span class="number">0</span> &amp;&amp; readed_length == buffer.Length)</span><br><span class="line">                    &#123;</span><br><span class="line">                        data = System.Text.Encoding.UTF8.GetString(buffer);</span><br><span class="line">                        data_send(data);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 发送数据至主线程</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;p1&quot;&gt;</span>数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">data_send</span>(<span class="params"><span class="built_in">string</span> p1</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//  var event1 = &quot;event1&quot;;</span></span><br><span class="line">            <span class="keyword">var</span> event2 = <span class="string">&quot;event2&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> thread = Unity.Threading.EasyThread.GetInstance();</span><br><span class="line">            <span class="comment">//注册子线程监听</span></span><br><span class="line">            thread.childRemote.Once(event2, () =&gt;</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                thread.mainRemote.Send(event2, p1);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//推送子线程事件,激活子线程监听方法</span></span><br><span class="line">            thread.childRemote.Send(event2);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integrating Unity as a library into standard Android app</title>
      <link href="/2023/02/22/android/"/>
      <url>/2023/02/22/android/</url>
      
        <content type="html"><![CDATA[<h2 id="Integrating-Unity-as-a-library-into-standard-Android-app">Integrating Unity as a library into standard Android app</h2><p>This document explains how to include Unity as a Library into standard Android application through Activity. You can read more about <a href="https://docs.unity3d.com/2019.3/Documentation/Manual/UnityasaLibrary.html">Unity as a Library</a>.</p><p><strong>Requirements:</strong></p><ul><li>Android Studio Bumblebee (2021.1.1) or later</li><li>Unity version 2022.2.0a18 or later<br>[Note] For Unity versions from 2019.3.0b4 to 2022.2.0a17 use <a href="https://github.com/Unity-Technologies/uaal-example/tree/uaal-example/19LTS-21LTS">this branch</a></li></ul><p><strong>1. Get source</strong></p><ul><li>Clone or Download GitHub repo <a href="https://github.com/Unity-Technologies/uaal-example">uaal-example</a>. It includes:<br><img src="/2023/02/22/android/rootFolderStructure.png" class="lazyload placeholder" data-srcset="/2023/02/22/android/rootFolderStructure.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"><ul><li>Unityproject - this is a simple demo project made with Unity which will be integrated to the standard Android application</li><li>NativeAndroidApp - this is the Basic Activity application from Android Studio templates where Unity project will be integrated. It has a simple UI, MainUnityActivity, which extends OverrideUnityActivity, and is prepared to start MainUnityActivity with an Intent</li></ul></li></ul><p><strong>2. Generate Gradle project for Android platform</strong></p><ul><li>Open UnityProject in Unity Editor</li><li>Go to Build Settings window (Menu / File / Build Settings)<ul><li>Select and switch to Android Platform</li></ul></li><li>Go to Player Settings window (click Player Settings button at the bottom left corner of Build Settings or use Edit / Project Settings menu and choose Player tab on the left)<ul><li>In Other Settings -&gt; Configuration section choose targeted architectures<br><img src="/2023/02/22/android/selectArchitectures.png" class="lazyload placeholder" data-srcset="/2023/02/22/android/selectArchitectures.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ul></li><li>Go back to Build Settings window<ul><li>Select option “Export Project”<br>![img](android/exportProject.png&quot; width=‘400px’&gt;</li><li>Export UnityProject to androidBuild folder, the folder structure should look like this<br><img src="/2023/02/22/android/exportedProjectFolder.png" class="lazyload placeholder" data-srcset="/2023/02/22/android/exportedProjectFolder.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ul></li></ul><p><strong>3. Add Unity Library module to NativeAndroidApp</strong><br><br>Do the following to add the exported androidBuild/unityLibrary module to the NativeAndroidApp Gradle project in Android Studio:</p><ul><li>Open NativeAndroidApp in Android Studio</li><li>Open settings.gradle file<ul><li>Add a new project pointing to unityLibrary module after the main app module</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include &#x27;:unityLibrary&#x27;</span><br><span class="line">project(&#x27;:unityLibrary&#x27;).projectDir=new File(&#x27;..\\UnityProject\\androidBuild\\unityLibrary&#x27;)</span><br></pre></td></tr></table></figure><ul><li>And add the following in dependencyResolutionManagement{repositories{ block</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flatDir &#123;</span><br><span class="line">  dirs &quot;$&#123;project(&#x27;:unityLibrary&#x27;).projectDir&#125;/libs&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2023/02/22/android/settingsGradle.png" class="lazyload placeholder" data-srcset="/2023/02/22/android/settingsGradle.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li><li>Open build.gradle(Module: NativeAndroidApp.app) file<ul><li>Add the following in dependencies{ block</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation project(&#x27;:unityLibrary&#x27;)</span><br><span class="line">implementation fileTree(dir: project(&#x27;:unityLibrary&#x27;).getProjectDir().toString() + (&#x27;\\libs&#x27;), include: [&#x27;*.jar&#x27;])</span><br></pre></td></tr></table></figure><img src="/2023/02/22/android/buildGradleApp.png" class="lazyload placeholder" data-srcset="/2023/02/22/android/buildGradleApp.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"><ul><li>In the same file take a look at android{defaultConfig{ndk{ block and make sure abiFilters match the architectures you selected in Unity editor before exporting the project. The filter must match architectures in Unity editor exactly. If Unity exports only ARMv7 architecture, but the filter includes arm64-v8a, the application will crash on ARM64 devices. Check for valid abiFilters values in the <a href="https://developer.android.com/ndk/guides/abis#sa">official android documentation</a>.<br><img src="/2023/02/22/android/buildGradleAppAbiFilters.png" class="lazyload placeholder" data-srcset="/2023/02/22/android/buildGradleAppAbiFilters.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ul></li><li>Copy the contents of the gradle.properties file from the exported Unity project root folder to the gradle.properties file in the native application root folder. Note: if you update the Unity project and re-export it again, make sure that the contents of the gradle.properties file in the exported project did not change. If they did - repeat this step.<br><img src="/2023/02/22/android/exportedASProject.png" class="lazyload placeholder" data-srcset="/2023/02/22/android/exportedASProject.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"><a href="android/gradlePropertiesApp.png">img</a></li><li>Click Sync Now to do a project sync since Gradle files have been modified<br><a href="android/syncGradle.png">img</a></li><li>If everything succeeds, you should see unityLibrary module added in Android view<br><img src="/2023/02/22/android/unityLibraryModule.png" class="lazyload placeholder" data-srcset="/2023/02/22/android/unityLibraryModule.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></li></ul><h2 id="Project-is-ready">Project is ready</h2><p>Everything is ready to build, run and debug:<br>![img](android/buildOnDevice.png&quot; width=‘500px’&gt;<br><br>If everything succeeded, at this point you should be able to run NativeAndroidApp:</p><table><thead><tr><th>Main Activity</th><th>Unity Activity</th></tr></thead><tbody><tr><td><img src="/2023/02/22/android/appNativeSS.png" class="lazyload placeholder" data-srcset="/2023/02/22/android/appNativeSS.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></td><td><img src="/2023/02/22/android/appUnitySS.png" class="lazyload placeholder" data-srcset="/2023/02/22/android/appUnitySS.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></td></tr><tr><td>Main Activity</td><td>Unity is loaded and is running in a separate Activity. Light grey buttons in the middle are added from the MainUnityActivity implemented in NativeAndroidApp</td></tr></tbody></table><h2 id="Notes">Notes</h2><ul><li>Unity is running in another process android:process=“:Unity” (AndroidManifest.xml at app module)</li><li>After installation there will be two icons added on the device. To leave only the icon of the main activity, remove <intent-filter>…</intent-filter> from the AndroidManifest.xml in unityLibrary</li><li>(Optional) We found some Android 7.* devices set frontOfTask to wrong state for activities as a result when finishing/quitting Unity activity whole task goes to background instead of bringing back Main activity. Next workaround keeps expected behavior: add to MainUnityActivity.java from NativeAndroidApp<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Override public void onUnityPlayerQuitted() &#123; showMainActivity(&quot;&quot;); finish(); &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="about-me-个人微信">about me 个人微信</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/me.jpeg?Expires=1741078870&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=3OQ42kDkDuA1517Z6lKc2ZUhiQU%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h2 id="wechat-offical-微信公众号">wechat offical 微信公众号</h2><p><img src="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" class="lazyload placeholder" data-srcset="https://czq-blog.oss-cn-beijing.aliyuncs.com/wechat.jpg?Expires=1741078900&amp;OSSAccessKeyId=TMP.3Kqnu2nGq3bZ4KHKg3CKb4cix6tBsmx7Nhi7A7qcv84ZvM8W24oGTuKCih6se8FQJtPuh8fHNK6NqbkbsbkDAwGCfmeBHV&amp;Signature=y3fPR2LjlkZXW%2FAQCh5n%2ByfHcxQ%3D" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
